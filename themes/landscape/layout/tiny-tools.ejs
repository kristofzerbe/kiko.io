<%# css('css/dist/lc_select.min.css') %>
<%- js('js/dist/lc_select.min.js') %>
<%- js('js/dist/tinysort.min.js') %>

<% if (page.photograph){ %>
  <%- partial('_partial/photograph', { page: page }) %>
<% } %>

<h1 class="page-title" data-pagefind-meta="title" data-pagefind-meta="type:Page"><%= page.title %></h1>
<% if (page.subtitle) { %>
<h2 class="page-subtitle"><%= page.subtitle %></h2>
<% } %>

<div class="page-content">
  <%- page.content %>

  <div class="view-bar">
    <span class="view-count"><%= page.items.length %></span>
    <span>Entries</span>
    <span>filtered by tag</span>
    <span>
      <select name="tag" id="tag" data-placeholder="Select ..." multiple>
        <% for(var i=0; i < page.tags.length; i++) { %>
        <option value="<%- page.tags[i] %>"><%- page.tags[i] %></option>
        <% } %>
      </select>
    </span>
    <span>displayed as</span>
    <span id="view-presentation">
      <input type="radio" name="view-presentation" id="presentation-grid"
             data-presentation="grid"
             data-next-presentation="list"
             checked>
      <label for="presentation-grid" title="Display as list"><mark>grid</mark></label>
      <input type="radio" name="view-presentation" id="presentation-list"
             data-presentation="list"
             data-next-presentation="grid">
      <label for="presentation-list" title="Display as grid"><mark>list</mark></label>
    </span>
    <span>sorted by</span>
    <span id="view-sort-field">
      <input type="radio" name="view-sort-field" id="sort-field-date-created"
             data-sort-field="date-created"
             data-next-sort-field="string-title"
             checked>
      <label for="sort-field-date-created" title="Sort by title"><mark>date created</mark></label>
      <input type="radio" name="view-sort-field" id="sort-field-string-title"
             data-sort-field="string-title"
             data-next-sort-field="date-created">
      <label for="sort-field-string-title" title="Sort by date created"><mark>title</mark></label>
    </span>
    <span id="view-sort-order">
      <input type="radio" name="view-sort-order" id="sort-order-asc"
             data-sort-order="asc"
             data-next-sort-order="desc">
      <label for="sort-order-asc" title="Sort descending">
        <mark>ascending</mark>
      </label>
      <input type="radio" name="view-sort-order" id="sort-order-desc"
             data-sort-order="desc"
             data-next-sort-order="asc"
             checked>
      <label for="sort-order-desc" title="Sort descending">
        <mark>descending</mark>
      </label>
    </span>

  </div>

  <div class="view grid" id="tiny-tools">
    <% for(var i=0; i < page.items.length; i++) { %>
      <%- partial('_partial/tiny-tool-item', { item: page.items[i] }) %>
    <% } %>
  </div>
</div>

<script>
  let lcTag = new lc_select('select[name="tag"]', {
    enable_search: true,
    on_change: function(new_value, target_field) {
      filterCards(new_value);
    }
  });

  // Init
  let currentPresentation = getCookie("tiny-tools-presentation");
  if (!currentPresentation) {
    currentPresentation =
      document.querySelector("input[name=view-presentation]:checked").getAttribute("data-presentation");
  }

  let currentSorting = getCookie("tiny-tools-sorting");
  if (!currentSorting) {
    currentSorting =
      document.querySelector("input[name=view-sort-field]:checked").getAttribute("data-sort-field") + "|" +
      document.querySelector("input[name=view-sort-order]:checked").getAttribute("data-sort-order");
  }

  /* ------------------------------------- */

  document.querySelectorAll("input[name=view-presentation]").forEach(element => {
    element.addEventListener("click", (event) => {
      setPresentation(element);
    });
  });
  document.querySelectorAll("input[name=view-sort-field]").forEach(element => {
    element.addEventListener("click", (event) => {
      setSortField(element);
    });
  });
  document.querySelectorAll("input[name=view-sort-order]").forEach(element => {
    element.addEventListener("click", (event) => {
      setSortOrder(element);
    });
  });

  /* ------------------------------------- */

    setView();

  /* ------------------------------------- */

  function setView() {

    //SORTING
    let aSorting = currentSorting.split("|");
    document.querySelector("#sort-field-" + aSorting[0]).checked = true;
    document.querySelector("#sort-order-" + aSorting[1]).checked = true;
    tinysort('#tiny-tools > .card',{data: aSorting[0], order: aSorting[1], forceStrings: true});

    //PRESENTATION
    document.querySelector('.view').classList = "view " + currentPresentation;
    document.querySelector("#presentation-" + currentPresentation).checked = true;
  }

  function setPresentation(ePresentation) {
    currentPresentation = ePresentation.getAttribute("data-next-presentation");
    setCookie("tiny-tools-presentation", currentPresentation, 365);
    setView();
  }

  function setSortField(eSortField) {
    let newSortField = eSortField.getAttribute("data-next-sort-field");
    let sortOrder = document.querySelector("input[name=view-sort-order]:checked").getAttribute("data-sort-order");
    currentSorting = newSortField + "|" + sortOrder;
    setCookie("tiny-tools-sorting", currentSorting, 365);
    setView();
  }

  function setSortOrder(eSortOrder) {
    let newSortOrder = eSortOrder.getAttribute("data-next-sort-order");
    let sortField = document.querySelector("input[name=view-sort-field]:checked").getAttribute("data-sort-field");
    currentSorting = sortField + "|" + newSortOrder;
    setCookie("tiny-tools-sorting", currentSorting, 365);
    setView();
  }

  function filterCards(new_value) {
    let i = 0;
    document.querySelectorAll(".card").forEach(item => {
      i += 1;
      let tags = item.getAttribute("data-tags").split(";");
      var found = new_value.every(r => tags.indexOf(r) >= 0);
      if (!found) {
        if (!item.classList.contains("hide")) {
          item.classList.add("hide");
          setTimeout(() => { item.style.display = "none"; }, 300);
        }
      } else {
        if (item.classList.contains("hide")) {
          item.style.display = "block";
          setTimeout(() => { item.classList.remove("hide"); }, 100);
        }
      }
    });
    setTimeout(() => {
        //? initImageViewportVisibility();

        let resultCount = document.querySelectorAll(".card:not(.hide)").length;
        let totalCount = document.querySelectorAll(".card").length;
        let resultElement = document.querySelector(".view-bar .view-count");

        resultElement.textContent = resultCount;
      }, 300);
  }

  function filterByTag(e) {
    let select = document.getElementById("tag");
    // let current = [...select.selectedOptions].map(option => option.value)
    // console.log(current);

    let options = Array.from(select.querySelectorAll("option"));
    let selOption = e.textContent;

    //REPLACE option
    options.forEach(o => {
      o.selected = (o.value == selOption);
    });
    //ADD option: options.find(c => c.value == selOption).selected = true;

    const resyncEvent = new Event('lc-select-refresh');
    select.dispatchEvent(resyncEvent);

    filterCards(Array(1).fill(selOption));

    return false;
  }

  setTimeout(function() { //Hack for returning from external to page
    setView();
  }, 500)

</script>