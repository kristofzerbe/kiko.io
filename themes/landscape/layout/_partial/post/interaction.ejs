<%
  let syndications = post.syndication?.filter(s => s.url?.length > 0 && s.host?.length > 0)
  let synDevTo = syndications?.find(s => s.host.toLowerCase() === "devto");
  let synPixelfed = syndications?.filter(s => s.host.toLowerCase() === "pixelfed");
  let synLemmy = null; //syndications?.filter(s => s.host.toLowerCase() === "lemmy");
%>

<div class="article-share" data-pagefind-ignore>
  <button onclick="dialog.shareOnMastodon();" class="share mastodon">Share on Mastodon</button>
</div>

<% if (syndications?.length > 0) { %>
<div id="syndication" class="article-syndication" data-pagefind-ignore>
  <h2>Syndication</h2>
  <div class="syndication-wrapper">
    <%- partial('syndication-links', { syndication: syndications, type: type, showText: true }) %>
  </div>
</div>
<% } %>

<div id="send-webmention" class="article-webmention" data-pagefind-ignore>
  <p>
    You can interact with this <%= type %> (applause, criticism, whatever) by mention it in one of your posts 
    and sending a <a href="https://indieweb.org/Webmention">Webmention</a><% if(syndications) { %> or by replying to one of its syndications above, most of which are displayed here as an interaction<% } %>.
  </p>

  <form class="webmention-form" name="webmention-form" method="post"
        action="https://webmention.io/<%- config.title %>/webmention">
    <p>
      In case your blog software can't send Webmentions, you can use this form 
      or send it manually via <a href="https://webmention.app/check" target="_blank">webmention.app</a> 
      or <a href="https://telegraph.p3k.io/" target="_blank">Telegraph</a>:
    </p>
    <input class="webmention-form-source" type="url" name="source" 
           placeholder="https://your-blog.com/your-article"
           required="">
    <input type="hidden" name="target" value="<%= encodeURI(post.permalink) %>">
    <input type="submit" value="Send Webmention">
  </form>

</div>

<div id="interactions" class="article-interactions" data-pagefind-ignore>
  <h2>Interactions</h2>

  <div class="message loading">Loading</div>

  <div id="interactions-likes-placeholder"></div>
  <div id="interactions-reposts-placeholder"></div>
  <div id="interactions-bookmarks-placeholder"></div>
  <div id="interactions-list-placeholder"></div>

  <%- js('js/mentions-united.js') %>
  <%- js('js/mentions-united-provider_webmentions.js') %>
  <%- js('js/mentions-united-renderer_total-number.js') %>
  <%- js('js/mentions-united-renderer_avatars-by-type.js') %>
  <%- js('js/mentions-united-renderer_list.js') %>
  <% if (synDevTo) { %><%- js('js/mentions-united-provider_devto.js'); %><% } %>
  <% if (synPixelfed?.length > 0) { %><%- js('js/mentions-united-provider_pixelfed.js'); %><% } %>
  <% if (synLemmy?.length > 0) { %><%- js('js/mentions-united-provider_lemmy.js'); %><% } %>

  <script>
    window.addEventListener('load', function () {
      bindWebmentionSending("webmention-form");

      const mentionsUnited = new MentionsUnited({ 
          ownerName: "<%- config.author %>" 
        }, 
        [
          new MentionsUnitedProvider_Webmentions({ 
            targetUrl: "<%- post.permalink %>",
            tryResolveTitle: true
          }),
          new MentionsUnitedRenderer_TotalNumber({
            placeholderId: "interactions-totalnumber-placeholder",
            pageKey: "<%- post.slug %>",
            anchorTargetId: "interactions",
            afterRender: () => { initScrollAnchorLink(".interactions-totalnumber", 80); }
          }),
          new MentionsUnitedRenderer_AvatarsByType({
            placeholderId: "interactions-likes-placeholder",
            typeVerb: "like"
          }),
          new MentionsUnitedRenderer_AvatarsByType({
            placeholderId: "interactions-reposts-placeholder",
            typeVerb: "repost"
          }),
          new MentionsUnitedRenderer_AvatarsByType({
            placeholderId: "interactions-bookmarks-placeholder",
            typeVerb: "bookmark"
          }),
          new MentionsUnitedRenderer_List({
            placeholderId: "interactions-list-placeholder",
            skipTypes: "like,repost,bookmark"
          })
        ]);

      <% if (synDevTo) { %>
      mentionsUnited.register(new MentionsUnitedProvider_DevTo({ 
        sourceUrl: "<%- synDevTo.url %>", 
        sourceId: <%- synDevTo.id ?? 0 %> 
      }));
      <% } %>

      <% synPixelfed?.forEach(syn => { %>
        mentionsUnited.register(new MentionsUnitedProvider_Pixelfed({ 
          sourceUrl: "<%- syn.url %>",
          sourceTitle: "<%- syn.title %>",
          apiBaseUrl: "<%- config.api_proxy_base_url %>/pixelfed"
        }));
      <% }); %>

      <% synLemmy?.forEach(syn => { %>
        mentionsUnited.register(new MentionsUnitedProvider_Lemmy({ 
          sourceUrl: "<%- syn.url %>",
          sourceTitle: "<%- syn.title %>"
        }));
      <% }); %>

      mentionsUnited.load()
        .then(() => { 
          return mentionsUnited.show(); 
        })
        .then((count) => { 
          let msg = document.querySelector(".article-interactions .message");
          if (count === 0) {
            msg.classList.remove("loading");
            msg.innerHTML = "No interactions yet";
          } else {
            msg.remove();
          }
         });
    });
  </script>

  <% if (post.alias){ %>
  <input type="hidden" name="alias" value="<%- config.url + post.alias.replace('index.html', '') %>">
  <% } %>

</div>
