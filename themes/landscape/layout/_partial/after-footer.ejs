<script>
  let isOffline = '<%- config.offline %>' === 'true';
</script>

<%- js('js/jquery-3.6.0.min.js') %>
<%- js('js/dist/bundle.min.js') %>
<%- js('js/script.js') %>
<%- js('js/dist/qr-code-styling.js') %>
<%- json({
  src: 'js/dist/qr-code-styling-options-contact.json', 
  id: 'qr-code-styling-options'
}) %>

<script>
  //--- eval url hash on load
  var hash = window.location.hash.substr(1);
  switch (hash.toLowerCase()) {
    case "contact":
      window.addEventListener('load', function () {
        dialog.contact();
      });
      break;
    case "continue":
      //has no offset due to fixed header
      //...document.getElementById("more").scrollIntoView({ behavior: "smooth", block: "start", inline: "nearest"});
      window.scrollTo({
        behavior: 'smooth',
        top:
          document.querySelector("#more").getBoundingClientRect().top -
          document.body.getBoundingClientRect().top -
          200,
      });
      history.replaceState(null, null, ' '); // remove hash
    default: break;
  }
</script>

<script>
  /*** DEFINITIONS */

  //HEADER
  var header = {
    height: 0,
    top: 0,
    offset: 55,
    photoLinkOpacity: 0,
    titleFontSize: 0
  };
  function initHeader() {
    $("#header").css("height", ""); //reset inline css
    $("#header-title").css("top", "");
    $("#header-photo-link").css("opacity", "");
    $("#title-wrap").css("font-size", "");
    header.height = $("#header").height(); //set from given css
    header.top = parseFloat($("#header-title").css("top"));
    header.photoLinkOpacity = parseFloat($("#header-photo-link").css("opacity"));
    header.titleFontSize = parseFloat($("#title-wrap").css("font-size"));

    //change subtitle a bit
    let sub = $("#header").find("#subtitle");
    let col = sub.css("color");
    let rpl = `<span style="text-decoration:line-through;color:rgb(120 120 120)" title="not only anymore"><span style="color:${col};opacity:0.75">Tech</span></span>`;
    let txt = sub.text().trim().replace('Tech', rpl);
    sub.html(txt);

    scrollHeader();
  }
  function scrollHeader() {
    var h = header.height - header.offset,
        st = $(document).scrollTop(),  
        d = (h - st),
        p = (d / h),
        hfs = header.titleFontSize / 5 * 3,
        jSide = $("aside");
    if (d > 0) {
      $("#header").css("height", d + header.offset + "px");
      $("#header-photo-link").css("opacity", header.photoLinkOpacity * p);
      $("#banner").css("opacity", p);
      $("#title-wrap").css("font-size", header.titleFontSize - ( header.titleFontSize / 3) * (1 - p) );
      $("#header-title").css("top", header.top - (hfs * (1 - p)) + "px");
      $("#subtitle").css("opacity", p);
      jSide.css("max-width", "").css("position", "").css("top", "");
    } else {
      $("#header").css("height", header.offset + "px");
      $("#header-photo-link").css("opacity", 0);
      $("#banner").css("opacity", 0);
      $("#title-wrap").css("font-size", header.titleFontSize - ( header.titleFontSize / 3) * (1) );      
      $("#header-title").css("top", header.top - (hfs * (1)) + "px");      
      $("#subtitle").css("opacity", 0);
      if (window.matchMedia("screen and (min-width: 768px)").matches & window.innerHeight > (jSide.height() + 50)) {
        jSide.css("max-width", $("aside").width()).css("position", "fixed").css("top", "50px");
      }
    }    
  }

  // IMAGE VIEWPORT
  function isVisibleInViewPort(e) {
    var viewTop = $(window).scrollTop();
    var viewBottom = viewTop + $(window).height();
  
    var eTop = $(e).offset().top;
    var eBottom = eTop + $(e).height();
  
    return ((eBottom <= viewBottom) && (eTop >= viewTop));
  }
  function initViewportImage() {
    $(".article-photo, .archive-article-photo, .card-img, .img-link").each(function() {
      if (isVisibleInViewPort($(this))) {
        $(this).addClass("in-view");
      } else {
        $(this).removeClass("in-view");
      }
    });
  }

  //SCROLL PROGRESS
  function initScrollProgress() {

    // Create ScrollTimeline
    const myScrollTimeline = new ScrollTimeline({
      source: document.scrollingElement,
      scrollSource: document.scrollingElement, // For legacy implementations
      orientation: 'block',
        scrollOffsets: [
            new CSSUnitValue(0, 'percent'),
            new CSSUnitValue(100, 'percent'),
        ],
    });

    // Animate Progress Bar on Scroll
    document.querySelector("#progress").animate(
      {
        transform: ["scaleX(0)", "scaleX(1)"]
      },
      { 
        duration: 1, 
        fill: "forwards", 
        timeline: myScrollTimeline 
      }
    );
  }

  // HORIZONTAL NAV MENU SCROLL
  function initNavMenuScroll() {
    const nav = document.querySelector('#header-nav');
    const menu = nav.querySelector('.menu');
    const firstMenuItem = menu.querySelector('.menu-item:first-child');
    const lastMenuItem = menu.querySelector('.menu-item:last-child');

    firstMenuItem.setAttribute("data-scim", "start");
    lastMenuItem.setAttribute("data-scim", "end");
    
    let observer = new IntersectionObserver((entries, observer) => { 
      entries.forEach(entry => {

        let scimElement = document.querySelector("#header-nav-" + entry.target.getAttribute("data-scim"));
        if (entry.intersectionRatio != 1) { 
          scimElement.classList.add("show");
        } else {
          scimElement.classList.remove("show");
        }
      });
    }, {threshold: 1});
    
    observer.observe(firstMenuItem);
    observer.observe(lastMenuItem);
  }

  //THEME
  function initColorScheme() {
    /* https://stackoverflow.com/questions/56300132/how-to-over-ride-css-prefers-color-scheme-setting */

    var theme = "light"; //default

    // get last used theme from local cache
    if (localStorage.getItem("theme")) {
      if (localStorage.getItem("theme") === "dark") {
        theme = "dark";
      }
    } else if (!window.matchMedia) {
      return false;
    } else if (window.matchMedia("(prefers-color-scheme: dark)").matches) {
      theme = "dark";
    }

    if (theme === "dark") {
      setThemeDark();
    } else {
      setThemeLight();
    }
  }
  function setThemeDark() {
    localStorage.setItem("theme", "dark");
    document.documentElement.setAttribute("data-theme", "dark");
    toggleTheme.checked = true;
    setCodepenTheme();
  }
  function setThemeLight() {
    localStorage.setItem("theme", "light");
    document.documentElement.setAttribute("data-theme", "light");
    toggleTheme.checked = false;
    setCodepenTheme();
  }
  function setCodepenTheme() {
    //https://codepen.io/kristofzerbe/embed/xxxxx?height=400&default-tab=js,result&theme-id=dark
    var pens = document.getElementsByClassName("codepen");
    for (var i = 0; i < pens.length; i++) {
      var src = pens[i].src;
      const arr = src.split("?");
      const params = arr[1].split("&").slice(0, -1);
      src =
        arr[0] +
        "?" +
        params.join("&") +
        "&theme-id=" +
        localStorage.getItem("theme");
      pens[i].src = src;
    }
  }

</script>

<script>
  /*** EVENTS */

  window.addEventListener('scroll', function() {
    scrollHeader();
    initViewportImage();
  }, { passive: true });

  window.addEventListener('resize', function() {
    initHeader();
    initViewportImage();
  });

  // TOGGLE THEME
  const toggleTheme = document.querySelector('input#theme-switch[type="checkbox"]');
  toggleTheme.addEventListener("change", function (e) {
    if (e.target.checked) { setThemeDark(); } 
    else { setThemeLight(); }
  }, false);

  // TOGGLE THEME BY OS
  var toggleOS = window.matchMedia("(prefers-color-scheme: dark)");
  toggleOS.addEventListener("change", function (e) {
    if (e.matches) { setThemeDark(); } 
    else { setThemeLight(); }
  });

  /*** INITS */

  initHeader();
  initColorScheme();
  initViewportImage();
  initNavMenuScroll();
  initScrollProgress();

  // BACK-TO-TOP
  addBackToTop({ diameter: 30 });

  // MENU-ITEM-SCROLL
  let pathItem = window.location.pathname.split('/')[1].toLowerCase();
  if (pathItem === "collections") pathItem = window.location.pathname.split('/')[2].toLowerCase()
  console.log(pathItem);
  document.getElementById(`nav-${pathItem}-link`).scrollIntoView({ behavior: "smooth", block: "center", inline: "center" })

  // AUTOTYPING
  setTimeout(function() {
    $("#title-wrap").empty();
    new AutoTyping({
      id: 'title-wrap',
      typeText: ['<%= config.title %>'],
      textColor: '#fff',
      typeSpeed: 100,
      typeDelay: 100,
      showCursor: false,
      delete: false,
      typeInfinity: false
    }).init();
  }, 1000);

  //MEDIUM-ZOOM
  mediumZoom(document.querySelectorAll('img.zoom'), {
    background: 'rgba(55, 55, 55, 0.5)',
    margin: 20
  });

</script>

<% if (config.pirsch.enabled === true) { %>
  <script>
    //HOOK LINKS FOR PIRSCH EVENT...

    //VSCODE
    let vscode = document.querySelectorAll(".brand-links .vscode").forEach(link => link.addEventListener("click", function() { pirsch("Open in VSCode"); }));
    
  </script>  
<% } %>