<% if (page.photograph){ %>
  <%- partial('_partial/photograph') %>
<% } %>

<h1 class="archive-title" data-pagefind-meta="title" data-pagefind-meta="type:Photo">
  <small>Photo</small>
  <%= page.name %>
</h1>

<div class="page-content">

  <section class="image">
    <img id="photo" src="<%- page.pathTablet %>" alt="<%- page.name %>" 
         data-pagefind-meta="image[src], image_alt[alt]" />
    <small>Tap to show colors...</small>
  </section>
  
  <section id="color-list"><ul></ul></section>
    
  <section class="meta">
    <ul>
      <li>
        <label>File</label>
        <a class="download" style="text-decoration:none;color:inherit;font-weight:400" href="<%- page.pathNormal %>" download="<%= page.file %>"><%= page.file %></a>
      </li>
      <% if (!page.file.startsWith(page.name)) { %>
      <li>
        <label>Title</label>
        <span><%= page.name %></span>
      </li>
      <% } %>
      <li>
        <label>Status</label>
        <% if (page.status === 'pool') { %>
          <span>Unused (Pool Photo)</span>
        <% } else if (page.status === 'shed') { %>
          <span>Shed Photo</span>
        <% } else { %>
          <% if (page.article?.type === "draft") { %>
            <span>Used at draft <em><%= page.article?.title %></em></span>
          <% } else if (page.article?.type === "start") { %>
            <span>Used at <a href="<%= page.article.url %>"><%= page.article?.type %></a> page</span>
          <% } else { %>
            <span>Used at <%= page.article?.type + ((["page", "post"].some(v => page.article?.type.includes(v))) ? "" : " page") %> 
              <a href="<%= page.article?.url %>"><%= page.article?.title %></a>
            </span>
          <% } %>
        <% } %>
      </li>
      <% if (page.meta?.custom?.featured?.url) { %>
      <li>
        <label>Featured In</label>
        <span><a href="<%= page.meta.custom.featured.url %>"><%= page.meta.custom.featured.title %></a></span>
      </li>
      <% } %> 
    </ul>
  </section>

  <% if (page.meta) { 

    function convertDecimalToFraction(decimalValue) {
      //https://www.insidethediv.com/javascript-simple-projects-with-source-code-fraction-calculator

      const [whole, decimal] = decimalValue.toString().split('.');
      const numerator = + (whole + decimal);
      const denominator = Math.pow(10, decimal.length);
      const gcf = getGCF(numerator, denominator);
      const fraction = reduceFraction(numerator/gcf, denominator/gcf);

      return fraction.join("/");

      function getGCF(a, b) {
      if (b === 0) {
        return a;
      }
      return getGCF(b, a % b);
      }

      function reduceFraction(numerator, denominator) {
        const gcf = getGCF(numerator, denominator);
        return [numerator/gcf, denominator/gcf];
      }
    }
  %>
  <section class="meta">
    <ul style="margin-bottom: 2rem">
      <li>
        <label>Keywords</label>
        <span><%= page.meta.Keywords ? page.meta.Keywords?.join(", ") : "---" %></span>
      </li>
      <li>
        <label>Artist, Copyright</label>
        <span><%= page.meta.Artist ?? "Kristof Zerbe" %>,  &copy; <%= page.meta.Copyright ?? "" %> CC-BY-SA</span>
      </li>
      <li>
        <label>Original Date</label>
        <span data-pagefind-meta="date" data-create-date="<%- page.meta.DateTimeOriginal %>"><%= new Date(page.meta.DateTimeOriginal).toLocaleString('en-GB', { weekday:"long", year:"numeric", month:"long", day:"numeric"}) ?? "---" %></span>
      </li>
      <li>
        <label>Country, State, City</label>
        <span data-pagefind-meta="location"><%= (page.meta?.Country ?? "---") + ", " + (page.meta.State ?? "---") + ", " + (page.meta.City ?? "---") %></span>
      </li>
      <li>
        <label>GPS Coordinates (Lat/Long)</label>
        <span><%= page.meta?.latitude ?? "---" %> / <%= page.meta?.longitude ?? "---" %></span>
        <% if (page.meta?.latitude && page.meta?.longitude) { %>
        <div id="map" class="page-map"></div>
        <% } %>
      </li>
      <li><hr style="margin:0"></li>
      <li>
        <label>Camera</label>
        <span><%= page.meta.Model ?? "---" %></span>
      </li>
      <li>
        <label>Lens</label>
        <span><%= page.meta.LensModel ?? "---" %></span>
      </li>
      <li>
        <label>Focal Length</label>
        <span><%= (page.meta.FocalLength + "mm") ?? "---" %></span>
      </li>
      <li>
        <label>ISO</label>
        <span><%= page.meta.ISO ?? "---" %></span>
      </li>
      <li>
        <label>FNumber</label>
        <span><em>f&nbsp;</em><%= page.meta.FNumber ?? "---" %></span>
      </li>
      <li>
        <label>Exposure Time</label>
        <span>
          <%= convertDecimalToFraction(page.meta.ExposureTime.toFixed(4)) ?? "---" %>&nbsp;
          <em style="font-style:normal;opacity:0.5">(<%= page.meta.ExposureTime %>)</em>
        </span>
      </li>
      <li>
        <label>Shutter Speed</label>
        <span><%= page.meta.ShutterSpeedValue ?? "---" %></span>
      </li>
      <li>
        <label>Aperture</label>
        <span><%= page.meta.ApertureValue ?? "---" %></span>
      </li>
      <li>
        <label>Metering Mode</label>
        <span><%= page.meta.MeteringMode ?? "---" %></span>
      </li>
      <li>
        <label>Software</label>
        <span><%= page.meta.Software ?? "---" %></span>
      </li>
    </ul>
  
    <div class="section-footer">
      <%- partial('_partial/post/permalink', { post: page, class_name: 'article-permalink' }) %>        
    </div>
  
  </section>

  <% 
    page.syndication = [];
    page.meta.custom.links.forEach(link => {
      if (link.url) {
        page.syndication.push({
          host: link.site,
          url: link.url
        });
      }
    });
  }
  %>
  <%- partial('_partial/post/interaction', { post: page, type: 'photo', comments: false }) %>

  <% if (page.meta?.latitude && page.meta?.longitude) { %>
  <%- js('js/dist/leaflet.js') %>  
  <%- css('css/dist/leaflet.css') %> 
  <object type="image/svg+xml" data="/images/marker-photo.svg" id="marker-image" width="0" height="0"></object>   
  <script>
    let map = L.map('map', {
      center: [<%= page.meta?.latitude %>, <%= page.meta?.longitude %>],
      zoom: 10,
      zoomControl: false,
    })
    L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
        maxZoom: 18,
        attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
    }).addTo(map);

    const markerImage = document.getElementById("marker-image");
    markerImage.addEventListener("load",function() {
      const markerIcon = L.divIcon({
        className: "marker",
        html: markerImage.contentDocument.getElementsByTagName("svg")[0].outerHTML,
        iconSize: [20, 20]
      });
      this.remove(); // remove marker object, because we got the SVG code

      const marker = L.marker([<%= page.meta?.latitude %>, <%= page.meta?.longitude %>], 
        { icon: markerIcon }).addTo(map).on('click', function(e) { window.location.href = "/photos/map"; });
    });
  </script>
  <% } %>
  
  <script>
    document.getElementById("header").classList.add("no-vibrant");
    setTimeout(() => {
      document.getElementById("header").classList.add("gray");
    }, 900);
  </script>

  <%- js('js/dist/colornames.umd.js') %>
  <%- js('js/dist/nearestColor.js') %>
  <script>
    window.onload = (event) => {
      Vibrant.from("<%= page.pathTablet %>").getPalette().then((palette) => {
        const colorList = document.querySelector("#color-list ul");
        for(let swatch in palette) {
          let color = { swatch: swatch };
          color.hex = palette[swatch].getHex();
          color.name = getColorName(color.hex);
          let tColor = tinycolor(color.hex);
          color.hsl = tColor.toHslString();
          color.rgb = tColor.toRgbString();
          colorList.appendChild(getColorElement(color));
        }        
      });
      function getColorElement(obj) {
        let eItem = document.createElement("li");
        for (const prop in obj) {
          eItem.setAttribute(`data-${prop}`, obj[prop]);
        };
        eItem.dataset.current = "hex";
        eItem.insertAdjacentHTML("beforeend", `
            <span>${obj.swatch}</span>
            <strong>${obj.hex}</strong>
            <em>${obj.name}</em>  
            <div style="background-color:${obj.hex}"></div>
        `);
        let eSample = document.createElement("div");
        eSample.style.cssText = `background-color:${obj.hex}`;
        eSample.addEventListener("click", (e) => {
          let eItem = e.target.parentNode;
          let eColor = eItem.querySelector("strong");
          switch (eItem.dataset.current) {
            case "hex": eColor.innerHTML = eItem.dataset.hsl; eItem.dataset.current = "hsl"; break;
            case "hsl": eColor.innerHTML = eItem.dataset.rgb; eItem.dataset.current = "rgb"; break;
            case "rgb": eColor.innerHTML = eItem.dataset.hex; eItem.dataset.current = "hex"; break;
            default: break;
          }
        });
        eItem.appendChild(eSample);
        return eItem;
      }
      function GetColorName() {
        const colors = colorNameList.reduce((o, { name, hex }) => Object.assign(o, { [name]: hex }), {});
        const nearest = nearestColor.from(colors);
        return hexColor => nearest(hexColor).name;
      }
      const getColorName = new GetColorName();
      $("#photo").click(() => {
        $("#color-list").slideToggle();
      });
    };
  </script>

</div>
