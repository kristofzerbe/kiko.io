<%- css('css/dist/lc_select.min.css') %>
<%- js('js/dist/lc_select.min.js') %>

<% if (page.photograph){ %>
  <%- partial('_partial/photograph', { page: page }) %>
<% } %>

<h1 class="page-title"><%= page.title %></h1>
<h2 class="page-subtitle"><%= page.subtitle %></h2>

<div class="page-content">
    <%- page.content %>

    <section class="flex">
      <fieldset class="lcslt-wrapper gap">
        <label>Filter:</label>
        <select name="category" id="category" data-placeholder="Select a category..." multiple>
          <% for(var i=0; i < page.labels.length; i++) { %>
          <option value="<%- page.labels[i] %>"><%- page.labels[i] %></option>
          <% } %>
        </select>
      </fieldset>
      <fieldset class="lcslt-wrapper max expand">
        <label>Sort by:</label>
        <select name="sorting-field" id="sorting-field" class="sorting">
          <option value="date-last-activity" selected>Last Activity</option>
          <option value="string-title">Title</option>
          <option value="position">Position</option>
          <option value="id">ID</option>
        </select>
      </fieldset>
      <fieldset class="lcslt-wrapper max">
        <label>&nbsp;</label>
        <select name="sorting-direction" id="sorting-direction" class="sorting">
          <option value="asc" data-image="/images/long-arrow-down.svg"></option>
          <option value="desc" data-image="/images/long-arrow-up.svg" selected></option>
        </select>
      </fieldset>
    </section>

    <hr>

    <div class="view-bar">
      <div class="bar-info"><span><%= page.items.length %></span> Entries</div>
      <div class="bar-cmd">
        <input type="radio" name="view-switch" id="switch-grid" checked 
        onchange="setView('grid');">
        <label for="switch-grid"></label>
        <input type="radio" name="view-switch" id="switch-list" 
            onchange="setView('list');">
        <label for="switch-list"></label>
      </div>
    </div>

    <div class="view grid">
      <% for(var i=0; i < page.items.length; i++) { %>
        <%- partial('_partial/trello-item', { item: page.items[i] }) %>
      <% } %>
    </div>
</div>

<script>
  let lcCategory = new lc_select('select[name="category"]', {
      enable_search: true,
      on_change: function(new_value, target_field) {
        filterCards(new_value);
      }
  });
  let lcSorting = new lc_select('select.sorting', {
    enable_search: false,
    on_change: function(new_value, target_field) {
      let field = document.querySelector("#sorting-field").value;
      let dir = document.querySelector("#sorting-direction").value;
      $('.view').find('.card').addClass("trans");
      setTimeout(() => { 
          sortCards(field, dir);
          $('.view').find('.card').removeClass("trans");
          initViewportImage();
      }, 300);
    }
  });

  document.addEventListener('DOMContentLoaded', (event) => {
    let currentView = getCookie("view");
    if (currentView) {
      document.querySelector("#switch-" + currentView).checked = true; 
      setView(currentView);
    }
  })

  function setView(newView) {
    let view = document.querySelector('.view');
    if (newView === 'list') {
      view.classList.replace('grid', 'list')
    } else {
      view.classList.replace('list', 'grid')
    }
    setCookie("view", newView, 365);
  }

  function filterCards(new_value) {
    //console.log("NV:" + new_value);
    let i = 0;
    document.querySelectorAll(".card").forEach(item => {
      i += 1;
      let tags = item.getAttribute("data-tags").split(";");
      var found = new_value.every(r => tags.indexOf(r) >= 0);
      if (!found) {
        if (!item.classList.contains("hide")) {
          item.classList.add("hide");
          setTimeout(() => { item.style.display = "none"; }, 300);
        }
      } else {
        if (item.classList.contains("hide")) {
          item.style.display = "block";
          setTimeout(() => { item.classList.remove("hide"); }, 100);
        }
      }
    });
    setTimeout(() => { 
        initViewportImage();

        var resultCount = document.querySelectorAll(".card:not(.hide)").length;
        let resultElement = document.querySelector(".bar-info span");
        var totalCount = parseInt(resultElement.dataset.total);

        if (resultCount === totalCount) {
          resultElement.textContent = totalCount + " items total";
        } else if(resultCount === 0) {
          resultElement.textContent = 0;
        } else {
          resultElement.textContent = resultCount; //+ ((resultCount === 1) ? " item " : " items ") + "found"
        }
      }, 300);
  }

  function sortCards(field, dir) {
    $('.view').find('.card').sort(function (a, b) {
      let minuend;
      let subtrahend;
      if (dir === "desc") {
        minuend = $(b).attr('data-' + field);
        subtrahend = $(a).attr('data-' + field);
      } else {
        minuend = $(a).attr('data-' + field);
        subtrahend = $(b).attr('data-' + field);
      }
      if (field.includes("date")) {
        return Date.parse(minuend) - Date.parse(subtrahend);
      } else if (field.includes("string")) {
        return ('' + minuend).localeCompare('' + subtrahend);
      } else {
        return minuend - subtrahend;
      }
    }).appendTo('.view');
  }

  function filterByTag(e) {
    let select = document.getElementById("category");
    // let current = [...select.selectedOptions].map(option => option.value)
    // console.log(current);

    let options = Array.from(select.querySelectorAll("option"));
    let selOption = e.textContent;

    //REPLACE option
    options.forEach(o => {
      o.selected = (o.value == selOption);
    });
    //ADD option: options.find(c => c.value == selOption).selected = true;

    const resyncEvent = new Event('lc-select-refresh');
    select.dispatchEvent(resyncEvent);

    filterCards(Array(1).fill(selOption));

    return false;
  }
</script>