<%# css('css/dist/lc_select.min.css') %>
<%- js('js/dist/lc_select.min.js') %>
<%- js('js/dist/tinysort.min.js') %>

<% if (page.photograph){ %>
  <%- partial('_partial/photograph', { page: page }) %>
<% } %>

<h1 class="page-title" data-pagefind-meta="title" data-pagefind-meta="type:Page"><%= page.title %></h1>
<% if (page.subtitle) { %>
<h2 class="page-subtitle"><%= page.subtitle %></h2>
<% } %>
  
<div class="page-content">
  <%- page.content %>

  <div class="view-bar">
    <span class="view-count"><%= page.items.length %></span> 
    <span>Entries</span> 
    <span>filtered by tag</span>
    <span>
      <select name="tag" id="tag" data-placeholder="Select ..." multiple>
        <% for(var i=0; i < page.labels.length; i++) { %>
        <option value="<%- page.labels[i] %>"><%- page.labels[i] %></option>
        <% } %>
      </select>
    </span>
    <span>displayed as</span>
    <span>
      <input type="radio" name="view-presentation" id="presentation-grid" checked
             data-presentation="grid"
             data-next-presentation="list">
      <label for="presentation-grid" title="Display as list"><mark>grid</mark></label>
      <input type="radio" name="view-presentation" id="presentation-list"
             data-presentation="list"
             data-next-presentation="grid">
      <label for="presentation-list" title="Display as grid"><mark>list</mark></label>
    </span>
    <span>sorted by</span>
    <span>
      <input type="radio" name="view-sort-field" id="sort-field-date-last-activity" checked
             data-sort-field="date-last-activity"
             data-next-sort-field="string-title">
      <label for="sort-field-date-last-activity" title="Sort by title"><mark>last activity</mark></label>
      <input type="radio" name="view-sort-field" id="sort-field-string-title"
             data-sort-field="string-title"
             data-next-sort-field="position">
      <label for="sort-field-string-title" title="Sort by position"><mark>title</mark></label>
      <input type="radio" name="view-sort-field" id="sort-field-position"
             data-sort-field="position"
             data-next-sort-field="date-last-activity">
      <label for="sort-field-position" title="Sort by last activity"><mark>position</mark></label>
    </span>
    <span>
      <input type="radio" name="view-sort-direction" id="sort-direction-desc" checked
             data-sort-direction="desc"
             data-next-sort-direction="asc">
      <label for="sort-direction-desc" title="Sort descending"><mark>descending</mark></label>
      <input type="radio" name="view-sort-direction" id="sort-direction-asc"
             data-sort-direction="asc"
             data-next-sort-direction="desc">
      <label for="sort-direction-asc" title="Sort descending"><mark>ascending</mark></label>
    </span>          

  </div>

  <div class="view grid" id="collection">
    <% for(var i=0; i < page.items.length; i++) { %>
      <%- partial('_partial/trello-item', { item: page.items[i] }) %>
    <% } %>
  </div>
</div>

<script>
  let lcTag = new lc_select('select[name="tag"]', {
    enable_search: true,
    on_change: function(new_value, target_field) {
      filterCards(new_value);
    }
  });

  document.querySelectorAll("input[name=view-presentation]").forEach(element => {
    element.addEventListener("click", (event) => {
      setPresentation(element);
    });
  });
  document.querySelectorAll("input[name=view-sort-field]").forEach(element => {
    element.addEventListener("click", (event) => {
      setSortField(element);
    });
  });
  document.querySelectorAll("input[name=view-sort-direction]").forEach(element => {
    element.addEventListener("click", (event) => {
      setSortDirection(element);
    });
  });

  // Init
  let currentPresentation = getCookie("view-collection");
  if (currentPresentation) {
    document.querySelector("#presentation-" + currentPresentation).checked = true;
    setView(currentPresentation);
  }

  function setView(newPresentation) {
    let view = document.querySelector('.view');
    if (newPresentation === 'list') {
      view.classList.replace('grid', 'list')
    } else {
      view.classList.replace('list', 'grid')
    }
    currentPresentation = newPresentation;
    setCookie("view-collection", newPresentation, 365);
  }

  function setPresentation(ePresentation) {
    let newPresentation;
    if(!ePresentation) { //for initialization
      ePresentation = document.querySelector("input[name=view-presentation]:checked");
      newPresentation = ePresentation.getAttribute("data-presentation");
    } else {
      newPresentation = ePresentation.getAttribute("data-next-presentation");
    }

    let eNewPresentation = document.querySelector("#presentation-" + newPresentation);
    eNewPresentation.checked = true;

    setView(newPresentation);
  }

  function setSorting() {
    let field = document.querySelector("input[name=view-sort-field]:checked").getAttribute("data-sort-field");
    let dir = document.querySelector("input[name=view-sort-direction]:checked").getAttribute("data-sort-direction");;

    $('.view').find('.card').addClass("trans");
    setTimeout(() => { 
      tinysort('#collection > .card',{data: field, order: dir, forceStrings: !["position"].includes(field)});
      $('.view').find('.card').removeClass("trans");
      setView(currentPresentation);
      initImageViewportVisibility();
    }, 300);
  }

  function setSortDirection(eSortDirection) {
    let newSortDirection;
    if(!eSortDirection) { //for initialization
      eSortDirection = document.querySelector("input[name=view-sort-direction]:checked");
      newSortDirection = eSortDirection.getAttribute("data-sort-direction");
    } else {
      newSortDirection = eSortDirection.getAttribute("data-next-sort-direction");
    }

    let eNewSortDirection = document.querySelector("#sort-direction-" + newSortDirection);
    eNewSortDirection.checked = true;

    setSorting();
  }

  function setSortField(eSortField) {
    let newSortField;
    if(!eSortField) { //for initialization
      eSortField = document.querySelector("input[name=view-sort-field]:checked");
      newSortField = eSortField.getAttribute("data-sort-field");
    } else {
      newSortField = eSortField.getAttribute("data-next-sort-field");
    }

    let eNewSortField = document.querySelector("#sort-field-" + newSortField);
    eNewSortField.checked = true;

    setSorting();
  }

  function filterCards(new_value) {
    let i = 0;
    document.querySelectorAll(".card").forEach(item => {
      i += 1;
      let tags = item.getAttribute("data-tags").split(";");
      var found = new_value.every(r => tags.indexOf(r) >= 0);
      if (!found) {
        if (!item.classList.contains("hide")) {
          item.classList.add("hide");
          setTimeout(() => { item.style.display = "none"; }, 300);
        }
      } else {
        if (item.classList.contains("hide")) {
          item.style.display = "block";
          setTimeout(() => { item.classList.remove("hide"); }, 100);
        }
      }
    });
    setTimeout(() => { 
        initImageViewportVisibility();

        let resultCount = document.querySelectorAll(".card:not(.hide)").length;
        let totalCount = document.querySelectorAll(".card").length;
        let resultElement = document.querySelector(".view-bar .view-count");
        //let desElement = document.querySelector(".view-bar .view-filter");

        resultElement.textContent = resultCount;

        // if (resultCount === totalCount) {
        //   desElement.textContent = "";
        // } else {
        //   desElement.textContent = "found";
        // }
      }, 300);
  }

  function filterByTag(e) {
    let select = document.getElementById("tag");
    // let current = [...select.selectedOptions].map(option => option.value)
    // console.log(current);

    let options = Array.from(select.querySelectorAll("option"));
    let selOption = e.textContent;

    //REPLACE option
    options.forEach(o => {
      o.selected = (o.value == selOption);
    });
    //ADD option: options.find(c => c.value == selOption).selected = true;

    const resyncEvent = new Event('lc-select-refresh');
    select.dispatchEvent(resyncEvent);

    filterCards(Array(1).fill(selOption));

    return false;
  }
</script>