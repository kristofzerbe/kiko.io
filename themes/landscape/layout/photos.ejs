<%- js('js/dist/spotlight.bundle.js') %>
<%- js('js/dist/tinysort.min.js') %>

<% if (page.photograph){ %>
  <%- partial('_partial/photograph') %>
<% } %>

<h1 class="page-title" data-pagefind-meta="title" data-pagefind-meta="type:Page"><%= page.title %></h1>
<% if (page.subtitle) { %>
<h2 class="page-subtitle"><%= page.subtitle %></h2>
<% } %>

<div class="page-content" style="min-height:1200px;">
  <%- page.content %>

  <div class="view-bar">
    <span class="info-count"><%= page.items.length %></span> photos 
    <span id="view-filter-status-wrap" >
      <input type="radio" name="view-filter-status" id="filter-status-all" checked
            data-status="all"
            data-next-status="pool">
      <label for="filter-status-all" title="Filter for unused photos (Pool)"><mark>overall</mark></label>
      <input type="radio" name="view-filter-status" id="filter-status-pool"
            data-status="pool"
            data-next-status="used">
      <label for="filter-status-pool" title="Filter for used photos"><mark>unused</mark></label>
      <input type="radio" name="view-filter-status" id="filter-status-used"
            data-status="used"
            data-next-status="all">
      <label for="filter-status-used" title="Show all photos"><mark>used</mark></label>
    </span>
    <span id="view-filter-type-wrap" style="display:none">
      <input type="radio" name="view-filter-type" id="filter-type-all" checked
            data-type="all"
            data-next-type="post">
      <label for="filter-type-all" title="Filter for used in drafts"><mark>overall</mark></label>
      <input type="radio" name="view-filter-type" id="filter-type-post"
            data-type="post"
            data-next-type="draft">
      <label for="filter-type-post" title="Filter for used in notes"><mark>in posts</mark></label>
      <input type="radio" name="view-filter-type" id="filter-type-draft"
            data-type="draft"
            data-next-type="notes">
      <label for="filter-type-draft" title="Filter for used in pages"><mark>in drafts</mark></label>
      <input type="radio" name="view-filter-type" id="filter-type-notes"
            data-type="notes"
            data-next-type="page">
      <label for="filter-type-notes" title="Filter for used in dynamic pages"><mark>in notes</mark></label>
      <input type="radio" name="view-filter-type" id="filter-type-page"
            data-type="page"
            data-next-type="dynamic">
      <label for="filter-type-page" title="Filter for used in anything pages"><mark>in default pages</mark></label>
      <input type="radio" name="view-filter-type" id="filter-type-dynamic"
            data-type="dynamic"
            data-next-type="anything">
      <label for="filter-type-dynamic" title="Filter for used in dynamic pages"><mark>in dynamic pages</mark></label>
      <input type="radio" name="view-filter-type" id="filter-type-anything"
            data-type="anything"
            data-next-type="general">
      <label for="filter-type-anything" title="Show all used photos"><mark>in anything pages</mark></label>
      <input type="radio" name="view-filter-type" id="filter-type-general"
            data-type="general"
            data-next-type="all">
      <label for="filter-type-general"><mark>in general pages</mark></label>
    </span>
    <span id="view-presentation-wrap">
      displayed as
      <input type="radio" name="view-presentation" id="presentation-grid" checked
              data-presentation="grid"
              data-next-presentation="list">
      <label for="presentation-grid" title="Display as list"><mark>grid</mark></label>
      <input type="radio" name="view-presentation" id="presentation-list"
              data-presentation="list"
              data-next-presentation="masonry">
      <label for="presentation-list" title="Display as masonry"><mark>list</mark></label>
      <input type="radio" name="view-presentation" id="presentation-masonry"
              data-presentation="masonry"
              data-next-presentation="grid">
      <label for="presentation-masonry" title="Display as grid"><mark>masonry</mark></label>
    </span>
    <span id="view-sort-wrap">
      sorted by
      <span id="view-sort-field">
          <input type="radio" name="view-sort-field" id="sort-field-file" checked
                  data-sort-field="file"
                  data-next-sort-field="title">
          <label for="sort-field-file" title="Sort by title"><mark>file name</mark></label>
          <input type="radio" name="view-sort-field" id="sort-field-title"
                  data-sort-field="title"
                  data-next-sort-field="date-created">
          <label for="sort-field-title" title="Sort by date created"><mark>title</mark></label>
          <input type="radio" name="view-sort-field" id="sort-field-date-created"
                  data-sort-field="date-created"
                  data-next-sort-field="file">
          <label for="sort-field-date-created" title="Sort by file name"><mark>date created</mark></label>
      </span>
      <span id="view-sort-direction">
          <input type="radio" name="view-sort-direction" id="sort-direction-asc" checked
                  data-sort-direction="asc"
                  data-next-sort-direction="desc">
          <label for="sort-direction-asc" title="Sort descending"><mark>ascending</mark></label>
          <input type="radio" name="view-sort-direction" id="sort-direction-desc"
                  data-sort-direction="desc"
                  data-next-sort-direction="asc">
          <label for="sort-direction-desc" title="Sort descending"><mark>descending</mark></label>
      </span>          
    </span>
  </div>

  <div class="view grid" id="photos">
    <% for(var i=0; i < page.items.length; i++) { %>
      <%- partial('_partial/photo-item', { item: page.items[i] }) %>
    <% } %>
  </div>

</div>

<script>
  document.querySelectorAll("input[name=view-filter-status]").forEach(element => {
    element.addEventListener("click", (event) => {
      setFilterStatus(element);
    });
  });
  document.querySelectorAll("input[name=view-filter-type]").forEach(element => {
    element.addEventListener("click", (event) => {
      setTypeFilter(element);
    });
  });
  document.querySelectorAll("input[name=view-presentation]").forEach(element => {
    element.addEventListener("click", (event) => {
      setPresentation(element);
    });
  });
  document.querySelectorAll("input[name=view-sort-field]").forEach(element => {
    element.addEventListener("click", (event) => {
      setSortField(element);
    });
  });
  document.querySelectorAll("input[name=view-sort-direction]").forEach(element => {
    element.addEventListener("click", (event) => {
      setSortDirection(element);
    });
  });

  // Init
  let currentPresentation = getCookie("view-photos");
  if (currentPresentation) {
    document.querySelector("#presentation-" + currentPresentation).checked = true;
    setView(currentPresentation);
  }

  var macyInstance;
  function setView(newPresentation) {
    let view = document.querySelector('.view');
    view.classList = "view " + newPresentation;

    if (newPresentation === "masonry") {
      document.querySelectorAll(".card-img").forEach(item => {
        item.classList.remove("spotlight");
      });
      macyInstance = new Macy({
        container: '#photos',
        trueOrder: false,
        waitForImages: false,
        useOwnImageLoader: false,
        debug: true,
        mobileFirst: true,
        columns: 2,
        margin: {
          y: 6,
          x: 6
        },
        breakAt: {
          980: {
            margin: {
              x: 8,
              y: 8
            },
            columns: 3
          },
          768: 2,
          640: 3
        }
      });
    } else {
      if (macyInstance) { 
        macyInstance.remove();
        macyInstance = null; 
      }
    }

    currentPresentation = newPresentation;
    setCookie("view-photos", newPresentation, 365);

    setFilterStatus();
  }

  function setPresentation(ePresentation) {
    let newPresentation;
    if(!ePresentation) { //for initialization
      ePresentation = document.querySelector("input[name=view-presentation]:checked");
      newPresentation = ePresentation.getAttribute("data-presentation");
    } else {
      newPresentation = ePresentation.getAttribute("data-next-presentation");
    }

    let eNewPresentation = document.querySelector("#presentation-" + newPresentation);
    eNewPresentation.checked = true;

    setView(newPresentation);
  }

  function setSorting() {
    let field = document.querySelector("input[name=view-sort-field]:checked").getAttribute("data-sort-field");
    let dir = document.querySelector("input[name=view-sort-direction]:checked").getAttribute("data-sort-direction");;

    $('.view').find('.card').addClass("trans");
    setTimeout(() => { 
      tinysort('#photos > .card',{data: field, order: dir, forceStrings: true});
      $('.view').find('.card').removeClass("trans");
      setView(currentPresentation);
      initViewportImage();
    }, 300);
  }

  function setSortDirection(eSortDirection) {
    let newSortDirection;
    if(!eSortDirection) { //for initialization
      eSortDirection = document.querySelector("input[name=view-sort-direction]:checked");
      newSortDirection = eSortDirection.getAttribute("data-sort-direction");
    } else {
      newSortDirection = eSortDirection.getAttribute("data-next-sort-direction");
    }

    let eNewSortDirection = document.querySelector("#sort-direction-" + newSortDirection);
    eNewSortDirection.checked = true;

    setSorting();
  }

  function setSortField(eSortField) {
    let newSortField;
    if(!eSortField) { //for initialization
      eSortField = document.querySelector("input[name=view-sort-field]:checked");
      newSortField = eSortField.getAttribute("data-sort-field");
    } else {
      newSortField = eSortField.getAttribute("data-next-sort-field");
    }

    let eNewSortField = document.querySelector("#sort-field-" + newSortField);
    eNewSortField.checked = true;

    setSorting();
  }

  function setFilterStatus(eStatus) {

    let newStatus;
    if (!eStatus) { //for initialization
      eStatus = document.querySelector("input[name=view-filter-status]:checked");
      newStatus = eStatus.getAttribute("data-status");
      if (newStatus === "used") { // set filter by directly, if status 'used' and type != 'all'
        eType = document.querySelector("input[name=view-filter-type]:checked");
        if (eType.getAttribute("data-type") !== "all") {
          setTypeFilter();
          return;
        }
      }
    } else {
      newStatus = eStatus.getAttribute("data-next-status");
    }

    let eNewStatus = document.querySelector("#filter-status-" + newStatus);
    eNewStatus.checked = true;

    if (newStatus === "used") { 
      document.getElementById("view-filter-type-wrap").style.display = "inline-block";
    } else { 
      document.getElementById("view-filter-type-wrap").style.display = "none";
      document.getElementById("filter-type-all").checked = true; //reset used e.g. type filter
    }

    document.querySelectorAll(".card").forEach(item => {
      if (newStatus === 'all' || (newStatus === item.getAttribute("data-status"))) {
        showPhoto(item);
      } else {
        hidePhoto(item);
      }
    });
    refreshFilterView();
  }

  function setTypeFilter(eType) {

    let newType;
    if (!eType) { //for initialization
      eType = document.querySelector("input[name=view-filter-type]:checked");
      newType = eType.getAttribute("data-type");
    } else {
      newType = eType.getAttribute("data-next-type");
    }

    let eNewType = document.querySelector("#filter-type-" + newType);
    eNewType.checked = true;

    document.querySelectorAll(".card").forEach(item => {
      if (item.getAttribute("data-status") === "used") {
        if (newType === 'all' || (newType === item.getAttribute("data-type"))) {
          showPhoto(item);
        } else {
          hidePhoto(item);
        }
      } else {
        hidePhoto(item);
      }
    });
    refreshFilterView();
  }

  function showPhoto(item) {
    setTimeout(() => {
      item.classList.remove("hide");
      if (currentPresentation !== "masonry") {
        item.querySelector(".card-img").classList.add("spotlight");
      }
    }, 100);
  }
  function hidePhoto(item) {
    item.classList.add("hide");
    item.querySelector(".card-img").classList.remove("spotlight");
    setTimeout(() => {
      item.style.display = "none";
    }, 300);
  }

  function refreshFilterView() {
    setTimeout(() => {
        initViewportImage();

        let resultCount = document.querySelectorAll(".card:not(.hide)").length;
        let resultElement = document.querySelector(".view-bar .info-count");
        resultElement.textContent = resultCount;

        Spotlight.init();
        if (macyInstance) macyInstance.reInit();
      }, 300);
  }
  
  setTimeout(function() { //Hack for returning from external to page
    setFilterStatus();
  }, 500)

</script>