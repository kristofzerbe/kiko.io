<%- js('js/dist/tinysort.min.js') %>

<% if (page.photograph){ %>
  <%- partial('_partial/photograph') %>
<% } %>

<%- partial('_partial/nav-index-photos') %>

<h1 class="page-title" data-pagefind-meta="title" data-pagefind-meta="type:Page">
  <span>Photos<b> | </b></span>Collection
</h1>

<div class="page-content" style="min-height:1200px;">
  <%- page.content %>

  <div class="view-bar">
    <span id="view-count"><%= page.items.length %></span> 
    <span>photos</span> 
    <span id="view-filter-status">
      <input type="radio" name="view-filter-status" id="filter-status-all" checked
             data-status="all"
             data-next-status="pool">
      <label for="filter-status-all" title="Filter for unused photos (Pool)">
        <mark>overall</mark>
      </label>
      <input type="radio" name="view-filter-status" id="filter-status-pool"
             data-status="pool"
             data-next-status="used">
      <label for="filter-status-pool" title="Filter for used photos">
        <mark>unused</mark>
      </label>
      <input type="radio" name="view-filter-status" id="filter-status-used"
             data-status="used"
             data-next-status="all">
      <label for="filter-status-used" title="Show all photos">
        <mark>used</mark>
      </label>
    </span>
    <span id="view-filter-type" style="display:none">
      <input type="radio" name="view-filter-type" id="filter-type-all" checked
             data-type="all"
             data-next-type="post">
      <label for="filter-type-all" title="Filter for used in drafts">
        <mark>overall</mark>
      </label>
      <input type="radio" name="view-filter-type" id="filter-type-post"
             data-type="post"
             data-next-type="draft">
      <label for="filter-type-post" title="Filter for used in notes">
        <mark>for posts</mark>
      </label>
      <input type="radio" name="view-filter-type" id="filter-type-draft"
             data-type="draft"
             data-next-type="notes">
      <label for="filter-type-draft" title="Filter for used in pages">
        <mark>for drafts</mark>
      </label>
      <input type="radio" name="view-filter-type" id="filter-type-notes"
             data-type="notes"
             data-next-type="page">
      <label for="filter-type-notes" title="Filter for used in dynamic pages">
        <mark>for notes</mark>
      </label>
      <input type="radio" name="view-filter-type" id="filter-type-page"
             data-type="page"
             data-next-type="dynamic">
      <label for="filter-type-page" title="Filter for used in anything pages">
        <mark>for default pages</mark>
      </label>
      <input type="radio" name="view-filter-type" id="filter-type-dynamic"
             data-type="dynamic"
             data-next-type="anything">
      <label for="filter-type-dynamic" title="Filter for used in dynamic pages">
        <mark>for dynamic pages</mark>
      </label>
      <input type="radio" name="view-filter-type" id="filter-type-anything"
             data-type="anything"
             data-next-type="start">
      <label for="filter-type-anything" title="Show all used photos">
        <mark>for anything pages</mark>
      </label>
      <input type="radio" name="view-filter-type" id="filter-type-start"
             data-type="start"
             data-next-type="all">
      <label for="filter-type-start">
        <mark>at start page</mark>
      </label>
    </span>
    <span>displayed as</span>
    <span id="view-presentation">
      <input type="radio" name="view-presentation" id="presentation-grid" checked
             data-presentation="grid"
             data-next-presentation="list">
      <label for="presentation-grid" title="Display as list">
        <mark>grid</mark>
      </label>
      <input type="radio" name="view-presentation" id="presentation-list"
             data-presentation="list"
             data-next-presentation="masonry">
      <label for="presentation-list" title="Display as masonry">
        <mark>list</mark>
      </label>
      <input type="radio" name="view-presentation" id="presentation-masonry"
             data-presentation="masonry"
             data-next-presentation="grid">
      <label for="presentation-masonry" title="Display as grid">
        <mark>masonry</mark>
      </label>
    </span>
    <span>sorted by</span>
    <span id="view-sort-field">
      <input type="radio" name="view-sort-field" id="sort-field-file" 
              data-sort-field="file"
              data-next-sort-field="title">
      <label for="sort-field-file" title="Sort by title">
        <mark>file name</mark>
      </label>
      <input type="radio" name="view-sort-field" id="sort-field-title"
              data-sort-field="title"
              data-next-sort-field="date-created">
      <label for="sort-field-title" title="Sort by date created">
        <mark>title</mark>
      </label>
      <input type="radio" name="view-sort-field" id="sort-field-date-created" checked
              data-sort-field="date-created"
              data-next-sort-field="file">
      <label for="sort-field-date-created" title="Sort by file name">
        <mark>date created</mark>
      </label>
    </span>
    <span id="view-sort-order">
      <input type="radio" name="view-sort-order" id="sort-order-asc" 
              data-sort-order="asc"
              data-next-sort-order="desc">
      <label for="sort-order-asc" title="Sort descending">
        <mark>ascending</mark>
      </label>
      <input type="radio" name="view-sort-order" id="sort-order-desc" checked
              data-sort-order="desc"
              data-next-sort-order="asc">
      <label for="sort-order-desc" title="Sort descending">
        <mark>descending</mark>
      </label>
    </span>          
  </div>

  <div class="view grid" id="photos">
    <% for(var i=0; i < page.items.length; i++) { %>
      <%- partial('_partial/photo-item', { item: page.items[i] }) %>
    <% } %>
  </div>

</div>

<script>

  let macyInstance;

  // Init
  let currentPresentation = getCookie("photos-presentation");
  if (!currentPresentation) { 
    currentPresentation = 
      document.querySelector("input[name=view-presentation]:checked").getAttribute("data-presentation");
  }

  let currentSorting = getCookie("photos-sorting");
  if (!currentSorting) {
    currentSorting = 
      document.querySelector("input[name=view-sort-field]:checked").getAttribute("data-sort-field") + "|" + 
      document.querySelector("input[name=view-sort-order]:checked").getAttribute("data-sort-order");
  }

  /* ------------------------------------- */

  document.querySelectorAll("input[name=view-filter-status]").forEach(element => {
    element.addEventListener("click", (event) => {
      setFilterStatus(element);
    });
  });
  document.querySelectorAll("input[name=view-filter-type]").forEach(element => {
    element.addEventListener("click", (event) => {
      setFilterType(element);
    });
  });
  document.querySelectorAll("input[name=view-presentation]").forEach(element => {
    element.addEventListener("click", (event) => {
      setPresentation(element);
    });
  });
  document.querySelectorAll("input[name=view-sort-field]").forEach(element => {
    element.addEventListener("click", (event) => {
      setSortField(element);
    });
  });
  document.querySelectorAll("input[name=view-sort-order]").forEach(element => {
    element.addEventListener("click", (event) => {
      setSortOrder(element);
    });
  });

  /* ------------------------------------- */

  setView();

  /* ------------------------------------- */

  function setView() {

    // document.querySelectorAll(".view .card").forEach((el) => { el.classList.add("trans"); });
    // setTimeout(() => { 

      setFilterStatus();

      //SORTING
      let aSorting = currentSorting.split("|");
      document.querySelector("#sort-field-" + aSorting[0]).checked = true;
      document.querySelector("#sort-order-" + aSorting[1]).checked = true;
      tinysort('#photos > .card',{data: aSorting[0], order: aSorting[1], forceStrings: true});

      document.querySelector('.view').classList = "view " + currentPresentation;
      document.querySelector("#presentation-" + currentPresentation).checked = true;

      //PRESENTATION
      if (currentPresentation === "masonry") {
        macyInstance = new Macy({
          container: '#photos',
          trueOrder: false,
          waitForImages: false,
          useOwnImageLoader: false,
          debug: true,
          mobileFirst: true,
          columns: 2,
          margin: {
            y: 6,
            x: 6
          },
          breakAt: {
            980: {
              margin: {
                x: 8,
                y: 8
              },
              columns: 3
            },
            768: 2,
            640: 3
          }
        });
      } else {
        if (macyInstance) { 
          macyInstance.remove();
          macyInstance = null; 
        }
      }

    //   document.querySelectorAll(".view .card").forEach((el) => { el.classList.remove("trans"); });
    // }, 400);
    
  }

  function setPresentation(ePresentation) {
    currentPresentation = ePresentation.getAttribute("data-next-presentation");
    setCookie("photos-presentation", currentPresentation, 365);

    setView();
  }

  function setSortField(eSortField) {
    let newSortField = eSortField.getAttribute("data-next-sort-field");
    let sortOrder = document.querySelector("input[name=view-sort-order]:checked").getAttribute("data-sort-order");
    currentSorting = newSortField + "|" + sortOrder;
    setCookie("photos-sorting", currentSorting, 365);

    setView();
  }

  function setSortOrder(eSortOrder) {
    let newSortOrder = eSortOrder.getAttribute("data-next-sort-order");
    let sortField = document.querySelector("input[name=view-sort-field]:checked").getAttribute("data-sort-field");
    currentSorting = sortField + "|" + newSortOrder;
    setCookie("photos-sorting", currentSorting, 365);

    setView();
  }

  function setFilterStatus(eStatus) {

    let newStatus;
    if (!eStatus) {
      eStatus = document.querySelector("input[name=view-filter-status]:checked");
      newStatus = eStatus.getAttribute("data-status");
      if (newStatus === "used") { // set filter by directly, if status 'used' and type != 'all'
        eType = document.querySelector("input[name=view-filter-type]:checked");
        if (eType.getAttribute("data-type") !== "all") {
          setFilterType();
          return;
        }
      }
    } else {
      newStatus = eStatus.getAttribute("data-next-status");
    }

    let eNewStatus = document.querySelector("#filter-status-" + newStatus);
    eNewStatus.checked = true;

    if (newStatus === "used") { 
      document.getElementById("view-filter-type").style.display = "inline-block";
    } else { 
      document.getElementById("view-filter-type").style.display = "none";
      document.getElementById("filter-type-all").checked = true; //reset used e.g. type filter
    }

    document.querySelectorAll(".card").forEach(item => {
      if (newStatus === 'all' || (newStatus === item.getAttribute("data-status"))) {
        showPhoto(item);
      } else {
        hidePhoto(item);
      }
    });
    refreshView();
  }

  function setFilterType(eType) {

    let newType;
    if (!eType) {
      eType = document.querySelector("input[name=view-filter-type]:checked");
      newType = eType.getAttribute("data-type");
    } else {
      newType = eType.getAttribute("data-next-type");
    }

    let eNewType = document.querySelector("#filter-type-" + newType);
    eNewType.checked = true;

    document.querySelectorAll(".card").forEach(item => {
      if (item.getAttribute("data-status") === "used") {
        if (newType === 'all' || (newType === item.getAttribute("data-type"))) {
          showPhoto(item);
        } else {
          hidePhoto(item);
        }
      } else {
        hidePhoto(item);
      }
    });
    refreshView();
  }

  function showPhoto(item) {
    item.style.display = null;
    setTimeout(() => {
      item.classList.remove("hide");
    }, 100);
  }
  function hidePhoto(item) {
    item.classList.add("hide");
    setTimeout(() => {
      item.style.display = "none";
    }, 300);
  }

  function refreshView() {
    setTimeout(() => {
        let resultCount = document.querySelectorAll(".card:not(.hide)").length;
        let resultElement = document.querySelector(".view-bar #view-count");
        resultElement.textContent = resultCount;

        Spotlight.init();
        if (macyInstance) macyInstance.reInit();
      }, 300);
  }
  
  setTimeout(function() { //Hack for returning from external to page
    // setFilterStatus();
    setView();
  }, 500)

</script>