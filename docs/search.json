[{"title":"Automatic Header Images in Hexo","url":"/categories/Tools/Automatic-Header-Images-in-Hexo/","content":"\nEvery article in this blog has an individual header image, to bring a little bit color into it. In this post I will show you how I deal with the images in using and automatic provisioning.\n\nFor serving these pictures I use a static folder, as described in [A New Blog: Customizing Hexo](/categories/Tools/A-New-Blog-Customizing-Hexo/). The hard work is done by the plugin [Hexo Generator Copy](https://github.com/niahoo/hexo-generator-copy), which copies the static files into the ``public_dir`` while generating.\n\n<!-- more -->\n\n## Static File Structure\n\nIt is always advisable to provide one image for every device class, in order to save bandwidth and make the page loading as fast as possible:\n\n```txt\n| static/\n   | photos/\n      | mobile/\n         | my-lovely-picture.jpg\n         | ...\n      | tablet/\n         | my-lovely-picture.jpg\n         | ...\n      | normal/\n         | my-lovely-picture.jpg\n         | ...\n```\n\nThe ``mobile`` images are at least 480 pixels wide, the ``tablet`` variants 768 pixels and the standard or ``normal`` one 1280 pixels.\n\nWhile creating the JPG files, it is important to compress them with a tool like [JPEGMini](https://www.jpegmini.com/) to save data while loading.\n\n## Binding\n\nIn order to bind a picture with some additional information to an article, I have extended the Frontmatter of every post:\n\n```yaml\nphotograph:\n    file: 'my-lovely-image.jpg'\n    name: 'My Lovely Image'\n    link: 'https://500px.com/photo/123456789/My-Lovely-Image'\n```\n\n## Usage in Theme\n\nIt relies on your Hexo theme, how to use a header image. In my theme (derived from the standard theme) I just added following code in the ``article.js`` to show the individual header image as a background image at the top of the article: \n\n```html\n<% if (!index && post.photograph){ %>\n<style>\n  #banner {\n    background-size: cover;\n  }\n  @media screen and (max-width: 479px) {\n    #banner { background-image:\n      linear-gradient(to bottom, rgba(0,0,0,0.75) 0%, rgba(0,0,0,0) 75%),\n      url(\"/photos/mobile/<%= post.photograph.file %>\"); }\n  }\n  @media screen and (min-width: 480px) and (max-width: 767px) {\n    #banner { background-image: \n      linear-gradient(to bottom, rgba(0,0,0,0.75) 0%, rgba(0,0,0,0) 75%),\n      url(\"/photos/tablet/<%= post.photograph.file %>\"); }\n  }\n  @media screen and (min-width: 768px) {\n    #banner { background-image: \n      linear-gradient(to bottom, rgba(0,0,0,0.75) 0%, rgba(0,0,0,0) 75%),\n      url(\"/photos/normal/<%= post.photograph.file %>\"); }\n  }\n</style>\n<script>\n  var photoLink = document.getElementById(\"header-photo-link\");\n  photoLink.href = \"<%= post.photograph.link%>\";\n  photoLink.innerHTML = \"see <strong><%= post.photograph.name%></strong> at 500px\";\n</script>\n<% } %>\n```\n\nImportant part here is the use of the Frontmatter data ``post.photograph.file`` in the URL of the background CSS. The script fills the additional information into the absolute positioned element ``header-photo-link`` which is placed on top of the header.\n\n## Pooling Images\n\nAs it is time consuming to generate the necessary images, I have created another static folder ``pool`` to store prepared files and a text file with the additional information about the image. The structure of ``pool`` is different to ``photos``, because of my image workflow and some limitations of automating the provisioning.\n\n```txt\n| static/\n   | pool/\n      | my-lovely-picture/\n         | meta.txt\n         | mobile.jpg\n         | normal.jpg\n         | tablet.jpg\n      | ...\n```\nThe ``meta.txt`` is a simple text file with two lines of text: first the name of the image and second the Url to link to, which will be inserted in the appropriate Frontmatter fields on creating a new post:\n\n```txt\nMy Lovely Image\nhttps://500px.com/photo/123456789/My-Lovely-Image\n```\n\n## Automate binding and provisioning on new post\n\nDevelopers are lazy and I do not make an exception. Having all these pool images and the meta informations, it would be nice, if Hexo just picks and processes one of the pool folders automatically, when I'm creating a new post by calling ``hexo new \"My shiny new post\"`` ... and it was easier then I thought.\n\n### Where to place the code for the automatism\n\nHexo has a great [API](https://hexo.io/api/) to write [plugins](https://hexo.io/plugins/) and it is not very difficult to setup a new plugin for this, which can be published to the [NPM registry](https://www.npmjs.com/search?q=hexo). But it is also possible to extend Hexo's functionality by using a simple script. All you need is a **``script``** folder in the root of your Hexo project. Any JS files which is placed there, will be executed by Hexo.\n\nTherefore, lets use a script called ``\\scripts\\process-photo-on-new.js`` ...\n\n### Things an automatism should do - Step by Step\n\n1. Hook into the creation of a post\n2. Pick randomly one of the pool images\n3. Place the content of the meta.txt in the Frontmatter\n4. Move the 3 device-dependend images into the ``photos`` folder\n\n#### Step 1 - Hook into the creation of a post\n\nThe needed event, the automatism can hook on, is:\n\n```javascript\nhexo.on('new', function(data){\n  //\n});\n```\n\nIt will be executed every time you call the ``hexo new`` command. The parameter ``data`` is an object with two fields:\n\n* ``path``  \nFull path to the MD file of the new post\n\n* ``content``  \nComplete content of the scaffold (template), which Hexo has used to create the new post; default is ``/scaffolds/post.md``.\n\nBy preloading the Hexo Front matter library and parsing ``data.content`` we get access to the definition of the new post:\n\n```javascript\nconst front = require('hexo-front-matter');\n\nhexo.on('new', function(post){\n\n  // parse article content\n  var post = front.parse(data.content);\n});\n```\n\n#### Step 2 - Pick randomly one of the pool images\n\nThere are some build-in variables to get the full path, for example, of the ``source`` folder, we can use to define the needed paths to the ``pool`` and the ``photo`` folder.\n\n```javascript\nconst front = require('hexo-front-matter');\n\nhexo.on('new', function(post){\n  var post = front.parse(data.content);\n\n  // set the path variables\n  var poolDir = hexo.source_dir.replace(\"\\source\", hexo.config.static_dir) + \"pool\";\n  var photosDir = hexo.source_dir.replace(\"\\source\", hexo.config.static_dir) + \"photos\";\n});\n```\n\nNext, we need to preload the Hexo FS library for file access, to list the content of the ``poolDir``, including the subfolders, and filter out the meta files. Out of the resulting array we pick one randomly, to use for the new post:\n\n```javascript\nconst front = require('hexo-front-matter');\nconst fs = require('hexo-fs');\n\nhexo.on('new', function(post){\n  var post = front.parse(data.content);\n\n  var poolDir = hexo.source_dir.replace(\"\\source\", hexo.config.static_dir) + \"pool\";\n  var photosDir = hexo.source_dir.replace(\"\\source\", hexo.config.static_dir) + \"photos\";\n\n  // list all files\n  var files = fs.listDirSync(poolDir);\n\n  // filter the list to get meta files of each subfolder\n  var metaFiles = files.filter(file => file.match(/.*[\\\\]meta.txt/g));\n\n  // pick one randomly\n  var metaFile = metaFiles[Math.floor(Math.random() * metaFiles.length)];\n\n  // get the name of the picked photo\n  var photoName = metaFile.split(\"\\\\\")[0];\n});\n```\n\n#### Step 3 - Place the content of the meta.txt in the Frontmatter\n\nNow we have to read the meta file, place the data in the Frontmatter and save the article file:\n\n```javascript\nconst front = require('hexo-front-matter');\nconst fs = require('hexo-fs');\n\nhexo.on('new', function(post){\n  var post = front.parse(data.content);\n\n  var poolDir = hexo.source_dir.replace(\"\\source\", hexo.config.static_dir) + \"pool\";\n  var photosDir = hexo.source_dir.replace(\"\\source\", hexo.config.static_dir) + \"photos\";\n  \n  var files = fs.listDirSync(poolDir);\n  var metaFiles = files.filter(file => file.match(/.*[\\\\]meta.txt/g));\n  var metaFile = metaFiles[Math.floor(Math.random() * metaFiles.length)];\n\n  // read meta file\n  var meta = fs.readFileSync(poolDir + \"\\\\\" + metaFile);\n  var metas = meta.split(\"\\n\");\n\n  // place file and additional info in the Frontmatter\n  post.photograph.file = photoName + \".jpg\";\n  post.photograph.name = metas[0];\n  post.photograph.link = metas[1];\n\n  // convert content back\n  postStr = front.stringify(post);\n  postStr = '---\\n' + postStr;\n\n  // store article\n  fs.writeFile(data.path, postStr, 'utf-8');\n});\n```\n\n#### Step 4 - Move the 3 device-dependend images into the photos folder\n\nLast but not least, we have to move the pool images into the ``photos`` folder and remove the pool folder with all its processed content:\n\n```javascript\nconst front = require('hexo-front-matter');\nconst fs = require('hexo-fs');\n\nhexo.on('new', function(post){\n  var post = front.parse(data.content);\n\n  var poolDir = hexo.source_dir.replace(\"\\source\", hexo.config.static_dir) + \"pool\";\n  var photosDir = hexo.source_dir.replace(\"\\source\", hexo.config.static_dir) + \"photos\";\n  \n  var files = fs.listDirSync(poolDir);\n  var metaFiles = files.filter(file => file.match(/.*[\\\\]meta.txt/g));\n  var metaFile = metaFiles[Math.floor(Math.random() * metaFiles.length)];\n\n  var meta = fs.readFileSync(poolDir + \"\\\\\" + metaFile);\n  var metas = meta.split(\"\\n\");\n\n  post.photograph.file = photoName + \".jpg\";\n  post.photograph.name = metas[0];\n  post.photograph.link = metas[1];\n\n  postStr = front.stringify(post);\n  postStr = '---\\n' + postStr;\n\n  fs.writeFile(data.path, postStr, 'utf-8');\n\n  //copy normal image\n  fs.copyFile(\n    poolDir + \"\\\\\" + photoName + \"\\\\normal.jpg\",\n    photosDir + \"\\\\normal\\\\\" + photoName + \".jpg\",\n      function() {\n\n        //copy tablet image\n        fs.copyFile(\n          poolDir + \"\\\\\" + photoName + \"\\\\tablet.jpg\",\n          photosDir + \"\\\\tablet\\\\\" + photoName + \".jpg\",\n          function() {\n\n            //copy mobile image\n            fs.copyFile(\n              poolDir + \"\\\\\" + photoName + \"\\\\mobile.jpg\",\n              photosDir + \"\\\\mobile\\\\\" + photoName + \".jpg\",\n              function() {\n\n                //remove orphaned pool folder\n                fs.rmdirSync(poolDir + \"\\\\\" + photoName);\n              });\n          });\n      });\n\n});\n```\n\nNow it so easy to write a new post, because almost everything is set and I can concentrate on the article. Also, it is a nice surprise to see, which photo the script has chosen. The only thing I have to do from time to time, is to refill the pool folder with new images.\n\n## Related\n\n* [A New Blog (Part Two): Customizing Hexo](/categories/Tools/A-New-Blog-Customizing-Hexo/)\n","tags":["Hexo","Blogging"],"categories":["Tools"]},{"title":"Localization with resource files in JavaScript web apps","url":"/categories/JavaScript/Localization-with-resource-files-in-JavaScript-web-apps/","content":"\nThere are plenty of editors out there to help you writing JavaScript web applications. As I'm working in my daily life with Visual Studio, it is a obvious choice for me. \n\nOne of the most time saving tools in VS is the plugin [ResXManager](https://marketplace.visualstudio.com/items?itemName=TomEnglert.ResXManager), which is an awesome assistant on managing the translations for a Desktop- or ASP.NET-App, which uses XML-based RESX files.\n\n<!-- more -->\n\nMostly very localization is based on key/value pairs, defined in separate files for every language provided.\n\nImplementing several languages in pure JavaScript apps is a little more difficult, because it makes no sense to deal with big XML files in JS. All localization libraries in the market uses JSON for storing the translations and it is a little bit of work to find the right one for your requirements.\n\n<!-- more -->\n\n## Localization in JavaScript\n\nFor a current project I use  [jquery-lang](https://github.com/Irrelon/jquery-lang-js), because it provides the switch of the apps UI language without reloading and it is easy to implement. Thanks Rob Evans for your work...\n\nThe definition of \"tokens\" in one JSON file for each language is quite easy:\n\n**.../languages/en.json**\n```js\n{\n    \"token\": {\n        \"my-test\": \"My Test in English\"\n    }\n}\n```\n\n**.../languages/de.json**\n```js\n{\n    \"token\": {\n        \"my-test\": \"Mein Test in Deutsch\"\n    }\n}\n```\n\nThe usage also:\n```html\n<div lang=\"en\" data-lang-token=\"my-test\">\n```\n\n## Using RESX and convert to JSON on build\n\nHaving this, the most time consuming work is to enter the translations to the localization files. If you have hundreds of them, it is hard to keep the 2, 3 or more language files in sync. You need a helper...\n\nAnd here comes ResXManager to the rescue, if you work with VS ... but it needs a conversation from RESX to the JSON format jquery-lang uses and this a task, which can be done on building the JS app, by using a task runner like [Grunt](https://gruntjs.com/).\n\nAs there was no Grunt plugin/task out there to fit my needs, I have created  **grunt-resource2json** ([GitHub](https://github.com/kristofzerbe/grunt-resource2json), [NPM](https://www.npmjs.com/package/grunt-resource2json)). The configuration in the **gruntfile.js** is like: \n\n```json\ngrunt.initConfig({\n    resource2json: {\n      convert: {\n        options: {\n          format: \"jquery-lang\"\n        },\n        files: [\n          {\n            input: \"resources/Resource.resx\",\n            output: \"build/langpacks/en.json\"\n          },\n          {\n            input: \"resources/Resource.de-DE.resx\",\n            output: \"build/langpacks/de.json\"\n          },\n          {\n            input: \"resources/Resource.es-ES.resx\",\n            output: \"build/langpacks/es.json\"\n          }\n        ]\n      }\n    });\n```\n\nIt takes one RESX file (input) and converts it to a JSON file (output) in an array of files.\n\nThe heavy work in the plugin is done by the library [xml2js](https://www.npmjs.com/package/xml2js), which transforms the complete XML of the RESX file into a JSON object in one call. All I had to do, was to write all DATA nodes in a loop into the jquery-lang given structure and save it as JSON.\n\nCurrently supported is the format for jquery-lang only, but it would be awesome, if you fork the code on [GitHub](https://github.com/kristofzerbe/grunt-resource2json) and send me a Pull Request with the implementation of your needed format.\n","tags":["GitHub","Visual Studio","Resource","Localization"],"categories":["JavaScript"]},{"title":"TFS/DevOps: Delete Remote Workspace","url":"/categories/Tools/TFS-DevOps-Delete-Remote-Workspace/","content":"\nIf you are working with freelance developers and Azure DevOps/TFS with TFVC (Team Foundation Version Control) in your company, maybe this will look familiar to you: You hire a new freelancer and you want to reuse the hardware, including the complete software setup, to bring him/her to work as fast and straightforward as possible. You set up a new Azure Devops account with all necessary permissions and you think you're done. No you are not...\n<!-- more -->\n\nEverytime a user connects to a Team Project on Azure DevOps via Visual Studio and gets the code, VS is creating a **remote workspace** on the server, with the **machine name** as default, therefor it is not enough to wipe the profile and any other legacies of the last user from the machine. You also have to remove the remote workspace. Otherwise you will get an error message like that, if you are using a unique file structure on the developers hard disc:\n\n```txt\nThe working folder c://xxx is already in use by the workspace yyy;zzz on computer yyy\n```\n\nThe variable xxx stands for the blocked folder, yyy for the workspace/machine name and zzz for the users id on Azure DevOps.\n\nUnfortunately, there is no visual management console on Azure DevOps to manage your server workspaces, but there is a command line tool called **[tf.exe](https://docs.microsoft.com/en-us/azure/devops/repos/tfvc/use-team-foundation-version-control-commands?view=azure-devops)**.\n\nThe easiest way to get rid of the unused server workspace in 3 steps:\n\n### Step 1\n\nRun **Developer Command Prompt** from Visual Studio 2019 and login with your Azure DevOps credentials. You need to have administration rights...!\n\n### Step 2\n\nGet a list of all remote workspaces available in your DevOps Collection by running the command:\n\n```txt\ntf.exe workspaces /computer:* /owner:* /format:xml > c:\\temp\\workspaces.xml\n```\n\nYou can get a list of all your workspaces by running ``tf workspaces``, but the list only shows you the ``owner``, but not the necessary ``ownerid`` and ... it is nicer to have a file to search in.\n\n### Step 3\n\nFind the abandoned workspace in the list and note its ``name`` and  ``ownerid`` for running the command:\n\n```txt\ntf workspace /delete {WORKSPACE.name};{WORKSPACE.ownerid}\n```\n\nNow your new colleague can create his own workspace on the same machine.\n\n## Related\n* [Use Team Foundation version control commands](https://docs.microsoft.com/en-us/azure/devops/repos/tfvc/use-team-foundation-version-control-commands?view=azure-devops)\n* [How to remove TFS workspace mapping for another user\n](https://stackoverflow.com/questions/28298771/how-to-remove-tfs-workspace-mapping-for-another-user/28299407)","tags":["Visual Studio","TFS/DevOps"],"categories":["Tools"]},{"title":"Better Input Change Event","url":"/categories/JavaScript/Better-Input-Change-Event/","content":"\nOften it is important to trigger an event, after the user of your website/web app has filled out an text input. You have to do something with the given value in JavaScript.\n\nThe intended event for this is ``change``, which will be triggered, when the user has ended changing by leaving the input with his cursor, mostly by using the TAB key. This works at some degree, if there is a physical keyboard, but not really on mobile devices ... and for me is leaving the field often too late to start the upcoming event.\n\n<!-- more -->\n\nA better way to show the user the result of his entered value, could be the event ``input`` which fires on every key stroke, but could be way to often, if the triggered event is for example an AJAX call.\n\nBest solution is, to observe the users key strokes and trigger the event, when he stops typing. Then there is no extra action needed by the user and the event isn't triggered multiple times. \n\nHere's an implementation with jQuery:\n\n```javascript\n$(\"#my-text-input\").keyup(function () {\n    var $this = $(this);\n    clearTimeout($.data(this, 'timer'));\n    var wait = setTimeout(function () {\n\n        //do something with the value...\n\n    }, 1000);\n    $(this).data('timer', wait);\n});\n```\n\nImportant is to wipe and set the timer on every key up, to achive that the event will be executed after 1 second after the last key stroke only.","tags":["jQuery"],"categories":["JavaScript"]},{"title":"Hexo and the Dark Mode ... revised","url":"/categories/Tools/Hexo-and-the-Dark-Mode-revised/","content":"\nWhile writing my post [Hexo and the Dark Mode](/categories/Tools/Hexo-and-the-Dark-Mode) a few days ago, I thought it would be nice, if I could switch between the normal (light) and the dark theme, I've created for the support of the OS-related Dark Mode, even manually. The only thing I needed was a toggle element and a little bit of JavaScript.\n\nOf course, I couldn't manipulate the [media query ``prefers-color-scheme``](https://drafts.csswg.org/mediaqueries-5/#descdef-media-prefers-color-scheme) itself, but introduce a different way by blog uses it. Instead of implementing the media query directly into my CSS (or Stylus) code, I used a root selector, which can be manipulated by JavaScript ... something like this:\n\n```css\nbody {\n    background-color: white;\n    color: black;\n}\n\n[data-theme=\"dark\"] body {\n    background-color: black;\n    color: white;\n  }\n}\n```\n<!-- more -->\n\nIn every Stylus file, where I used ``@media prefers-dark`` to achieve the automatic switch by the OS, I changed this line into ``/[data-theme=\"dark\"] &`` :\n\n```styl\n#mobile-nav-header\n  background-color: color-background\n  /[data-theme=\"dark\"] &\n    background-color: dark-color-background\n  img.avatar\n    ...\n    /[data-theme=\"dark\"] &\n      filter: brightness(85%)\n```\n\nSome explanations on the [Stylus syntax](http://stylus-lang.com/docs/selectors.html): ``/`` means the root of the DOM and ``&`` points to the parent selector. Therefore the example will be rendered into this:\n\n```css\n#mobile-nav-header {\n    background-color: #f1f1f1;\n}\n[data-theme=\"dark\"] #mobile-nav-header {\n    background-color: #111;\n}\n\n#mobile-nav-header img.avatar {\n...\n}\n[data-theme=\"dark\"] #mobile-nav-header img.avatar\n    filter: brightness(85%);\n}\n```\n\nOnly problem was: the \"Root + Parent\" Stylus selector doesn't work in the block variables in the ``_extend.styl``. So I had to copy all theme relevant styles directly to the elements, where such a block was used: ``@extend <block-name>``.\n\n### The Toggle Switch\n\nIn the ``footer.ejs`` I added a toggle checkbox, where I could bind my JavaScript...\n\n```html\n<div id=\"footer-theme\">\n    <input type=\"checkbox\" id=\"theme-switch\">\n    <label for=\"theme-switch\"></label>\n</div>\n```\n\n... and some CSS in the ``footer.styl``, to style it:\n\n```styl\ninput#theme-switch[type=checkbox] {\n  display:none;\n}\n\ninput#theme-switch[type=checkbox] + label\n  height: 16px\n  width: 16px\n  display: inline-block\n  padding: 12px\n  font-size: 22px\n  cursor: pointer\n  &:before\n    display: inline-block\n    font-size: inherit\n    text-rendering: auto\n    -webkit-font-smoothing: antialiased\n    font-family: fa-icon-solid\n    content: icon-moon\n\ninput#theme-switch[type=checkbox]:checked + label\n  &:before\n    content: icon-sun\n```\n\nThe ``icon`` variables are defined in the ``_variables.styl`` like this:\n\n```styl\nicon-moon = \"\\f186\"\nicon-sun = \"\\f185\"\n```\n\n### The JavaScript\n\nEverything was now prepared to implement the switching code in JavaScript, which should support a manual switch by clicking the toggle element as well as the automatic switch by the OS.\n\nI wrapped all necessary code into a seperate JS file and placed a reference in the ``after-footer.ejs``, which places it at the bottom of the HTML:\n\n```ejs\n<%- js('js/dark-mode-toggle.js') %>\n```\n\n```js\nfunction detectColorScheme() {\n    var theme = \"light\"; //default\n\n    // get last used theme from local cache\n    if(localStorage.getItem(\"theme\")){\n        if(localStorage.getItem(\"theme\") === \"dark\"){\n            theme = \"dark\";\n        }\n    } else if(!window.matchMedia) { \n        // matchMedia not supported  \n        return false;\n    } else if(window.matchMedia(\"(prefers-color-scheme: dark)\").matches) {\n        // OS has set Dark Mode\n        theme = \"dark\";\n    }\n\n    // set detected theme\n    if (theme === \"dark\") {\n        setThemeDark();\n    } else {\n        setThemeLight();\n    }\n}\n\nconst toggleTheme = document.querySelector('input#theme-switch[type=\"checkbox\"]');\n\nfunction setThemeDark() {\n    localStorage.setItem('theme', 'dark');\n    document.documentElement.setAttribute('data-theme', 'dark');\n    toggleTheme.checked = true;\n}\nfunction setThemeLight() {\n    localStorage.setItem('theme', 'light');\n    document.documentElement.setAttribute('data-theme', 'light');\n    toggleTheme.checked = false;\n}\n\n// Listener for theme change by toggle\ntoggleTheme.addEventListener('change', function(e) {\n    if (e.target.checked) {\n        setThemeDark();\n    } else {\n        setThemeLight();\n    }\n}, false);\n\n// Listener for theme change by OS\nvar toggleOS = window.matchMedia('(prefers-color-scheme: dark)');\ntoggleOS.addEventListener('change', function (e) {\n    if (e.matches) {\n        setThemeDark();\n    } else {\n        setThemeLight();\n    }\n});\n\n// call theme detection\ndetectColorScheme();\n```\n\nBy using the both ``addEventListener``'s, each switch will be recognized and this approach is capable to support even more themes, just by using different values in the ``data-theme`` attribute.\n\n## Related\n\n* [Hexo and the Dark Mode](/categories/Tools/Hexo-and-the-Dark-Mode)","tags":["Hexo","CSS","Stylus","Dark Mode"],"categories":["Tools"]},{"title":"Hexo and the Dark Mode","url":"/categories/Tools/Hexo-and-the-Dark-Mode/","content":"\nDue to the fact, that nowadays everybody is talking about Dark Modes for Browsers and Operating Systems, in order to save battery or for easier reading (uhh, really?), I decided my blog should support that.\n\n![Switching Dark Mode in Windows 10](Hexo-and-the-Dark-Mode/screen-recording-1.gif)\n<!-- more -->\n\nStarting point is the new media query ``prefers-color-scheme``, which is actually supported by all modern browsers.\n\n### Technique\n\nMy first read was Tom Brow's [Dark mode in a website with CSS](https://tombrow.com/dark-mode-website-css), where he shows how to use the media query. Simplified, this is it, assuming the light version is the default:\n\n```css\nbody {\n    background-color: white;\n    color: black;\n}\n\n@media (prefers-color-scheme: dark) {\n  body {\n    background-color: black;\n    color: white;\n  }\n}\n```\n\n### Pimping CSS for automatic switching\n\nTo support the automatic browser/OS-based automatic switch in Hexo, where [Stylus](http://stylus-lang.com/) is used, I had to change some template files. First the ``_variables.styl``:\n\n```styl\n// existing color variables\ncolor-background = #f1f1f1\ncolor-foreground = #111\ncolor-border = #ddd\n...\n\n// new dark color variables\ndark-color-background = #111\ndark-color-foreground = #eee\ndark-color-border = #000\n...\n\n// new media query variable\nprefers-dark = \"(prefers-color-scheme: dark)\"\n```\n\nNext step was to change the ``_extend.styl``, where some Stylus variables are defining complete blocks to extend. Here I had to supplement all lines, where something mode-dependend was defined, by adding the new ``prefers-dark`` media query and beneath the new 'dark' equivalence of the style:\n\n```styl\n$base-style\n  hr\n    ...\n    border: 1px dashed color-border-article\n    @media prefers-dark\n      border: 1px dashed dark-color-border-article\n    ...\n\n$block\n  ...\n  background: color-block\n  box-shadow: 1px 2px 3px color-border\n  border: 1px solid color-border\n  @media prefers-dark\n    background: dark-color-block\n    box-shadow: 1px 2px 3px dark-color-border\n    border-color: dark-color-border\n\n...\n```\n\nThe same changes I had to do in every template ``styl`` file, where one of the colors or other mode dependent style was used. For example:\n\n```styl\n#mobile-nav-header\n  background-color: color-background\n  @media prefers-dark\n    background-color: dark-color-background\n  img.avatar\n    ...\n    @media prefers-dark\n      filter: brightness(85%)\n```\n\nThis will be rendered as:\n\n```css\n  #mobile-nav-header {\n    background-color: #f1f1f1;\n  }\n  @media (prefers-color-scheme: dark) {\n      #mobile-nav-header {\n      background-color: #111;\n    }\n  }\n\n  #mobile-nav-header img.avatar {\n    ...\n  }\n  @media (prefers-color-scheme: dark) {\n    filter: brightness(85%);\n  }\n```\n\nPlease note the use of ``filter:brightness()`` in the example. It is always advisable to darken the images too, because they can really pop out on dark backgrounds.\n\n## Related\n\n* [Hexo and the Dark Mode ... revised](/categories/Tools/Hexo-and-the-Dark-Mode-revised)\n","tags":["Hexo","CSS","Stylus","Dark Mode"],"categories":["Tools"]},{"title":"A New Blog: Blogging and Synching en route","url":"/categories/Tools/A-New-Blog-Blogging-and-Synching-en-route/","content":"\nI work with several devices, some Windows, some Android, and sometimes I have time to write on my articles at home (Notebook, Tablet), in my spare time in the office (Desktop, Laptop) or on my way to somewhere (Smartphone). Right now I'm am in a barber shop, waiting for my haircut and write these lines. So, wherever I am, I need the Hexo project locally, but in sync on a digital device.\n\nThe blog is synced via Dropbox, but hosted on GitHub Pages, so on every device I need the  publishing functions of Git too.\n\n<!-- more -->\n\n## Sync Hexo Project\n\nBest option for me to achieve this was  [Dropbox](https://dropbox.com). Another benefit on that is: I can work on the structure of the blog wherever I am and commit when the new feature or improvement is done, because all Git related files are always in sync too.\n\n## Writing, Editing and Publishing on Windows\n\nMy preferred editor is [Visual Studio Code](https://code.visualstudio.com/). Good file handling, easy writing, full Git integration and tons of other plugins and helpers. Chapeau Microsoft, well done.\n\nSome of the following VS Code plugins makes working with Hexo on GitHub pages a breeze:\n\n---\n\n[![vscode-hexo](A-New-Blog-Blogging-and-Synching-en-route/icon-vscode-hexo.png)]((https://marketplace.visualstudio.com/items?itemName=codeyu.vscode-hexo){.lefty})  \nAdds Hexo commands like ``init``, ``new``, ``generate``, ``server`` and ``clean`` to the VS Code command palette.\n\n---\n\n[![Markdown All in One](A-New-Blog-Blogging-and-Synching-en-route/icon-markdown-all-in-one.png)](https://marketplace.visualstudio.com/items?itemName=yzhang.markdown-all-in-one)  \nKeyboard shortcuts for basic formatting, automatic list editing, autocomlete for images,  table formatter and much more for an easier handling of Markdown.\n\n---\n\n[![markdownlint](A-New-Blog-Blogging-and-Synching-en-route/icon-markdownlint.png)](https://marketplace.visualstudio.com/items?itemName=DavidAnson.vscode-markdownlint)  \nMarkdown linting and style checking\n\n---\n\n[![Language Stylus](A-New-Blog-Blogging-and-Synching-en-route/icon-stylus.png)](https://marketplace.visualstudio.com/items?itemName=sysoev.language-stylus)  \nAdds syntax highlighting and code completion to Stylus files\n\n---\n\n[![GitLens](A-New-Blog-Blogging-and-Synching-en-route/icon-gitlens.png)](https://marketplace.visualstudio.com/items?itemName=sysoev.language-stylus)  \nComplete visual management of your repositories in VS Code\n\n---\n\n[![Git Graph](A-New-Blog-Blogging-and-Synching-en-route/icon-gitgraph.png)](https://marketplace.visualstudio.com/items?itemName=mhutchie.git-graph)  \nView a Git Graph of your repository with all changes and manage commits.\n\n---\n\nWith this editor and its helpers, I'm just two clicks away from publishing a new article or even a new version of the Hexo blog itself.\n\n## Writing on Android\n\nThere are a lot of Markdown editors available on Google Play, but one is outstanding: [iA Writer for Android](https://ia.net/writer/support/android). I can open my posts or drafts directly from Dropbox, without the need of any sychronization. Open, write, close, done.\n\n![iA Writer Android](A-New-Blog-Blogging-and-Synching-en-route/ia-writer-1.png)\n\n## Publishing on Android\n\nThere are some Git related Android apps out there, but no solution was satisfying. Furthermore, I didn't really need Git here, because I didn't want to have all source files on my smartphone. I'm working directly on the Dropbox stored MD files via iA Writer. Finally and most important, Git won't be enough, because before publishing, I have to run ``hexo generate``! Therefore some sort of automatic transfer from Dropbox to GitHub is also out of the game.\n\nWhat I needed, was to tell a server at a certain point of time 'Hey, please publish for me', using the only connection I have: Dropbox.\n\n### Introducing a Demon\n\nI have a little media server, running on Windows, and he is synchronizing some folders with Dropbox. He could do the job! After I installed all necessary packages, like NodeJS, Hexo and Git, I included the project folder into the sync. \n\nNext step was to design a so called **Hexo Command File**, a simple TXT file, which holds commands in single lines, extended with execution times, when they were successfully running.\n\n```properties\npostdraft: A-New-Blog-Blogging-and-Synching-en-route\npublish\nnewdraft: \"A New Blog: Blogging and Synching en route\" @ 2019-09-30 21:15\nregenerate @ 2019-09-29 16:40:01\npublish @ 2019-09-29 16:40:10\n```\n\nThese commands are predefined, because they bundle several real commands and I didn't want to deal with real commands, due to security reasons.\n\nThe unprocessed commands are standing at the top of the file (in execution order!) and parameters are separated from the command by a colon and delimited by commas.\n\n    <command>: [<param1>, ...] @ <execution time>\n\nNext step was to create a program to work as an executing demon, who monitors the Hexo Command File (synced by Dropbox) on my server and executes commands without execution dates.\n\nI decided to create a simple Console Application in C# and use the built-in [Windows Task Scheduler](https://en.wikipedia.org/wiki/Windows_Task_Scheduler) for running it every 2 minutes. The application is called **HexoCommander** and is [available at GitHub](https://github.com/kristofzerbe/HexoCommander).\n\nIt expects the Hexo Command File to be named ``hexo-commands.txt``, located in the same folder, and provides the following commands:\n\n**newdraft: \"&lt;title&gt;\"** ... runs\n\n1. ``hexo new draft \"<title>\"``\n\nCreates a new draft.\n\n**postdraft: \"&lt;filename without extension&gt;\"** ... runs\n\n1. ``hexo publish \"<filename without extension>\"``\n\nMakes a post out of a draft.\n\n**regenerate** ... runs\n\n1. ``hexo clean``\n2. ``hexo generate``\n\nWipes all Hexo static pages and generates them new.\n\n**publish** ... runs\n\n1. ``hexo generate``\n2. ``git add \"source/*\" \"docs/*\"``\n3. ``git commit -m \"Remote publication via HexoCommander\"``\n4. ``git push origin master``\n\nGenerates Hexo static pages, stage changes on drafts, posts and static pages, commits the changes with a generic message and pushes them to the server.\n\n### Running the demon\n\nI would have never expected, that the trickiest part was to get HexoCommander running via Windows Task Scheduler. What a mess! I finally find the solution [here](https://social.msdn.microsoft.com/Forums/SqlServer/en-US/29446adf-8304-4b9f-bbc4-95daf2941d53/program-runs-fine-but-task-scheduler-wont-run-it?forum=winserver2008appcompatabilityandcertification):\n\n1. Compile HexoCommander in a **x86** configuration\n\n2. Create a new task in Task Scheduler with\n   * **Trigger**\n     * Dialy\n     * Recur every 1 days\n     * Repeat task every 2 minutes for a duration of 1 day\n   * **Action**\n     * Program/Script: **%systemroot%\\Syswow64\\cmd.exe**\n     * Add Arguments: **/C \"C:\\MyPath\\HexoCommander.exe /workdir=C:\\MyPath\"**\n     * Start In: **%systemroot%\\Syswow64\\\\**\n\nBecause some executing commands in the chain are NOT 64-bit, I had to force Task Scheduler to run the 32-bit Command Shell in its own path (see 'Start In' and don't forget the closing backslash) and take the 32-bit compiled HexoCommander as argument after the parameter ```/C``` (forcing command to terminate), including its own argument for defining the real working directory. Mind bending, but works...\n\n---\n\n## Related\n\n* [A New Blog (Part One): VS Code, Hexo and GitHub Pages](/categories/Tools/A-New-Blog-VS-Code-Hexo-and-GitHub-Pages/)\n* [A New Blog (Part Two): Customizing Hexo](/categories/Tools/A-New-Blog-Customizing-Hexo/)","tags":["VS Code","Hexo","GitHub","Blogging"],"categories":["Tools"]},{"title":"A New Blog: Customizing Hexo","url":"/categories/Tools/A-New-Blog-Customizing-Hexo/","content":"\nHexo is a great tool to get quick results (see [Part One of this series](/categories/Tools/A-New-Blog-VS-Code-Hexo-and-GitHub-Pages/)), when you decide to have a blog and its defaults are practical, but it's power lies in the possiblities of customization via plugins. On the [official plugin page](https://hexo.io/plugins/index.html), there are actually 302 plugins listed, but there are many more and no wish will be unsatisfied.\n\nI will show you which of these I found worth to work with...\n<!-- more -->\n\n### Relative Image Path\n\nThe build-in way to include images in your posts works fine, but it is a little aside the normal way to declare images in Markdown. The plugin [Hexo Asset Link] corrects that. After installing via ``npm install hexo-asset-link --save`` you can write this:\n\n    ![Test Image](hello-world/image-1.png)\n\nThe best is, that VS Code's Markdown can now show the image.\n\n---\n\n**UPDATE**:  \nActually the plugin [destroys external links](https://github.com/liolok/hexo-asset-link/issues/3), so don't use it until this is fixed ... or go to **node_modules** &gt; **hexo-asset-link** &gt; **index.js** in your project and change in line 22 ``protocal`` to ``protocol``.\n\n**UPDATE from Update**:  \n[liolok](https://github.com/liolok), the author of the plugin has merged my pull request and published a new new version without the typo. It works now as expected.\n\n---\n\n### Hide Posts\n\nA new Hexo project comes with a sample post called ``Hello World``. This is fine to play around with, but you don't want to publish it. Here comes a Hexo plugin to the rescue called [Hexo Hide Posts](https://github.com/printempw/hexo-hide-posts). After installing, you just have to write ``hidden: true`` to the Front Matter of you post and it won't be shown on the blog, but it is still available by URL.\n\n### Static Files\n\nHexo has the concept of [Assets Folders](https://hexo.io/docs/asset-folders), but for static files, beside article based files, I find it more useful to have a STATIC folder and copy the contents on every build into the publish folder. A good helper for this approach is the plugin [Hexo Generator Copy](https://github.com/niahoo/hexo-generator-copy). Install it by running ``npm install hexo-generator-copy --save`` and add ``static_dir: static`` to your ``_config.yml`` and you are done.\n\n    ![Hexo Static Files](A-New-Blog-Customizing-Hexo/vscode-1.png)\n\n### Feed\n\nThe default Hexo layout has an Atom Feed icon in the upper right corner, but strangely no feed file is generated on build. You need to install the plugin [Hexo Feed Generator](https://github.com/hexojs/hexo-generator-feed) to fix this, by running ``npm install hexo-generator-feed --save`` and copy following section into the ``_config.yml``:\n\n```yaml\nfeed:\n    type: atom\n    path: atom.xml\n    limit: 20\n    hub:\n    content:\n    content_limit: 140\n    content_limit_delim: ' '\n    order_by: -date\n```\n\n### Manifest for PWA\n\nIn these modern times it's always a good idea, that your blog feels like an App. For this you need a manifest file (JSON) an several icons (PNG). You can generate these files very fast with the [Web App Manifest Generator](https://app-manifest.firebaseapp.com) and store it in your static folder.\n\nTo bind this file into your blog, you can use the plugin [Hexo PWA](https://github.com/lavas-project/hexo-pwa). Run ``npm install --save hexo-pwa`` and copy following section to your ``_config.yml``, where you take the settings from your generated manifest file:\n\n```yaml\npwa:\n    manifest:\n        path: /manifest.json\n        body:\n        name: myblog.de\n        short_name: My Blog\n        icons:\n            - src: /images/icon-192x192.png\n            sizes: 192x192\n            type: image/png\n            - src: /images/icon-512x512.png\n            sizes: 512x512\n            type: image/png\n        start_url: /index.html\n        theme_color: '#025ab1'\n        background_color: '#dddddd'\n        display: standalone\n```\n\n### Sitemap File\n\nTo help [Google](https://support.google.com/webmasters/answer/183668) and others a bit to index your blog, it is advisable to provide a sitemap file. Here comes [Hexo Generator Sitemap](https://github.com/hexojs/hexo-generator-sitemap) to the rescue. Install it by running the command ``npm install hexo-generator-sitemap --save``. You can configure it via ``_config.yml``:\n\n```yaml\nsitemap:\n    path: sitemap.xml\n    template: ./sitemap-template.xml\n```\n\nThe plugin installation doesn't create the needed ``sitemap-template`` file, so be sure you grab a copy from the plugins repository: [https://github.com/hexojs/hexo-generator-sitemap/blob/master/sitemap.xml](https://github.com/hexojs/hexo-generator-sitemap/blob/master/sitemap.xml)\n\n### Commenting\n\nHexo doesn't have a commenting system, but it's prepared to stick [Disqus](https://disqus.com/) comments under each article. Just create a new Disqus account for your blog and note the given short name. By adding following section to the ``_config.yml`` Hexo shows the commenting section:\n\n```yaml\ndisqus_enabled: true\ndisqus_shortname: my-blog\n```\n\n### Inifinite Scroll\n\nHexo shows as much articles at the start page as configured in ``_config.yml`` under ``index_generator.per_page``, but it's nicer to load more articles as you scroll by using the Hexo script [Inifinite Scroll](https://github.com/FrontendSophie/hexo-infinite-scroll). Install by adding following little script in **themes** & gt; **layout** &gt; **_partial** &gt; **after-footer.ejs**\n\n```html\n<script src=\"//cdn.jsdelivr.net/gh/frontendsophie/hexo-infinite-scroll@2.0.0/dist/main.js\"></script> \n<script>\n    infiniteScroll({\n    showNum: 5,\n    style: 'line-scale',\n    color: '#025ab1'\n    })\n</script>\n```\n\n### Back To Top\n\nIts nice to support the reader on scolling by providing a Scroll-To-Top button. The easiest way to get this, is the script [Vanilla Back To Top](https://github.com/vfeskov/vanilla-back-to-top). Just add follwing to **themes** &gt;**layout** &gt; **_partial** &gt; **after-footer.ejs**:\n\n```html\n<script>addBackToTop({\n    diameter: 30,\n    backgroundColor: 'rgb(0, 90, 180)',\n    textColor: '#fff'\n})\n</script>\n<style>\n#back-to-top {\n    border-radius: 0;\n    opacity: 0.6;\n}\n#back-to-top:hover {\n    opacity: 1;\n}\n</style>\n```\n\n## Related\n\n* [A New Blog (Part One): VS Code, Hexo and GitHub Pages](/categories/Tools/A-New-Blog-VS-Code-Hexo-and-GitHub-Pages/)\n* [A New Blog (Part Three): Blogging and Synching en route](/categories/Tools/A-New-Blog-Blogging-and-Synching-en-route/)\n","tags":["VS Code","Hexo","Blogging"],"categories":["Tools"]},{"title":"A New Blog: VS Code, Hexo and GitHub Pages","url":"/categories/Tools/A-New-Blog-VS-Code-Hexo-and-GitHub-Pages/","content":"\nA few days ago I puzzled over a technical problem regarding SQL Server, Active Directory and Visual Studio Database Projects. With tips, hints and snippets from several websites I got it running and the solution was absolutely memorable. For myself and for others. Nothing is harder than to know 'you did this before...', but not to remember how.\n\nBecause of this strong leaning towards oblivion, I started over 20 years ago my very first website **zerbit.de**, manually crafted with Classic ASP and a SQL Server database as backend, with an editor, tagging, categories and so on. It was really exciting to build this blog from scratch and writing articles for it, but it was so time consuming to expand the features of the website and keep it running, that some day I quit it silently.\n\nSo, to document the solution mentioned above, I could use tools like OneNote or others, like in the past years, but this would be just for me and not for all developers, who have a similar problem. I felt it would be unfair to participate from the knowledge of others to get my solution and dont give something back.\n\nI decided to write an article just in HTML and publish it on my personal GitHub Page that I didn't used so far. Ok, just Text ... ugly. Just a little CSS and a little more structure and maybe I should do something with Vue JS ... STOP ... It would be better to pick one of the cool new static website generators based on Node.js, to detain myself from inventing the wheel again and save my time to write articles. So I did a little research and found [HEXO](https://hexo.io) ... Bingo! I can work with my favorite editor [Visual Studio Code](https://code.visualstudio.com/), its all HTML, JavaScript and CSS, I can write my articles in Markdown and Hexo has a lot of helpers for stuff Markdown doesn't provide, it produces static files and works only with files, therefore no need for a database ... and it is well documented.\n<!-- more -->\n\n## Installation\n\n.. is quite easy, as described here: [https://hexo.io/docs/setup](https://hexo.io/docs/setup)\n\n1. Create folder and open in VS Code\n2. Open VS Code Terminal window\n3. Install Hexo with ``$ npm install -g hexo-cli``\n4. Init Hexo project with ``$ hexo init``\n5. Install dependencies with ``npm install``\n6. Done\n\n![New Hexo Project](A-New-Blog-VS-Code-Hexo-and-GitHub-Pages/vscode-1.png)\n\n## Writing\n\n### Create new post/draft\n\nHexo has posts and drafts, whereat drafts has to published via a Hexo command to become a post. To create an article use the command ``hexo new post|draft \"My Title\"``. The title will be converted in a URL-encoded string and will be used as file name and url.\n\n### Meta data\nEvery post/draft starts with its header (so called [Front Matter](https://hexo.io/docs/front-matter)) to store some meta data, which describes the post, like ``title``, ``date``, ``tags`` or ``categories``. This is used by Hexo to classify and arrange your post during the build.\n\n### Markdown\nHexo posts/drafts are written in [Markdown](https://en.wikipedia.org/wiki/Markdown). Good syntax reference are the [Markdown Guide](https://www.markdownguide.org/basic-syntax/) and the more detailed [Markdown Syntax Guide](https://sourceforge.net/p/hexo/wiki/markdown_syntax/).\n\n### Excerpt\nIs is usual to show a short excerpt an the start page of a blog, to keep it compact and teasering the user to click on a READ MORE button. To achieve this, you just have to add following comment to your article. Everything above is the excerpt and everything below is only shown, when you enter the article:\n\n    <!-- more -->\n\n### Images\n\nSome articles will contain images to illustrate something and the question is, where should they be stored? Answer: In a folder beside the post/draft, which has the same name as the article MD file. To get this, you have to activate the setting ``post_asset_folder`` in your ``_config.yml``. Now this folder will be created automatically, when you add a new post/draft.\n\nIn your Markdown you reference your image with:\n\n    {% asset_img image-1.png \"Test Image\" %}\n\n![Reference Image](A-New-Blog-VS-Code-Hexo-and-GitHub-Pages/vscode-2.png)\n\n## Build\n\nHexo is a website generator, so a build will generate the whole website in a special folder, which has to be published. This output folder can be configured in the ``_config.yml``:\n\n    public_dir: public\n\nTo wipe the output folder, run the command:\n\n    hexo clean\n\nTo start the build, run:\n\n    hexo generate\n\nTo view the website via the build-in local Hexo server, run:\n\n    hexo server\n\n## Publishing\n\nMost \"complex\" task was to publish the new blog on [GitHub Pages](https://pages.github.com/). My first approach was to use my personal page, as I did with my single HTML file, but this didn't work, because I wanted to store the whole project on GitHub and it is not possible to point a personal page to the subdirectory **docs** or use a different branch as **master**.\n\nThe simple solution was to create a new repository, named after my my blog **kiko.io**, to store teh whole project and point the GitHub Page to the subdirectory **docs** in the settings of the repository.\n\n![GitHub Settings](A-New-Blog-VS-Code-Hexo-and-GitHub-Pages/github-1.png)\n\nBy overriding the default publish folder of Hexo in ``_config.yml`` ...\n\n    public_dir: docs\n\n... everything was set up. Commit and Push via git and done.\n\nHexo has its own deploying mechanism and it is advisable to disable it, by commenting out the Deployment section ``_config.yml``.\n\nNext step was to use my own custom domain for the blog. To achieve this, the most easiest way is to create a text file named ``CNAME`` (without extension!) with the content of the domain in a single line and publish this file in the root of the docs folder. Github will recognize this file and do the setup automatically.\n\nTo point the domain to GitHub, I had to create following ``A`` records in my domain providers DNS settings:\n\n* 185.199.108.153\n* 185.199.109.153\n* 185.199.110.153\n* 185.199.111.153\n\nLast step was to enable **Enforce HTTPS** in the repositories settings.\n\n---\n\n## Related\n\n* [A New Blog (Part Two): Customizing Hexo](/categories/Tools/A-New-Blog-Customizing-Hexo/)\n* [A New Blog (Part Three): Blogging and Synching en route](/categories/Tools/A-New-Blog-Blogging-and-Synching-en-route/)\n","tags":["VS Code","Hexo","GitHub","Blogging"],"categories":["Tools"]},{"title":"How-To: Visual Studio Database Project and ADSI","url":"/categories/SQL/How-To-Visual-Studio-Database-Project-and-ADSI/","content":"If you are working with a Visual Studio Database Project and have to deal with data from the Active Directory via a Linked Server, you have to announce the data structure of the AD data in order to get the project compiled.\n<!-- more -->\n## Step 1 - Linking to the Active Directory\n\nFirst of all you have to connect your SQL Server to the AD permanently, by running  following SQL script once on your SQL Server:\n\n    USE [master]\n    GO\n    EXEC master.dbo.sp_addlinkedserver @server = N'ADSI', \n        @srvproduct=N'Active Directory Service Interfaces', \n        @provider=N'ADSDSOObject', \n        @datasrc=N'adsdatasource'\n    \n    EXEC master.dbo.sp_addlinkedsrvlogin @rmtsrvname=N'ADSI',\n        @useself=N'False',\n        @locallogin=NULL,\n        @rmtuser=N'mydomain\\myadminuser',\n        @rmtpassword='mypassword'\n    GO\n    \n    EXEC master.dbo.sp_serveroption @server=N'ADSI', \n        @optname=N'collation compatible', @optvalue=N'false'\n    GO\n    EXEC master.dbo.sp_serveroption @server=N'ADSI', \n        @optname=N'data access', @optvalue=N'true'\n    GO\n    EXEC master.dbo.sp_serveroption @server=N'ADSI', \n        @optname=N'dist', @optvalue=N'false'\n    GO\n    EXEC master.dbo.sp_serveroption @server=N'ADSI', \n        @optname=N'pub', @optvalue=N'false'\n    GO\n    EXEC master.dbo.sp_serveroption @server=N'ADSI', \n        @optname=N'rpc', @optvalue=N'false'\n    GO\n    EXEC master.dbo.sp_serveroption @server=N'ADSI', \n        @optname=N'rpc out', @optvalue=N'false'\n    GO\n    EXEC master.dbo.sp_serveroption @server=N'ADSI', \n        @optname=N'sub', @optvalue=N'false'\n    GO\n    EXEC master.dbo.sp_serveroption @server=N'ADSI', \n        @optname=N'connect timeout', @optvalue=N'0'\n    GO\n    EXEC master.dbo.sp_serveroption @server=N'ADSI', \n        @optname=N'collation name', @optvalue=null\n    GO\n    EXEC master.dbo.sp_serveroption @server=N'ADSI', \n        @optname=N'lazy schema validation', @optvalue=N'false'\n    GO\n    EXEC master.dbo.sp_serveroption @server=N'ADSI', \n        @optname=N'query timeout', @optvalue=N'0'\n    GO\n    EXEC master.dbo.sp_serveroption @server=N'ADSI', \n        @optname=N'use remote collation', @optvalue=N'true'\n    GO\n    EXEC master.dbo.sp_serveroption @server=N'ADSI', \n        @optname=N'remote proc transaction promotion', @optvalue=N'true'\n    GO\n\n## Step 2 - Fetching ADSI data  \n\nTo get data, use ``OpenQuery`` against the Linked Server. In order to get only persons and no system accounts, you should filter out all users, which has no firstname (``givenName``) or lastname (``sn``):\n\n    SELECT \n        UserPrincipalName, \n        DisplayName, \n        sAMAccountName AS [SamAccountName], \n        sn AS [LastName], \n        givenName AS [FirstName], \n        title AS [Title], \n        Mail as [MailAddress],\n        department AS [Department],\n        l AS [Location], \n        postalCode AS [PostCode], \n        streetAddress AS [Street],\n        st AS [State]\n    FROM OpenQuery(ADSI, '\n        SELECT \n            UserPrincipalName, \n            DisplayName, \n            sAMAccountName, \n            sn, \n            givenName, \n            department,\n            title, \n            Mail, \n            l, \n            postalCode, \n            streetAddress, \n            st\n        FROM ''LDAP://mydomain.de/DC=mydomain,DC=de'' \n        WHERE objectClass =  ''User'' \n        AND objectCategory = ''Person'' \n        AND sn=''*'' \n        AND givenName = ''*'' \n    ')    \n\nIn most cases you're done with that ... except your organisation has more the 900 users! Then you have to split the fetch in several requests, because SQL Server quits with an error, when trying to read more than 900 records via ADSI.  \n\nBest option is, to filter the ADSI statement by something like *'get all user starting with a to j'*, when you are sure, that in this case less than 900 records will be given back and repeat the statement several times and glue the data together via a ``UNION`` statement:\n\n<pre>\n<code>SELECT  \n    UserPrincipalName,  \n    DisplayName,  \n    sAMAccountName AS [SamAccountName],  \n    sn AS [LastName],  \n    givenName AS [FirstName],  \n    title AS [Title],  \n    Mail as [MailAddress],  \n    department AS [Department],  \n    l AS [Location],  \n    postalCode AS [PostCode],  \n    streetAddress AS [Street],  \n    st AS [State]  \nFROM (  \n    SELECT *  \n    FROM OpenQuery(ADSI, '  \n        SELECT  \n            UserPrincipalName,  \n            DisplayName,  \n            sAMAccountName,  \n            sn,  \n            givenName,  \n            department,  \n            title,  \n            Mail,  \n            l,  \n            postalCode,  \n            streetAddress,  \n            st  \n        FROM ''LDAP://mydomain.de/DC=mydomain,DC=de''  \n        WHERE objectClass =  ''User''  \n        AND objectCategory = ''Person''  \n        AND sn=''*''  \n        AND givenName = ''*''  \n        <strong>AND sAMAccountName &lt;= ''j''</strong>\n    ')  \n\n    <strong>UNION ALL</strong>  \n\n    SELECT *  \n    FROM OpenQuery(ADSI, '  \n        SELECT <em>[...same as above]</em>  \n        FROM ''LDAP://mydomain.de/DC=mydomain,DC=de''  \n        WHERE objectClass =  ''User''  \n        AND objectCategory = ''Person''  \n        AND sn=''*''  \n        AND givenName = ''*''  \n        <strong>AND sAMAccountName &gt; ''j''</strong>  \n        <strong>AND sAMAccountName &lt; ''p''</strong>  \n    ')\n\n    <strong>UNION ALL</strong>  \n\n    SELECT *  \n    FROM OpenQuery(ADSI,  '  \n        SELECT <em>[...same as above]</em>  \n        FROM ''LDAP://mydomain.de/DC=mydomain,DC=de''  \n        WHERE objectClass =  ''User''  \n        AND objectCategory = ''Person''  \n        AND sn=''*'' AND givenName = ''*''  \n        <strong>AND sAMAccountName &gt;= ''p''</strong>  \n    ')  \n) AD</code>\n</pre>\n\nWhen you store this as a VIEW, you can join it wherever you want on SQL Server:\n\n<pre>\n<code>CREATE VIEW [dbo].[vADUsers]\nAS\n    <em>[...SQL code from above]</em>\n\nGO</code>\n</pre>\n\n## Step 3 - SQL Server Database Project\n\nIf you work with a SQL Server Database Project, to have the complete structure of your database available in a version control system, you will get some reference errors on compiling and publishing your newly added SQL View ``vADUsers`` and on some objects, which rely on this View, because of following problems:\n\n1. Project doesn't know the Linked Server `ADSI`\n2. The structure (fields) of the data source is unknown\n\n### Declare the Linked Server\n\nTo show the Project that there is a Linked Server called ``ADSI``, just add following lines at the start of your view:\n\n<pre>\n<code><strong>sp_addlinkedserver 'ADSI'</strong>\n<strong>GO</strong>\n\nCREATE VIEW [dbo].[vADUsers]\nAS\n    <em>[...SQL code from above]</em></code>\n</pre>\n\nThis mimics the adding of a Linked Server, but will be ignored by SQL Server on publish, because you already have a Linked Server with this name. The project is happy with it.\n\n### Declare the data structure\n\nWhen you use the SQL-View ``vADUsers`` in a Stored Procedure for example, this object won't compile, because the project knows nothing about the fields of the ADSI data source. The SELECT in the view is not enough. You have to add an empty ``SELECT`` to the View ``vADUsers``, just for the declaration of the fields and without returning any records and join this via ``UNION`` with the other statements:\n\n<pre>\n<code>sp_addlinkedserver 'ADSI'\nGO\n\nCREATE VIEW [dbo].[vtADAllUsers]\nAS\n\nSELECT\n    UserPrincipalName,\n    DisplayName,\n    sAMAccountName AS [SamAccountName],\n    sn AS [LastName],\n    givenName AS [FirstName],\n    title AS [Title],\n    Mail as [MailAddress],\n    department AS [Department],\n    l AS [Location],\n    postalCode AS [PostCode],\n    streetAddress AS [Street],\n    st AS [State]\nFROM (\n\n    -- Fake SELECT to declare the structure of the view<strong>\n    SELECT TOP 0\n        '' UserPrincipalName,\n        '' DisplayName,\n        '' sAMAccountName,\n        '' sn,\n        '' givenName,\n        '' department,\n        '' title,\n        '' Mail,\n        '' l,\n        '' postalCode,\n        '' streetAddress,\n        '' st\n\n    UNION ALL</strong>\n\n    SELECT *\n    FROM OpenQuery(ADSI, '\n        SELECT\n            UserPrincipalName,\n            DisplayName,\n            sAMAccountName,\n            sn,\n            givenName,\n            department,\n            title,\n            Mail,\n            l,\n            postalCode,\n            streetAddress,\n            st\n        FROM ''LDAP://mydomain.de/DC=mydomain,DC=de''\n        WHERE objectClass =  ''User''\n        AND objectCategory = ''Person''\n        AND sn=''*''\n        AND givenName = ''*''\n        AND sAMAccountName &gt;= ''j''  \n    ')\n\n    UNION ALL  \n\n    SELECT *  \n    FROM OpenQuery(ADSI, '  \n        SELECT <em>[...same as above]</em>  \n        FROM ''LDAP://mydomain.de/DC=mydomain,DC=de''  \n        WHERE objectClass =  ''User''  \n        AND objectCategory = ''Person''  \n        AND sn=''*''  \n        AND givenName = ''*''  \n        AND sAMAccountName &lt; ''j''  \n        AND sAMAccountName &gt; ''p''  \n    ')\n\n    UNION ALL  \n\n    SELECT *  \n    FROM OpenQuery(ADSI,  '  \n        SELECT <em>[...same as above]</em>  \n        FROM ''LDAP://mydomain.de/DC=mydomain,DC=de''  \n        WHERE objectClass =  ''User''  \n        AND objectCategory = ''Person''  \n        AND sn=''*''  \n        AND givenName = ''*''  \n        AND sAMAccountName &lt;= ''p''  \n    ')\n) AD</code>\n</pre>\n\nNow, you can fetch data from Active Directory and store the code in a Database Project properly.\n\nHAPPY CODING :)\n","tags":["Visual Studio","ADSI","Database Project"],"categories":["SQL"]}]