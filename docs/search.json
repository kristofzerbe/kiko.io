[{"title":"Use a duplicate image to drop a shadow","url":"/categories/UI-Design/Use-a-duplicate-image-to-drop-a-shadow/","content":"\nDepending on your design, sometimes it is nice to drop a shadow on an image to highlight it:\n\n```html\n  <img src=\"my-image.jpg\" />\n```\n\n```css\nimg {\n  box-shadow: 0px 25px 25px -10px #666;\n}\n```\n![Normal Box Shadow](Use-a-duplicate-image-to-drop-a-shadow/normal-shadow.jpg)\n\nBut ... it looks like a paper print of the image, with a light bulb in the first third above it. The shade is grey, boring and has been used and seen many times before...\n\nAn design related [Instagram post](https://www.instagram.com/p/CIXUIXkBHMk/) from Muhammad Abdull of [thewilsonthings](https://www.instagram.com/thewilsonwings), inspired me to **use the image itself as the shadow** in order to make the image look a bit translucent. Should be the same technique as that of a reflection. Here is the HTML/CSS code for it, as the people asking for it in the comments.\n\n<!-- more -->\n\nWhat we want to achieve is this:\n\n![Duplicate Image Shadow](Use-a-duplicate-image-to-drop-a-shadow/image-shadow.jpg)\n\nBasically, we use a duplicate of the image and position it below the actual image, but slightly offset and blurred. It won't be a performance issue, as some might think, because it is the very same file and will be loaded only once by the browser.\n\nFor showing two images in the nearly same place in different layers, we need a wrapper...\n\n```html\n<div class=\"image-wrapper\">\n  <img src=\"my-image.jpg\" />\n  <img class=\"shadow\" src=\"my-image.jpg\" />\n</div>\n```\n\n... and some CSS for positioning the images on top of each other first. Here are the defaults for both ``image`` elements:\n\n```css\ndiv.image-wrapper {\n  position: relative;\n}\n\ndiv.image-wrapper img {\n  position: absolute;\n  display: block;\n  top: 0;\n  left: 0;\n  width: 100%;\n  z-index: 1;\n}\n```\n\nNow we have to style the duplicate image that it looks similar to the shadow. We washing it out using the [blur filter](https://developer.mozilla.org/en-US/docs/Web/CSS/filter-function/blur) and the opacity.\n\n```css\ndiv.image-wrapper img.shadow {\n  filter: blur(10px);\n  opacity: 0.8;\n}\n```\n\n![Blurred Duplicate](Use-a-duplicate-image-to-drop-a-shadow/blurred-image.jpg)\n\nLast step is to change the duplicates dimensions and the positioning below the original image. We squeeze it by 10% and shift it from left with half of the value back to the center, shift it from top to make it standout at the bottom and send it to the back by taking a lower z-index than the original image.\n\n```css\ndiv.image-wrapper img.shadow {\n  filter: blur(10px);\n  opacity: 0.8;\n\n  width: 90%;\n  left: 5%;\n  top: 40px;\n  z-index: 0;\n}\n```\n\nThats it. Here's a pen to play around with the solution:\n\n{% codepen XWjGBGy 'Image Shadows' css %}\n","tags":["CSS"],"categories":["UI-Design"]},{"title":"Safely remove multiple classes using a prefix","url":"/categories/JavaScript/Safely-remove-multiple-classes-using-a-prefix/","content":"Writing a Web App with HTML and JavaScript means you deal with several classes on your DOM elements in order to visualize state changes. And there are some pitfalls to be aware of with regard to removal.\n\nAssuming you want to open some kind of sidebar above a container. In this sidebar you have several buttons to show different content via JavaScript and a close button, which closes the sidebar again. You HTML code maybe looks like this:\n\n```html\n<html>\n  <body>\n    <div id=\"container\">... Main Content ...</div>\n\n    <nav>\n      <button id=\"open-sidebar\">\n    </nav>\n\n    <aside id=\"sidebar\">\n      <div class=\"content\">... Sidebar Content ...</div>\n      <button id=\"close\">Close Sidebar</button>\n      <button id=\"content-1\">Show Content 1</button>\n      <button id=\"content-2\">Show Content 2</button>\n      <button id=\"content-3\">Show Content 3</button>\n    </aside>\n\n  </body>\n</html>\n```\n\nBy clicking on the ``open-sidebar`` button, the sidebar is opened and the action, respectively the new state, is vizualized by adding an appropriate class to the parent sidebar element. In order to make it easy for the user, the default content (Content 1) will be loaded also and its state will be marked with another class.\n\n```html\n<aside class=\"sidebar open open-content-1\">\n```\n\nA click on of the other content buttons (let's say Content 2), will replace the current content and the ``aside`` classes will change into:\n\n```html\n<aside class=\"sidebar open open-content-2\">\n```\n\nNow we want to close the sidebar again, assuming that we don't have stored the currently opened content in the JavaScript code...\n\n<!-- more -->\n\nWhat we have to do, is to iterate over all classes of ``aside`` and remove those which starts with ``open``:\n\n```js\nlet sidebar = document.getElementById(\"sidebar\");\nfor (let i = 0; i < sidebar.classList.length; i++) {\n  let value = sidebar.classList[i];\n  if (value.startsWith(\"open\")) {\n    sidebar.classList.remove(value);\n  }\n}\n\n//or\n\nlet sidebar = document.getElementById(\"sidebar\");\nsidebar.classList.forEach(function(value){\n  if(value.includes(\"open\")) {\n    sidebar.classList.remove(value);\n  };\n}); \n```\n\nBoth approaches have a pitfall: when the first class, starting with ``open``, is removed from the list, the length of the ``classList`` array changes immediatly and we won't reach the last class in the list ... !\n\nThe solution is to find and remove all appropriate classes at once, for example by using ``RegEx`` and a reusable helper function:\n\n```js\nfunction removeClassByPrefix(el, prefix) {\n    var regEx = new RegExp('\\\\b' + prefix + '.*?\\\\b', 'g');;\n    el.className = el.className.replace(regEx, '');\n    return el;\n}\n\n//...\n\nlet sidebar = document.getElementById(\"sidebar\");\nremoveClassByPrefix(sidebar, \"open\");\n```\n","tags":["DOM"],"categories":["JavaScript"]},{"title":"Use and manage multiple Node.js versions on Windows 10","url":"/categories/Tools/Use-and-manage-multiple-Node-js-versions-on-Windows-10/","content":"\nFor a new project I needed to have Node 14 running on my Windows 10 machine, so installation was done quickly via downloading and running the setup file.\n\nA short time later I wanted to write a new blog post here on kiko.io, which depends on the Node.js based static site generator [Hexo](https://hexo.io) ... and ran into several problems.\n\nFirst of all my hero image processing script (see {% post_link Automatic-Header-Images-in-Hexo %}) returned an exception. The script uses [hexo-fs](https://github.com/hexojs/hexo-fs) and the problem is known quite some time, according to this [Github issue](https://github.com/hexojs/hexo/issues/4263). The guys recommend to downgrade to an older version of Node.js ... :(\n\nOk ... I needed a solution to install multiple Node.js versions and switch between them, depending on which project I want to work on ... and there is one: **[nvm-windows](https://github.com/coreybutler/nvm-windows)** by Corey Butler!\n\n<!-- more -->\n\nThis **Node.js Version Manager for Windows** is working similar to the often mentioned [n](https://github.com/tj/n) and [nvm](https://github.com/nvm-sh/nvm), which support Linux and Mac only. The latest release of **nvm-windows** can be downloaded [here](https://github.com/coreybutler/nvm-windows/releases).\n\nThe setup is pretty straight forward and asks you at the very end, if the currently installed Node.js version should be managed by it. Confirmed...\n\nThere are just a few commands to know and to run in the command line:\n\n**List available Node.js versions**\n```ps\n  nvm list available\n```\n![nvm install](Use-and-manage-multiple-Node-js-versions-on-Windows-10/nvm-list-available.png)\n\n**Install needed Node.js version**\n```ps\n  nvm install <version>\n```\n![nvm install](Use-and-manage-multiple-Node-js-versions-on-Windows-10/nvm-install.png)\n\n***Switch to particular Node.js version***\n```ps\n  nvm use <version>\n```\n![nvm use](Use-and-manage-multiple-Node-js-versions-on-Windows-10/nvm-use.png)\n\n***List all installed Node.js versions***\n```ps\n  nvm ls\n```\n![nvm ls](Use-and-manage-multiple-Node-js-versions-on-Windows-10/nvm-ls.png)\n\n{% alertbox exclamation %}\n  In case you have Node.js version dependend utilities installed globally, you need to run ``npm install -g`` after switch.\n{% endalertbox %}\n\n{% moreinfo '{ \"list\": [\n  [\n    \"Github\", \"coreybutler/nvm-windows\",\n    \"https://github.com/coreybutler/nvm-windows\"\n  ],\n  [\n    \"Microsoft Docs\", \"Set up your Node.js development environment directly on Windows\",\n    \"https://docs.microsoft.com/en-us/windows/nodejs/setup-on-windows\"\n  ]\n]}' %}","tags":["Hexo","Windows","Node.js"],"categories":["Tools"]},{"title":"How to prevent duplicate events","url":"/categories/JavaScript/How-to-prevent-duplicate-events/","content":"\nI'm working on a new web app that contains a sliding out panel with some additional information on the selected element. This panel can be closed by the user via the ESC key. The implementation on initializing the panel seems very straight forward:\n\n```js\nclass Panel() {\n  init() {\n\n    document.addEventListener(\"keydown\", function(event) {\n      if(event.key === \"Escape\"){\n        //close the panel\n      }\n    });\n    \n  }\n}\n```\n\nProblem is: the panel, which is part of the basic HTML, will be initialized with its content and functionality in a ES6 class. So ... on every init, another event listener is added.\n\nYou can easily figure that out, by calling `getEventListeners(document)` in the Chrome DevTools:\n\n![Chrome DevTools: Multiple Event Listeners](How-to-prevent-duplicate-events/chromedevtools-multiple-listeners.png)\n\n<!-- more -->\n\nAs there is no way in JS to find and replace the event which was previously added, we have to remove the existing event by using ``removeEventListener`` and add it again. Most important parameter on removing is the instance of the event handler, which was used the add the event previously.\n\n```js\nclass Panel() {\n  init() {\n\n    function onEscapeKey (event) {\n      if(event.key === \"Escape\"){\n        //close the panel\n      }\n    }\n    document.removeEventListener(\"keydown\", onEscapeKey);\n    document.addEventListener(\"keydown\", onEscapeKey);\n    \n  }\n}\n```\n\nBut ... as the handler ``onEscapeKey`` is defined in a class, every time a new instance of the class is created, the handler will be not the same as the previous one! We have to store the event handler globally...\n\n```js\nclass Panel() {\n  init() {\n\n    document.removeEventListener(\"keydown\", window.panelEscapeKeyHandler);\n    window.panelEscapeKeyHandler = function onEscapeKey(event) {\n      if(event.key === \"Escape\"){\n        //close the panel\n      }\n    };\n    document.addEventListener(\"keydown\", window.panelEscapeKeyHandler);\n    \n  }\n}\n```\n\nWorks!\n\n![Chrome DevTools: One Event Listener](How-to-prevent-duplicate-events/chromedevtools-one-listener.png)\n","tags":["Events"],"categories":["JavaScript"]},{"title":"Utilize a repository of reusable ES6 template literals","url":"/categories/JavaScript/Utilize-a-repository-of-reusable-ES6-template-literals/","content":"\nThe [**Template Literals**](http://es6-features.org/#StringInterpolation) introduced with ES6 are very useful to deal with multiline strings, because they support [embedded expressions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#Expression_interpolation). Gone are the days of endless string concatination or replacing variables in a string by using RegEx.\n\nInstead of... \n\n```js\nvar url = ...\nvar file = ...\n\nvar template = \n  '<div class=\"photo\">' + \n     '<a href=\"' + url + \"' + \n        'style=\"background-image: url(' + file + ')\"</a>' + \n  '</div>'\n```\n\n... you can write:\n\n```js\nvar url = ...\nvar file = ...\n\nvar template = `\n  <div class=\"photo\">\n    <a href=\"${url}/\"\n    style=\"background-image: url(${file});\"></a>\n  </div>\n`,\n```\n\nIt's much cleaner and easier to handle, as you can copy your needed HTML right into your code and surround it by **backtick** (!) characters. Insert your variable placeholders (expressions), indicated by a dollar sign and curly braces, and you are done.\n\nBut there is one \"restriction\", you have to be aware of: the interpolation (substitution of the expressions) is done at declaration time and not at runtime. You can't define your literals seperatly, take one and make your substitution as you need it, like you would do with [Handlebars](https://handlebarsjs.com/) or other templating engines. Therefore the name *template* literals is a bit misleading. But ... there is a way to achieve this anyway...\n\n<!-- more -->\n\n## Tagged Templates\n\nBeside Template Literals, ES6 introduced **Tagged Templates** (exact: Tagged Template Literals). These tags are functions, which allows you to parse a Template Literal. Definition is like this:\n\n```js\nfunction myTag(literals, ...expressions) {\n  //do the substitution and return a string\n}\n```\n\nYou can use these tags by prefixing you literal:\n```js\nmyTag`Hello ${firstName} ${lastName}!`\n```\n\nUsing Tagged Templates to build a template repository would mean, you have to write one tag function for every template ... doable, but time consuming.\n\n## Dynamic Tag Function\n\nTo avoid this, we can write a universal tag function, which utilizes the [Function constructor](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/Function), to create the tag function dynamically:\n\n```js\nfunction fillTemplate(templateString, templateVars) {\n\n  var func = new Function(\n    ...Object.keys(templateVars),  \n    \"return `\" + templateString + \"`;\")\n\n  return func(...Object.values(templateVars));\n}\n```\n\n{% alertbox warning %}\n    Don't use this approach on user inputs as expressions, to avoid XSS!\n{% endalertbox %}\n\n## Let's see an example...\n\nGiven is a tiny web app with the following structure:\n\n```html index.html\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>Reusable ES6 template literals</title>\n    <meta charset=\"UTF-8\" />\n    <link rel=\"stylesheet\" href=\"/src/style.css\">\n  </head>\n  <body>\n    <main id=\"main\"></main>\n    <script src=\"src/index.js\"></script>\n  </body>\n</html>\n```\n\n```js index.js\nimport { App } from \"./app.js\";\n\nconst app = new App();\n\napp.init();\n```\n\n```js app.js\nclass App {\n  init() {\n    //do something\n  }\n}\nexport { App };\n```\n\nWhat we want to do now, is to load some images into the `main` element, by using a more or less complex element structure:\n\n```html\n<div class=\"photo\">\n  <a href=\"<!-- Url to view the photo -->\"\n     style=\"background-image: url(<!-- Url of the photo file -->);\"></a>\n</div>\n```\n\nTo separate our templates from the main code, we create a template module, which contains the dynamic tag function from above and a `photo` template we want to use in our app\n\n```js template.js\nclass Templates {\n\n  //Template\n  photo(data) {\n    return this.fillTemplate(\n      `\n      <div class=\"photo\">\n        <a href=\"${data.url}/\"\n        style=\"background-image: url(${data.file});\"></a>\n      </div>\n      `,\n      data\n    );\n  }\n\n  //Dynamic Tag Function\n  fillTemplate(templateString, templateVars) {\n    var func = new Function(...Object.keys(templateVars),\n                           \"return `\" + templateString + \"`;\"\n    );\n    return func(...Object.values(templateVars));\n  }\n  \n}\nexport { Templates };\n```\n\nThe template retrieves a `data` object, with the values of the defined expressions, and calls the dynamic tag function on the literal template.\n\nThis we can use now in our app code:\n\n```js app.js\n//Import Template module\nimport { Templates } from \"./templates.js\";\n\nclass App {\n  init() {\n\n    //Initialize Templates\n    this._templates = new Templates();\n\n    //Insert photo into MAIN element\n    let main = document.getElementById(\"main\");\n    main.insertAdjacentHTML(\n      \"beforeend\",\n      this._templates.photo({\n        file: \"my-photo.jpg\",\n        url: \"https://link-to-my.photo.com\"\n      })\n    );\n\n  }\n}\nexport { App };\n```\n\nSee it live at [codesandbox.io](https://codesandbox.io/s/reusable-es6-template-literals-4iyor?file=/src/templates.js).\n\n{% moreinfo '{ \"list\": [\n  [\n    \"Stackoverflow\", \"Can ES6 template literals be substituted at runtime (or reused)?\",\n    \"https://stackoverflow.com/questions/30003353/can-es6-template-literals-be-substituted-at-runtime-or-reused\"\n  ],\n  [\n    \"Github/Adelphos\", \"ES6-Reuseable-Template\",\n    \"https://github.com/Adelphos/ES6-Reuseable-Template\"\n  ]\n]}' %}\n","tags":["ES6","Templating"],"categories":["JavaScript"]},{"title":"Spice Up Windows Terminal","url":"/categories/Tools/Spice-Up-Windows-Terminal/","content":"\nWorking with the PowerShell in 2020 means fun, because of the new [**Windows Terminal** (get it from Windows Store)](https://www.microsoft.com/en-us/p/windows-terminal/9n0dx20hk701). It has more power as the old Powershell Console and it is visually adaptable to your personal taste, by installing the wonderful theming engine [**oh-my-posh** from Jan De Dobbeleer](https://github.com/JanDeDobbeleer/oh-my-posh).\n\n![Original Terminal](Spice-Up-Windows-Terminal/terminal-original.png)\n\n![Terminal with oh-my-posh](Spice-Up-Windows-Terminal/terminal-oh-my-posh.png)\n\nTo get Oh-My-Posh properly run, there are several steps to do I want to show here in a nutshell...\n\n<!-- more -->\n\n## Step 1 -  Install a suitable font\nAs the theming engine uses Powerline glyphs, you need to install a font which support them, for example the new [**Cascadia Code PL** from Microsoft](https://github.com/microsoft/cascadia-code/releases). Download, unzip and install the OTF and/or TTF font files via context menu in your Windows Explorer.\n\n## Step 2 - Set new font in your settings\nOpen up you Terminal settings...\n\n![Windows Terminal Settings](Spice-Up-Windows-Terminal/terminal-settings.png)\n\n... and add following new line to the PowerShell section:\n\n``` JSON\n\"fontFace\": \"Cascadia Code PL\",\n```\n\n![Font](Spice-Up-Windows-Terminal/terminal-settings-font.png)\n\n## Step 3 - Install oh-my-posh\nFollowing PowerShell command installs the theming engine itself:\n\n```ps\nInstall-Module oh-my-posh -Scope CurrentUser\n```\n\nIf you want to display **Git status information** also, run this command:\n\n```ps\nInstall-Module posh-git -Scope CurrentUser\n```\n\nTo let the command-line editing environment to be customized install **PSReadline**:\n\n```ps\nInstall-Module -Name PSReadLine -Scope CurrentUser -Force -SkipPublisherCheck\n```\n\n## Step 4 - Load on startup\nIn order to load the theming engine in every new terminal window, edit your PowerShell profile by opening it up with the command ...\n\n```ps\nnotepad $PROFILE\n```\n\nand add following lines in the upcoming text file:\n\n```txt\nImport-Module oh-my-posh\nImport-Module posh-git\nSet-Theme Paradox\n```\n\n*Paradox* is one of 27 themes available. You will find all themes in your DOCUMENTS folder under ``..\\WindowsPowerShell\\Modules\\oh-my-posh\\<version>\\Themes`` and some visual representations at [https://github.com/JanDeDobbeleer/oh-my-posh?#themes](https://github.com/JanDeDobbeleer/oh-my-posh?#themes).\n\n\n{% moreinfo '{ \"list\": [\n  [\n    \"Windows Store\", \"Windows Terminal\",\n    \"https://www.microsoft.com/en-us/p/windows-terminal/9n0dx20hk701\"\n  ],\n  [\n    \"Microsoft\", \"Cascadia Code PL\",\n    \"https://github.com/microsoft/cascadia-code\"\n  ],\n  [\n    \"GitHub\", \"JanDeDobbeleer/oh-my-posh\",\n    \"https://github.com/JanDeDobbeleer/oh-my-posh\"\n  ],\n  [\n    \"Microsoft Docs\", \"Set up Powerline in Windows Terminal\",\n    \"https://docs.microsoft.com/de-de/windows/terminal/tutorials/powerline-setup\"\n  ],\n  [\n    \"Scott Hanselman\", \"How to make a pretty prompt in Windows Terminal with Powerline, Nerd Fonts, Cascadia Code, WSL, and oh-my-posh\",\n    \"https://www.hanselman.com/blog/how-to-make-a-pretty-prompt-in-windows-terminal-with-powerline-nerd-fonts-cascadia-code-wsl-and-ohmyposh\"\n  ],\n  [\n    \"Scott Hanselman\", \"Taking your PowerShell prompt to the next level with Windows Terminal and Oh my Posh 3\",\n    \"https://www.hanselman.com/blog/taking-your-powershell-prompt-to-the-next-level-with-windows-terminal-and-oh-my-posh-3\"\n  ]\n]}' %}\n","tags":["Windows","Theming","PowerShell"],"categories":["Tools"]},{"title":"Discoveries #5","url":"/categories/Discoveries/Discoveries-5/","content":"In this episode of the **Discoveries** (almost) everything is about images and the web. There are so many pitfalls to do it wrong, but many more possibilities to do it right, especially with these resources I found in the last few weeks.\n\n{% anchorlist \n  \"ASP.NET Core Image Resizing Middleware|aspnet-core-image-resizing-middleware\" \n  \"Best way to lazy load images for maximum performance|best-way-lazy-load-images\" \n  \"image orientation on the web|image-orientation-on-the-web\" \n  \"cosha - Colorful shadows for your images|cosha\" \n  \"parax-bg - Parallax Backgrounds|parax-bg\" \n  \"parax - Parallax Elements|parax\" \n  \"Luminous Lightbox|luminous\" \n  \"Tiny-Swiper - Image Carousel|tiny-swiper\" \n%}\n\n<!-- more -->\n\n{% discovery \"ASP.NET Core Image Resizing Middleware\" \"Jeremy Paddison\" https://www.paddo.org/asp-net-core-image-resizing-middleware/ Discoveries-5 aspnet-core-image-resizing-middleware.png %}\n  Jeremy shows in his blog post the possibilities of dealing with images in ASP.NET Core in terms of format, orientation and quality. A must read for every .NET developer.\n{% enddiscovery %}\n\n{% discovery \"Best way to lazy load images for maximum performance\" \"Adrian Bece\" https://blog.prototyp.digital/best-way-to-lazy-load-images-for-maximum-performance/ Discoveries-5 best-way-lazy-load-images.png %}\n  Delivering images on the web is difficult due to different devices and bandwidths. Adrian shows how to achieve a maximum of performance on lazy loading images via native JavaScript.\n{% enddiscovery %}\n\n{% discovery \"image orientation on the web\" \"Michael Scharnagl\" https://justmarkup.com/articles/2019-10-21-image-orientation/ Discoveries-5 image-orientation-on-the-web.png %}\n  Automatic uploading and viewing images fails sometimes on portrait shots, because of misintrepretated orientation information by the different browsers. Michael adresses this problem with a Node.JS solution.\n{% enddiscovery %}\n\n{% discovery \"cosha - Colorful shadows for your images\" \"Robin Löffel\" https://github.com/robinloeffel/cosha Discoveries-5 cosha.png %}\n  Adding a blurry shadow under an image to let the photo stand out from the background, is a nice technique to draw the users attention. Robin goes one step further with his JavaScript solution on colorful shadows, which represents the colors of the image.\n{% enddiscovery %}\n\n{% discovery \"parax-bg - Parallax Backgrounds\" \"Tobias Buschor\" https://github.com/nuxodin/parax-bg Discoveries-5 parax-bg.png %}\n  Parallaxing backgrounds are fairly attracting and so it is with Tobias' approach on that for developers: easy to use and fast.\n{% enddiscovery %}\n\n{% discovery \"parax - Parallax Elements\" \"Tobias Buschor\" https://github.com/nuxodin/parax Discoveries-5 parax.png %}\n  If you just want to parallax some elements instead of backgrounds, Tobias has also a solution for that: Parax.\n{% enddiscovery %}\n\n{% discovery \"Luminous Lightbox\" \"imgix\" https://github.com/imgix/luminous Discoveries-5 luminous.png %}\n  There are tons of image lightboxes out there and here is another one: Luminous from imgx. It is my favourite and I use it in this blog. Its lightweight and easy to use, for the user and the developer. A pearl...\n{% enddiscovery %}\n\n{% discovery \"Tiny-Swiper - Image Carousel\" \"Joe Harris\" https://tiny-swiper.joe223.com/docs/demo/ Discoveries-5 tiny-swiper.png %}\n  The same applies to image carousels, but Tiny-Swiper is here outstanding too. It is simple, but powerful and well documented. A must use...\n{% enddiscovery %}","tags":["Great Finds"],"categories":["Discoveries"]},{"title":"Indian Presets for Lightroom","url":"/categories/Photo-Editing/Indian-Presets-for-Lightroom/","content":"\nIn 2019 I was on a short, stressful business trip to Dehli, India and one night we had the opportunity to relax a bit by driving around the city and visit some beautiful places of interest. I had no gear at all, just my Sony smartphone, but it is remarkable how good this worked out.\n\n<!-- more -->\n\n## Indian Sunset\n\n{% image_compare \"indian-sunset-compare-1\" \"IMG_20191009_165823_HDR_ORIGINAL.jpg\" \"IMG_20191009_165823_HDR_PRESET_Sunset.jpg\" %}\n\n---\n\n{% image_compare \"indian-sunset-compare-2\" \"IMG_20191009_164343_HDR_ORIGINAL.jpg\" \"IMG_20191009_164343_HDR_PRESET_Sunset.jpg\" \"vertical\" %}\n\n{% download_link \"Lightroom Preset\" \"Indian Sunset.xmp\" %}\n","tags":["Lightroom","Presets"],"categories":["Photo-Editing"]},{"title":"Israeli Presets for Lightroom","url":"/categories/Photo-Editing/Israeli-Presets-for-Lightroom/","content":"\nI'm a travel and event photo enthusiast, which means I'm shooting a lot of photographs on vacation or at special events only a few times a year. After I'm back home and start the image processing, I develop a particular look for my images of the past vacation or event. This has a lot to do with my mood and is very intuitive. Not all images are the same in terms of composition and light and so I create usually 3 or 4 different presets each time during image processing.\n\nBack in 2019, I was traveling around Israel, a fascinating country where almost every wall has a story to tell and I was listening through my viewfinder. Here I want to share the presets with you...\n\n<!-- more -->\n\n## Israeli Colors\n\nThe mediaval walls of Jaffa glow in an inimitable way and brings other colors to shine the same way.\n\n{% image_compare \"israeli-colors-compare\" \"19-05 Israel-0078_ORIGINAL.jpg\" \"19-05 Israel-0078_PRESET_Colors.jpg\" %}\n\n{% download_link \"Lightroom Preset\" \"Israeli Colors.xmp\" %}\n\n---\n\n## Israeli Lights\n\nThe light in the eastern Mediterranean is stunning. The warm tone of the sand and the turquoise color of the water had to pop out.\n\n{% image_compare \"israeli-lights-compare\" \"19-05 Israel-0196_ORIGINAL.jpg\" \"19-05 Israel-0196_PRESET-Lights.jpg\" %}\n\n{% download_link \"Lightroom Preset\" \"Israeli Lights.xmp\" %}\n\n---\n\n## Israeli Drama\n\nA visit of Yad Vashem moved me a lot and this preset is a expression of that.\n\n{% image_compare \"israeli-drama-compare\" \"19-05 Israel-0733_ORIGINAL.jpg\" \"19-05 Israel-0733_PRESET_Drama.jpg\" %}\n\n{% download_link \"Lightroom Preset\" \"Israeli Drama.xmp\" %}\n\n---\n\n## Israeli Near Black\n\nIf you think of the tourists away, Jerusalem takes you to another level because of its age and history and nothing fits more to that than the sepia look of old pictures.\n\n{% image_compare \"israeli-near-black-compare\" \"19-05 Israel-0624_ORIGINAL.jpg\" \"19-05 Israel-0624_PRESET_Near Black.jpg\" %}\n\n{% download_link \"Lightroom Preset\" \"Israeli Near Black.xmp\" %}\n","tags":["Lightroom","Presets"],"categories":["Photo-Editing"]},{"title":"Folder based publishing in Lightroom","url":"/categories/Photo-Editing/Folder-based-publishing-in-Lightroom/","content":"\nIn all times photography was a process: First you shoot you images, then you edit them and in the third step you publish them elsewhere.\n\nToday **Adobe Lightroom** is a de-facto standard in photo processing, especially when you shoot RAW images. And I mean [Lightroom Classic](https://www.adobe.com/de/products/photoshop-lightroom-classic.html) and not the new web/smartphone based software, which doesn't come even close to the desktop application yet.\n\nI use Lightroom for all purposes after I shot my images: editing, cataloguing, managing and ... publishing. On publishing Lightroom offers you two approaches: *Export* and *Publish*. While *Export* is mainly for creating JPG copies of edited RAW images, *Publish* goes one step further and gives you the ability to do \"something\" with your exported JPG's, for example upload them on Flickr, Instagram, 500px or to your own web server via FTP. Major difference to *Export* is, that *Publish* keeps your images in sync. Everytime you change the source images, the defined publish services recognizes and offer you to re-publish your image.\n\n![Lightroom Publish](Folder-based-publishing-in-Lightroom/lr-re-publish.png)\n\nIn the past years I tried a lot of Lightroom plugins for publishing on several platforms, but it doesn't work out for long, because all these platforms change their API almost every year (or are stamped) and the sparely maintained 3rd party plugins break.\n\nMy workflow for quite some time is to publish my photos on the hard drive, in a folder, which is synced via Dropbox with the cloud. From there I distribute them further.\n\n<!-- more -->\n\nImportant on this approach is, to have a coherent output folder structure in order find a particular image afterwards.\n\nI store my RAW images on an external hard drive in a structure like this:\n\n```txt\n<Drive:\\>\n  ->  Fotos\n      ->  <Year>\n          ->  <Year>-<Month> <Eventname>\n```\n\nFirst step after shooting is to copy all RAW files from the SD Card into a new subfolder of the current year. From there I import them into my Lightroom catalog.\n\nAfter sorting, rejecting, editing and flagging in Lightroom, I have to \"export\" the 4- and 5-star rated images into the cloud. There I have a slightly different structure, with a different root folder name and without the year:\n\n```txt\n<Dropbox>\n  ->  Photos\n      ->  <Year>-<Month> <Eventname>\n```\n\nWith the built-in \"Hard Drive\" publish service of Lightroom, it is feasible to \"export\" the images, but not in my wanted folder structure, because it is not possible to use the sources' folder name as output folder name by option. It has to be specified manually each time, which is not very comfortable.\n\n![Hard Disk Publish Service](Folder-based-publishing-in-Lightroom/publish-hard-disk.png)\n\n## Plugin to the rescue\n\nJeffrey Friedl, who is in the Lightroom plugin business about a decade, offers two plugins, which can solve the problem easily:\n\n1. [Jeffrey’s \"**Folder Publisher**\" Lightroom Plugin](http://regex.info/blog/lightroom-goodies/folder-publisher)  \n  Exports to disk in a folder hierarchy that mimics the folder hierarchy in your Lightroom catalog\n\nThis one helps me not much, because my output folder would look like this:\n\n```txt\n<Dropbox>\n  ->  Photos\n      ->  Fotos\n          -> <Year>\n              ->  <Year>-<Month> <Eventname>\n```\n\n2. [Jeffrey’s \"**Collection Publisher**” Lightroom Plugin](http://regex.info/blog/lightroom-goodies/collection-publisher)  \nExports to local disk in a folder hierarchy that mimics the collection hierarchy you build within Lightroom\n\nBesides the commonality of defining a root folder, where the files are exported to, Jeffrey's plugin has much more options to improve the export.\n\n![Collection Publisher](Folder-based-publishing-in-Lightroom/collection-publisher.png)\n\nAs the main feature, you can create collections within the plugin to define the export targets:\n\n![Create Collection](Folder-based-publishing-in-Lightroom/collection-publisher-create.png)\n\nIn the options of these collections, you can set several templates (variables) to let the plugin name the export subfolder automatically:  \n\n![Collection Options](Folder-based-publishing-in-Lightroom/collection-publisher-options.png)\n\nBy using [Smart Collections](https://helpx.adobe.com/lightroom-classic/help/photo-collections.html#work_with_smart_collections) you don't even need to drag & drop your images to publish to the publish collection. Lightroom will do this auto-magically.\n","tags":["Lightroom","Publishing","Plugin"],"categories":["Photo-Editing"]},{"title":"Discoveries #4","url":"/categories/Discoveries/Discoveries-4/","content":"It is so amazing how many cool stuff developers around the world are producing these days. Or they do what they always do, but I have more time to read about their smart ideas and solutions. This month I have 8 pearls for you:\n\n{% anchorlist \n  \"waitForElementTransition()|waitForElementTransition\" \n  \"Using Flexbox and text ellipsis together|flexbox-and-ellipsis\" \n  \"Using Trello as a Super Simple CMS|using-trello-as-cms\" \n  \"Memorize Scroll Position Across Page Loads|memorize-scroll-position\" \n  \"A free guide to HTML5 &lt;head&gt; elements|head-dev\" \n  \"BVSelect - Vanilla JS|bv-select\" \n  \"A clock that represents the time as hex color values|hex-time\" \n  \"Animate.css - Just-add-water CSS animations|animate-css\"\n%}\n<!-- more -->\n\n{% discovery \"waitForElementTransition()\" \"Mark Kennedy\" https://github.com/mkay581/wait-for-element-transition Discoveries-4 waitForElementTransition.png %}\n  In these days a good UI doesn't do without some animations or transitions and it is always advisible to use CSS for it, if possible. Marks shows us with his solution, how to wait in JavaScript for a transition to finish, before we continue to do something else in JS.\n{% enddiscovery %}\n\n{% discovery \"Using Flexbox and text ellipsis together\" \"Leonardo Faria\" https://leonardofaria.net/2020/07/18/using-flexbox-and-text-ellipsis-together/ Discoveries-4 flexbox-and-ellipsis.png %}\n  In case you offer downloads with very long file names from time to time, you might use CSS's ellipsis to cut it down. But you always loose the last three chars, the file extension. Leonardo show us, how to avoid that, by using a clever mix of ellipsis and flexbox.\n{% enddiscovery %}\n\n{% discovery \"Using Trello as a Super Simple CMS\" \"Phil Hawksworth\" https://css-tricks.com/using-trello-as-a-super-simple-cms Discoveries-4 using-trello-as-cms.png %}\n  As I love Trello and use it daily, among others as a reading list (see {% post_link Add-website-to-Trello-card-the-better-way %}), I can't wait to try Phils approach to process Trello boards automatically.\n{% enddiscovery %}\n\n{% discovery \"Memorize Scroll Position Across Page Loads\" \"Chris Coyier\" \"https://css-tricks.com/memorize-scroll-position-across-page-loads/\" Discoveries-4 memorize-scroll-position.png %}\n  Chris shows Hakim El Hattab's trick, how to store the current scroll position and restore it when user comes back. Simple, but a gain in usability.\n{% enddiscovery %}\n\n{% discovery \"A free guide to HTML5 &lt;head&gt; elements\" \"Josh Buchea\" https://htmlhead.dev Discoveries-4 head-dev.png %}\n  Doing your Web Developer job right, means you have to be aware of the META tags in your HTML. htmlhead.dev is a good reference, because it lists and describes mostly all known META tags.\n{% enddiscovery %}\n\n{% discovery \"BVSelect - Vanilla JS\" \"Bruno Vieira\" https://bmsvieira.github.io/BVSelect-VanillaJS Discoveries-4 bv-select.png %}\n  There are many HTML/Javascript driven dropdowns out there. So has Bruno, but his solution don't even looks nice, it is written in ES6, has no dependencies and is dead simple to use.\n{% enddiscovery %}\n\n{% discovery \"A clock that represents the time as hex color values\" \"Jamel Hammoud\" https://github.com/JamelHammoud/hextime Discoveries-4 hex-time.png %}\n  The time is shown mostly as a six digit number ... Hours, Minutes and Seconds, with a leading 0. Color Hex codes have also 6 digits and Jamel  the idea to bring both together...\n{% enddiscovery %}\n\n{% discovery \"Animate.css - Just-add-water CSS animations\" \"Daniel Eden\" https://animate.style Discoveries-4 animate-css.png %}\n  Daniel and his buddies offers an Stylesheet with dozens of cool and easy to use text animations.\n{% enddiscovery %}","tags":["Great Finds"],"categories":["Discoveries"]},{"title":"Implement source switch for SPA","url":"/categories/JavaScript/Implement-source-switch-for-SPA/","content":"A while ago I wrote a Single Page Application (SPA) with jQuery and and decided to use some useful plugins to avoid reinventing the wheel. To keep the delivered sources small, I used the bundler [Gulp](https://gulpjs.com/), to pack all JS plugins in a single file and another one for my custom JS code. I used the same procedure with the CSS files.\n\nThe SPA contained only a single HTML file in which all bundeled sources and needed HTML template blocks were included, in order to load most of the stuff while starting the app, when the users sees a GMail-like  loading screen.\n\nBut the whole thing had one disadvantage: Debugging for example in Chrome Dev Tool is not a joy, if the code is packed with [Gulp Concat](https://www.npmjs.com/package/gulp-concat) and [Gulp Uglify](https://www.npmjs.com/package/gulp-concat). It would be much more convenient, if the source loading can be done depending on the environment.\n\n<!-- more -->\n\nFirst step was to replace the SCRIPT and LINK tags in die ``index.html`` with a dynamic loading approach using JavaScript.\n\n## Dynamic JS loading\n\nFor some custom code it was necessary to load the plugins previously, because of dependencies.\n\n```js\nfunction addScriptAsync(url) {\n  return new Promise(function(resolve, reject) {\n\n    var script = document.createElement(\"script\");\n    script.type = \"text/javascript\";\n    script.src = url;\n\n    script.addEventListener(\"load\", function() {\n      resolve(script);\n    }, false);\n\n    script.addEventListener(\"error\", function() {\n      reject(script);\n    }, false);\n\n    document.getElementsByTagName('head')[0].appendChild(script);\n  });\n}\n```\n\nBy returning a ``Promise``, the calling code is able to wait for a dependent source to load:\n\n```js\naddScriptAsync(\"Build/vendor.min.js\").then(function() {\n  addScriptAsync(\"Build/custom.min.js\");\n});\n```\n\n## Dynamic CSS loading\n\nLoading CSS is pretty straightforward and includes an ``id`` as parameter, in order to be able to access the style afterwards, for example when tehh user is chanhing the SPA's theme: \n\n```js\nfunction addStylesheet(url, id) {\n\n  var stylesheet = document.createElement('link');\n  stylesheet.rel = 'stylesheet';\n  stylesheet.type = 'text/css';\n  stylesheet.href = url;\n\n  if (id) { stylesheet.setAttribute(\"id\", id); }\n  document.getElementsByTagName('head')[0].appendChild(stylesheet);\n}\n```\n\n```js\naddStylesheet(\"Build/vendor.css\");\naddStylesheet(\"Build/custom.css\");\n```\n\n## Consider the environment\n\nNow everything was set up to implement a switch, depending on whether the SPA was started locally or in production.\n\n```js\nvar _DEV = (window.location.hostname.indexOf(\"localhost\") !== -1);\n\naddStylesheet(\"Build/vendor.css\");\nif (_DEV) {\n  addStylesheet(\"Libraries/styles.css\");\n  addStylesheet(\"Libraries/helpers.css\");\n  ...\n} else {\n  addStylesheet(\"Build/custom.css\");\n}\n\naddScriptAsync(\"Build/vendor.min.js\").then(function() {\n  if (_DEV) {\n    addScriptAsync(\"Libraries/prototypes.js\")\n      .then(function() { return addScriptAsync(\"Libraries/tools.js\"); })\n      .then(function() { return addScriptAsync(\"Libraries/app.js\"); })\n      ...\n  } else {\n    return addScriptAsync(\"Build/custom.min.js\");\n  }\n})\n\n```\n\n","tags":["SPA","Bundling"],"categories":["JavaScript"]},{"title":"Show related posts in Hexo","url":"/categories/Tools/Show-related-posts-in-Hexo/","content":"It is always nice to point the readers of your blog's articles to related posts, they might be interested in. They stay a little longer to understand what you have to offer and increases the likelihood that they become loyal readers, followers or subscribers. Related posts has become a standard on delivering news and posts.\n\nIn the default Hexo theme **Landscape**, on which this blog is based, there is no such function built in, but as the Hexo community is very busy, there are some plugins you can use.\n\n<!-- more -->\n\n## Plugin: hexo-list-related-posts\n\nThis plugin, available at [GitHub](https://github.com/nkmk/hexo-list-related-posts) is pretty lean and generates a list of links to related posts based on tags. It just counts how often a tag is occuring and shows a list of related posts either by count descending or randomly.\n\n**Advantage**:\n\n* Easy and fast\n\n**Disadvantage**:\n\n* Necessity of a sophisticated tag system\n* Technical approach\n\n## Plugin: hexo-related-posts\n\n[Sergey Zwezdin](https://github.com/sergeyzwezdin/hexo-related-posts) made much more effort in his solution. The plugins depends on statistic methodologies like [Stemming](https://en.wikipedia.org/wiki/Stemming) and [TF/IDF](https://en.wikipedia.org/wiki/Tf%E2%80%93idf), provided by the Node library [Natural](https://github.com/NaturalNode/natural). It has plenty setting options like weighting and reserved words in order to optimize results.\n\n**Advantages**:\n\n* Much better results\n\n**Disadvantages**:\n\n* Huge installation, because of many dependent Node modules\n* Necessity of maintaining reserved words\n* Technical approach\n\n## Manually Curated\n\nOne point, that no technical solution can achieve is: you can guide the reader through your blog, by pointing out posts, which doesn't really belong to the topic, but tries to give him a wider perspective on your thoughts or work. This is only possible, if you link the related posts manually. Here is a way to implement the requirements...\n\nThe right place to store related posts is in the [Frontmatter](https://hexo.io/docs/front-matter.html) of your article. Create a list below the keyword ``related`` and take the slug (name of the post file) of the posts you want to show below the article as entries:\n\n```yaml\ntitle: My New fancy Post\nrelated:\n  - my-other-post\n  - one-of-my-first-posts\n  - yet-another-post\n```\n\nIn your ``article.ejs`` add a new partial called **related** to the place where it should be shown under the content of the actual article:\n\n```html\n<article \n  id=\"<%= post.layout %>-<%= post.slug %>\" \n  class=\"article article-type-<%= post.layout %>\" \n  itemscope itemprop=\"blogPost\">\n  \n  ...\n\n  <div class=\"article-inner\">\n    <%- post.content %>\n  </div>\n\n  <% if (!index){ %>\n\n    <!-- NEW RELATED PARTIAL -->\n    <%- partial('post/related') %>\n\n    <%- partial('post/comments') %>\n    <%- partial('post/nav') %>\n  <% } %>\n\n</article>\n```\n\nIn the folder ``themes/landscape/layout/_partial/post``, where all partials are stored which belongs to posts, create the new partial file:\n\n```html related.ejs\n<% if (post.related && post.related.length){ %>\n  <div class=\"article-related\">\n    <h2>Related</h2>\n    <div class=\"archives\">\n\n      <!-- Loop through the Frontmatter list of RELATED posts -->  \n      <% post.related.forEach(function(item) { %>\n\n        <!--Determine the post(s) with the given slug -->  \n        <%\n          var posts = site.posts.filter(function(post) {\n            return post.slug.toLowerCase() === item.toLowerCase();\n          });\n        %>\n\n        <!-- Loop through the post(s) and render the archive panel -->\n        <% posts.each(function(post) { %>\n          <%- partial('../archive-post', { post: post, show_link: true }) %>\n        <% }); %>\n\n      <% }); %>\n\n    </div>\n  </div>\n<% } %>\n```\n\n<small><em>(Remove the comments, because they doesn't belong to EJS)</em></small>\n\nIn this partial we loop through the Frontmatter list of related posts, determine the post by the given slug and render an archive panel for each post.\n\nThe list ``site.posts`` should always contain a slug just once, therefore getting an array of posts and looping is just a precuation.\n\nWhat you are getting you can see below...","tags":["Hexo","Blogging"],"categories":["Tools"]},{"title":"Discoveries #3 - Tutorials","url":"/categories/Discoveries/Discoveries-3-Tutorials/","content":"Some articles I stumble upon in my daily routine of reading news and blogs are diving very deep in a certain topic, especially if they are describing the basics of techniques I use every day. \n\nAll of the following reading tips are of the type \"ahh, that's why this works like that\" or \"uuh, I just scatch on the surface on that\". Take your time and read the articles in detail. We all never stop learning and it's a pleasure to do so...\n\n**CSS**\n\n{% anchorlist \n  \"CSS Viewport Units|css-viewport-units\" \n  \"Grid for layout, Flexbox for components|grid-for-layout-flexbox-for-components\" \n  \"How CSS Perspective Works|how-css-perspective-works\" \n  \"Linearly Scale font-size with CSS clamp() Based on the Viewport|linearly-scale-font-size-with-clamp\" \n  \"Learn CSS Centering|centering-in-css\" \n%}\n\n**JavaScript**\n\n{% anchorlist \n  \"The Flavors of Object-Oriented Programming (in JavaScript)|the-flavors-of-object-oriented-programming\" \n  \"Understanding the Event Loop, Callbacks, Promises, and Async/Await in JavaScript|understanding-the-event-loop\" \n%}\n\n<!-- more -->\n\n{% discovery 'CSS Viewport Units' 'Ahmad Shadeed' https://ishadeed.com/article/viewport-units Discoveries-3-Tutorials css-viewport-units.png %}\nAhmad is a true master of CSS and describes complex topics in an understandable way. Here he deals with the different Viewport Units: how they are calculated and how to use them properly.\n{% enddiscovery %}\n\n{% discovery 'Grid for layout, Flexbox for components' 'Ahmad Shadeed' https://ishadeed.com/article/grid-layout-flexbox-components Discoveries-3-Tutorials grid-for-layout-flexbox-for-components.png %}\nAnother one from Ahmad. Here he talks about the usage of Grid and/or Flexbox. Both techniques have their purpose and he shows when to use this or that.\n{% enddiscovery %}\n\n{% discovery 'How CSS Perspective Works' 'Amit Sheen' https://css-tricks.com/how-css-perspective-works Discoveries-3-Tutorials how-css-perspective-works.png %}\nAmit shows in this tutorial how to deal with perspective on using transform and animation in CSS. A true eye opener...\n{% enddiscovery %}\n\n{% discovery 'Linearly Scale font-size with CSS clamp() Based on the Viewport' 'Pedro Rodriguez' 'https://css-tricks.com/linearly-scale-font-size-with-css-clamp-based-on-the-viewport' Discoveries-3-Tutorials linearly-scale-font-size-with-clamp.png %}\nFew of us really deal with repsonsive typography. We fiddle arounf with ``line-height`` and ``font-size`` to achieve an B+ effect. Pedro shows how do it right with ``clamp()`` ... and it is amazing.\n{% enddiscovery %}\n\n{% discovery 'Centering in CSS' 'Ahmad Shadeed' https://ishadeed.com/article/learn-css-centering Discoveries-3-Tutorials centering-in-css.png %}\nAhmad again (I told you, he is amazing). In this tutorial he goes through every technique to center stuff in CSS. Never again google 'center text flexbox'...\n{% enddiscovery %}\n\n{% discovery 'The Flavors of Object-Oriented Programming (in JavaScript)' 'Zell Liew' https://css-tricks.com/the-flavors-of-object-oriented-programming-in-javascript Discoveries-3-Tutorials the-flavors-of-object-oriented-programming.png %}\nThere are different methods to 'organize' your JavaScript code. Zell shows the possibilities and pitfalls of techniques like Constructor Functions, Classes, Factory Functions and OLOO. Huge post, but couldn't stop reading...\n{% enddiscovery %}\n\n{% discovery 'Understanding the Event Loop, Callbacks, Promises, and Async/Await in JavaScript' 'Tania Rascia' 'https://www-digitalocean-com.cdn.ampproject.org/v/s/www.digitalocean.com/community/tutorials/understanding-the-event-loop-callbacks-promises-and-async-await-in-javascript.amp?usqp=mq331AQFKAGwASA%3D&amp_js_v=0.1' Discoveries-3-Tutorials understanding-the-event-loop.png %}\nTanias deep knowledge of asynchronous JavaScript techniques and its basics is as long as this tutorials title and its Url. A must-read.\n{% enddiscovery %}\n","tags":["Great Finds"],"categories":["Discoveries"]},{"title":"Device Class Detection in JavaScript","url":"/categories/JavaScript/Device-Class-Detection-in-JavaScript/","content":"In some occasions it is necessary to know which device a user is using while writing JavaScript Web Apps. Should be nothing regarding layout, because for this we have [``CSS Media Queries``](https://developer.mozilla.org/de/docs/Web/CSS/Media_Queries/Using_media_queries). \n\nSomewhere around 2011 W3C introduced [``matchMedia()``](https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia), which *returns a MediaQueryList object that can be used to detemnine if the document matches the media query string.* The using is pretty straightforward and feels a bit like RegEx matching in JS:\n\n```js\nconst mediaQuery = window.matchMedia('(min-width: 1025px)')\nif (mediaQuery.matches) {\n  // do something...  \n}\n```\n\nIf you are interested in this API, you will find good introductions to the topic [here](https://css-tricks.com/working-with-javascript-media-queries/), [here](https://hacks.mozilla.org/2012/06/using-window-matchmedia-to-do-media-queries-in-javascript/) and [here (German)](https://www.mediaevent.de/javascript/window-matchMedia.html).\n\nOne point of criticism on this pure JS approach can be, that you have to maintain the breakpoints in addition to CSS ... **but why not use these existing breakpoints in JS**?\n\n<!-- more -->\n\nIf you implement a feature that is based on the different device classes, you don't have to determine the current class with dozens of lines of JavaScript code, if you just can ask the DOM.\n\n## The CSS/JS Breakpoint Hack\n\nFor this approach, we take advantage of the fact, that CSS can be used to define not only styles, but also content. We always use it, when showing an icon by using a symbol font like FontAwesome:\n\n```css\nmy-fancy-icon::before {\n  font-family: FontAwesome5Solid;\n  content: \"\\f186\";\n}\n```\n\nMixed with a ``@media`` rule, we can \"inject\" the needed device value into the DOM, for example into the ``BODY`` tag, but you can take whatever you want:\n\n```css\n@media (min-width: 1025px) {\n  body:before {\n    content: \"DESKTOP\";\n  }\n}\n```\n\nJust one line more in the masses of CSS code to make a Web App responsive, but with this one you can do without many lines of JS.\n\nNow you can read out this value via JavaScript by getting the styles of the tag and get the injected content:\n\n```js\n  var style = window.getComputedStyle(document.querySelector(\"body\"), \":before\");\n  var breakpoint = style.getPropertyValue(\"content\").replace(/\\\"/g, \"\");\n```\n\nIt is advisable to embed this request into an event listener of ``DOMContentLoaded``, because the rule has to be set, before you can access it.\n\nSee a simple working pen:\n\n{% codepen WNwWjBR 'CSS/JS Breakpoint Hack' css %}\n","tags":["Browser","CSS","MediaQuery"],"categories":["JavaScript"]},{"title":"404 Page in Hexo for GitHub Pages","url":"/categories/Tools/404-Page-in-Hexo-for-GitHub-Pages/","content":"As this blog is a static one, generated by [Hexo](https://hexo.io) and hostet at [GitHub](https://pages.github.com/), the page which was shown, when a user enters an Url which points to nowhere, was the default GitHub 404 page.\n\n![GitHub 404 Page](github-404-page.png)\n\n<!-- more -->\n\nNot optimal and should be solved by an own Hexo page, because **GitHub Pages allows you to deliver a custom 404 page** by creating simply a ``404.html`` in the root of the website.\n\nAs you can create separate pages in Hexo, this is done quickly by:\n\n```cmd\nhexo new page \"404\"\n```\n\nIt generates a new folder named ``404`` in your ``source`` folder, where a ``index.md`` is placed. In this file you can enter the text as Markdown  you want to show to the user, in case of a 404 error (page not found) occurs.\n\nOn generating the static files by ``hexo generate``, a subfolder ``404`` with a ``index.html`` will be created, which doesn't really work with GitHub Pages, because it needs a ``404.htm`` in the root.\n\nYou can fix this, by defining the ``permalink`` in the Frontmatter of your page:\n\n```yaml\n---\ntitle: 404\npermalink: /404.html\n---\n```\n\nExample ... click here: [https://kiko.io/no-page-here](https://kiko.io/no-page-here)","tags":["GitHub","Hexo","Error"],"categories":["Tools"]},{"title":"Pimping the Permalink","url":"/categories/JavaScript/Pimping-the-Permalink/","content":"\nUntil now I did not show the permalink under my posts in this blog, but in the past I had sometimes the need to pass one of the links and it was not very user-friendly, on desktop as well as on mobile. Not the One-Click experience I prefer.\n\nMy goal was to show the permalink and, even more important, provide a simple way to copy and to share. JavaScript to the rescue...\n\n<!-- more -->\n\n## Display\nAs I run my blog with [Hexo](https://hexo.io), I deal with ``EJS`` files. To show the permalink in my ``article.ejs``, was quite simple. First step was to create a new partial file named ``permalink.ejs``, to be called every time when the complete article has to be rendered:\n\n```js\n<% if (!index){ %>\n  <%- partial('post/permalink', { class_name: 'article-permalink' }) %>\n<% } %>\n```\n\nThe partial file looked like this in this step:\n\n```html\n<div class=\"<%= class_name %>\"\">\n    <a id=\"article-permalink\" href=\"<%- post.permalink %>\"><%- post.permalink %></a>\n</div>\n```\n\n## Copy\n\nAs I read a little bit about the possibilities to copy text into the clipboard via JavaScript on [MDN](https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Interact_with_the_clipboard), it became obvious that a link is not the best solution, because using the ``exeCommand`` needs to have something selected and this is difficult on anchors. Then ... do it with an input:\n\n```html\n<div class=\"<%= class_name %>\"\">\n    <input id=\"article-permalink\" value=\"<%- post.permalink %>\" />\n    <a id=\"action-copy\" class=\"article-action\" href=\"javascript:copyPermalink();\"></a>\n</div>\n<script>\n  var copyText = document.querySelector(\"#article-permalink\");\n  \n  //Disable Input by default\n  copyText.disabled = true;\n\n  function copyPermalink() {\n    //Enable Input\n    copyText.disabled = false;\n\n    //Select permalink text\n    copyText.select();\n\n    //Copy to clipboard\n    document.execCommand(\"copy\");\n\n    //Remove selection again\n    copyText.blur();\n\n    //Disable Input again\n    copyText.disabled = true;\n  }\n</script>\n```\n\nNice, but a user feedback, that the text has been copied to the clipboard, was advisable, because nothing is more annoying, when you click somewhere and nothing seems to happen. As I hate default browser confirmations and other distracting messaging methods, I wanted to use the input itself, by fading out the link text, replace it with a message and fade in the text again:\n\n![Copy Animation](Pimping-the-Permalink/copy-animation.gif)\n\nI extended my ``animation.styl`` (Hexo works with [Stylus](https://stylus-lang.com/)) with two keyframe animations ... one for fading in, one for fading out...\n\n```styl\n@keyframes fadeIn {\n  0% {\n    opacity:0;\n  }\n  100% {\n    opacity:1;\n  }\n}\n.fade-in-500\n  animation: fadeIn ease 0.5s;\n.fade-in-1000\n  animation: fadeIn ease 1s;\n\n@keyframes fadeOut {\n  0% {\n    opacity:1;\n  }\n  100% {\n    opacity:0;\n  }\n}\n.fade-out-500\n  animation: fadeOut ease 0.5s;\n.fade-out-1000\n  animation: fadeOut ease 1s;\n```\n\n... and wrote a setTimeout cascade to achive the effect:\n\n```html\n<div class=\"<%= class_name %>\"\">\n    <input id=\"article-permalink\" value=\"<%- post.permalink %>\" />\n    <a class=\"article-action action-copy\" href=\"javascript:copyPermalink();\"></a>\n</div>\n<script>\n  var copyText = document.querySelector(\"#article-permalink\");\n  copyText.disabled = true;\n  function copyPermalink() {\n      copyText.disabled = false;\n      copyText.select();\n      document.execCommand(\"copy\");\n      copyText.blur();\n      copyText.disabled = true;\n\n    //Store original text\n    var permalink = copyText.value;\n\n    //Start fading out\n    copyText.classList.add(\"fade-out-500\");\n\n    //Wait until animation is done\n    setTimeout(function(){\n\n        //Set message, remove fadout class and add start fading in\n        copyText.value = \"copied to clipboard\";\n        copyText.classList.remove(\"fade-out-500\");\n        copyText.classList.add(\"fade-in-1000\");\n\n        //Wait 2 seconds to show the message\n        setTimeout(function() {\n\n            //Start to fade out message\n            copyText.classList.add(\"fade-out-500\");\n\n            //Wait until animation is done\n            setTimeout(function() {\n\n                //Set original text again and remove fadout class\n                copyText.value = permalink;\n                copyText.classList.remove(\"fade-out-500\");\n\n                //Wait until animation is done\n                setTimeout(function() {\n\n                    //Remove fadeout class\n                    copyText.classList.remove(\"fade-in-1000\");\n                }, 500);\n            }, 500);\n        }, 2000);\n    }, 500);\n  }\n</script>\n```\n\n## Share\n\nThe second permalink feature was a little bit trickier, because I didn't want to use one of the sharing libraries out there, whose business model is based on my readers data (always keep conservative on implementing third party stuff, because you never know what they are doing with the data). But a couple of months ago I read about a new native browser API for WebApps on the rise: **Web Share API**.\n\nSince 2019 [W3C](https://www.w3.org/) is working on this API, *for sharing text, links and other content to an arbitrary destination of the user's choice*. On 27 August 2020 the published a [Working Draft](https://www.w3.org/TR/web-share/) and on 16 September 2020 the latest [Editors Draft](https://w3c.github.io/web-share/).\n\n![Can I Use - Web Share, state today](Pimping-the-Permalink/caniuse-web-share.png)\n\nBrand new stuff. The browser support is not the best yet, but it will be getting better in the near feature, especially as Edge Chrome is one of the early adopters.\n\n![Web Share in Edge Chrome](Pimping-the-Permalink/web-share-edge-chrome.png)\n\n[web.dev](https://web.dev/web-share/) lists important requirements on using this new feature in JavaScript:\n\n* It can only be used on a site that supports HTTPS\n* It must be invoked in response to a user action such as a click\n\nBut it can share URL's, text and even files! \n\nA raw implementation can be:\n\n```js\nif (navigator.share === undefined) {\n  navigator.share({\n    title: 'My Post',\n    url: 'https://my-domain.com/my-url',\n  })\n  .then(() => console.log('Successful share'))\n  .catch((error) => console.log('Error sharing', error));\n} else {\n  // fallback\n}\n```\n\nI refrain to implement a fallback, rather I would like to show the appropriate button only to those users, whose browser supports it:\n\n```html\n<div class=\"<%= class_name %>\"\">\n    <input id=\"article-permalink\" value=\"<%- post.permalink %>\" data-id=\"<%= post._id %>\" />\n    <a id=\"action-copy\" class=\"article-action\" href=\"javascript:copyPermalink();\"></a>\n    <a id=\"action-share\" class=\"article-action\" href=\"javascript:sharePermalink();\"></a>\n</div>\n<script>\n    function copyPermalink() {\n      -- SEE ABOVE\n    }\n\n    if (navigator.share === undefined) {\n        var shareLink = document.querySelector(\"#action-share\");\n        shareLink.style.display = \"none\";\n    }\n\n    function sharePermalink() {\n        navigator.share({\n            title: \"<%- post.title %>\",\n            url: \"<%- post.permalink %>\",\n        })\n    }\n</script>\n```\n\n{% moreinfo '{ \"list\": [\n  [\n  \"w3c.github.io\", \"W3C Web Share Test\",\n  \"https://w3c.github.io/web-share/demos/share-files.html\"\n  ],\n  [\n  \"heise Developer\", \"Features von übermorgen: Die Web Share API und die Web Share Target API (German)\",\n  \"https://www.heise.de/developer/artikel/Features-von-uebermorgen-Die-Web-Share-API-und-die-Web-Share-Target-API-3506197.html\"\n  ],\n  [\n  \"CSS-Tricks\", \"How to Use the Web Share API\",\n  \"https://css-tricks.com/how-to-use-the-web-share-api/\"\n  ]\n]}' %}\n","tags":["Hexo","CSS","Stylus","Share"],"categories":["JavaScript"]},{"title":"Discoveries #2","url":"/categories/Discoveries/Discoveries-2/","content":"New month, new discoveries. We will deal with key bindings, downloads on the fly, a lot of animations and contrasting images. Have fun, trying out these stunning solutions.\n\n{% anchorlist \n  \"tinykeys - Modern library for keybindings|tinykeys\" \n  \"Creating files in JavaScript in your browser|creating-files-in-javascript\" \n  \"CSS Animated Google Fonts|css-animated-fonts\" \n  \"Skeleton Screen CSS|skeleton-screen-css\" \n  \"More Control Over CSS Borders With background-image|more-control-over-css-borders\" \n  \"A CSS-only, animated, wrapping underline|css-only-animated-wrapping-underline\" \n  \"Nailing the Perfect Contrast Between Light Text and a Background Image|nailing-the-perfect-contrast\" \n  \"Contrast.js|contrast-js\" \n%}\n<!-- more -->\n\n{% discovery 'tinykeys - Modern library for keybindings' 'Jamie Kyle' https://jamiebuilds.github.io/tinykeys Discoveries-2 tinykeys.png %}\n  Very easy to use key binding library for JavaScript. Supports key sequences and modifier keys.\n{% enddiscovery %}\n\n{% discovery 'Creating files in JavaScript in your browser' 'Kilian Valkhof' 'https://kilianvalkhof.com/2020/javascript/creating-files-in-javascript-in-your-browser' Discoveries-2 creating-files-in-javascript.png %}\n  Kilian shows how to prepare data in JavaScript and offer them to download on the fly, without the use of storing a file.\n{% enddiscovery %}\n\n{% discovery 'CSS Animated Google Fonts' 'Jhey Tompkins' https://dev.to/jh3y/animated-google-fonts-193d Discoveries-2 css-animated-fonts.png %}\n  As Google Fonts now supports variable fonts, Jhey shows a solution how to create neat font animations with them.\n{% enddiscovery %}\n\n{% discovery 'Skeleton Screen CSS' 'Dmitriy Kuznetsov' https://github.com/nullilac/skeleton-screen-css Discoveries-2 skeleton-screen-css.png %}\n  When loading data on demand, it is sometimes advisable to show placeholders, where the data will be filled in. Dimitriy has founded a CSS framework for these skeletons.\n{% enddiscovery %}\n\n{% discovery 'More Control Over CSS Borders With background-image' 'Chris Coyier' 'https://css-tricks.com/more-control-over-css-borders-with-background-image' Discoveries-2 more-control-over-css-borders.png %}\n  Borders are used to seperate things in a layout, but the build-in possibilities of CSS are restricted. Chris found a way by pimping borders up, using background images.\n{% enddiscovery %}\n\n{% discovery 'A CSS-only, animated, wrapping underline' 'Nicky Meuleman' https://nickymeuleman.netlify.app/blog/css-animated-wrapping-underline Discoveries-2 css-only-animated-wrapping-underline.png %}\n  As Chris did for the borders, Nick's doing on underlined links. An end to boring rigid unterlines, let's animate them.\n{% enddiscovery %}\n\n{% discovery 'Nailing the Perfect Contrast Between Light Text and a Background Image' 'Yaphi Berhanu' https://css-tricks.com/nailing-the-perfect-contrast-between-light-text-and-a-background-image Discoveries-2 nailing-the-perfect-contrast.png %}\n  Showing text on background images can be challenging due to contrast and readability. Yaphi has developed a solution to find always the right transparent overlay to show the most of the picture, but keep the text readable. Stunning...\n{% enddiscovery %}\n\n{% discovery 'Contrast.js' 'Misha Petrov' https://github.com/MishaPetrov/Contrast.js Discoveries-2 contrast-js.png %}\n  Misha addresses the same problem as Yaphi, showing text on background images, but goes a different way with his library, which is trying to find the best constrasting text color, even if the page is responsive.\n{% enddiscovery %}\n","tags":["Great Finds"],"categories":["Discoveries"]},{"title":"Add website to Trello card the better way","url":"/categories/Tools/Add-website-to-Trello-card-the-better-way/","content":"I was looking for a new way to store interesting website articles for reading later, as Pocket, my favourite tool until here, gets worse and worse. As I am a big [Trello](https://trello.com) fan, I wanted to give it a chance to be Pockets successor on my smartphone, where I'm reading mostly.\n\nOn installing the Trello Android app, you will find a new SHARE target **Add new Trello card**, which is comfortable to use:\n\n(Sry, for the German screenshots ;)\n\n![Android's default share with New Trello Card](android-share-website.png)\n\nThe result, website's title and Url set, is nice at best:\n\n![Trello card via Android Share](card-via-share.png)\n\n... but Trello has a **[Bookmarklet](https://trello.com/add-card)**, which does the job much better.\n\n<!-- more -->\n\n{% alertbox info %}\nThe following approach works best in the Google Chrome browser.\n{% endalertbox %}\n\nFirst, a Bookmarklet is a small piece of JavaScript, which is stored as a bookmark in your browser. As you can't actually create such a Bookmarklet in your Android Chrome, you have to create it in your desktop Chrome and switch on the bookmark sync of chrome. You should right away choose a short, concise name for the bookmark, so you find it easier in Android Chrome afterwards. I called it **2TrelloCard**, because few websites start with an number.\n\nAfter Chrome's sync is done, go to any website do you want to store as a Trello card. Now enter the Url box and type the name of the bookmarklet and select it.\n\nInstead of requesting a different page, Chrome executes the JavaScript of the Bookmarklet against the currently open website. This script shows a Trello dialog, where you can choose, which board and list the new card should be created on.\n\n![Open Bookmarklet on Website in Android Chrome](open-bookmarklet.gif)\n\nThis card creation method not only sets the title of the card, but fills the description with the [meta description](https://en.wikipedia.org/wiki/Meta_element) of the page, adds the first found meta image as cover and adds the Url as an attachment:\n\n![Trello card via Bookmarklet](card-via-bookmarklet.png)\n","tags":["Trello","Browser"],"categories":["Tools"]},{"title":"Horizontal navigation menu above an image","url":"/categories/UI-Design/Horizontal-navigation-menu-above-an-image/","content":"\nI changed the main menu of my blog, because I wanted to get rid of the hamburger menu on the upper left, which was shown only for smartphones, but was not really reachable conveniently. Beside that it made no sense to have different navigations for different devices.\n\nMy choice was to implement a horizontal scrolling menu, which can grow over the time, without any need of customizing. As I have quite big header images and I wanted to place the new navigation in a more accessible zone, I decided to place it at the bottom, but above the header image.\n\n<!-- more -->\n\nProblem was, not to cover a big part of the image with a full-colored or even semitransparent bar, by using a RGBA background color. I wanted it more translucent, but with enough contrast on bright images for the menu items to read.\n\nThe recently introduced W3C feature ``backdrop-filter`` was just the right thing for that. It is [supported by most modern browsers](https://caniuse.com/#feat=css-backdrop-filter), but it has to have a backup strategy for the rest of the bunch.\n\nThe HTML is simple: \n\n```html\n<nav id=\"header-nav\" role=\"navigation\">\n  <ul class=\"menu\">        \n  \n    <li class=\"menu-item\">\n      <a href=\"/first\" title=\"First\">\n        <span>First Item</span>\n      </a>\n    </li>\n            \n    <li class=\"menu-item\">\n      <a href=\"/second\" title=\"Second\">\n        <span>Second Item</span>\n      </a>\n    </li>\n    \n  </ul>\n</nav>\n```\n\nAnd here's the [Stylus](https://stylus-lang.com/docs) code for my approach:\n\n```styl\n#header-nav\n  position: absolute\n  bottom: 0\n  width: 100%\n  height: auto\n  box-sizing: content-box\n  overflow-x: scroll\n  overflow-y: hidden\n  \n  // BACKDROP-FILTER\n  backdrop-filter: blur(5px) brightness(90%)\n  @supports not (backdrop-filter: none)\n    background: rgba(0,0,0,0.25)\n  \n  // SCROLLBAR\n  &::-webkit-scrollbar\n    display: none\n  @supports not (webkit-scrollbar)  \n    scrollbar-width: none\n  \n  .menu\n    display: flex\n    list-style: none\n    margin: 0\n    padding: 0\n    \n    .menu-item\n      flex-basis: 80px \n      flex-shrink: 0\n      flex-grow: 1\n      max-width: 100px\n      margin: 0 2px\n      text-overflow: ellipsis;\n      \n      a\n        display: inline-block\n        width: 100%\n        padding: 10px 0\n        color: #ffffff\n        font-weight: bold\n        text-decoration: none\n        text-align: center        \n```\n\nThe navigation box is ``absolute`` positioned on the image, is as wide as the screen and scrolls exclusively horizontal. The items are a unordered list, with default width and arranged by ``flex``.\n\nIn case a browser doesn't understand ``backdrop-filter``, the navigation bar is shown with a classic alpha channel opacity.\n\nWhen having a horizontal scroll feature, the scrollbar shown by the browser is beyond beautiful. To prevent this, I used the CSS pseudo element ``::-webkit-scrollbar``, which is supported by WebKit and Blink bowsers, with a fallback for all other browsers. Both strategies allows to be still able to scroll. If you want to have a scrollbar, but not the built-in, I can only recommend to read something about styling scrollbars, like [here](https://css-tricks.com/custom-scrollbars-in-webkit/) and [here](https://css-tricks.com/the-current-state-of-styling-scrollbars/).","tags":["CSS","Stylus"],"categories":["UI-Design"]},{"title":"Change CSS class when element scrolls into viewport","url":"/categories/JavaScript/Change-CSS-class-when-element-scrolls-into-viewport/","content":"I had a neat visual gimmick on the start page of this blog, that the gray-scaled header image of a post in the list scaled up to 100% and became colored, when the user hovered over it:\n\n```css\n.article-inner .article-photo {\n  height: 150px;\n  width: 100%;\n  object-fit: cover;\n  transform: scale(1);\n  transform-style: preserve-3d;\n  transition: all ease-out 0.6s;\n  opacity: 0.3;\n  filter: grayscale(1) contrast(0.5);\n}\n.article-inner:hover .article-photo {\n  transform: scale(1.1);\n  opacity: 1;\n  filter: grayscale(0) contrast(1);\n}\n```\n\nNice, but a little bit useless on smartphones or tablets, where HOVER  doesn't really work.\n\n<!-- more -->\n\nA better idea was to transform the header image automatically, when it becomes visible to the user. So I changed the HOVER selector into a class...\n\n```css\n.article-photo.in-view {\n    transform: scale(1.1);\n    opacity: 1;\n    filter: grayscale(0) contrast(1);\n}\n```\n\n... and wrote a little JS function to determine the point, where the images is fully visible in the viewport:\n\n```js\nfunction isVisibleInViewPort(e) {\n  var viewTop = $(window).scrollTop();\n  var viewBottom = viewTop + $(window).height();\n  var eTop = $(e).offset().top;\n  var eBottom = eTop + $(e).height();\n  return ((eBottom <= viewBottom) && (eTop >= viewTop));\n}\n```\n\nThis function I had to bind to the windows scroll event to all header images only:\n\n```js\n$(window).on('scroll', function() {\n  $(\".article-photo\").each(function() {\n    if (isVisibleInViewPort($(this))) {\n      $(this).addClass(\"in-view\");\n    } else {\n      $(this).removeClass(\"in-view\");\n    }\n  });\n});\n```\n","tags":["jQuery","CSS"],"categories":["JavaScript"]},{"title":"Discoveries #1","url":"/categories/Discoveries/Discoveries-1/","content":"Due to my daily routine, I'm reading a lot of articles on the web regarding software development. \n\nThe most interesting stuff ends up on my Pocket list, which grows from day to day. Hard to find the pearls, when I need them. This recurring posts will throw a stroke of light on them.\n\nThey are maybe not the newest finds, not the fanciest ones, but remarkable for me and maybe for you also.\n\n{% anchorlist \n  \"Pure CSS halftone portrait from .jpg source|pure-css-halftone\" \n  \"ScrollTrigger - Highlight Text|scrolltrigger-highlight-text\" \n  \"Tiny long-press event handler|long-press-event-handler\" \n  \"Show More/Less|show-more\" \n  \"3D banners with ScrollTrigger|3d-banners-with-scrolltrigger\" \n  \"Image Compare Viewer|image-compare-viewer\" \n  \"Add Read or Scroll Progress Bar To A Website To Indicate Read Progress|read-progress-bar\" \n  \"How to Get a Progressive Web App into the Google Play Store|get-pwa-into-play-store\" \n%}\n<!-- more -->\n\n{% discovery 'Pure CSS halftone portrait from .jpg source' 'Ana Tudor' https://codepen.io/thebabydino/pen/LYGGwrm Discoveries-1 pure-css-halftone.jpg %}\n    Ana, author at [CSS Tricks](https://css-tricks.com/author/thebabydino/), shows a CSS-only technique to convert an image into a halftone one.\n{% enddiscovery %}\n\n{% discovery 'ScrollTrigger - Highlight Text' 'Ryan Mulligan' https://codepen.io/hexagoncircle/details/gOPMwvd Discoveries-1 scrolltrigger-highlight-text.jpg %}\n  We all highlight important text passages for our readers. Ryan does the in an unusual, butt cool way by using GSAP ScrollTrigger.\n{% enddiscovery %}\n\n{% discovery 'Tiny long-press event handler' 'MudOnTire' https://github.com/MudOnTire/web-long-press Discoveries-1 long-press-event-handler.jpg %}\n  Vanilla JS multi-instance handling of long press event the easy way.\n{% enddiscovery %}\n\n{% discovery 'Show More/Less' 'Grzegorz Tomicki' https://github.com/tomik23/show-more Discoveries-1 show-more.jpg %}\n  Grzegorz's little JS helper to cut texts, lists and even tables and show a MORE link.\n{% enddiscovery %}\n\n{% discovery '3D banners with ScrollTrigger' 'supamike' https://codepen.io/supamike/full/KKVqXmR Discoveries-1 3d-banners-with-scrolltrigger.jpg %}\n  Awesome 3D effect on scrolling made with [ScrollTrigger](https://greensock.com/scrolltrigger/).\n{% enddiscovery %}\n\n{% discovery 'Image Compare Viewer' 'Kyle Wetton' https://image-compare-viewer.netlify.app/ Discoveries-1 image-compare-viewer.jpg %}\n  Comparison slider in Vanilla JS to compare BEFORE and AFTER images, which works responsively on every device.\n{% enddiscovery %}\n\n{% discovery 'Add Read or Scroll Progress Bar To A Website To Indicate Read Progress' 'Jun711' https://jun711.github.io/web/add-scroll-progress-bar-to-a-website-to-indicate-read-progress/ Discoveries-1 read-progress-bar.jpg %}\n  A classic, simply explained...\n\n  Here another approach: [CSS Tricks: Reading Position Indicator](https://css-tricks.com/reading-position-indicator/)\n{% enddiscovery %}\n\n{% discovery 'How to Get a Progressive Web App into the Google Play Store' 'Mateusz Rybczonek' https://css-tricks.com/how-to-get-a-progressive-web-app-into-the-google-play-store/ Discoveries-1 get-pwa-into-play-store.jpg %}\n  Mateusz describes very detailed how offer your PWA as an App via Google Play Store.  \n{% enddiscovery %}\n","tags":["Great Finds"],"categories":["Discoveries"]},{"title":"Dopamine: How Software should be...","url":"/categories/Tools/Dopamine-How-Software-should-be/","content":"\nNot very often, when I'm looking for a new tool to replace some annoying or outdated piece of software, I have to blog about it ... but from time to time, I'm discovering pearls, worth to lose a word about.\n\nThe Windows 10 built-in media player Groove is (to be kind) ... nice, but it is more or less a leftover from Microsoft's attempt to create a competitor to iTunes, years ago. The crippeled UI is not the most modern and I was more than once annoyed about its usability.\n\nDoing a research for a good alternative, you stumble always over the usual suspects: MediaMonkey, Foobar2000, Winamp, VLC or even Media Player Classic!? Not modern enough, not user friendly enough, not lean enough.\n\nI really don't remember where, but there was a screenshot of a player, which seems to be the complete opposite of the others: **Dopamine** from [Digimezzo](https://www.digimezzo.com/software/), a project by the Belgian developer [Raphaël Godart](https://twitter.com/RaphaelGodart)...\n\n![Screenshot Dopamine 2.0.2.](Dopamine-How-Software-should-be/screenshot_dopamine_202.png)\n<!-- more -->\n\nBut that wasn't the best, especially for me. **Dopamine** is written in C# as a WPF application and it is OpenSource, [hosted on GitHub](https://github.com/digimezzo/dopamine-windows).\n\nThe software is so wonderful lean and its integrating in Windows 10 like a charm. It has several categories to find the right music to play, a context-sensitive search, a folder view, is able to import and manage playlists, a light and dark mode and translations into currently 28 languages. It can update your collection automatically from several folders, has two player modes and is incredibly fast.\n\nThe keep long story short ... I fell in love on **Dopamine**'s simple beauty and it is now my favourite player on Windows 10! \n\nThanks Raphaël...\n","tags":["Great Finds"],"categories":["Tools"]},{"title":"Using GitHub as Commenting Platform","url":"/categories/Tools/Using-GitHub-as-Commenting-Platform/","content":"\nIf you run a blog, it is always advisable to integrate a commenting system, in order to get feedback on your posts from your readers.\n\nSo did I, when I start this blog and I decided to use the [Disqus platform](https://disqus.com), as it was very easy to integrate ... but I always had a bad feeling about a third-party platform collecting data from my readers. Disqus is probably not without reason under criticism by many people in the community.\n\nAs I host this blog at GitHub (see [A New Blog (Part One): VS Code, Hexo and GitHub Pages](/categories/Tools/A-New-Blog-VS-Code-Hexo-and-GitHub-Pages/)) I was looking for a solution to host the comments also on my prefered platform. There were some solutions, which uses GitHub Issues for this and wanted to implement something like that someday.\n\n<!-- more -->\n\nAs I read a post from on [Thomas Lavesques' blog](https://thomaslevesque.com), to solve another problem, his commenting section came to my attention: **[utteranc.es](https://utteranc.es/)** ... exactly the solution I needed! Thanx guys...\n\nOn their website is a small configurator for a script to implement in each post, which needs only few information:\n\n* Name of the Repo\n* How the mapping of the post to the Issues should work\n* Name of the Theme, in order to fit to the colors of the blog\n\nThe script had to be included to my Hexo ``article.js``:\n\n```ejs\n<% if (!index && post.comments){ %>\n  <script src=\"https://utteranc.es/client.js\"\n    repo=\"kristofzerbe/kiko.io\"\n    issue-term=\"pathname\"\n    theme=\"github-light\"\n    crossorigin=\"anonymous\"\n    async>\n  </script>\n<% } %>\n```\n\nThat's pretty much it. On entering the first comment, Utterances told me to install the needed GitHub App to my repo, in order to make it work ... and done.\n\n![Utterances GitHub App](Using-GitHub-as-Commenting-Platform/utteranc-github-app.png)\n\nThe result you see below ...\n\n## UPDATE...\n\nThe utterances script tag has the attribute ``theme``, to tell utterances  which style should be delivered. There are several themes available, but if users are able to switch between light or dark mode on the page (see [Hexo and the Dark Mode](/categories/Tools/Hexo-and-the-Dark-Mode)), the comment block should change to an suitable theme also.\n\nOn order to respond on a mode change, it is necessary to write a more dynamic script loading.\n\nFirst we define a function in a global script file to load the utterances script via JS:\n\n```js\nfunction insertUtterancesCommentBlock() {\n    var commentTheme = \"github-light\";\n    if(localStorage.getItem(\"theme\") === \"dark\"){\n      commentTheme = \"github-dark\";\n    }\n    const scriptId = \"comment-theme-script\";\n    const existingScript = document.getElementById(scriptId);\n    if (!existingScript) {\n      const commentScript = document.createElement(\"script\");\n      commentScript.id = scriptId;\n      commentScript.src = \"https://utteranc.es/client.js\";\n      commentScript.setAttribute(\"repo\", \"kristofzerbe/kiko.io\");\n      commentScript.setAttribute(\"issue-term\", \"pathname\");\n      commentScript.setAttribute(\"theme\", commentTheme);\n      commentScript.setAttribute(\"crossorigin\", \"anonymous\");\n      const placeholder = document.getElementById(\"comment-placeholder\");\n      placeholder.innerHTML = \"\";\n      placeholder.appendChild(commentScript);\n    }\n}\n```\n\nThen we change the placement in the EJS file, by defining a placeholder  and ensuring that the script above is loaded, before we call it:\n\n```ejs\n<div id=\"comment-placeholder\"></div>\n<script>\n  window.addEventListener('load', function () {\n    insertUtterancesCommentBlock();\n  })\n</script>\n```\n\nOn my blog, everytime the user switches between light/dark mode the ``body`` tag will be decorated with the data tag ``data-theme`` and the value of the mode. To keep the loading of the utterances script independent from this functionality, we just have to listen to this change via ``MutationObserver``:\n\n```js\n//observe theme change, to adjust comment block theme\nvar target = document.documentElement,\n    observer = new MutationObserver(function(mutations) {\n        mutations.forEach(function(mutation) {\n            if (mutation.attributionName === \"data-theme\" );\n                insertUtterancesCommentBlock();\n            });        \n    }),\n    config = { attributes: true };\nobserver.observe(target, config);\n```","tags":["GitHub","Hexo","Blogging"],"categories":["Tools"]},{"title":"Meaningful automatic versioning with T4","url":"/categories/C/Meaningful-automatic-versioning-with-T4/","content":"\nEvery developer has to have an idea of versioning his products. If you work with Visual Studio you have the ``Assembly Information`` in the project properties dialog, to enter it manually everytime you want to release a new version:\n\n![Assembly Information Dialog](Meaningful-automatic-versioning-with-T4/AssemblyInformationDialog.png)\n\nThe four fields are: MAJOR, MINOR, BUILD, REVISION.\n\nBut seriously ... who does that? I guess 99% of all C# developers are entering the ``AssemblyInfo.cs`` and enter the famous 2 asterisks into the version declaration of BUILD and REVISION, to let Visual Studio do the incrementation job:\n\n```c#\n[assembly: AssemblyVersion(\"1.0.*.*\")]\n[assembly: AssemblyFileVersion(\"1.0.*.*\")]\n```\n\nBut this is not the end of the possibilities ... Let's do it more meaningful, with some goodies and still automatic...\n<!-- more -->\n\n## More informative versioning\n\nA build with an increased MAJOR version number means, that there are significant changes in the product, even breaking changes. This always should be set manually.\n\nAlso the MINOR. It stands for significant functional extensions of the product.\n\nHow does Visual Studio calculate BUILD and REVISION?\n\n{% blockquote %}\nWhen specifying a version, you have to at least specify major. If you specify major and minor, you can specify an asterisk for build. This will cause **build** to be equal to the **number of days since January 1, 2000 local time**, and for **revision** to be equal to the **number of seconds since midnight local time, divided by 2**.\n{% endblockquote %}\n\nBut, the BUILD number should explain, how often a software with a particular MAJOR.MINOR has been build, due to minor changes and bug fixes.\n\nThe \"Asterisk\" REVISION number is a little weird, but at least with the BUILD number unique. But it says nothing. Better to pick up the idea of a date calculated, unique number, but not an arbitrary date ... let's take the date the project has started.\n\nFor example: **1.2.16.158** ... reads version 1.2 with 16 builds on the 158'th day after the project has started.\n\n## Start with T4\n\nT4 (Text Template Transformation Toolkit) is a templating system in Visual Studio for generating text files during design time. It is very suitable to even generate code. Read about it [here](https://docs.microsoft.com/en-us/visualstudio/modeling/code-generation-and-t4-text-templates) and [here](https://docs.microsoft.com/en-us/visualstudio/modeling/writing-a-t4-text-template).\n\nA Text Template (.tt) has **Directives** (how the template is processed), **Text blocks** (text copied to the output) and **Control blocks** (program code).\n\nFor our versioning template, we start with this in a new file named **``AssemblyVersion.tt``**:\n\n*Directives*:\n\n```xml\n<#@ template hostspecific=\"true\" language=\"C#\" #>\n<#@ output extension=\".cs\" #>\n```\n\n*Control block*:\n\n```c#\n<#\n  int major = 1;\n  int minor = 0;\n  int build = 0;\n  int revision = 0;\n#>\n```\n\n*Text block*:\n\n```c#\n// This code was generated by a tool. Any changes made manually will be lost\n// the next time this code is regenerated.\n\nusing System.Reflection;\n\n[assembly: AssemblyVersion(\"<#= $\"{major}.{minor}.{build}.{revision}\" #>\")]\n[assembly: AssemblyFileVersion(\"<#= $\"{major}.{minor}.{build}.{revision}\" #>\")]\n```\n\nOn saving the TT file, a new CS file with the same name will be created automatically and you got an error like this:\n\n![Duplicate Attributes Error](Meaningful-automatic-versioning-with-T4/DuplicateAttributes.png)\n\n### A new place for version info\n\nTh error occurs, because we have now **two** ``AssemblyVersion`` and ``AssemblyFileVersion`` attributes in our project. We need to comment out the original in ``Properties\\AssemblyInfo.cs``:\n\n![Change AssemblyInfo.cs](Meaningful-automatic-versioning-with-T4/ChangeAssemblyInfo.png)\n\n### Structural Considerations\n\nIt makes sense to store all needed files for the new versioning system in a new root folder of the project, named **AssemblyVersion**, starting with the ``AssemblyVersion.tt``, because there will be more files later on.\n\n## New app information file\n\nAs we replaced the original version attributes in the project with those from our generated  ``AssemblyVersion.cs``, we cannot control the MAJOR and MINOR version number via the project property dialog any longer. We need a new approach on that, which can be edited easily and processed automatically.\n\n### AssemblyVersion.json\n\n```js\n{\n  \"initialDate\": \"2019-09-29\",\n  \"versions\": [\n    {\n      \"major\": 1,\n      \"minor\": 1,\n      \"releaseDate\": \"\",\n      \"remarks\": \"Some cool new features; New versioning system\"\n    },\n    {\n      \"major\": 1,\n      \"minor\": 0,\n      \"releaseDate\": \"2019-10-01\",\n      \"remarks\": \"Initial Release\"\n    }\n  ]\n}\n```\n\nThis new JSON file has two main items:\n* ``initialDate`` - the date the project has started, to calculate the REVISION later on\n* ``versions`` - a list with all different MAJOR/MINOR versions we have done so far, with at least one without a release date ... the one with the highest ``major`` and ``minor``.\n\nThe ``remarks`` attribute of a list item holds some information about the changes in a new version. Together with ``releaseDate``, useful for a possible release history, shown in the product itself.\n\n### Library references in T4\n\nT4 runs in its own app domain, therefore it can use built-in libraries as ``System.IO``, but not third-party libraries like ``Newtonsoft.JSON``. \n\nWe could reference those libraries from the projects package folder via the absolute path (if we use it in our product), but when we are running a NuGet update, the reference will break. \n\nIt is advisable to store such libraries directly in a fixed folder, like **AssemblyVersion\\Libraries**. They won't have any impact to our product, because the are only used while design time.\n\n## The MAJOR and MINOR\n\nTo process the new ``AssemblyVersion.json`` in the template, we need some new directives for referencing the needed libraries and the import of the appropriate namepaces:\n\n```xml\n<#@ assembly name=\"System.Core\" #>\n<#@ assembly name=\"$(SolutionDir)\\AssemblyVersion\\Libraries\\Newtonsoft.Json.dll\" #>\n\n<#@ import namespace=\"System.IO\" #>\n<#@ import namespace=\"System.Linq\" #>\n<#@ import namespace=\"Newtonsoft.Json\" #>\n```\n\nVia the use of the T4 variable ``$(SolutionDir)``, we can point to our copy of Newtonsoft JSON.\n\nNow we can read and convert the JSON into an anonymous object and get the highest values of MAJOR and MINOR:\n\n```c#\n<#\n    string avPath = this.Host.ResolvePath(\"AssemblyVersion.json\");\n    string avJson = File.ReadAllText(avPath);\n\n    var avDefinition = new {\n        initialDate = \"\",\n        versions = new [] {\n            new {\n                major = 0,\n                minor = 0,\n                releaseDate = \"\",\n                remarks = \"\" }\n        }\n    };\n    var avObject = JsonConvert.DeserializeAnonymousType(avJson, avDefinition);\n\n    //Get highest Major/Minor from versions list\n    var maxVersion = avObject.versions\n      .OrderByDescending(i => i.major)\n      .ThenByDescending(j => j.minor)\n      .First();\n\n    //Set MAJOR\n    int major = maxVersion.major;\n\n    //Set MINOR\n    int minor = maxVersion.minor;\n#>\n```\n\n## The BuildLog\n\nIn order to get the version number for BUILD, we need a method to count and store every build that has been run, separated by the MAJOR/MINOR versions. This is a job for a **Post-build event**, which can be configured in the project properties dialog. The event uses shell commands as they are used on the command line.\n\nWhat the commands should do:&nbsp;&nbsp;&nbsp;Write a new line with the current date and time in a log file, named after the MAJOR/MINOR version and stored in the folder **AssemblyVersion\\BuildLogs**.\n\n![Build Log](Meaningful-automatic-versioning-with-T4/BuildLog.png)\n\n### Extending build event macros\n\nShell commands for build events are supporting built-in variables, so called 'macros', like ``$(ProjectDir)`` (which returns the project directory path), but there is no such macro for the current version number. We have to introduce it via extending the project with a new build target.\n\nUnload the project in Visual Studio for editing the CSPROJ (or VBPROJ) file of your product manually and write the following definition just before the end-tag:\n\n```xml\n  <PropertyGroup>\n    <PostBuildEventDependsOn>\n      $(PostBuildEventDependsOn);\n      PostBuildMacros;\n    </PostBuildEventDependsOn>\n  </PropertyGroup>\n\n  <Target Name=\"PostBuildMacros\">\n    <GetAssemblyIdentity AssemblyFiles=\"$(TargetPath)\">\n      <Output TaskParameter=\"Assemblies\" ItemName=\"Targets\" />\n    </GetAssemblyIdentity>\n    <ItemGroup>\n      <VersionNumber Include=\"@(Targets->'%(Version)')\" />\n    </ItemGroup>\n  </Target>\n```\n\nAfter reloading the project in Visual Studio, we can use ``@(VersionNumber)`` in our commands.\n\n### CreateBuildLog.bat\n\nThe event build editor is not very comfortable, so we create the batch file ``CreateBuildLog.bat`` in our **AssemblyVersion** folder and use this as the post build event command.\n\n{% alertbox exclamation %}\nThe BuildLog folder must exist, before running the following command the first time!\n{% endalertbox %}\n\n```bat\n@echo off\n\nREM --Get parameters\nset PROJECT_DIR=%1\nset VERSION_NUMBER=%2\n\nREM --Set what to log\nset LOG_LINE=%DATE% %TIME%\n\nREM --Inform the user\nset MSG=CreateBuildLog '%LOG_LINE%' for version %VERSION_NUMBER%\necho %MSG%\n\nREM --Get version parts\nFOR /f \"tokens=1,2,3,4 delims=.\" %%a IN (\"%VERSION_NUMBER%\") do (\n\tset MAJOR=%%a\n\tset MINOR=%%b\n\tset BUILD=%%c\n\tset REVISION=%%d\n)\n\nREM --Define BuildLog file and folder \nset BUILDLOG_FILE=%MAJOR%.%MINOR%.log\nset BUILDLOG_FOLDER=%PROJECT_DIR%\\AssemblyVersion\\BuildLogs\n\nREM --Write current date and time as new line in the file\necho %LOG_LINE% >> %BUILDLOG_FOLDER%\\%BUILDLOG_FILE%\"\n```\n\n![Post Build Event](Meaningful-automatic-versioning-with-T4/PostBuildEvent.png)\n\n```bat\n\"$(ProjectDir)\\AssemblyVersion\\CreateBuildLog.bat\" \"$(ProjectDir)\" @(VersionNumber)\n```\n\n## The BUILD\n\nAs we have now the BuildLogs, we can use them in the template:\n\n```c#\n<#\n    ...\n\n    //Get BuildLog of max version\n    string buildlogFolder = this.Host.ResolvePath(\"BuildLogs\");\n    string buildLog = \n      buildlogFolder + \"\\\\\" +\n      maxVersion.major + \".\" +\n      maxVersion.minor + \".log\";\n\n    //Get number of lines from BuildLog or create a new log (!)\n    var buildCount = 1;\n    if (File.Exists(buildLog)) {\n        buildCount = File.ReadLines(buildLog).Count() + 1;\n    } else {\n        File.Create(buildLog).Dispose();\n    }\n\n    //Set BUILD\n    int build = buildCount;\n#>\n```\n\nVery important is to create the log file, if it doesn't exists! Otherwise the build will always fail, because the version attributes can't be created.\n\n## The REVISION\n\nAt least we have to set the REVISION number, by calculating the difference between the current date and the ``initialDate``, which we have previously read from the ``AssemblyVersion.json``:\n\n```c#\n<#\n    ...\n\n    //Set REVISION\n    var dateCreated = DateTime.Parse(avObject.initialDate);\n    int revision = (DateTime.Now.Date - dateCreated.Date).Days;\n#>\n```\n\n## Transforming T4 template on build\n\nThe last hurdle is to run the text transformation every time you build your product. Until now it runs only on saving the ``AssemblyVersion.tt``.\n\nA great helper on that was Thomas Levesque's post [\"Transform T4 templates as part of the build, and pass variables from the project\"](https://thomaslevesque.com/2017/11/13/transform-t4-templates-as-part-of-the-build-and-pass-variables-from-the-project/), where he describes every difficulty to reach this goal.\n\nTo make it short: We have to edit the CSPROJ file again, to introduce TextTemplating to MSBuild.\n\nFirst we need following near the beginning of the projects XML:\n\n```xml\n<PropertyGroup>\n    <VisualStudioVersion Condition=\"'$(VisualStudioVersion)' == ''\">\n      16.0\n    </VisualStudioVersion>\n    <VSToolsPath Condition=\"'$(VSToolsPath)' == ''\">\n      $(MSBuildExtensionsPath32)\\Microsoft\\VisualStudio\\v$(VisualStudioVersion)\n    </VSToolsPath>\n    <TransformOnBuild>true</TransformOnBuild>\n    <OverwriteReadOnlyOutputFiles>true</OverwriteReadOnlyOutputFiles>\n    <TransformOutOfDateOnly>false</TransformOutOfDateOnly>\n</PropertyGroup>\n```\n\nSecondly add the IMPORT of the TextTemplating target AFTER the CSharp target:\n\n```xml\n<Import Project=\"$(MSBuildToolsPath)\\Microsoft.CSharp.targets\" />\n...\n<Import Project=\"$(VSToolsPath)\\TextTemplating\\Microsoft.TextTemplating.targets\" />\n```\n\nIf you build your product now, a new build log is created and the version numbers BUILD and REVISION are automatically increased.\n\n## See it in action\n\nThe project where I implemented this versioning first is [HexoCommander](https://github.com/kristofzerbe/HexoCommander). Feel free to download the code and see how the new versioning mechanism works.\n\n![Screencast Build HexoCommander](Meaningful-automatic-versioning-with-T4/screencast-build-hexocommander.gif)\n\nEnjoy versioning...","tags":["Visual Studio","Versioning","T4"],"categories":["C#"]},{"title":"Automatic Header Images in Hexo","url":"/categories/Tools/Automatic-Header-Images-in-Hexo/","content":"\nEvery article in this blog has an individual header image, to bring a little bit color into it. In this post I will show you how I deal with the images in using and automatic provisioning.\n\nFor serving these pictures I use a static folder, as described in [A New Blog: Customizing Hexo](/categories/Tools/A-New-Blog-Customizing-Hexo/). The hard work is done by the plugin [Hexo Generator Copy](https://github.com/niahoo/hexo-generator-copy), which copies the static files into the ``public_dir`` while generating.\n\n<!-- more -->\n\n## Static File Structure\n\nIt is always advisable to provide one image for every device class, in order to save bandwidth and make the page loading as fast as possible:\n\n```txt\n| static/\n   | photos/\n      | mobile/\n         | my-lovely-picture.jpg\n         | ...\n      | tablet/\n         | my-lovely-picture.jpg\n         | ...\n      | normal/\n         | my-lovely-picture.jpg\n         | ...\n```\n\nThe ``mobile`` images are at least 480 pixels wide, the ``tablet`` variants 768 pixels and the standard or ``normal`` one 1280 pixels.\n\nWhile creating the JPG files, it is important to compress them with a tool like [JPEGMini](https://www.jpegmini.com/) to save data while loading.\n\n## Binding\n\nIn order to bind a picture with some additional information to an article, I have extended the Frontmatter of every post:\n\n```yaml\nphotograph:\n    file: 'my-lovely-image.jpg'\n    name: 'My Lovely Image'\n    link: 'https://500px.com/photo/123456789/My-Lovely-Image'\n```\n\n## Usage in Theme\n\nIt relies on your Hexo theme, how to use a header image. In my theme (derived from the standard theme) I just added following code in the ``article.js`` to show the individual header image as a background image at the top of the article: \n\n```html\n<% if (!index && post.photograph){ %>\n<style>\n  #banner {\n    background-size: cover;\n  }\n  @media screen and (max-width: 479px) {\n    #banner { background-image:\n      linear-gradient(to bottom, rgba(0,0,0,0.75) 0%, rgba(0,0,0,0) 75%),\n      url(\"/photos/mobile/<%= post.photograph.file %>\"); }\n  }\n  @media screen and (min-width: 480px) and (max-width: 767px) {\n    #banner { background-image: \n      linear-gradient(to bottom, rgba(0,0,0,0.75) 0%, rgba(0,0,0,0) 75%),\n      url(\"/photos/tablet/<%= post.photograph.file %>\"); }\n  }\n  @media screen and (min-width: 768px) {\n    #banner { background-image: \n      linear-gradient(to bottom, rgba(0,0,0,0.75) 0%, rgba(0,0,0,0) 75%),\n      url(\"/photos/normal/<%= post.photograph.file %>\"); }\n  }\n</style>\n<script>\n  var photoLink = document.getElementById(\"header-photo-link\");\n  photoLink.href = \"<%= post.photograph.link%>\";\n  photoLink.innerHTML = \"see <strong><%= post.photograph.name%></strong> at 500px\";\n</script>\n<% } %>\n```\n\nImportant part here is the use of the Frontmatter data ``post.photograph.file`` in the URL of the background CSS. The script fills the additional information into the absolute positioned element ``header-photo-link`` which is placed on top of the header.\n\n## Pooling Images\n\nAs it is time consuming to generate the necessary images, I have created another static folder ``pool`` to store prepared files and a text file with the additional information about the image. The structure of ``pool`` is different to ``photos``, because of my image workflow and some limitations of automating the provisioning.\n\n```txt\n| static/\n   | pool/\n      | my-lovely-picture/\n         | meta.txt\n         | mobile.jpg\n         | normal.jpg\n         | tablet.jpg\n      | ...\n```\nThe ``meta.txt`` is a simple text file with two lines of text: first the name of the image and second the Url to link to, which will be inserted in the appropriate Frontmatter fields on creating a new post:\n\n```txt\nMy Lovely Image\nhttps://500px.com/photo/123456789/My-Lovely-Image\n```\n\n## Automate binding and provisioning on new post\n\nDevelopers are lazy and I do not make an exception. Having all these pool images and the meta informations, it would be nice, if Hexo just picks and processes one of the pool folders automatically, when I'm creating a new post by calling ``hexo new \"My shiny new post\"`` ... and it was easier then I thought.\n\n### Where to place the code for the automatism\n\nHexo has a great [API](https://hexo.io/api/) to write [plugins](https://hexo.io/plugins/) and it is not very difficult to setup a new plugin for this, which can be published to the [NPM registry](https://www.npmjs.com/search?q=hexo). But it is also possible to extend Hexo's functionality by using a simple script. All you need is a **``script``** folder in the root of your Hexo project. Any JS files which is placed there, will be executed by Hexo.\n\nTherefore, lets use a script called ``\\scripts\\process-photo-on-new.js`` ...\n\n### Things an automatism should do - Step by Step\n\n1. Hook into the creation of a post\n2. Pick randomly one of the pool images\n3. Place the content of the meta.txt in the Frontmatter\n4. Move the 3 device-dependend images into the ``photos`` folder\n\n#### Step 1 - Hook into the creation of a post\n\nThe needed event, the automatism can hook on, is:\n\n```javascript\nhexo.on('new', function(data){\n  //\n});\n```\n\nIt will be executed every time you call the ``hexo new`` command. The parameter ``data`` is an object with two fields:\n\n* ``path``  \nFull path to the MD file of the new post\n\n* ``content``  \nComplete content of the scaffold (template), which Hexo has used to create the new post; default is ``/scaffolds/post.md``.\n\nBy preloading the Hexo Front matter library and parsing ``data.content`` we get access to the definition of the new post:\n\n```javascript\nconst front = require('hexo-front-matter');\n\nhexo.on('new', function(post){\n\n  // parse article content\n  var post = front.parse(data.content);\n});\n```\n\n#### Step 2 - Pick randomly one of the pool images\n\nThere are some build-in variables to get the full path, for example, of the ``source`` folder, we can use to define the needed paths to the ``pool`` and the ``photo`` folder.\n\n```javascript\nconst front = require('hexo-front-matter');\n\nhexo.on('new', function(post){\n  var post = front.parse(data.content);\n\n  // set the path variables\n  var poolDir = hexo.source_dir.replace(\"\\source\", hexo.config.static_dir) + \"pool\";\n  var photosDir = hexo.source_dir.replace(\"\\source\", hexo.config.static_dir) + \"photos\";\n});\n```\n\nNext, we need to preload the Hexo FS library for file access, to list the content of the ``poolDir``, including the subfolders, and filter out the meta files. Out of the resulting array we pick one randomly, to use for the new post:\n\n```javascript\nconst front = require('hexo-front-matter');\nconst fs = require('hexo-fs');\n\nhexo.on('new', function(post){\n  var post = front.parse(data.content);\n\n  var poolDir = hexo.source_dir.replace(\"\\source\", hexo.config.static_dir) + \"pool\";\n  var photosDir = hexo.source_dir.replace(\"\\source\", hexo.config.static_dir) + \"photos\";\n\n  // list all files\n  var files = fs.listDirSync(poolDir);\n\n  // filter the list to get meta files of each subfolder\n  var metaFiles = files.filter(file => file.match(/.*[\\\\]meta.txt/g));\n\n  // pick one randomly\n  var metaFile = metaFiles[Math.floor(Math.random() * metaFiles.length)];\n\n  // get the name of the picked photo (foldername)\n  var photoName = metaFile.split(\"\\\\\")[0];\n});\n```\n\n#### Step 3 - Place the content of the meta.txt in the Frontmatter\n\nNow we have to read the meta file, place the data in the Frontmatter and save the article file:\n\n```javascript\nconst front = require('hexo-front-matter');\nconst fs = require('hexo-fs');\n\nhexo.on('new', function(post){\n  var post = front.parse(data.content);\n\n  var poolDir = hexo.source_dir.replace(\"\\source\", hexo.config.static_dir) + \"pool\";\n  var photosDir = hexo.source_dir.replace(\"\\source\", hexo.config.static_dir) + \"photos\";\n  \n  var files = fs.listDirSync(poolDir);\n  var metaFiles = files.filter(file => file.match(/.*[\\\\]meta.txt/g));\n  var metaFile = metaFiles[Math.floor(Math.random() * metaFiles.length)];\n  var photoName = metaFile.split(\"\\\\\")[0];\n\n  // read meta file\n  var meta = fs.readFileSync(poolDir + \"\\\\\" + metaFile);\n  var metas = meta.split(\"\\n\");\n\n  // place file and additional info in the Frontmatter\n  post.photograph.file = photoName + \".jpg\";\n  post.photograph.name = metas[0];\n  post.photograph.link = metas[1];\n\n  // convert content back\n  postStr = front.stringify(post);\n  postStr = '---\\n' + postStr;\n\n  // store article\n  fs.writeFile(data.path, postStr, 'utf-8');\n});\n```\n\n#### Step 4 - Move the 3 device-dependend images into the photos folder\n\nLast but not least, we have to move the pool images into the ``photos`` folder and remove the pool folder with all its processed content:\n\n```javascript\nconst front = require('hexo-front-matter');\nconst fs = require('hexo-fs');\n\nhexo.on('new', function(post){\n  var post = front.parse(data.content);\n\n  var poolDir = hexo.source_dir.replace(\"\\source\", hexo.config.static_dir) + \"pool\";\n  var photosDir = hexo.source_dir.replace(\"\\source\", hexo.config.static_dir) + \"photos\";\n  \n  var files = fs.listDirSync(poolDir);\n  var metaFiles = files.filter(file => file.match(/.*[\\\\]meta.txt/g));\n  var metaFile = metaFiles[Math.floor(Math.random() * metaFiles.length)];\n  var photoName = metaFile.split(\"\\\\\")[0];\n\n  var meta = fs.readFileSync(poolDir + \"\\\\\" + metaFile);\n  var metas = meta.split(\"\\n\");\n\n  post.photograph.file = photoName + \".jpg\";\n  post.photograph.name = metas[0];\n  post.photograph.link = metas[1];\n\n  postStr = front.stringify(post);\n  postStr = '---\\n' + postStr;\n\n  fs.writeFile(data.path, postStr, 'utf-8');\n\n  //copy normal image\n  fs.copyFile(\n    poolDir + \"\\\\\" + photoName + \"\\\\normal.jpg\",\n    photosDir + \"\\\\normal\\\\\" + photoName + \".jpg\",\n    function() {\n\n      //copy tablet image\n      fs.copyFile(\n        poolDir + \"\\\\\" + photoName + \"\\\\tablet.jpg\",\n        photosDir + \"\\\\tablet\\\\\" + photoName + \".jpg\",\n        function() {\n\n          //copy mobile image\n          fs.copyFile(\n            poolDir + \"\\\\\" + photoName + \"\\\\mobile.jpg\",\n            photosDir + \"\\\\mobile\\\\\" + photoName + \".jpg\",\n            function() {\n\n              //remove processed pool folder\n              fs.rmdirSync(poolDir + \"\\\\\" + photoName);\n            });\n        });\n    });\n\n});\n```\n\nNow it so easy to write a new post, because almost everything is set and I can concentrate on the article. Also, it is a nice surprise to see, which photo the script has chosen. The only thing I have to do from time to time, is to refill the pool folder with new images.\n","tags":["Hexo","Blogging"],"categories":["Tools"]},{"title":"Localization with resource files in JavaScript web apps","url":"/categories/JavaScript/Localization-with-resource-files-in-JavaScript-web-apps/","content":"\nThere are plenty of editors out there to help you writing JavaScript web applications. As I'm working in my daily life with Visual Studio, it is a obvious choice for me. \n\nOne of the most time saving tools in VS is the plugin [ResXManager](https://marketplace.visualstudio.com/items?itemName=TomEnglert.ResXManager), which is an awesome assistant on managing the translations for a Desktop- or ASP.NET-App, which uses XML-based RESX files.\n\n<!-- more -->\n\nMostly very localization is based on key/value pairs, defined in separate files for every language provided.\n\nImplementing several languages in pure JavaScript apps is a little more difficult, because it makes no sense to deal with big XML files in JS. All localization libraries in the market uses JSON for storing the translations and it is a little bit of work to find the right one for your requirements.\n\n<!-- more -->\n\n## Localization in JavaScript\n\nFor a current project I use  [jquery-lang](https://github.com/Irrelon/jquery-lang-js), because it provides the switch of the apps UI language without reloading and it is easy to implement. Thanks Rob Evans for your work...\n\nThe definition of \"tokens\" in one JSON file for each language is quite easy:\n\n```js ../languages/en.json\n{\n    \"token\": {\n        \"my-test\": \"My Test in English\"\n    }\n}\n```\n\n```js ../languages/de.json\n{\n    \"token\": {\n        \"my-test\": \"Mein Test in Deutsch\"\n    }\n}\n```\n\nThe usage also:\n```html\n<div lang=\"en\" data-lang-token=\"my-test\">\n```\n\n## Using RESX and convert to JSON on build\n\nHaving this, the most time consuming work is to enter the translations to the localization files. If you have hundreds of them, it is hard to keep the 2, 3 or more language files in sync. You need a helper...\n\nAnd here comes ResXManager to the rescue, if you work with VS ... but it needs a conversation from RESX to the JSON format jquery-lang uses and this a task, which can be done on building the JS app, by using a task runner like [Grunt](https://gruntjs.com/).\n\nAs there was no Grunt plugin/task out there to fit my needs, I have created  **grunt-resource2json** ([GitHub](https://github.com/kristofzerbe/grunt-resource2json), [NPM](https://www.npmjs.com/package/grunt-resource2json)). The configuration in the **gruntfile.js** is like: \n\n```json gruntfile.js\ngrunt.initConfig({\n    resource2json: {\n      convert: {\n        options: {\n          format: \"jquery-lang\"\n        },\n        files: [\n          {\n            input: \"resources/Resource.resx\",\n            output: \"build/langpacks/en.json\"\n          },\n          {\n            input: \"resources/Resource.de-DE.resx\",\n            output: \"build/langpacks/de.json\"\n          },\n          {\n            input: \"resources/Resource.es-ES.resx\",\n            output: \"build/langpacks/es.json\"\n          }\n        ]\n      }\n    });\n```\n\nIt takes one RESX file (input) and converts it to a JSON file (output) in an array of files.\n\nThe heavy work in the plugin is done by the library [xml2js](https://www.npmjs.com/package/xml2js), which transforms the complete XML of the RESX file into a JSON object in one call. All I had to do, was to write all DATA nodes in a loop into the jquery-lang given structure and save it as JSON.\n\nCurrently supported is the format for jquery-lang only, but it would be awesome, if you fork the code on [GitHub](https://github.com/kristofzerbe/grunt-resource2json) and send me a Pull Request with the implementation of your needed format.\n","tags":["GitHub","Visual Studio","Resource","Localization"],"categories":["JavaScript"]},{"title":"TFS/DevOps: Delete Remote Workspace","url":"/categories/Tools/TFS-DevOps-Delete-Remote-Workspace/","content":"\nIf you are working with freelance developers and Azure DevOps/TFS with TFVC (Team Foundation Version Control) in your company, maybe this will look familiar to you: You hire a new freelancer and you want to reuse the hardware, including the complete software setup, to bring him/her to work as fast and straightforward as possible. You set up a new Azure Devops account with all necessary permissions and you think you're done. No you are not...\n<!-- more -->\n\nEverytime a user connects to a Team Project on Azure DevOps via Visual Studio and gets the code, VS is creating a **remote workspace** on the server, with the **machine name** as default, therefor it is not enough to wipe the profile and any other legacies of the last user from the machine. You also have to remove the remote workspace. Otherwise you will get an error message like that, if you are using a unique file structure on the developers hard disc:\n\n```txt\nThe working folder c://xxx is already in use by the workspace yyy;zzz on computer yyy\n```\n\nThe variable xxx stands for the blocked folder, yyy for the workspace/machine name and zzz for the users id on Azure DevOps.\n\nUnfortunately, there is no visual management console on Azure DevOps to manage your server workspaces, but there is a command line tool called **[tf.exe](https://docs.microsoft.com/en-us/azure/devops/repos/tfvc/use-team-foundation-version-control-commands?view=azure-devops)**.\n\nThe easiest way to get rid of the unused server workspace in 3 steps:\n\n## Step 1\n\nRun **Developer Command Prompt** with Administrator privileges from Visual Studio 2019 and login with your Azure DevOps credentials. If the Login dialog doesn't show up, force it by executing:\n\n```txt\ntf.exe workspace\n```\n\n## Step 2\n\nGet a list of all remote workspaces available in your DevOps Collection by running the command:\n\n```txt\ntf.exe workspaces /computer:* /owner:* /format:xml > c:\\temp\\workspaces.xml\n```\n\nYou can get a list of all your workspaces by running ``tf workspaces``, but the list only shows you the ``owner``, but not the necessary ``ownerid`` and ... it is nicer to have a file to search in.\n\n## Step 3\n\nFind the abandoned workspace in the list and note its ``name`` and  ``ownerid`` for running the command:\n\n```txt\ntf workspace /delete {WORKSPACE.name};{WORKSPACE.ownerid}\n```\n\nNow your new colleague can create his own workspace on the same machine.\n\n## Update\nIn case you want to switch your own DevOps account to another and use the same folder as before, you can certainly delete the local workspace, but this wont help, because you are still logged in at TeamExplorer and the folder knows to whom it belongs. Solution is easy:\n\n1. Quit Visual Studio\n2. Rename folder in ``***_OLD`` or something\n3. Create new folder with the same name\n4. Enter ``C:\\Users\\YOUR-NAME\\appdata\\Local\\Microsoft\\Team Foundation\\VS-VERSION\\Cache`` and emtpy the folder to let Visual Studio forget who you are\n5. Remove all your Remote Workspaces as described above\n6. Start Visual Studio, connect in TeamExplorer to your TFS server and map the code to your folder\n\n\n{% moreinfo '{ \"list\": [\n  [\n    \"Microsoft Docs\", \"Use Team Foundation version control commands\",\n    \"https://docs.microsoft.com/en-us/azure/devops/repos/tfvc/use-team-foundation-version-control-commands?view=azure-devops\"\n  ],\n  [\n    \"Stackoverflow\", \"How to remove TFS workspace mapping for another user\",\n    \"https://stackoverflow.com/questions/28298771/how-to-remove-tfs-workspace-mapping-for-another-user/28299407\"\n  ]\n]}' %}\n","tags":["Visual Studio","TFS/DevOps"],"categories":["Tools"]},{"title":"Better Input Change Event","url":"/categories/JavaScript/Better-Input-Change-Event/","content":"\nOften it is important to trigger an event, after the user of your website/web app has filled out an text input. You have to do something with the given value in JavaScript.\n\nThe intended event for this is ``change``, which will be triggered, when the user has ended changing by leaving the input with his cursor, mostly by using the TAB key. This works at some degree, if there is a physical keyboard, but not really on mobile devices ... and for me is leaving the field often too late to start the upcoming event.\n\n<!-- more -->\n\nA better way to show the user the result of his entered value, could be the event ``input`` which fires on every key stroke, but could be way to often, if the triggered event is for example an AJAX call.\n\nBest solution is, to observe the users key strokes and trigger the event, when he stops typing. Then there is no extra action needed by the user and the event isn't triggered multiple times. \n\nHere's an implementation with jQuery:\n\n```javascript\n$(\"#my-text-input\").keyup(function () {\n    var $this = $(this);\n    clearTimeout($.data(this, 'timer'));\n    var wait = setTimeout(function () {\n\n        //do something with the value...\n\n    }, 1000);\n    $(this).data('timer', wait);\n});\n```\n\nImportant is to wipe and set the timer on every key up, to achive that the event will be executed after 1 second after the last key stroke only.","tags":["jQuery"],"categories":["JavaScript"]},{"title":"Hexo and the Dark Mode ... revised","url":"/categories/Tools/Hexo-and-the-Dark-Mode-revised/","content":"\nWhile writing my post [Hexo and the Dark Mode](/categories/Tools/Hexo-and-the-Dark-Mode) a few days ago, I thought it would be nice, if I could switch between the normal (light) and the dark theme, I've created for the support of the OS-related Dark Mode, even manually. The only thing I needed was a toggle element and a little bit of JavaScript.\n\nOf course, I couldn't manipulate the [media query ``prefers-color-scheme``](https://drafts.csswg.org/mediaqueries-5/#descdef-media-prefers-color-scheme) itself, but introduce a different way by blog uses it. Instead of implementing the media query directly into my CSS (or Stylus) code, I used a root selector, which can be manipulated by JavaScript ... something like this:\n\n```css\nbody {\n    background-color: white;\n    color: black;\n}\n\n[data-theme=\"dark\"] body {\n    background-color: black;\n    color: white;\n  }\n}\n```\n<!-- more -->\n\nIn every Stylus file, where I used ``@media prefers-dark`` to achieve the automatic switch by the OS, I changed this line into ``/[data-theme=\"dark\"] &`` :\n\n```styl\n#mobile-nav-header\n  background-color: color-background\n  /[data-theme=\"dark\"] &\n    background-color: dark-color-background\n  img.avatar\n    ...\n    /[data-theme=\"dark\"] &\n      filter: brightness(85%)\n```\n\nSome explanations on the [Stylus syntax](http://stylus-lang.com/docs/selectors.html): ``/`` means the root of the DOM and ``&`` points to the parent selector. Therefore the example will be rendered into this:\n\n```css\n#mobile-nav-header {\n    background-color: #f1f1f1;\n}\n[data-theme=\"dark\"] #mobile-nav-header {\n    background-color: #111;\n}\n\n#mobile-nav-header img.avatar {\n...\n}\n[data-theme=\"dark\"] #mobile-nav-header img.avatar\n    filter: brightness(85%);\n}\n```\n\nOnly problem was: the \"Root + Parent\" Stylus selector doesn't work in the block variables in the ``_extend.styl``. So I had to copy all theme relevant styles directly to the elements, where such a block was used: ``@extend <block-name>``.\n\n## The Toggle Switch\n\nIn the ``footer.ejs`` I added a toggle checkbox, where I could bind my JavaScript...\n\n```html\n<div id=\"footer-theme\">\n    <input type=\"checkbox\" id=\"theme-switch\">\n    <label for=\"theme-switch\"></label>\n</div>\n```\n\n... and some CSS in the ``footer.styl``, to style it:\n\n```styl\ninput#theme-switch[type=checkbox] {\n  display:none;\n}\n\ninput#theme-switch[type=checkbox] + label\n  height: 16px\n  width: 16px\n  display: inline-block\n  padding: 12px\n  font-size: 22px\n  cursor: pointer\n  &:before\n    display: inline-block\n    font-size: inherit\n    text-rendering: auto\n    -webkit-font-smoothing: antialiased\n    font-family: fa-icon-solid\n    content: icon-moon\n\ninput#theme-switch[type=checkbox]:checked + label\n  &:before\n    content: icon-sun\n```\n\nThe ``icon`` variables are defined in the ``_variables.styl`` like this:\n\n```styl\nicon-moon = \"\\f186\"\nicon-sun = \"\\f185\"\n```\n\n## The JavaScript\n\nEverything was now prepared to implement the switching code in JavaScript, which should support a manual switch by clicking the toggle element as well as the automatic switch by the OS.\n\nI wrapped all necessary code into a seperate JS file and placed a reference in the ``after-footer.ejs``, which places it at the bottom of the HTML:\n\n```ejs\n<%- js('js/dark-mode-toggle.js') %>\n```\n\n```js\nfunction detectColorScheme() {\n    var theme = \"light\"; //default\n\n    // get last used theme from local cache\n    if(localStorage.getItem(\"theme\")){\n        if(localStorage.getItem(\"theme\") === \"dark\"){\n            theme = \"dark\";\n        }\n    } else if(!window.matchMedia) { \n        // matchMedia not supported  \n        return false;\n    } else if(window.matchMedia(\"(prefers-color-scheme: dark)\").matches) {\n        // OS has set Dark Mode\n        theme = \"dark\";\n    }\n\n    // set detected theme\n    if (theme === \"dark\") {\n        setThemeDark();\n    } else {\n        setThemeLight();\n    }\n}\n\nconst toggleTheme = document.querySelector('input#theme-switch[type=\"checkbox\"]');\n\nfunction setThemeDark() {\n    localStorage.setItem('theme', 'dark');\n    document.documentElement.setAttribute('data-theme', 'dark');\n    toggleTheme.checked = true;\n}\nfunction setThemeLight() {\n    localStorage.setItem('theme', 'light');\n    document.documentElement.setAttribute('data-theme', 'light');\n    toggleTheme.checked = false;\n}\n\n// Listener for theme change by toggle\ntoggleTheme.addEventListener('change', function(e) {\n    if (e.target.checked) {\n        setThemeDark();\n    } else {\n        setThemeLight();\n    }\n}, false);\n\n// Listener for theme change by OS\nvar toggleOS = window.matchMedia('(prefers-color-scheme: dark)');\ntoggleOS.addEventListener('change', function (e) {\n    if (e.matches) {\n        setThemeDark();\n    } else {\n        setThemeLight();\n    }\n});\n\n// call theme detection\ndetectColorScheme();\n```\n\nBy using the both ``addEventListener``'s, each switch will be recognized and this approach is capable to support even more themes, just by using different values in the ``data-theme`` attribute.\n","tags":["Hexo","CSS","Stylus","Dark Mode"],"categories":["Tools"]},{"title":"Hexo and the Dark Mode","url":"/categories/Tools/Hexo-and-the-Dark-Mode/","content":"\nDue to the fact, that nowadays everybody is talking about Dark Modes for Browsers and Operating Systems, in order to save battery or for easier reading (uhh, really?), I decided my blog should support that.\n\n![Switching Dark Mode in Windows 10](Hexo-and-the-Dark-Mode/screen-recording-1.gif)\n<!-- more -->\n\nStarting point is the new media query ``prefers-color-scheme``, which is actually supported by all modern browsers.\n\n## Technique\n\nMy first read was Tom Brow's [Dark mode in a website with CSS](https://tombrow.com/dark-mode-website-css), where he shows how to use the media query. Simplified, this is it, assuming the light version is the default:\n\n```css\nbody {\n    background-color: white;\n    color: black;\n}\n\n@media (prefers-color-scheme: dark) {\n  body {\n    background-color: black;\n    color: white;\n  }\n}\n```\n\n## Pimping CSS for automatic switching\n\nTo support the automatic browser/OS-based automatic switch in Hexo, where [Stylus](http://stylus-lang.com/) is used, I had to change some template files. First the ``_variables.styl``:\n\n```styl\n// existing color variables\ncolor-background = #f1f1f1\ncolor-foreground = #111\ncolor-border = #ddd\n...\n\n// new dark color variables\ndark-color-background = #111\ndark-color-foreground = #eee\ndark-color-border = #000\n...\n\n// new media query variable\nprefers-dark = \"(prefers-color-scheme: dark)\"\n```\n\nNext step was to change the ``_extend.styl``, where some Stylus variables are defining complete blocks to extend. Here I had to supplement all lines, where something mode-dependend was defined, by adding the new ``prefers-dark`` media query and beneath the new 'dark' equivalence of the style:\n\n```styl\n$base-style\n  hr\n    ...\n    border: 1px dashed color-border-article\n    @media prefers-dark\n      border: 1px dashed dark-color-border-article\n    ...\n\n$block\n  ...\n  background: color-block\n  box-shadow: 1px 2px 3px color-border\n  border: 1px solid color-border\n  @media prefers-dark\n    background: dark-color-block\n    box-shadow: 1px 2px 3px dark-color-border\n    border-color: dark-color-border\n\n...\n```\n\nThe same changes I had to do in every template ``styl`` file, where one of the colors or other mode dependent style was used. For example:\n\n```styl\n#mobile-nav-header\n  background-color: color-background\n  @media prefers-dark\n    background-color: dark-color-background\n  img.avatar\n    ...\n    @media prefers-dark\n      filter: brightness(85%)\n```\n\nThis will be rendered as:\n\n```css\n  #mobile-nav-header {\n    background-color: #f1f1f1;\n  }\n  @media (prefers-color-scheme: dark) {\n      #mobile-nav-header {\n      background-color: #111;\n    }\n  }\n\n  #mobile-nav-header img.avatar {\n    ...\n  }\n  @media (prefers-color-scheme: dark) {\n    filter: brightness(85%);\n  }\n```\n\nPlease note the use of ``filter:brightness()`` in the example. It is always advisable to darken the images too, because they can really pop out on dark backgrounds.\n","tags":["Hexo","CSS","Stylus","Dark Mode"],"categories":["Tools"]},{"title":"A New Blog: Blogging and Synching en route","url":"/categories/Tools/A-New-Blog-Blogging-and-Synching-en-route/","content":"\nI work with several devices, some Windows, some Android, and sometimes I have time to write on my articles at home (Notebook, Tablet), in my spare time in the office (Desktop, Laptop) or on my way to somewhere (Smartphone). Right now I'm am in a barber shop, waiting for my haircut and write these lines. So, wherever I am, I need the Hexo project locally, but in sync on a digital device.\n\nThe blog is synced via Dropbox, but hosted on GitHub Pages, so on every device I need the  publishing functions of Git too.\n\n<!-- more -->\n\n## Sync Hexo Project\n\nBest option for me to achieve this was  [Dropbox](https://dropbox.com). Another benefit on that is: I can work on the structure of the blog wherever I am and commit when the new feature or improvement is done, because all Git related files are always in sync too.\n\n## Writing, Editing and Publishing on Windows\n\nMy preferred editor is [Visual Studio Code](https://code.visualstudio.com/). Good file handling, easy writing, full Git integration and tons of other plugins and helpers. Chapeau Microsoft, well done.\n\nSome of the following VS Code plugins makes working with Hexo on GitHub pages a breeze:\n\n---\n\n[![vscode-hexo](A-New-Blog-Blogging-and-Synching-en-route/icon-vscode-hexo.png)]((https://marketplace.visualstudio.com/items?itemName=codeyu.vscode-hexo){.lefty})  \nAdds Hexo commands like ``init``, ``new``, ``generate``, ``server`` and ``clean`` to the VS Code command palette.\n\n---\n\n[![Markdown All in One](A-New-Blog-Blogging-and-Synching-en-route/icon-markdown-all-in-one.png)](https://marketplace.visualstudio.com/items?itemName=yzhang.markdown-all-in-one)  \nKeyboard shortcuts for basic formatting, automatic list editing, autocomlete for images,  table formatter and much more for an easier handling of Markdown.\n\n---\n\n[![markdownlint](A-New-Blog-Blogging-and-Synching-en-route/icon-markdownlint.png)](https://marketplace.visualstudio.com/items?itemName=DavidAnson.vscode-markdownlint)  \nMarkdown linting and style checking\n\n---\n\n[![Language Stylus](A-New-Blog-Blogging-and-Synching-en-route/icon-stylus.png)](https://marketplace.visualstudio.com/items?itemName=sysoev.language-stylus)  \nAdds syntax highlighting and code completion to Stylus files\n\n---\n\n[![GitLens](A-New-Blog-Blogging-and-Synching-en-route/icon-gitlens.png)](https://marketplace.visualstudio.com/items?itemName=sysoev.language-stylus)  \nComplete visual management of your repositories in VS Code\n\n---\n\n[![Git Graph](A-New-Blog-Blogging-and-Synching-en-route/icon-gitgraph.png)](https://marketplace.visualstudio.com/items?itemName=mhutchie.git-graph)  \nView a Git Graph of your repository with all changes and manage commits.\n\n---\n\nWith this editor and its helpers, I'm just two clicks away from publishing a new article or even a new version of the Hexo blog itself.\n\n## Writing on Android\n\nThere are a lot of Markdown editors available on Google Play, but one is outstanding: [iA Writer for Android](https://ia.net/writer/support/android). I can open my posts or drafts directly from Dropbox, without the need of any sychronization. Open, write, close, done.\n\n![iA Writer Android](A-New-Blog-Blogging-and-Synching-en-route/ia-writer-1.png)\n\n## Publishing on Android\n\nThere are some Git related Android apps out there, but no solution was satisfying. Furthermore, I didn't really need Git here, because I didn't want to have all source files on my smartphone. I'm working directly on the Dropbox stored MD files via iA Writer. Finally and most important, Git won't be enough, because before publishing, I have to run ``hexo generate``! Therefore some sort of automatic transfer from Dropbox to GitHub is also out of the game.\n\nWhat I needed, was to tell a server at a certain point of time 'Hey, please publish for me', using the only connection I have: Dropbox.\n\n### Introducing a Demon\n\nI have a little media server, running on Windows, and he is synchronizing some folders with Dropbox. He could do the job! After I installed all necessary packages, like NodeJS, Hexo and Git, I included the project folder into the sync. \n\nNext step was to design a so called **Hexo Command File**, a simple TXT file, which holds commands in single lines, extended with execution times, when they were successfully running.\n\n```properties\npostdraft: A-New-Blog-Blogging-and-Synching-en-route\npublish\nnewdraft: \"A New Blog: Blogging and Synching en route\" @ 2019-09-30 21:15\nregenerate @ 2019-09-29 16:40:01\npublish @ 2019-09-29 16:40:10\n```\n\nThese commands are predefined, because they bundle several real commands and I didn't want to deal with real commands, due to security reasons.\n\nThe unprocessed commands are standing at the top of the file (in execution order!) and parameters are separated from the command by a colon and delimited by commas.\n\n    <command>: [<param1>, ...] @ <execution time>\n\nNext step was to create a program to work as an executing demon, who monitors the Hexo Command File (synced by Dropbox) on my server and executes commands without execution dates.\n\nI decided to create a simple Console Application in C# and use the built-in [Windows Task Scheduler](https://en.wikipedia.org/wiki/Windows_Task_Scheduler) for running it every 2 minutes. The application is called **HexoCommander** and is [available at GitHub](https://github.com/kristofzerbe/HexoCommander).\n\nIt expects the Hexo Command File to be named ``hexo-commands.txt``, located in the same folder, and provides the following commands:\n\n**newdraft: \"&lt;title&gt;\"** ... runs\n\n1. ``hexo new draft \"<title>\"``\n\nCreates a new draft.\n\n**postdraft: \"&lt;filename without extension&gt;\"** ... runs\n\n1. ``hexo publish \"<filename without extension>\"``\n\nMakes a post out of a draft.\n\n**regenerate** ... runs\n\n1. ``hexo clean``\n2. ``hexo generate``\n\nWipes all Hexo static pages and generates them new.\n\n**publish** ... runs\n\n1. ``hexo generate``\n2. ``git add \"source/*\" \"docs/*\"``\n3. ``git commit -m \"Remote publication via HexoCommander\"``\n4. ``git push origin master``\n\nGenerates Hexo static pages, stage changes on drafts, posts and static pages, commits the changes with a generic message and pushes them to the server.\n\n### Running the demon\n\nI would have never expected, that the trickiest part was to get HexoCommander running via Windows Task Scheduler. What a mess! I finally find the solution [here](https://social.msdn.microsoft.com/Forums/SqlServer/en-US/29446adf-8304-4b9f-bbc4-95daf2941d53/program-runs-fine-but-task-scheduler-wont-run-it?forum=winserver2008appcompatabilityandcertification):\n\n1. Compile HexoCommander in a **x86** configuration\n\n2. Create a new task in Task Scheduler with\n   * **Trigger**\n     * Dialy\n     * Recur every 1 days\n     * Repeat task every 2 minutes for a duration of 1 day\n   * **Action**\n     * Program/Script: **%systemroot%\\Syswow64\\cmd.exe**\n     * Add Arguments: **/C \"C:\\MyPath\\HexoCommander.exe /workdir=C:\\MyPath\"**\n     * Start In: **%systemroot%\\Syswow64\\\\**\n\nBecause some executing commands in the chain are NOT 64-bit, I had to force Task Scheduler to run the 32-bit Command Shell in its own path (see 'Start In' and don't forget the closing backslash) and take the 32-bit compiled HexoCommander as argument after the parameter ```/C``` (forcing command to terminate), including its own argument for defining the real working directory. Mind bending, but works...\n","tags":["GitHub","Hexo","VS Code","Blogging"],"categories":["Tools"]},{"title":"A New Blog: Customizing Hexo","url":"/categories/Tools/A-New-Blog-Customizing-Hexo/","content":"\nHexo is a great tool to get quick results (see [Part One of this series](/categories/Tools/A-New-Blog-VS-Code-Hexo-and-GitHub-Pages/)), when you decide to have a blog and its defaults are practical, but it's power lies in the possiblities of customization via plugins. On the [official plugin page](https://hexo.io/plugins/index.html), there are actually 302 plugins listed, but there are many more and no wish will be unsatisfied.\n\nI will show you which of these I found worth to work with...\n<!-- more -->\n\n## Relative Image Path\n\nThe build-in way to include images in your posts works fine, but it is a little aside the normal way to declare images in Markdown. The plugin [Hexo Asset Link] corrects that. After installing via ``npm install hexo-asset-link --save`` you can write this:\n\n    ![Test Image](hello-world/image-1.png)\n\nThe best is, that VS Code's Markdown can now show the image.\n\n---\n\n**UPDATE**:  \nActually the plugin [destroys external links](https://github.com/liolok/hexo-asset-link/issues/3), so don't use it until this is fixed ... or go to **node_modules** &gt; **hexo-asset-link** &gt; **index.js** in your project and change in line 22 ``protocal`` to ``protocol``.\n\n**UPDATE from Update**:  \n[liolok](https://github.com/liolok), the author of the plugin has merged my pull request and published a new new version without the typo. It works now as expected.\n\n---\n\n## Hide Posts\n\nA new Hexo project comes with a sample post called ``Hello World``. This is fine to play around with, but you don't want to publish it. Here comes a Hexo plugin to the rescue called [Hexo Hide Posts](https://github.com/printempw/hexo-hide-posts). After installing, you just have to write ``hidden: true`` to the Front Matter of you post and it won't be shown on the blog, but it is still available by URL.\n\n## Static Files\n\nHexo has the concept of [Assets Folders](https://hexo.io/docs/asset-folders), but for static files, beside article based files, I find it more useful to have a STATIC folder and copy the contents on every build into the publish folder. A good helper for this approach is the plugin [Hexo Generator Copy](https://github.com/niahoo/hexo-generator-copy). Install it by running ``npm install hexo-generator-copy --save`` and add ``static_dir: static`` to your ``_config.yml`` and you are done.\n\n    ![Hexo Static Files](A-New-Blog-Customizing-Hexo/vscode-1.png)\n\n## Feed\n\nThe default Hexo layout has an Atom Feed icon in the upper right corner, but strangely no feed file is generated on build. You need to install the plugin [Hexo Feed Generator](https://github.com/hexojs/hexo-generator-feed) to fix this, by running ``npm install hexo-generator-feed --save`` and copy following section into the ``_config.yml``:\n\n```yaml\nfeed:\n    type: atom\n    path: atom.xml\n    limit: 20\n    hub:\n    content:\n    content_limit: 140\n    content_limit_delim: ' '\n    order_by: -date\n```\n\n## Manifest for PWA\n\nIn these modern times it's always a good idea, that your blog feels like an App. For this you need a manifest file (JSON) an several icons (PNG). You can generate these files very fast with the [Web App Manifest Generator](https://app-manifest.firebaseapp.com) and store it in your static folder.\n\nTo bind this file into your blog, you can use the plugin [Hexo PWA](https://github.com/lavas-project/hexo-pwa). Run ``npm install --save hexo-pwa`` and copy following section to your ``_config.yml``, where you take the settings from your generated manifest file:\n\n```yaml\npwa:\n    manifest:\n        path: /manifest.json\n        body:\n        name: myblog.de\n        short_name: My Blog\n        icons:\n            - src: /images/icon-192x192.png\n            sizes: 192x192\n            type: image/png\n            - src: /images/icon-512x512.png\n            sizes: 512x512\n            type: image/png\n        start_url: /index.html\n        theme_color: '#025ab1'\n        background_color: '#dddddd'\n        display: standalone\n```\n\n## Sitemap File\n\nTo help [Google](https://support.google.com/webmasters/answer/183668) and others a bit to index your blog, it is advisable to provide a sitemap file. Here comes [Hexo Generator Sitemap](https://github.com/hexojs/hexo-generator-sitemap) to the rescue. Install it by running the command ``npm install hexo-generator-sitemap --save``. You can configure it via ``_config.yml``:\n\n```yaml\nsitemap:\n    path: sitemap.xml\n    template: ./sitemap-template.xml\n```\n\nThe plugin installation doesn't create the needed ``sitemap-template`` file, so be sure you grab a copy from the plugins repository: [https://github.com/hexojs/hexo-generator-sitemap/blob/master/sitemap.xml](https://github.com/hexojs/hexo-generator-sitemap/blob/master/sitemap.xml)\n\n## Commenting\n\nHexo doesn't have a commenting system, but it's prepared to stick [Disqus](https://disqus.com/) comments under each article. Just create a new Disqus account for your blog and note the given short name. By adding following section to the ``_config.yml`` Hexo shows the commenting section:\n\n```yaml\ndisqus_enabled: true\ndisqus_shortname: my-blog\n```\n\n## Inifinite Scroll\n\nHexo shows as much articles at the start page as configured in ``_config.yml`` under ``index_generator.per_page``, but it's nicer to load more articles as you scroll by using the Hexo script [Inifinite Scroll](https://github.com/FrontendSophie/hexo-infinite-scroll). Install by adding following little script in **themes** & gt; **layout** &gt; **_partial** &gt; **after-footer.ejs**\n\n```html\n<script src=\"//cdn.jsdelivr.net/gh/frontendsophie/hexo-infinite-scroll@2.0.0/dist/main.js\"></script> \n<script>\n    infiniteScroll({\n    showNum: 5,\n    style: 'line-scale',\n    color: '#025ab1'\n    })\n</script>\n```\n\n## Back To Top\n\nIts nice to support the reader on scolling by providing a Scroll-To-Top button. The easiest way to get this, is the script [Vanilla Back To Top](https://github.com/vfeskov/vanilla-back-to-top). Just add follwing to **themes** &gt;**layout** &gt; **_partial** &gt; **after-footer.ejs**:\n\n```html\n<script>addBackToTop({\n    diameter: 30,\n    backgroundColor: 'rgb(0, 90, 180)',\n    textColor: '#fff'\n})\n</script>\n<style>\n#back-to-top {\n    border-radius: 0;\n    opacity: 0.6;\n}\n#back-to-top:hover {\n    opacity: 1;\n}\n</style>\n```\n","tags":["Hexo","VS Code","Blogging"],"categories":["Tools"]},{"title":"A New Blog: VS Code, Hexo and GitHub Pages","url":"/categories/Tools/A-New-Blog-VS-Code-Hexo-and-GitHub-Pages/","content":"\nA few days ago I puzzled over a technical problem regarding SQL Server, Active Directory and Visual Studio Database Projects. With tips, hints and snippets from several websites I got it running and the solution was absolutely memorable. For myself and for others. Nothing is harder than to know 'you did this before...', but not to remember how.\n\nBecause of this strong leaning towards oblivion, I started over 20 years ago my very first website **zerbit.de**, manually crafted with Classic ASP and a SQL Server database as backend, with an editor, tagging, categories and so on. It was really exciting to build this blog from scratch and writing articles for it, but it was so time consuming to expand the features of the website and keep it running, that some day I quit it silently.\n\nSo, to document the solution mentioned above, I could use tools like OneNote or others, like in the past years, but this would be just for me and not for all developers, who have a similar problem. I felt it would be unfair to participate from the knowledge of others to get my solution and dont give something back.\n\nI decided to write an article just in HTML and publish it on my personal GitHub Page that I didn't used so far. Ok, just Text ... ugly. Just a little CSS and a little more structure and maybe I should do something with Vue JS ... STOP ... It would be better to pick one of the cool new static website generators based on Node.js, to detain myself from inventing the wheel again and save my time to write articles. So I did a little research and found [HEXO](https://hexo.io) ... Bingo! I can work with my favorite editor [Visual Studio Code](https://code.visualstudio.com/), its all HTML, JavaScript and CSS, I can write my articles in Markdown and Hexo has a lot of helpers for stuff Markdown doesn't provide, it produces static files and works only with files, therefore no need for a database ... and it is well documented.\n<!-- more -->\n\n## Installation\n\n.. is quite easy, as described here: [https://hexo.io/docs/setup](https://hexo.io/docs/setup)\n\n1. Create folder and open in VS Code\n2. Open VS Code Terminal window\n3. Install Hexo with ``$ npm install -g hexo-cli``\n4. Init Hexo project with ``$ hexo init``\n5. Install dependencies with ``npm install``\n6. Done\n\n![New Hexo Project](A-New-Blog-VS-Code-Hexo-and-GitHub-Pages/vscode-1.png)\n\n## Writing\n\n### Create new post/draft\n\nHexo has posts and drafts, whereat drafts has to published via a Hexo command to become a post. To create an article use the command ``hexo new post|draft \"My Title\"``. The title will be converted in a URL-encoded string and will be used as file name and url.\n\n### Meta data\nEvery post/draft starts with its header (so called [Front Matter](https://hexo.io/docs/front-matter)) to store some meta data, which describes the post, like ``title``, ``date``, ``tags`` or ``categories``. This is used by Hexo to classify and arrange your post during the build.\n\n### Markdown\nHexo posts/drafts are written in [Markdown](https://en.wikipedia.org/wiki/Markdown). Good syntax reference are the [Markdown Guide](https://www.markdownguide.org/basic-syntax/) and the more detailed [Markdown Syntax Guide](https://sourceforge.net/p/hexo/wiki/markdown_syntax/).\n\n### Excerpt\nIs is usual to show a short excerpt an the start page of a blog, to keep it compact and teasering the user to click on a READ MORE button. To achieve this, you just have to add following comment to your article. Everything above is the excerpt and everything below is only shown, when you enter the article:\n\n    <!-- more -->\n\n### Images\n\nSome articles will contain images to illustrate something and the question is, where should they be stored? Answer: In a folder beside the post/draft, which has the same name as the article MD file. To get this, you have to activate the setting ``post_asset_folder`` in your ``_config.yml``. Now this folder will be created automatically, when you add a new post/draft.\n\nIn your Markdown you reference your image with:\n\n    {% asset_img image-1.png \"Test Image\" %}\n\n![Reference Image](A-New-Blog-VS-Code-Hexo-and-GitHub-Pages/vscode-2.png)\n\n## Build\n\nHexo is a website generator, so a build will generate the whole website in a special folder, which has to be published. This output folder can be configured in the ``_config.yml``:\n\n    public_dir: public\n\nTo wipe the output folder, run the command:\n\n    hexo clean\n\nTo start the build, run:\n\n    hexo generate\n\nTo view the website via the build-in local Hexo server, run:\n\n    hexo server\n\n## Publishing\n\nMost \"complex\" task was to publish the new blog on [GitHub Pages](https://pages.github.com/). My first approach was to use my personal page, as I did with my single HTML file, but this didn't work, because I wanted to store the whole project on GitHub and it is not possible to point a personal page to the subdirectory **docs** or use a different branch as **master**.\n\nThe simple solution was to create a new repository, named after my my blog **kiko.io**, to store teh whole project and point the GitHub Page to the subdirectory **docs** in the settings of the repository.\n\n![GitHub Settings](A-New-Blog-VS-Code-Hexo-and-GitHub-Pages/github-1.png)\n\nBy overriding the default publish folder of Hexo in ``_config.yml`` ...\n\n    public_dir: docs\n\n... everything was set up. Commit and Push via git and done.\n\nHexo has its own deploying mechanism and it is advisable to disable it, by commenting out the Deployment section ``_config.yml``.\n\nNext step was to use my own custom domain for the blog. To achieve this, the most easiest way is to create a text file named ``CNAME`` (without extension!) with the content of the domain in a single line and publish this file in the root of the docs folder. Github will recognize this file and do the setup automatically.\n\nTo point the domain to GitHub, I had to create following ``A`` records in my domain providers DNS settings:\n\n* 185.199.108.153\n* 185.199.109.153\n* 185.199.110.153\n* 185.199.111.153\n\nLast step was to enable **Enforce HTTPS** in the repositories settings.\n","tags":["GitHub","Hexo","VS Code","Blogging"],"categories":["Tools"]},{"title":"How-To: Visual Studio Database Project and ADSI","url":"/categories/SQL/How-To-Visual-Studio-Database-Project-and-ADSI/","content":"If you are working with a Visual Studio Database Project and have to deal with data from the Active Directory via a Linked Server, you have to announce the data structure of the AD data in order to get the project compiled.\n<!-- more -->\n## Step 1 - Linking to the Active Directory\n\nFirst of all you have to connect your SQL Server to the AD permanently, by running  following SQL script once on your SQL Server:\n\n    USE [master]\n    GO\n    EXEC master.dbo.sp_addlinkedserver @server = N'ADSI', \n        @srvproduct=N'Active Directory Service Interfaces', \n        @provider=N'ADSDSOObject', \n        @datasrc=N'adsdatasource'\n    \n    EXEC master.dbo.sp_addlinkedsrvlogin @rmtsrvname=N'ADSI',\n        @useself=N'False',\n        @locallogin=NULL,\n        @rmtuser=N'mydomain\\myadminuser',\n        @rmtpassword='mypassword'\n    GO\n    \n    EXEC master.dbo.sp_serveroption @server=N'ADSI', \n        @optname=N'collation compatible', @optvalue=N'false'\n    GO\n    EXEC master.dbo.sp_serveroption @server=N'ADSI', \n        @optname=N'data access', @optvalue=N'true'\n    GO\n    EXEC master.dbo.sp_serveroption @server=N'ADSI', \n        @optname=N'dist', @optvalue=N'false'\n    GO\n    EXEC master.dbo.sp_serveroption @server=N'ADSI', \n        @optname=N'pub', @optvalue=N'false'\n    GO\n    EXEC master.dbo.sp_serveroption @server=N'ADSI', \n        @optname=N'rpc', @optvalue=N'false'\n    GO\n    EXEC master.dbo.sp_serveroption @server=N'ADSI', \n        @optname=N'rpc out', @optvalue=N'false'\n    GO\n    EXEC master.dbo.sp_serveroption @server=N'ADSI', \n        @optname=N'sub', @optvalue=N'false'\n    GO\n    EXEC master.dbo.sp_serveroption @server=N'ADSI', \n        @optname=N'connect timeout', @optvalue=N'0'\n    GO\n    EXEC master.dbo.sp_serveroption @server=N'ADSI', \n        @optname=N'collation name', @optvalue=null\n    GO\n    EXEC master.dbo.sp_serveroption @server=N'ADSI', \n        @optname=N'lazy schema validation', @optvalue=N'false'\n    GO\n    EXEC master.dbo.sp_serveroption @server=N'ADSI', \n        @optname=N'query timeout', @optvalue=N'0'\n    GO\n    EXEC master.dbo.sp_serveroption @server=N'ADSI', \n        @optname=N'use remote collation', @optvalue=N'true'\n    GO\n    EXEC master.dbo.sp_serveroption @server=N'ADSI', \n        @optname=N'remote proc transaction promotion', @optvalue=N'true'\n    GO\n\n## Step 2 - Fetching ADSI data  \n\nTo get data, use ``OpenQuery`` against the Linked Server. In order to get only persons and no system accounts, you should filter out all users, which has no firstname (``givenName``) or lastname (``sn``):\n\n    SELECT \n        UserPrincipalName, \n        DisplayName, \n        sAMAccountName AS [SamAccountName], \n        sn AS [LastName], \n        givenName AS [FirstName], \n        title AS [Title], \n        Mail as [MailAddress],\n        department AS [Department],\n        l AS [Location], \n        postalCode AS [PostCode], \n        streetAddress AS [Street],\n        st AS [State]\n    FROM OpenQuery(ADSI, '\n        SELECT \n            UserPrincipalName, \n            DisplayName, \n            sAMAccountName, \n            sn, \n            givenName, \n            department,\n            title, \n            Mail, \n            l, \n            postalCode, \n            streetAddress, \n            st\n        FROM ''LDAP://mydomain.de/DC=mydomain,DC=de'' \n        WHERE objectClass =  ''User'' \n        AND objectCategory = ''Person'' \n        AND sn=''*'' \n        AND givenName = ''*'' \n    ')    \n\nIn most cases you're done with that ... except your organisation has more the 900 users! Then you have to split the fetch in several requests, because SQL Server quits with an error, when trying to read more than 900 records via ADSI.  \n\nBest option is, to filter the ADSI statement by something like *'get all user starting with a to j'*, when you are sure, that in this case less than 900 records will be given back and repeat the statement several times and glue the data together via a ``UNION`` statement:\n\n<pre>\n<code>SELECT  \n    UserPrincipalName,  \n    DisplayName,  \n    sAMAccountName AS [SamAccountName],  \n    sn AS [LastName],  \n    givenName AS [FirstName],  \n    title AS [Title],  \n    Mail as [MailAddress],  \n    department AS [Department],  \n    l AS [Location],  \n    postalCode AS [PostCode],  \n    streetAddress AS [Street],  \n    st AS [State]  \nFROM (  \n    SELECT *  \n    FROM OpenQuery(ADSI, '  \n        SELECT  \n            UserPrincipalName,  \n            DisplayName,  \n            sAMAccountName,  \n            sn,  \n            givenName,  \n            department,  \n            title,  \n            Mail,  \n            l,  \n            postalCode,  \n            streetAddress,  \n            st  \n        FROM ''LDAP://mydomain.de/DC=mydomain,DC=de''  \n        WHERE objectClass =  ''User''  \n        AND objectCategory = ''Person''  \n        AND sn=''*''  \n        AND givenName = ''*''  \n        <strong>AND sAMAccountName &lt;= ''j''</strong>\n    ')  \n\n    <strong>UNION ALL</strong>  \n\n    SELECT *  \n    FROM OpenQuery(ADSI, '  \n        SELECT <em>[...same as above]</em>  \n        FROM ''LDAP://mydomain.de/DC=mydomain,DC=de''  \n        WHERE objectClass =  ''User''  \n        AND objectCategory = ''Person''  \n        AND sn=''*''  \n        AND givenName = ''*''  \n        <strong>AND sAMAccountName &gt; ''j''</strong>  \n        <strong>AND sAMAccountName &lt; ''p''</strong>  \n    ')\n\n    <strong>UNION ALL</strong>  \n\n    SELECT *  \n    FROM OpenQuery(ADSI,  '  \n        SELECT <em>[...same as above]</em>  \n        FROM ''LDAP://mydomain.de/DC=mydomain,DC=de''  \n        WHERE objectClass =  ''User''  \n        AND objectCategory = ''Person''  \n        AND sn=''*'' AND givenName = ''*''  \n        <strong>AND sAMAccountName &gt;= ''p''</strong>  \n    ')  \n) AD</code>\n</pre>\n\nWhen you store this as a VIEW, you can join it wherever you want on SQL Server:\n\n<pre>\n<code>CREATE VIEW [dbo].[vADUsers]\nAS\n    <em>[...SQL code from above]</em>\n\nGO</code>\n</pre>\n\n## Step 3 - SQL Server Database Project\n\nIf you work with a SQL Server Database Project, to have the complete structure of your database available in a version control system, you will get some reference errors on compiling and publishing your newly added SQL View ``vADUsers`` and on some objects, which rely on this View, because of following problems:\n\n1. Project doesn't know the Linked Server `ADSI`\n2. The structure (fields) of the data source is unknown\n\n### Declare the Linked Server\n\nTo show the Project that there is a Linked Server called ``ADSI``, just add following lines at the start of your view:\n\n<pre>\n<code><strong>sp_addlinkedserver 'ADSI'</strong>\n<strong>GO</strong>\n\nCREATE VIEW [dbo].[vADUsers]\nAS\n    <em>[...SQL code from above]</em></code>\n</pre>\n\nThis mimics the adding of a Linked Server, but will be ignored by SQL Server on publish, because you already have a Linked Server with this name. The project is happy with it.\n\n### Declare the data structure\n\nWhen you use the SQL-View ``vADUsers`` in a Stored Procedure for example, this object won't compile, because the project knows nothing about the fields of the ADSI data source. The SELECT in the view is not enough. You have to add an empty ``SELECT`` to the View ``vADUsers``, just for the declaration of the fields and without returning any records and join this via ``UNION`` with the other statements:\n\n<pre>\n<code>sp_addlinkedserver 'ADSI'\nGO\n\nCREATE VIEW [dbo].[vtADAllUsers]\nAS\n\nSELECT\n    UserPrincipalName,\n    DisplayName,\n    sAMAccountName AS [SamAccountName],\n    sn AS [LastName],\n    givenName AS [FirstName],\n    title AS [Title],\n    Mail as [MailAddress],\n    department AS [Department],\n    l AS [Location],\n    postalCode AS [PostCode],\n    streetAddress AS [Street],\n    st AS [State]\nFROM (\n\n    -- Fake SELECT to declare the structure of the view<strong>\n    SELECT TOP 0\n        '' UserPrincipalName,\n        '' DisplayName,\n        '' sAMAccountName,\n        '' sn,\n        '' givenName,\n        '' department,\n        '' title,\n        '' Mail,\n        '' l,\n        '' postalCode,\n        '' streetAddress,\n        '' st\n\n    UNION ALL</strong>\n\n    SELECT *\n    FROM OpenQuery(ADSI, '\n        SELECT\n            UserPrincipalName,\n            DisplayName,\n            sAMAccountName,\n            sn,\n            givenName,\n            department,\n            title,\n            Mail,\n            l,\n            postalCode,\n            streetAddress,\n            st\n        FROM ''LDAP://mydomain.de/DC=mydomain,DC=de''\n        WHERE objectClass =  ''User''\n        AND objectCategory = ''Person''\n        AND sn=''*''\n        AND givenName = ''*''\n        AND sAMAccountName &gt;= ''j''  \n    ')\n\n    UNION ALL  \n\n    SELECT *  \n    FROM OpenQuery(ADSI, '  \n        SELECT <em>[...same as above]</em>  \n        FROM ''LDAP://mydomain.de/DC=mydomain,DC=de''  \n        WHERE objectClass =  ''User''  \n        AND objectCategory = ''Person''  \n        AND sn=''*''  \n        AND givenName = ''*''  \n        AND sAMAccountName &lt; ''j''  \n        AND sAMAccountName &gt; ''p''  \n    ')\n\n    UNION ALL  \n\n    SELECT *  \n    FROM OpenQuery(ADSI,  '  \n        SELECT <em>[...same as above]</em>  \n        FROM ''LDAP://mydomain.de/DC=mydomain,DC=de''  \n        WHERE objectClass =  ''User''  \n        AND objectCategory = ''Person''  \n        AND sn=''*''  \n        AND givenName = ''*''  \n        AND sAMAccountName &lt;= ''p''  \n    ')\n) AD</code>\n</pre>\n\nNow, you can fetch data from Active Directory and store the code in a Database Project properly.\n\nHAPPY CODING :)\n","tags":["ADSI","Visual Studio","Database Project"],"categories":["SQL"]}]