<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://kiko.io/</id>
    <title>kiko.io</title>
<subtitle>Memorable Tech Stuff</subtitle><icon>images/favicon-32x32.png</icon><logo>images/icon-72x72.png</logo>    <link href="https://kiko.io" />
    <link href="https://kiko.io/atom.xml" rel="self"/>
    <updated>2021-04-21T09:55:15.000Z</updated>
    <author>
        <name>Kristof Zerbe</name>
<email>kristof.zerbe@gmail.com</email>    </author>
    <generator uri="https://hexo.io/">Hexo</generator>
    <category term="Tools" scheme="https://kiko.io/categories/Tools/" />
    <category term="Misc" scheme="https://kiko.io/categories/Misc/" />
    <category term="JavaScript" scheme="https://kiko.io/categories/JavaScript/" />
    <category term="C#" scheme="https://kiko.io/categories/C/" />
    <category term="Discoveries" scheme="https://kiko.io/categories/Discoveries/" />
    <category term="Photo-Editing" scheme="https://kiko.io/categories/Photo-Editing/" />
    <category term="UI-Design" scheme="https://kiko.io/categories/UI-Design/" />
    <category term="SQL" scheme="https://kiko.io/categories/SQL/" />
    <category term="GitHub" scheme="https://kiko.io/tags/GitHub/" />
    <category term="Hexo" scheme="https://kiko.io/tags/Hexo/" />
    <category term="Error" scheme="https://kiko.io/tags/Error/" />
    <category term="VS Code" scheme="https://kiko.io/tags/VS-Code/" />
    <category term="Blogging" scheme="https://kiko.io/tags/Blogging/" />
    <category term="Trello" scheme="https://kiko.io/tags/Trello/" />
    <category term="Browser" scheme="https://kiko.io/tags/Browser/" />
    <category term="Android" scheme="https://kiko.io/tags/Android/" />
    <category term="Imaging" scheme="https://kiko.io/tags/Imaging/" />
    <category term="jQuery" scheme="https://kiko.io/tags/jQuery/" />
    <category term="CSS" scheme="https://kiko.io/tags/CSS/" />
    <category term="WebAPI" scheme="https://kiko.io/tags/WebAPI/" />
    <category term="Authentication" scheme="https://kiko.io/tags/Authentication/" />
    <category term="Visual Studio" scheme="https://kiko.io/tags/Visual-Studio/" />
    <category term="MediaQuery" scheme="https://kiko.io/tags/MediaQuery/" />
    <category term="Great Finds" scheme="https://kiko.io/tags/Great-Finds/" />
    <category term="Lightroom" scheme="https://kiko.io/tags/Lightroom/" />
    <category term="Publishing" scheme="https://kiko.io/tags/Publishing/" />
    <category term="Plugin" scheme="https://kiko.io/tags/Plugin/" />
    <category term="Stylus" scheme="https://kiko.io/tags/Stylus/" />
    <category term="Dark Mode" scheme="https://kiko.io/tags/Dark-Mode/" />
    <category term="ADSI" scheme="https://kiko.io/tags/ADSI/" />
    <category term="Database Project" scheme="https://kiko.io/tags/Database-Project/" />
    <category term="Events" scheme="https://kiko.io/tags/Events/" />
    <category term="SPA" scheme="https://kiko.io/tags/SPA/" />
    <category term="Bundling" scheme="https://kiko.io/tags/Bundling/" />
    <category term="Presets" scheme="https://kiko.io/tags/Presets/" />
    <category term="Resource" scheme="https://kiko.io/tags/Resource/" />
    <category term="Localization" scheme="https://kiko.io/tags/Localization/" />
    <category term="Versioning" scheme="https://kiko.io/tags/Versioning/" />
    <category term="T4" scheme="https://kiko.io/tags/T4/" />
    <category term="Templating" scheme="https://kiko.io/tags/Templating/" />
    <category term="ES6" scheme="https://kiko.io/tags/ES6/" />
    <category term="Share" scheme="https://kiko.io/tags/Share/" />
    <category term="Debugging" scheme="https://kiko.io/tags/Debugging/" />
    <category term="SVG" scheme="https://kiko.io/tags/SVG/" />
    <category term="DOM" scheme="https://kiko.io/tags/DOM/" />
    <category term="Windows" scheme="https://kiko.io/tags/Windows/" />
    <category term="Theming" scheme="https://kiko.io/tags/Theming/" />
    <category term="PowerShell" scheme="https://kiko.io/tags/PowerShell/" />
    <category term="TFS/DevOps" scheme="https://kiko.io/tags/TFS-DevOps/" />
    <category term="Node.js" scheme="https://kiko.io/tags/Node-js/" />
    <entry>
        <id>https://kiko.io/categories/Tools/Spice-Up-Windows-Terminal/</id>
            <title>Updated: Spice Up Windows Terminal</title>
            <published>2020-12-24T14:03:15.000Z</published>
            <updated>2021-04-21T09:55:15.000Z</updated>
        <link href="https://kiko.io/categories/Tools/Spice-Up-Windows-Terminal/"/>
        <summary type="html">
            &lt;p&gt;&lt;img src=&#34;https://kiko.io/photos/mobile/DSC_8860.jpg&#34; /&gt;&lt;/p&gt;&lt;p&gt;Working with the PowerShell in 2020 means fun, because of the new &lt;a href=&#34;https://www.microsoft.com/en-us/p/windows-terminal/9n0dx20hk701&#34;&gt;&lt;strong&gt;Windows Terminal&lt;/strong&gt; (get it from Windows Store)&lt;/a&gt;. It has more power as the old Powershell Console and it is visually adaptable to your personal taste, by installing the wonderful theming engine &lt;a href=&#34;https://github.com/JanDeDobbeleer/oh-my-posh&#34;&gt;&lt;strong&gt;oh-my-posh&lt;/strong&gt; from Jan De Dobbeleer&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/categories/Tools/Spice-Up-Windows-Terminal/terminal-original.png&#34; alt=&#34;Original Terminal&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/categories/Tools/Spice-Up-Windows-Terminal/terminal-oh-my-posh.png&#34; alt=&#34;Terminal with oh-my-posh&#34;&gt;&lt;/p&gt;
&lt;p&gt;To get Oh-My-Posh properly run, there are several steps to do I want to show here in a nutshell…&lt;/p&gt;&lt;p&gt;Read more ...&lt;/p&gt;
        </summary>
        <content type="html">
            &lt;p&gt;Working with the PowerShell in 2020 means fun, because of the new &lt;a href=&#34;https://www.microsoft.com/en-us/p/windows-terminal/9n0dx20hk701&#34;&gt;&lt;strong&gt;Windows Terminal&lt;/strong&gt; (get it from Windows Store)&lt;/a&gt;. It has more power as the old Powershell Console and it is visually adaptable to your personal taste, by installing the wonderful theming engine &lt;a href=&#34;https://github.com/JanDeDobbeleer/oh-my-posh&#34;&gt;&lt;strong&gt;oh-my-posh&lt;/strong&gt; from Jan De Dobbeleer&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/categories/Tools/Spice-Up-Windows-Terminal/terminal-original.png&#34; alt=&#34;Original Terminal&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/categories/Tools/Spice-Up-Windows-Terminal/terminal-oh-my-posh.png&#34; alt=&#34;Terminal with oh-my-posh&#34;&gt;&lt;/p&gt;
&lt;p&gt;To get Oh-My-Posh properly run, there are several steps to do I want to show here in a nutshell…&lt;/p&gt;
&lt;a id=&#34;more&#34;&gt;&lt;/a&gt;

&lt;h2 id=&#34;Step-1-Install-a-suitable-font&#34;&gt;&lt;a href=&#34;#Step-1-Install-a-suitable-font&#34; class=&#34;headerlink&#34; title=&#34;Step 1 -  Install a suitable font&#34;&gt;&lt;/a&gt;Step 1 -  Install a suitable font&lt;/h2&gt;&lt;p&gt;As the theming engine uses Powerline glyphs, you need to install a font which support them, for example the new &lt;a href=&#34;https://github.com/microsoft/cascadia-code/releases&#34;&gt;&lt;strong&gt;Cascadia Code PL&lt;/strong&gt; from Microsoft&lt;/a&gt;. Download, unzip and install the OTF and/or TTF font files via context menu in your Windows Explorer.&lt;/p&gt;
&lt;h2 id=&#34;Step-2-Set-new-font-in-your-settings&#34;&gt;&lt;a href=&#34;#Step-2-Set-new-font-in-your-settings&#34; class=&#34;headerlink&#34; title=&#34;Step 2 - Set new font in your settings&#34;&gt;&lt;/a&gt;Step 2 - Set new font in your settings&lt;/h2&gt;&lt;p&gt;Open up you Terminal settings…&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/categories/Tools/Spice-Up-Windows-Terminal/terminal-settings.png&#34; alt=&#34;Windows Terminal Settings&#34;&gt;&lt;/p&gt;
&lt;p&gt;… and add following new line to the PowerShell section:&lt;/p&gt;
&lt;figure class=&#34;highlight&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;fontFace&amp;quot;: &amp;quot;Cascadia Code PL&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&#34;/categories/Tools/Spice-Up-Windows-Terminal/terminal-settings-font.png&#34; alt=&#34;Font&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;Step-3-Install-oh-my-posh&#34;&gt;&lt;a href=&#34;#Step-3-Install-oh-my-posh&#34; class=&#34;headerlink&#34; title=&#34;Step 3 - Install oh-my-posh&#34;&gt;&lt;/a&gt;Step 3 - Install oh-my-posh&lt;/h2&gt;&lt;p&gt;Following PowerShell command installs the theming engine itself:&lt;/p&gt;
&lt;figure class=&#34;highlight ps&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;Install-Module&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;oh&lt;/span&gt;&lt;span class=&#34;literal&#34;&gt;-my&lt;/span&gt;&lt;span class=&#34;literal&#34;&gt;-posh&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;-Scope&lt;/span&gt; CurrentUser&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;If you want to display &lt;strong&gt;Git status information&lt;/strong&gt; also, run this command:&lt;/p&gt;
&lt;figure class=&#34;highlight ps&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;Install-Module&lt;/span&gt; posh&lt;span class=&#34;literal&#34;&gt;-git&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;-Scope&lt;/span&gt; CurrentUser&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;To let the command-line editing environment to be customized install &lt;strong&gt;PSReadline&lt;/strong&gt;:&lt;/p&gt;
&lt;figure class=&#34;highlight ps&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;Install-Module&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;-Name&lt;/span&gt; PSReadLine &lt;span class=&#34;literal&#34;&gt;-Scope&lt;/span&gt; CurrentUser &lt;span class=&#34;literal&#34;&gt;-Force&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;-SkipPublisherCheck&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;Step-4-Load-on-startup&#34;&gt;&lt;a href=&#34;#Step-4-Load-on-startup&#34; class=&#34;headerlink&#34; title=&#34;Step 4 - Load on startup&#34;&gt;&lt;/a&gt;Step 4 - Load on startup&lt;/h2&gt;&lt;p&gt;In order to load the theming engine in every new terminal window, edit your PowerShell profile by opening it up with the command …&lt;/p&gt;
&lt;figure class=&#34;highlight ps&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;notepad &lt;span class=&#34;variable&#34;&gt;$PROFILE&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;and add following lines in the upcoming text file:&lt;/p&gt;
&lt;figure class=&#34;highlight txt&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Import-Module oh-my-posh&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Import-Module posh-git&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Set-Theme Paradox&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;em&gt;Paradox&lt;/em&gt; is one of 27 themes available. You will find all themes in your DOCUMENTS folder under &lt;code&gt;..\WindowsPowerShell\Modules\oh-my-posh\&amp;lt;version&amp;gt;\Themes&lt;/code&gt; and some visual representations at &lt;a href=&#34;https://github.com/JanDeDobbeleer/oh-my-posh?#themes&#34;&gt;https://github.com/JanDeDobbeleer/oh-my-posh?#themes&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;Update-April-2021&#34;&gt;&lt;a href=&#34;#Update-April-2021&#34; class=&#34;headerlink&#34; title=&#34;#Update, April 2021&#34;&gt;&lt;/a&gt;#Update, April 2021&lt;/h2&gt;&lt;p&gt;Scott Hanselman has mentioned a new improvement recently: Show suitable icons on listing files:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Download and install &lt;strong&gt;CaskaydiaCove Nerd Font&lt;/strong&gt; at &lt;a href=&#34;https://www.nerdfonts.com/font-downloads&#34;&gt;https://www.nerdfonts.com/font-downloads&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Open Terminal Settings (like in Step 2)&lt;/li&gt;
&lt;li&gt;Replace the &lt;code&gt;fontface&lt;/code&gt; with &lt;code&gt;&amp;quot;CaskaydiaCove Nerd Font&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;Install-Module -Name Terminal-Icons -Repository PSGallery&lt;/code&gt; in Terminal, opened as administrator&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;Import-Module -Name Terminal-Icons&lt;/code&gt; in your profile (like in Step 4)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You will get this on calling &lt;code&gt;dir&lt;/code&gt;, for example:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/categories/Tools/Spice-Up-Windows-Terminal/terminal-icons.png&#34; alt=&#34;Windows Terminal Icons&#34;&gt;&lt;/p&gt;

        &lt;h2&gt;More Info&lt;/h2&gt;
        &lt;ul class=&#34;moreinfo-list&#34;&gt;
            &lt;li&gt;Windows Store: &lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://www.microsoft.com/en-us/p/windows-terminal/9n0dx20hk701&#34;&gt;Windows Terminal&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Microsoft: &lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://github.com/microsoft/cascadia-code&#34;&gt;Cascadia Code PL&lt;/a&gt;&lt;/li&gt;&lt;li&gt;GitHub: &lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://github.com/JanDeDobbeleer/oh-my-posh&#34;&gt;JanDeDobbeleer/oh-my-posh&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Microsoft Docs: &lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://docs.microsoft.com/de-de/windows/terminal/tutorials/powerline-setup&#34;&gt;Set up Powerline in Windows Terminal&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Scott Hanselman: &lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://www.hanselman.com/blog/how-to-make-a-pretty-prompt-in-windows-terminal-with-powerline-nerd-fonts-cascadia-code-wsl-and-ohmyposh&#34;&gt;How to make a pretty prompt in Windows Terminal with Powerline, Nerd Fonts, Cascadia Code, WSL, and oh-my-posh&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Scott Hanselman: &lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://www.hanselman.com/blog/taking-your-powershell-prompt-to-the-next-level-with-windows-terminal-and-oh-my-posh-3&#34;&gt;Taking your PowerShell prompt to the next level with Windows Terminal and Oh my Posh 3&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Scott Hanselman: &lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://www.hanselman.com/blog/take-your-windows-terminal-and-powershell-to-the-next-level-with-terminal-icons&#34;&gt;Take your Windows Terminal and PowerShell to the next level with Terminal Icons&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
    


        </content>
        <category term="Tools" scheme="https://kiko.io/categories/Tools/" />
        <category term="Windows" scheme="https://kiko.io/tags/Windows/" />
        <category term="Theming" scheme="https://kiko.io/tags/Theming/" />
        <category term="PowerShell" scheme="https://kiko.io/tags/PowerShell/" />
            
    </entry>
    <entry>
        <id>https://kiko.io/categories/Misc/Adding-Screenshots-to-Trello-Cards-on-Android/</id>
            <title>Adding Screenshots to Trello Cards on Android</title>
            <published>2021-04-11T14:11:10.000Z</published>
        <link href="https://kiko.io/categories/Misc/Adding-Screenshots-to-Trello-Cards-on-Android/"/>
        <summary type="html">
            &lt;p&gt;&lt;img src=&#34;https://kiko.io/photos/mobile/DSC_7006-HDR.jpg&#34; /&gt;&lt;/p&gt;&lt;p&gt;I’m collecting interesting One-Page-Tools on the web on a Trello board. To add a new card, I use a simple little script on my Android smartphone, I wrote about here: &lt;a href=&#34;/categories/Tools/Add-website-to-Trello-card-the-better-way/&#34; title=&#34;Add website to Trello card the better way&#34;&gt;Add website to Trello card the better way&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;On processing the page to store on a card, Trello scrapes the page and takes the &lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; tag &lt;code&gt;og:image&lt;/code&gt; out of the HTML to generate an image attachment and take it as cover for the card. This sometimes works, but most of the time it doesn’t, because website owners often don’t pay attention to reasonable &lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; tags.&lt;/p&gt;
&lt;p&gt;Because it is easier to find a card with visual support, I create my own screenshots for the cards in a manual, but streamlined, process, I want to show you here.&lt;/p&gt;&lt;p&gt;Read more ...&lt;/p&gt;
        </summary>
        <content type="html">
            &lt;p&gt;I’m collecting interesting One-Page-Tools on the web on a Trello board. To add a new card, I use a simple little script on my Android smartphone, I wrote about here: &lt;a href=&#34;/categories/Tools/Add-website-to-Trello-card-the-better-way/&#34; title=&#34;Add website to Trello card the better way&#34;&gt;Add website to Trello card the better way&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;On processing the page to store on a card, Trello scrapes the page and takes the &lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; tag &lt;code&gt;og:image&lt;/code&gt; out of the HTML to generate an image attachment and take it as cover for the card. This sometimes works, but most of the time it doesn’t, because website owners often don’t pay attention to reasonable &lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; tags.&lt;/p&gt;
&lt;p&gt;Because it is easier to find a card with visual support, I create my own screenshots for the cards in a manual, but streamlined, process, I want to show you here.&lt;/p&gt;
&lt;a id=&#34;more&#34;&gt;&lt;/a&gt;

&lt;h2 id=&#34;Prerequisites&#34;&gt;&lt;a href=&#34;#Prerequisites&#34; class=&#34;headerlink&#34; title=&#34;Prerequisites&#34;&gt;&lt;/a&gt;Prerequisites&lt;/h2&gt;&lt;p&gt;OS:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Android&lt;/strong&gt; 5 and above &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Apps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Trello&lt;/strong&gt;&lt;br&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=com.trello&#34;&gt;https://play.google.com/store/apps/details?id=com.trello&lt;/a&gt;  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Screenshot Touch&lt;/strong&gt;&lt;br&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=com.mdiwebma.screenshot&#34;&gt;https://play.google.com/store/apps/details?id=com.mdiwebma.screenshot&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;Step-1&#34;&gt;&lt;a href=&#34;#Step-1&#34; class=&#34;headerlink&#34; title=&#34;Step 1&#34;&gt;&lt;/a&gt;Step 1&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Open up &lt;strong&gt;Screenshot Touch&lt;/strong&gt; and set under &lt;code&gt;Shaking and Delay&lt;/code&gt; the option &lt;code&gt;Caption by shaking&lt;/code&gt; &lt;strong&gt;[1]&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Set the &lt;code&gt;Shake sensitivity&lt;/code&gt; option to &lt;code&gt;Hard&lt;/code&gt; &lt;strong&gt;[2]&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Set the &lt;code&gt;Resize&lt;/code&gt; option to &lt;code&gt;50%&lt;/code&gt; &lt;strong&gt;[3]&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Start the capture monitoring service &lt;strong&gt;[4]&lt;/strong&gt;.  &lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;/categories/Misc/Adding-Screenshots-to-Trello-Cards-on-Android/step-01.png&#34; class&gt;

&lt;hr&gt;
&lt;h2 id=&#34;Step-2&#34;&gt;&lt;a href=&#34;#Step-2&#34; class=&#34;headerlink&#34; title=&#34;Step 2&#34;&gt;&lt;/a&gt;Step 2&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Open up &lt;strong&gt;Trello&lt;/strong&gt; and got to the card, where you want to add an screenshot for use as an cover.&lt;/li&gt;
&lt;li&gt;Click on the URL attachment to open it in your browser &lt;strong&gt;[1]&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;/categories/Misc/Adding-Screenshots-to-Trello-Cards-on-Android/step-02.png&#34; class&gt;

&lt;hr&gt;
&lt;h2 id=&#34;Step-3&#34;&gt;&lt;a href=&#34;#Step-3&#34; class=&#34;headerlink&#34; title=&#34;Step 3&#34;&gt;&lt;/a&gt;Step 3&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Shake you smartphone to capture the current website.&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;/categories/Misc/Adding-Screenshots-to-Trello-Cards-on-Android/step-03.png&#34; class&gt;

&lt;hr&gt;
&lt;h2 id=&#34;Step-4&#34;&gt;&lt;a href=&#34;#Step-4&#34; class=&#34;headerlink&#34; title=&#34;Step 4&#34;&gt;&lt;/a&gt;Step 4&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Switch to &lt;strong&gt;Screenshot Touch&lt;/strong&gt; and open the &lt;code&gt;Photo Viewer&lt;/code&gt; &lt;strong&gt;[1]&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;/categories/Misc/Adding-Screenshots-to-Trello-Cards-on-Android/step-04.png&#34; class&gt;

&lt;hr&gt;
&lt;h2 id=&#34;Step-5&#34;&gt;&lt;a href=&#34;#Step-5&#34; class=&#34;headerlink&#34; title=&#34;Step 5&#34;&gt;&lt;/a&gt;Step 5&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Open the &lt;code&gt;Crop Image&lt;/code&gt; dialog.&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;/categories/Misc/Adding-Screenshots-to-Trello-Cards-on-Android/step-05.png&#34; class&gt;

&lt;hr&gt;
&lt;h2 id=&#34;Step-6&#34;&gt;&lt;a href=&#34;#Step-6&#34; class=&#34;headerlink&#34; title=&#34;Step 6&#34;&gt;&lt;/a&gt;Step 6&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Set the &lt;code&gt;Crop Mode&lt;/code&gt; to &lt;code&gt;1:1&lt;/code&gt; to get a squared image. It will be persisted in the apps settings for further use.&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;/categories/Misc/Adding-Screenshots-to-Trello-Cards-on-Android/step-06.png&#34; class&gt;

&lt;hr&gt;
&lt;h2 id=&#34;Step-7&#34;&gt;&lt;a href=&#34;#Step-7&#34; class=&#34;headerlink&#34; title=&#34;Step 7&#34;&gt;&lt;/a&gt;Step 7&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Place the overlay to select you preferred part of the image &lt;strong&gt;[1]&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Save the image &lt;strong&gt;[2]&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;/categories/Misc/Adding-Screenshots-to-Trello-Cards-on-Android/step-07.png&#34; class&gt;

&lt;hr&gt;
&lt;h2 id=&#34;Step-8&#34;&gt;&lt;a href=&#34;#Step-8&#34; class=&#34;headerlink&#34; title=&#34;Step 8&#34;&gt;&lt;/a&gt;Step 8&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Switch back to &lt;strong&gt;Trello&lt;/strong&gt; and click to add a new attachment &lt;strong&gt;[1]&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;/categories/Misc/Adding-Screenshots-to-Trello-Cards-on-Android/step-08.png&#34; class&gt;

&lt;hr&gt;
&lt;h2 id=&#34;Step-9&#34;&gt;&lt;a href=&#34;#Step-9&#34; class=&#34;headerlink&#34; title=&#34;Step 9&#34;&gt;&lt;/a&gt;Step 9&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Choose to add from file &lt;strong&gt;[1]&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;/categories/Misc/Adding-Screenshots-to-Trello-Cards-on-Android/step-09.png&#34; class&gt;

&lt;hr&gt;
&lt;h2 id=&#34;Step-10&#34;&gt;&lt;a href=&#34;#Step-10&#34; class=&#34;headerlink&#34; title=&#34;Step 10&#34;&gt;&lt;/a&gt;Step 10&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;In Androids file dialog, head up to &lt;code&gt;Recent Files&lt;/code&gt; &lt;strong&gt;[1]&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Select the new image &lt;strong&gt;[2]&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;/categories/Misc/Adding-Screenshots-to-Trello-Cards-on-Android/step-10.png&#34; class&gt;

&lt;hr&gt;
&lt;h2 id=&#34;Step-11&#34;&gt;&lt;a href=&#34;#Step-11&#34; class=&#34;headerlink&#34; title=&#34;Step 11&#34;&gt;&lt;/a&gt;Step 11&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;In the context menu of the added attachment, select &lt;code&gt;Make Card Cover&lt;/code&gt; &lt;strong&gt;[1]&lt;/strong&gt;, if Trello has not done it yet.&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;/categories/Misc/Adding-Screenshots-to-Trello-Cards-on-Android/step-11.png&#34; class&gt;

&lt;hr&gt;
&lt;h2 id=&#34;Result&#34;&gt;&lt;a href=&#34;#Result&#34; class=&#34;headerlink&#34; title=&#34;Result&#34;&gt;&lt;/a&gt;Result&lt;/h2&gt;&lt;p&gt;Once you have done this two or three times, the process takes less than 30 seconds.&lt;/p&gt;
&lt;img src=&#34;/categories/Misc/Adding-Screenshots-to-Trello-Cards-on-Android/result.png&#34; class&gt;
        </content>
        <category term="Misc" scheme="https://kiko.io/categories/Misc/" />
        <category term="Trello" scheme="https://kiko.io/tags/Trello/" />
        <category term="Android" scheme="https://kiko.io/tags/Android/" />
        <category term="Imaging" scheme="https://kiko.io/tags/Imaging/" />
            
    </entry>
    <entry>
        <id>https://kiko.io/categories/UI-Design/SVG-Resources/</id>
            <title>SVG Resources</title>
            <published>2021-04-09T12:07:53.000Z</published>
        <link href="https://kiko.io/categories/UI-Design/SVG-Resources/"/>
        <summary type="html">
            &lt;p&gt;&lt;img src=&#34;https://kiko.io/photos/mobile/DSC_4936.jpg&#34; /&gt;&lt;/p&gt;&lt;style&gt;
  #post-SVG-Resources button {
    background-color: #f1f1f1;
    border: none;
    padding: 1rem;
    margin-bottom: 1rem;
    margin-right: 1rem;
    cursor: pointer;
  }
  #post-SVG-Resources em {
    opacity: 0.33;
  }
  #post-SVG-Resources #info {
    color: silver;
    display: block;
    height: 24px;
  }
  #post-SVG-Resources #info.result {
    color: green;
    font-weight: bold;
  }
&lt;/style&gt;
&lt;script&gt;
  var timeoutID;
  function setInfo(e,m) {
    let info = document.getElementById(e);
    info.textContent = m;
    info.classList.add(&#34;result&#34;);
    window.clearTimeout(timeoutID);
    timeoutID = setTimeout(function() {
      info.textContent = &#34;Guess and click...&#34;;
      info.classList.remove(&#34;result&#34;);
      window.clearTimeout(timeoutID);
    }, 2000);
  }
&lt;/script&gt;

&lt;p&gt;Since beginning beginning of time, people are using symbols to make things clear quickly and easily. So do we when developing websites and web apps by using icons. Everybody knows what’s behind a loupe symbol or a hamburger icon.&lt;/p&gt;
&lt;button onclick=&#34;setInfo(&#39;info&#39;, &#39;Yes, it\&#39;s a SEARCH button ;)&#39;);&#34;&gt;
&lt;svg width=&#34;24&#34; height=&#34;24&#34; viewbox=&#34;0 0 24 24&#34; fill=&#34;none&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;
  &lt;path fill=&#34;currentColor&#34; fill-rule=&#34;evenodd&#34; clip-rule=&#34;evenodd&#34; d=&#34;M18.319 14.4326C20.7628 11.2941 20.542 6.75347 17.6569 3.86829C14.5327 0.744098 9.46734 0.744098 6.34315 3.86829C3.21895 6.99249 3.21895 12.0578 6.34315 15.182C9.22833 18.0672 13.769 18.2879 16.9075 15.8442C16.921 15.8595 16.9351 15.8745 16.9497 15.8891L21.1924 20.1317C21.5829 20.5223 22.2161 20.5223 22.6066 20.1317C22.9971 19.7412 22.9971 19.1081 22.6066 18.7175L18.364 14.4749C18.3493 14.4603 18.3343 14.4462 18.319 14.4326ZM16.2426 5.28251C18.5858 7.62565 18.5858 11.4246 16.2426 13.7678C13.8995 16.1109 10.1005 16.1109 7.75736 13.7678C5.41421 11.4246 5.41421 7.62565 7.75736 5.28251C10.1005 2.93936 13.8995 2.93936 16.2426 5.28251Z&#34;/&gt;
&lt;/svg&gt;
&lt;/button&gt;
&lt;button onclick=&#34;setInfo(&#39;info&#39;, &#39;Yeah ... an OPEN MENU button ;)&#39;);&#34;&gt;
&lt;svg width=&#34;24&#34; height=&#34;24&#34; viewbox=&#34;0 0 24 24&#34; fill=&#34;none&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;
  &lt;path fill=&#34;currentColor&#34; d=&#34;M2 6C2 5.44772 2.44772 5 3 5H21C21.5523 5 22 5.44772 22 6C22 6.55228 21.5523 7 21 7H3C2.44772 7 2 6.55228 2 6Z&#34;/&gt;
  &lt;path fill=&#34;currentColor&#34; d=&#34;M2 12.0322C2 11.4799 2.44772 11.0322 3 11.0322H21C21.5523 11.0322 22 11.4799 22 12.0322C22 12.5845 21.5523 13.0322 21 13.0322H3C2.44772 13.0322 2 12.5845 2 12.0322Z&#34;/&gt;
  &lt;path fill=&#34;currentColor&#34; d=&#34;M3 17.0645C2.44772 17.0645 2 17.5122 2 18.0645C2 18.6167 2.44772 19.0645 3 19.0645H21C21.5523 19.0645 22 18.6167 22 18.0645C22 17.5122 21.5523 17.0645 21 17.0645H3Z&#34;/&gt;
&lt;/svg&gt;
&lt;/button&gt;&lt;br&gt;&lt;span id=&#34;info&#34;&gt;Guess and click...&lt;/span&gt;

&lt;p&gt;The way we implement icons have changed in the past. From BMP files to GIF and JPG files, PNG files, to complete or customizable symbol fonts like &lt;a href=&#34;https://fontello.com&#34;&gt;fontello.com&lt;/a&gt;, to Scalable Vector Graphics (SVG).&lt;/p&gt;
&lt;p&gt;SVG’s in particular are becoming increasingly popular, because they are nothing more than XML-like code, that can be manipulated via CSS or JS, their digital footprint is unbeatable small and they scale seemlessly.&lt;/p&gt;
&lt;p&gt;Dealing with SVG’s is a little bit more difficult than placing a PNG in HTML, because of its complexity, but it is worth learning as much as possible about it. So did I in the last couple of month and I want to share my finds on the web with you in this post.&lt;/p&gt;&lt;p&gt;Read more ...&lt;/p&gt;
        </summary>
        <content type="html">
            &lt;style&gt;
  #post-SVG-Resources button {
    background-color: #f1f1f1;
    border: none;
    padding: 1rem;
    margin-bottom: 1rem;
    margin-right: 1rem;
    cursor: pointer;
  }
  #post-SVG-Resources em {
    opacity: 0.33;
  }
  #post-SVG-Resources #info {
    color: silver;
    display: block;
    height: 24px;
  }
  #post-SVG-Resources #info.result {
    color: green;
    font-weight: bold;
  }
&lt;/style&gt;
&lt;script&gt;
  var timeoutID;
  function setInfo(e,m) {
    let info = document.getElementById(e);
    info.textContent = m;
    info.classList.add(&#34;result&#34;);
    window.clearTimeout(timeoutID);
    timeoutID = setTimeout(function() {
      info.textContent = &#34;Guess and click...&#34;;
      info.classList.remove(&#34;result&#34;);
      window.clearTimeout(timeoutID);
    }, 2000);
  }
&lt;/script&gt;

&lt;p&gt;Since beginning beginning of time, people are using symbols to make things clear quickly and easily. So do we when developing websites and web apps by using icons. Everybody knows what’s behind a loupe symbol or a hamburger icon.&lt;/p&gt;
&lt;button onclick=&#34;setInfo(&#39;info&#39;, &#39;Yes, it\&#39;s a SEARCH button ;)&#39;);&#34;&gt;
&lt;svg width=&#34;24&#34; height=&#34;24&#34; viewbox=&#34;0 0 24 24&#34; fill=&#34;none&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;
  &lt;path fill=&#34;currentColor&#34; fill-rule=&#34;evenodd&#34; clip-rule=&#34;evenodd&#34; d=&#34;M18.319 14.4326C20.7628 11.2941 20.542 6.75347 17.6569 3.86829C14.5327 0.744098 9.46734 0.744098 6.34315 3.86829C3.21895 6.99249 3.21895 12.0578 6.34315 15.182C9.22833 18.0672 13.769 18.2879 16.9075 15.8442C16.921 15.8595 16.9351 15.8745 16.9497 15.8891L21.1924 20.1317C21.5829 20.5223 22.2161 20.5223 22.6066 20.1317C22.9971 19.7412 22.9971 19.1081 22.6066 18.7175L18.364 14.4749C18.3493 14.4603 18.3343 14.4462 18.319 14.4326ZM16.2426 5.28251C18.5858 7.62565 18.5858 11.4246 16.2426 13.7678C13.8995 16.1109 10.1005 16.1109 7.75736 13.7678C5.41421 11.4246 5.41421 7.62565 7.75736 5.28251C10.1005 2.93936 13.8995 2.93936 16.2426 5.28251Z&#34;/&gt;
&lt;/svg&gt;
&lt;/button&gt;
&lt;button onclick=&#34;setInfo(&#39;info&#39;, &#39;Yeah ... an OPEN MENU button ;)&#39;);&#34;&gt;
&lt;svg width=&#34;24&#34; height=&#34;24&#34; viewbox=&#34;0 0 24 24&#34; fill=&#34;none&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;
  &lt;path fill=&#34;currentColor&#34; d=&#34;M2 6C2 5.44772 2.44772 5 3 5H21C21.5523 5 22 5.44772 22 6C22 6.55228 21.5523 7 21 7H3C2.44772 7 2 6.55228 2 6Z&#34;/&gt;
  &lt;path fill=&#34;currentColor&#34; d=&#34;M2 12.0322C2 11.4799 2.44772 11.0322 3 11.0322H21C21.5523 11.0322 22 11.4799 22 12.0322C22 12.5845 21.5523 13.0322 21 13.0322H3C2.44772 13.0322 2 12.5845 2 12.0322Z&#34;/&gt;
  &lt;path fill=&#34;currentColor&#34; d=&#34;M3 17.0645C2.44772 17.0645 2 17.5122 2 18.0645C2 18.6167 2.44772 19.0645 3 19.0645H21C21.5523 19.0645 22 18.6167 22 18.0645C22 17.5122 21.5523 17.0645 21 17.0645H3Z&#34;/&gt;
&lt;/svg&gt;
&lt;/button&gt;&lt;br&gt;&lt;span id=&#34;info&#34;&gt;Guess and click...&lt;/span&gt;

&lt;p&gt;The way we implement icons have changed in the past. From BMP files to GIF and JPG files, PNG files, to complete or customizable symbol fonts like &lt;a href=&#34;https://fontello.com&#34;&gt;fontello.com&lt;/a&gt;, to Scalable Vector Graphics (SVG).&lt;/p&gt;
&lt;p&gt;SVG’s in particular are becoming increasingly popular, because they are nothing more than XML-like code, that can be manipulated via CSS or JS, their digital footprint is unbeatable small and they scale seemlessly.&lt;/p&gt;
&lt;p&gt;Dealing with SVG’s is a little bit more difficult than placing a PNG in HTML, because of its complexity, but it is worth learning as much as possible about it. So did I in the last couple of month and I want to share my finds on the web with you in this post.&lt;/p&gt;
&lt;a id=&#34;more&#34;&gt;&lt;/a&gt;

&lt;h2 id=&#34;Using-SVG’s-in-brief&#34;&gt;&lt;a href=&#34;#Using-SVG’s-in-brief&#34; class=&#34;headerlink&#34; title=&#34;Using SVG’s in brief&#34;&gt;&lt;/a&gt;Using SVG’s in brief&lt;/h2&gt;&lt;p&gt;The most useful way of using SVG’s is as an image out of a file, either directly …:&lt;/p&gt;
&lt;p&gt;&lt;button&gt;&lt;img src=&#34;/categories/UI-Design/SVG-Resources/options.svg&#34;&gt;&lt;/button&gt;&lt;br&gt;&lt;em&gt;(use DevTools [F12] to inspect the element)&lt;/em&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;img&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;src&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;images/options.svg&amp;quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;… or as a background image:&lt;/p&gt;
&lt;style&gt;
  button.options {
    height: 56px;
    width: 56px;
    background-image: url(/categories/UI-Design/SVG-Resources/options.svg);
    background-repeat: no-repeat;
    background-position: 50% 50%;
  }
&lt;/style&gt;
&lt;p&gt;&lt;button class=&#34;options&#34;&gt;&lt;/button&gt;&lt;br&gt;&lt;em&gt;(use DevTools [F12] to inspect the element)&lt;/em&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;style&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;css&#34;&gt;  &lt;span class=&#34;selector-tag&#34;&gt;button&lt;/span&gt;&lt;span class=&#34;selector-class&#34;&gt;.options&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    height: 56px;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    width: 56px;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;css&#34;&gt;    &lt;span class=&#34;selector-tag&#34;&gt;background&lt;/span&gt;: &lt;span class=&#34;selector-tag&#34;&gt;url&lt;/span&gt;(&lt;span class=&#34;selector-tag&#34;&gt;images&lt;/span&gt;/&lt;span class=&#34;selector-tag&#34;&gt;options&lt;/span&gt;&lt;span class=&#34;selector-class&#34;&gt;.svg&lt;/span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    background-repeat: no-repeat;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    background-position: 50% 50%;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;style&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;button&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;options&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;As files, no matter how small, has to be requested from the server, you can also define SVG’s inline for better performance:&lt;/p&gt;
&lt;div&gt;
&lt;button&gt;
&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; width=&#34;24&#34; height=&#34;24&#34; viewbox=&#34;0 0 24 24&#34; fill=&#34;none&#34;&gt;
  &lt;path fill=&#34;currentColor&#34; fill-rule=&#34;evenodd&#34; clip-rule=&#34;evenodd&#34; d=&#34;M7 3C8.86384 3 10.4299 4.27477 10.874 6H19V8H10.874C10.4299 9.72523 8.86384 11 7 11C4.79086 11 3 9.20914 3 7C3 4.79086 4.79086 3 7 3ZM7 9C8.10457 9 9 8.10457 9 7C9 5.89543 8.10457 5 7 5C5.89543 5 5 5.89543 5 7C5 8.10457 5.89543 9 7 9Z&#34;/&gt;
  &lt;path fill=&#34;currentColor&#34; fill-rule=&#34;evenodd&#34; clip-rule=&#34;evenodd&#34; d=&#34;M17 20C15.1362 20 13.5701 18.7252 13.126 17H5V15H13.126C13.5701 13.2748 15.1362 12 17 12C19.2091 12 21 13.7909 21 16C21 18.2091 19.2091 20 17 20ZM17 18C18.1046 18 19 17.1046 19 16C19 14.8954 18.1046 14 17 14C15.8954 14 15 14.8954 15 16C15 17.1046 15.8954 18 17 18Z&#34;/&gt;
&lt;/svg&gt;
&lt;/button&gt;&lt;br&gt;&lt;em&gt;(use DevTools [F12] to inspect the element)&lt;/em&gt;
&lt;/div&gt;&lt;br&gt;

&lt;figure class=&#34;highlight html&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;svg&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;xmlns&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;http://www.w3.org/2000/svg&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;width&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;24&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;height&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;24&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;viewBox&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;0 0 24 24&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;fill&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;none&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;path&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;fill&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;currentColor&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;fill-rule&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;evenodd&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;clip-rule&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;evenodd&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;d&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;M7 3C8.86384 3 10.4299 4.27477 10.874 6H19V8H10.874C10.4299 9.72523 8.86384 11 7 11C4.79086 11 3 9.20914 3 7C3 4.79086 4.79086 3 7 3ZM7 9C8.10457 9 9 8.10457 9 7C9 5.89543 8.10457 5 7 5C5.89543 5 5 5.89543 5 7C5 8.10457 5.89543 9 7 9Z&amp;quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;path&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;fill&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;currentColor&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;fill-rule&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;evenodd&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;clip-rule&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;evenodd&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;d&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;M17 20C15.1362 20 13.5701 18.7252 13.126 17H5V15H13.126C13.5701 13.2748 15.1362 12 17 12C19.2091 12 21 13.7909 21 16C21 18.2091 19.2091 20 17 20ZM17 18C18.1046 18 19 17.1046 19 16C19 14.8954 18.1046 14 17 14C15.8954 14 15 14.8954 15 16C15 17.1046 15.8954 18 17 18Z&amp;quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;svg&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;If you want to use a SVG multiple times, you can define it once by wrapping it up in a &lt;code&gt;symbol&lt;/code&gt; tag with an &lt;code&gt;id&lt;/code&gt; and use it wherever you want:&lt;/p&gt;
&lt;div&gt;
&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; hidden=&#34;&#34; style=&#34;display:none&#34;&gt;
  &lt;symbol id=&#34;options&#34; width=&#34;24&#34; height=&#34;24&#34; viewbox=&#34;0 0 24 24&#34; fill=&#34;none&#34;&gt;
    &lt;path fill=&#34;currentColor&#34; fill-rule=&#34;evenodd&#34; clip-rule=&#34;evenodd&#34; d=&#34;M7 3C8.86384 3 10.4299 4.27477 10.874 6H19V8H10.874C10.4299 9.72523 8.86384 11 7 11C4.79086 11 3 9.20914 3 7C3 4.79086 4.79086 3 7 3ZM7 9C8.10457 9 9 8.10457 9 7C9 5.89543 8.10457 5 7 5C5.89543 5 5 5.89543 5 7C5 8.10457 5.89543 9 7 9Z&#34;/&gt;
    &lt;path fill=&#34;currentColor&#34; fill-rule=&#34;evenodd&#34; clip-rule=&#34;evenodd&#34; d=&#34;M17 20C15.1362 20 13.5701 18.7252 13.126 17H5V15H13.126C13.5701 13.2748 15.1362 12 17 12C19.2091 12 21 13.7909 21 16C21 18.2091 19.2091 20 17 20ZM17 18C18.1046 18 19 17.1046 19 16C19 14.8954 18.1046 14 17 14C15.8954 14 15 14.8954 15 16C15 17.1046 15.8954 18 17 18Z&#34;/&gt;
  &lt;/symbol&gt;
&lt;/svg&gt;
&lt;button&gt;&lt;svg width=&#34;24&#34; height=&#34;24&#34;&gt;&lt;use xlink:href=&#34;#options&#34;/&gt;&lt;/svg&gt;&lt;/button&gt;
&lt;button&gt;&lt;svg width=&#34;24&#34; height=&#34;24&#34;&gt;&lt;use xlink:href=&#34;#options&#34;/&gt;&lt;/svg&gt;&lt;/button&gt;&lt;br&gt;&lt;em&gt;(use DevTools [F12] to inspect the elements)&lt;/em&gt;
&lt;/div&gt;&lt;br&gt;

&lt;figure class=&#34;highlight html&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;svg&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;xmlns&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;http://www.w3.org/2000/svg&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;symbol&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;options&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;width&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;24&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;height&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;24&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;viewBox&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;0 0 24 24&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;fill&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;none&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;path&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;fill&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;currentColor&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;fill-rule&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;evenodd&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;clip-rule&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;evenodd&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;d&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;M7 3C8.86384 3 10.4299 4.27477 10.874 6H19V8H10.874C10.4299 9.72523 8.86384 11 7 11C4.79086 11 3 9.20914 3 7C3 4.79086 4.79086 3 7 3ZM7 9C8.10457 9 9 8.10457 9 7C9 5.89543 8.10457 5 7 5C5.89543 5 5 5.89543 5 7C5 8.10457 5.89543 9 7 9Z&amp;quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;path&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;fill&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;currentColor&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;fill-rule&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;evenodd&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;clip-rule&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;evenodd&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;d&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;M17 20C15.1362 20 13.5701 18.7252 13.126 17H5V15H13.126C13.5701 13.2748 15.1362 12 17 12C19.2091 12 21 13.7909 21 16C21 18.2091 19.2091 20 17 20ZM17 18C18.1046 18 19 17.1046 19 16C19 14.8954 18.1046 14 17 14C15.8954 14 15 14.8954 15 16C15 17.1046 15.8954 18 17 18Z&amp;quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;symbol&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;svg&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;svg&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;width&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;24&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;height&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;24&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;xlink:href&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;#options&amp;quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;svg&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;svg&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;width&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;24&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;height&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;24&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;xlink:href&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;#options&amp;quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;svg&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;SVG-Resources&#34;&gt;&lt;a href=&#34;#SVG-Resources&#34; class=&#34;headerlink&#34; title=&#34;SVG Resources&#34;&gt;&lt;/a&gt;SVG Resources&lt;/h2&gt;&lt;p&gt;Finding the right SVG for your project is time consuming, like it is for symbol fonts or PNG’s. So here are a few tips getting SVG’s for free:&lt;/p&gt;

    &lt;h2 style=&#34;margin-bottom: 10px;&#34;&gt;css.gg&lt;/h2&gt;
    &lt;small&gt;&lt;a href=&#34;https://css.gg&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://css.gg&lt;/a&gt;&lt;/small&gt;
    &lt;p&gt;700+ icons, downloadable as SVG, PNG, XD, Figma, Styled Component (Typescript) or even pure CSS.&lt;/p&gt;

    &lt;a style=&#34;display:block; margin: 10px 0 30px;&#34; class=&#34;img-link&#34; href=&#34;https://css.gg&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
      &lt;img src=&#34;/categories/UI-Design/SVG-Resources/css_gg.png&#34; alt=&#34;css.gg&#34;&gt;
    &lt;/a&gt;
  

&lt;hr&gt;

    &lt;h2 style=&#34;margin-bottom: 10px;&#34;&gt;Tabler Icons&lt;/h2&gt;
    &lt;small&gt;&lt;a href=&#34;https://tabler-icons.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://tabler-icons.io&lt;/a&gt;&lt;/small&gt;
    &lt;p&gt;Over 1.250 icons in several categories, downloadable as SVG or PNG.&lt;/p&gt;

    &lt;a style=&#34;display:block; margin: 10px 0 30px;&#34; class=&#34;img-link&#34; href=&#34;https://tabler-icons.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
      &lt;img src=&#34;/categories/UI-Design/SVG-Resources/tabler-icons_io.png&#34; alt=&#34;Tabler Icons&#34;&gt;
    &lt;/a&gt;
  

&lt;hr&gt;

    &lt;h2 style=&#34;margin-bottom: 10px;&#34;&gt;Boxicons&lt;/h2&gt;
    &lt;small&gt;&lt;a href=&#34;https://boxicons.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://boxicons.com&lt;/a&gt;&lt;/small&gt;
    &lt;p&gt;1.500 regular or filled icons, downloadable as SVG or PNG. Supports animations, Web Components and is also available as font.&lt;/p&gt;

    &lt;a style=&#34;display:block; margin: 10px 0 30px;&#34; class=&#34;img-link&#34; href=&#34;https://boxicons.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
      &lt;img src=&#34;/categories/UI-Design/SVG-Resources/boxicons_com.png&#34; alt=&#34;Boxicons&#34;&gt;
    &lt;/a&gt;
  

&lt;hr&gt;

    &lt;h2 style=&#34;margin-bottom: 10px;&#34;&gt;Feather&lt;/h2&gt;
    &lt;small&gt;&lt;a href=&#34;https://feathericons.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://feathericons.com&lt;/a&gt;&lt;/small&gt;
    &lt;p&gt;268 icons as SVG, with customizable size, stroke with and color.&lt;/p&gt;

    &lt;a style=&#34;display:block; margin: 10px 0 30px;&#34; class=&#34;img-link&#34; href=&#34;https://feathericons.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
      &lt;img src=&#34;/categories/UI-Design/SVG-Resources/feathericons_com.png&#34; alt=&#34;Feather&#34;&gt;
    &lt;/a&gt;
  

&lt;hr&gt;

    &lt;h2 style=&#34;margin-bottom: 10px;&#34;&gt;Majesticons&lt;/h2&gt;
    &lt;small&gt;&lt;a href=&#34;https://majesticons.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://majesticons.com&lt;/a&gt;&lt;/small&gt;
    &lt;p&gt;210 line and solid icons, with Figma support and also available as Github repository.&lt;/p&gt;

    &lt;a style=&#34;display:block; margin: 10px 0 30px;&#34; class=&#34;img-link&#34; href=&#34;https://majesticons.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
      &lt;img src=&#34;/categories/UI-Design/SVG-Resources/majesticons_com.png&#34; alt=&#34;Majesticons&#34;&gt;
    &lt;/a&gt;
  

&lt;hr&gt;

    &lt;h2 style=&#34;margin-bottom: 10px;&#34;&gt;Google Fonts - Material Icons&lt;/h2&gt;
    &lt;small&gt;&lt;a href=&#34;https://fonts.google.com/icons&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://fonts.google.com/icons&lt;/a&gt;&lt;/small&gt;
    &lt;p&gt;At least … an own frontend of Googles Material Icons inside &lt;a href=&#34;https://font.google.com&#34;&gt;Google Fonts&lt;/a&gt; for downloading them individually as SVG, PNG or Android/iOS package.&lt;/p&gt;

    &lt;a style=&#34;display:block; margin: 10px 0 30px;&#34; class=&#34;img-link&#34; href=&#34;https://fonts.google.com/icons&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
      &lt;img src=&#34;/categories/UI-Design/SVG-Resources/fonts_google_com+icons.png&#34; alt=&#34;Google Fonts - Material Icons&#34;&gt;
    &lt;/a&gt;
  

&lt;hr&gt;
&lt;p&gt;Last but not least, SVG is more powerful then drawing stuff. It’s possible to add raster images, text with a particular font and use many CSS-like techniques like gradients and animations. See links below…&lt;/p&gt;

        &lt;h2&gt;More Info&lt;/h2&gt;
        &lt;ul class=&#34;moreinfo-list&#34;&gt;
            &lt;li&gt;CSS Tricks: &lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://css-tricks.com/using-svg/&#34;&gt;Using SVG&lt;/a&gt;&lt;/li&gt;&lt;li&gt;CSS-Tricks: &lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://css-tricks.com/use-and-reuse-everything-in-svg-even-animations/&#34;&gt;Use and Reuse Everything in SVG… Even Animations!&lt;/a&gt;&lt;/li&gt;&lt;li&gt;CSS Tricks: &lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://css-tricks.com/svg-isnt-svg/&#34;&gt;An SVG That Isn’t All… SVG&lt;/a&gt;&lt;/li&gt;&lt;li&gt;mediaevent.de: &lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://www.mediaevent.de/svg-in-html-seiten/&#34;&gt;Sieben Wege, SVG in HTML-Seiten zu setzen (German)&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Foxland: &lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://foxland.fi/simple-accessible-svg-menu-hamburger-animation/&#34;&gt;Simple and Accessible SVG Menu Hamburger Animation&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
    

        </content>
        <category term="UI-Design" scheme="https://kiko.io/categories/UI-Design/" />
        <category term="Imaging" scheme="https://kiko.io/tags/Imaging/" />
        <category term="Great Finds" scheme="https://kiko.io/tags/Great-Finds/" />
        <category term="SVG" scheme="https://kiko.io/tags/SVG/" />
            
    </entry>
    <entry>
        <id>https://kiko.io/categories/Discoveries/Discoveries-8/</id>
            <title>Discoveries #8</title>
            <published>2021-03-31T11:41:26.000Z</published>
        <link href="https://kiko.io/categories/Discoveries/Discoveries-8/"/>
        <summary type="html">
            &lt;p&gt;&lt;img src=&#34;https://kiko.io/photos/mobile/19-05 Israel-0724.jpg&#34; /&gt;&lt;/p&gt;&lt;p&gt;This month my discoveries are all about CSS … at least almost. See the stunning solutions developers around the world have created and take them to improve yours. Have fun exploring.&lt;/p&gt;

        &lt;ul class=&#34;anchorlist&#34;&gt;
            &lt;li data-anchor=&#34;#charts-css&#34;&gt;Charts.css&lt;/li&gt;&lt;li data-anchor=&#34;#anim-xyz&#34;&gt;AnimXYZ&lt;/li&gt;&lt;li data-anchor=&#34;#magic-animations&#34;&gt;Magic Animations&lt;/li&gt;&lt;li data-anchor=&#34;#transition-css&#34;&gt;transition.css&lt;/li&gt;&lt;li data-anchor=&#34;#animated-content-placeholders&#34;&gt;Make Animated Content Placeholders with HTML and CSS&lt;/li&gt;&lt;li data-anchor=&#34;#animating-underlines&#34;&gt;Animating Underlines&lt;/li&gt;&lt;li data-anchor=&#34;#new-aspect-ratio&#34;&gt;New aspect-ratio CSS property&lt;/li&gt;&lt;li data-anchor=&#34;#language-specific-quotes&#34;&gt;How to display language-specific quotes in CSS&lt;/li&gt;&lt;li data-anchor=&#34;#details-modal&#34;&gt;Making the DETAILS element look and behave like a modal&lt;/li&gt;&lt;li data-anchor=&#34;#better-line-breaks&#34;&gt;Better Line Breaks for Long URLs&lt;/li&gt;
        &lt;/ul&gt;&lt;p&gt;Read more ...&lt;/p&gt;
        </summary>
        <content type="html">
            &lt;p&gt;This month my discoveries are all about CSS … at least almost. See the stunning solutions developers around the world have created and take them to improve yours. Have fun exploring.&lt;/p&gt;

        &lt;ul class=&#34;anchorlist&#34;&gt;
            &lt;li data-anchor=&#34;#charts-css&#34;&gt;Charts.css&lt;/li&gt;&lt;li data-anchor=&#34;#anim-xyz&#34;&gt;AnimXYZ&lt;/li&gt;&lt;li data-anchor=&#34;#magic-animations&#34;&gt;Magic Animations&lt;/li&gt;&lt;li data-anchor=&#34;#transition-css&#34;&gt;transition.css&lt;/li&gt;&lt;li data-anchor=&#34;#animated-content-placeholders&#34;&gt;Make Animated Content Placeholders with HTML and CSS&lt;/li&gt;&lt;li data-anchor=&#34;#animating-underlines&#34;&gt;Animating Underlines&lt;/li&gt;&lt;li data-anchor=&#34;#new-aspect-ratio&#34;&gt;New aspect-ratio CSS property&lt;/li&gt;&lt;li data-anchor=&#34;#language-specific-quotes&#34;&gt;How to display language-specific quotes in CSS&lt;/li&gt;&lt;li data-anchor=&#34;#details-modal&#34;&gt;Making the DETAILS element look and behave like a modal&lt;/li&gt;&lt;li data-anchor=&#34;#better-line-breaks&#34;&gt;Better Line Breaks for Long URLs&lt;/li&gt;
        &lt;/ul&gt;
    

&lt;a id=&#34;more&#34;&gt;&lt;/a&gt;


    &lt;hr id=&#34;charts-css&#34;&gt;
    &lt;h2 style=&#34;margin-bottom: 10px;&#34;&gt;
      Charts.css
    &lt;/h2&gt;
    &lt;small&gt;by Rami Yushuvaev and Lana Gordiievski&amp;nbsp;&lt;br&gt;&lt;a href=&#34;https://chartscss.org&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://chartscss.org&lt;/a&gt;&lt;/small&gt;
    &lt;p&gt;Mentioned in hundreds of other blog posts earlier, Chart.css is so good that I have to mention it here too. Pure CSS charts, with animations, responsiveness, customizable and Open Source … what more could a heart desire?&lt;/p&gt;

    &lt;a style=&#34;display:block; margin: 10px 0 30px;&#34; class=&#34;img-link&#34; href=&#34;https://chartscss.org&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
      &lt;img src=&#34;/categories/Discoveries/Discoveries-8/charts-css.png&#34; alt=&#34;Charts.css&#34;&gt;
    &lt;/a&gt;
  


    &lt;hr id=&#34;anim-xyz&#34;&gt;
    &lt;h2 style=&#34;margin-bottom: 10px;&#34;&gt;
      AnimXYZ
    &lt;/h2&gt;
    &lt;small&gt;by Miles and Mattan Ingram&amp;nbsp;&lt;br&gt;&lt;a href=&#34;https://animxyz.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://animxyz.com&lt;/a&gt;&lt;/small&gt;
    &lt;p&gt;AnimXYZ is a CSS library for composing animations, powered by CSS variables. It has Vue and React support.&lt;/p&gt;

    &lt;a style=&#34;display:block; margin: 10px 0 30px;&#34; class=&#34;img-link&#34; href=&#34;https://animxyz.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
      &lt;img src=&#34;/categories/Discoveries/Discoveries-8/anim-xyz.png&#34; alt=&#34;AnimXYZ&#34;&gt;
    &lt;/a&gt;
  


    &lt;hr id=&#34;magic-animations&#34;&gt;
    &lt;h2 style=&#34;margin-bottom: 10px;&#34;&gt;
      Magic Animations
    &lt;/h2&gt;
    &lt;small&gt;by Christian Pucci&amp;nbsp;&lt;br&gt;&lt;a href=&#34;https://www.minimamente.com/project/magic&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.minimamente.com/project/magic&lt;/a&gt;&lt;/small&gt;
    &lt;p&gt;Christian from Italy brings us an animation library with 64 beautiful effects, to get started directly.&lt;/p&gt;

    &lt;a style=&#34;display:block; margin: 10px 0 30px;&#34; class=&#34;img-link&#34; href=&#34;https://www.minimamente.com/project/magic&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
      &lt;img src=&#34;/categories/Discoveries/Discoveries-8/magic-animations.png&#34; alt=&#34;Magic Animations&#34;&gt;
    &lt;/a&gt;
  


    &lt;hr id=&#34;transition-css&#34;&gt;
    &lt;h2 style=&#34;margin-bottom: 10px;&#34;&gt;
      transition.css
    &lt;/h2&gt;
    &lt;small&gt;by Adam Argyle&amp;nbsp;&lt;br&gt;&lt;a href=&#34;https://github.com/argyleink/transition.css&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/argyleink/transition.css&lt;/a&gt;&lt;/small&gt;
    &lt;p&gt;Another CSS library for animating things on the web. Adam is targeting the transition of an element. Cool and easy to use.&lt;/p&gt;

    &lt;a style=&#34;display:block; margin: 10px 0 30px;&#34; class=&#34;img-link&#34; href=&#34;https://github.com/argyleink/transition.css&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
      &lt;img src=&#34;/categories/Discoveries/Discoveries-8/transition-css.png&#34; alt=&#34;transition.css&#34;&gt;
    &lt;/a&gt;
  


    &lt;hr id=&#34;animated-content-placeholders&#34;&gt;
    &lt;h2 style=&#34;margin-bottom: 10px;&#34;&gt;
      Make Animated Content Placeholders with HTML and CSS
    &lt;/h2&gt;
    &lt;small&gt;by James Sinkala&amp;nbsp;&lt;br&gt;&lt;a href=&#34;https://dev.to/xinnks/make-animated-content-placeholders-with-html-and-css-3ekn&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://dev.to/xinnks/make-animated-content-placeholders-with-html-and-css-3ekn&lt;/a&gt;&lt;/small&gt;
    &lt;p&gt;A modern approach to entertain web users while loading some content or images is to show animated placeholders, like Instagram, Facebook and others do. James gives us the instructions how to implement these with pre CSS.&lt;/p&gt;

    &lt;a style=&#34;display:block; margin: 10px 0 30px;&#34; class=&#34;img-link&#34; href=&#34;https://dev.to/xinnks/make-animated-content-placeholders-with-html-and-css-3ekn&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
      &lt;img src=&#34;/categories/Discoveries/Discoveries-8/animated-content-placeholders.png&#34; alt=&#34;Make Animated Content Placeholders with HTML and CSS&#34;&gt;
    &lt;/a&gt;
  


    &lt;hr id=&#34;animating-underlines&#34;&gt;
    &lt;h2 style=&#34;margin-bottom: 10px;&#34;&gt;
      Animating Underlines
    &lt;/h2&gt;
    &lt;small&gt;by Michelle Barker&amp;nbsp;&lt;br&gt;&lt;a href=&#34;https://css-irl.info/animating-underlines&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://css-irl.info/animating-underlines&lt;/a&gt;&lt;/small&gt;
    &lt;p&gt;From the beginning of time, URL’s has shown as underlined text. How boring. Michelle has some ideas to bring some life into links.&lt;/p&gt;

    &lt;a style=&#34;display:block; margin: 10px 0 30px;&#34; class=&#34;img-link&#34; href=&#34;https://css-irl.info/animating-underlines&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
      &lt;img src=&#34;/categories/Discoveries/Discoveries-8/animating-underlines.png&#34; alt=&#34;Animating Underlines&#34;&gt;
    &lt;/a&gt;
  


    &lt;hr id=&#34;new-aspect-ratio&#34;&gt;
    &lt;h2 style=&#34;margin-bottom: 10px;&#34;&gt;
      New aspect-ratio CSS property
    &lt;/h2&gt;
    &lt;small&gt;by Una Kravets&amp;nbsp;&lt;br&gt;&lt;a href=&#34;https://web.dev/aspect-ratio&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://web.dev/aspect-ratio&lt;/a&gt;&lt;/small&gt;
    &lt;p&gt;Dealing with images in CSS can be a mess sometimes, especially on responsive layouts. Read about the common hacks regarding aspect ratio and the upcoming new CSS feature &lt;strong&gt;aspect-ratio&lt;/strong&gt;.&lt;/p&gt;

    &lt;a style=&#34;display:block; margin: 10px 0 30px;&#34; class=&#34;img-link&#34; href=&#34;https://web.dev/aspect-ratio&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
      &lt;img src=&#34;/categories/Discoveries/Discoveries-8/new-aspect-ratio.png&#34; alt=&#34;New aspect-ratio CSS property&#34;&gt;
    &lt;/a&gt;
  


    &lt;hr id=&#34;language-specific-quotes&#34;&gt;
    &lt;h2 style=&#34;margin-bottom: 10px;&#34;&gt;
      How to display language-specific quotes in CSS
    &lt;/h2&gt;
    &lt;small&gt;by Stefan Judis&amp;nbsp;&lt;br&gt;&lt;a href=&#34;https://www.stefanjudis.com/today-i-learned/how-to-use-language-dependent-quotes-in-css&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.stefanjudis.com/today-i-learned/how-to-use-language-dependent-quotes-in-css&lt;/a&gt;&lt;/small&gt;
    &lt;p&gt;Doing internationalization right, you have to beware of some pitfalls, like the different quotes in some languages. Germans are using different double quotes for start and end, French are using double arrows and so on. Stefan shows us how to do it right.&lt;/p&gt;

    &lt;a style=&#34;display:block; margin: 10px 0 30px;&#34; class=&#34;img-link&#34; href=&#34;https://www.stefanjudis.com/today-i-learned/how-to-use-language-dependent-quotes-in-css&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
      &lt;img src=&#34;/categories/Discoveries/Discoveries-8/language-specific-quotes.png&#34; alt=&#34;How to display language-specific quotes in CSS&#34;&gt;
    &lt;/a&gt;
  


    &lt;hr id=&#34;details-modal&#34;&gt;
    &lt;h2 style=&#34;margin-bottom: 10px;&#34;&gt;
      Making the DETAILS element look and behave like a modal
    &lt;/h2&gt;
    &lt;small&gt;by Niels Voogt&amp;nbsp;&lt;br&gt;&lt;a href=&#34;https://codepen.io/NielsVoogt/full/XWjPdjO&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://codepen.io/NielsVoogt/full/XWjPdjO&lt;/a&gt;&lt;/small&gt;
    &lt;p&gt;In this pen, Niels is playing around with the DETAILS tag and shows how it can be used for a modal dialog with CSS only. Great idea!&lt;/p&gt;

    &lt;a style=&#34;display:block; margin: 10px 0 30px;&#34; class=&#34;img-link&#34; href=&#34;https://codepen.io/NielsVoogt/full/XWjPdjO&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
      &lt;img src=&#34;/categories/Discoveries/Discoveries-8/details-modal.png&#34; alt=&#34;Making the DETAILS element look and behave like a modal&#34;&gt;
    &lt;/a&gt;
  


    &lt;hr id=&#34;better-line-breaks&#34;&gt;
    &lt;h2 style=&#34;margin-bottom: 10px;&#34;&gt;
      Better Line Breaks for Long URLs
    &lt;/h2&gt;
    &lt;small&gt;by Reuben Lillie&amp;nbsp;&lt;br&gt;&lt;a href=&#34;https://css-tricks.com/better-line-breaks-for-long-urls&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://css-tricks.com/better-line-breaks-for-long-urls&lt;/a&gt;&lt;/small&gt;
    &lt;p&gt;Reuben addresses in his post at CSS-Tricks the problem of displaying long URL’s and shows a solution with a little bit JavaScript how to do it right once and for all.&lt;/p&gt;

    &lt;a style=&#34;display:block; margin: 10px 0 30px;&#34; class=&#34;img-link&#34; href=&#34;https://css-tricks.com/better-line-breaks-for-long-urls&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
      &lt;img src=&#34;/categories/Discoveries/Discoveries-8/better-line-breaks.png&#34; alt=&#34;Better Line Breaks for Long URLs&#34;&gt;
    &lt;/a&gt;
  
        </content>
        <category term="Discoveries" scheme="https://kiko.io/categories/Discoveries/" />
        <category term="Great Finds" scheme="https://kiko.io/tags/Great-Finds/" />
            
    </entry>
    <entry>
        <id>https://kiko.io/categories/C/Custom-Caller-Authentication-with-ASP-NET-Core-5-0-WebApi/</id>
            <title>Custom Caller Authentication with ASP.NET Core 5.0 Web API</title>
            <published>2021-02-28T16:05:00.000Z</published>
        <link href="https://kiko.io/categories/C/Custom-Caller-Authentication-with-ASP-NET-Core-5-0-WebApi/"/>
        <summary type="html">
            &lt;p&gt;&lt;img src=&#34;https://kiko.io/photos/mobile/DSC_7207.jpg&#34; /&gt;&lt;/p&gt;&lt;p&gt;Developing micro services with Microsoft ASP.NET Core 5.0 Web API is powerful and fun, but the fun stops, if your data are accesses unauthorized. It is absolutely fundamental to have a protection layer, which filters out unwanted data requests.  &lt;/p&gt;
&lt;p&gt;A common way is to limit the service access by providing API Keys to well known clients. In this post I will show you how to implement such a filter in terms of API keys and IP addresses. &lt;/p&gt;&lt;p&gt;Read more ...&lt;/p&gt;
        </summary>
        <content type="html">
            &lt;p&gt;Developing micro services with Microsoft ASP.NET Core 5.0 Web API is powerful and fun, but the fun stops, if your data are accesses unauthorized. It is absolutely fundamental to have a protection layer, which filters out unwanted data requests.  &lt;/p&gt;
&lt;p&gt;A common way is to limit the service access by providing API Keys to well known clients. In this post I will show you how to implement such a filter in terms of API keys and IP addresses. &lt;/p&gt;
&lt;a id=&#34;more&#34;&gt;&lt;/a&gt;

&lt;h2 id=&#34;The-Settings&#34;&gt;&lt;a href=&#34;#The-Settings&#34; class=&#34;headerlink&#34; title=&#34;The Settings&#34;&gt;&lt;/a&gt;The Settings&lt;/h2&gt;&lt;p&gt;Lets start with the list of clients, who should be able to access the data. The most useful place for this is in the &lt;strong&gt;appsettings.json&lt;/strong&gt; of the Core 5.0 Web API project:&lt;/p&gt;
&lt;figure class=&#34;highlight&#34;&gt;&lt;figcaption&gt;&lt;span&gt;appsettings.json&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;Callers&amp;quot;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;attr&#34;&gt;&amp;quot;Name&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;localhost&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;attr&#34;&gt;&amp;quot;ApiKey&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;attr&#34;&gt;&amp;quot;IPAddress&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;::1&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;attr&#34;&gt;&amp;quot;Name&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;John Doe&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;attr&#34;&gt;&amp;quot;ApiKey&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;mytopsecretapikeyforjohndoe&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;attr&#34;&gt;&amp;quot;IPAddress&amp;quot;&lt;/span&gt;:  &lt;span class=&#34;string&#34;&gt;&amp;quot;*&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;This list has two entries: one for the server itself (“localhost”), which is restricted to the local IP address &lt;code&gt;&amp;quot;::1&amp;quot;&lt;/code&gt;, and one for the test user &lt;code&gt;&amp;quot;John Doe&amp;quot;&lt;/code&gt;, who can access from any IP address (&lt;code&gt;&amp;quot;*&amp;quot;&lt;/code&gt;), but must supply his personal API key with his requests.&lt;/p&gt;
&lt;p&gt;In order to handle this setting, we have to introduce it to the system at startup as a class:&lt;/p&gt;
&lt;figure class=&#34;highlight c#&#34;&gt;&lt;figcaption&gt;&lt;span&gt;CallerSetting.cs&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;CallerSetting&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; Name &amp;#123; &lt;span class=&#34;keyword&#34;&gt;get&lt;/span&gt;; &lt;span class=&#34;keyword&#34;&gt;set&lt;/span&gt;; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; ApiKey &amp;#123; &lt;span class=&#34;keyword&#34;&gt;get&lt;/span&gt;; &lt;span class=&#34;keyword&#34;&gt;set&lt;/span&gt;; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; IPAddress &amp;#123; &lt;span class=&#34;keyword&#34;&gt;get&lt;/span&gt;; &lt;span class=&#34;keyword&#34;&gt;set&lt;/span&gt;; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&#34;highlight c#&#34;&gt;&lt;figcaption&gt;&lt;span&gt;Startup.cs&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;ConfigureServices&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;IServiceCollection services&lt;/span&gt;) &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  IConfigurationSection configSection = Configuration.GetSection(&lt;span class=&#34;string&#34;&gt;&amp;quot;Callers&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  services.Configure&amp;lt;List&amp;lt;CallerSetting&amp;gt;&amp;gt;(configSection);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;The-Controller&#34;&gt;&lt;a href=&#34;#The-Controller&#34; class=&#34;headerlink&#34; title=&#34;The Controller&#34;&gt;&lt;/a&gt;The Controller&lt;/h2&gt;&lt;p&gt;Let’s assume we have a controller, which handles the API requests, like this:&lt;/p&gt;
&lt;figure class=&#34;highlight c#&#34;&gt;&lt;figcaption&gt;&lt;span&gt;MyFancyController.cs&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;using&lt;/span&gt; Microsoft.AspNetCore.Mvc;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;MyAPIProject&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    [&lt;span class=&#34;meta&#34;&gt;Route(&lt;span class=&#34;meta-string&#34;&gt;&amp;quot;api/helloworld&amp;quot;&lt;/span&gt;)&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    [&lt;span class=&#34;meta&#34;&gt;ApiController&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;MyFancyAPIController&lt;/span&gt; : &lt;span class=&#34;title&#34;&gt;ControllerBase&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        [&lt;span class=&#34;meta&#34;&gt;HttpGet&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Get&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;Hello World&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;To prevent to write a request check against our new settings in each action method, we can decorate the whole controller class by introducing an new custom &lt;code&gt;Attribute&lt;/code&gt;, which will do the work:&lt;/p&gt;
&lt;figure class=&#34;highlight&#34;&gt;&lt;figcaption&gt;&lt;span&gt;MyFancyController.cs&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;[&lt;span class=&#34;meta&#34;&gt;Route(&lt;span class=&#34;meta-string&#34;&gt;&amp;quot;api/helloworld&amp;quot;&lt;/span&gt;)&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;[&lt;span class=&#34;meta&#34;&gt;ApiController&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;[&lt;span class=&#34;meta&#34;&gt;AuthenticateApiRequest&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;MyFancyAPIController&lt;/span&gt; : &lt;span class=&#34;title&#34;&gt;ControllerBase&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;The-Attribute&#34;&gt;&lt;a href=&#34;#The-Attribute&#34; class=&#34;headerlink&#34; title=&#34;The Attribute&#34;&gt;&lt;/a&gt;The Attribute&lt;/h2&gt;&lt;p&gt;Here is the code for the new attribute. It uses the &lt;code&gt;IActionFilter&lt;/code&gt;. These filters run within the ASP.NET Core action invocation pipeline, in our case BEFORE the action is entered (&lt;code&gt;OnActionExecutionAsync&lt;/code&gt;).&lt;/p&gt;
&lt;figure class=&#34;highlight c#&#34;&gt;&lt;figcaption&gt;&lt;span&gt;AuthenticateApiRequestAttribute.cs&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;using&lt;/span&gt; Microsoft.AspNetCore.Mvc;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;using&lt;/span&gt; Microsoft.AspNetCore.Mvc.Filters;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;using&lt;/span&gt; Microsoft.Extensions.Configuration;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;using&lt;/span&gt; Microsoft.Extensions.DependencyInjection;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;using&lt;/span&gt; System;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;using&lt;/span&gt; System.Collections.Generic;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;using&lt;/span&gt; System.Threading.Tasks;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;using&lt;/span&gt; System.Linq;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;MyAPIProject&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  [&lt;span class=&#34;meta&#34;&gt;AttributeUsage(AttributeTargets.Class)&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;AuthenticateApiRequestAttribute&lt;/span&gt; : &lt;span class=&#34;title&#34;&gt;Attribute&lt;/span&gt;, &lt;span class=&#34;title&#34;&gt;IAsyncActionFilter&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;async&lt;/span&gt; Task OnActionExecutionAsync&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    (&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      ActionExecutingContext context, &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      ActionExecutionDelegate next&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;comment&#34;&gt;// Get an Api Key from Request Header&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      context.HttpContext.Request.Headers.TryGetValue(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;ApiKey&amp;quot;&lt;/span&gt;, &lt;span class=&#34;keyword&#34;&gt;out&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; requestApiKey&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;comment&#34;&gt;// Get the remote IP Address&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; requestIpAddress = &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        context.HttpContext.Connection.RemoteIpAddress.ToString();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;comment&#34;&gt;// Get access to &amp;#x27;appsettings.json&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; appSettings = &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        context.HttpContext.RequestServices.GetRequiredService&amp;lt;IConfiguration&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;comment&#34;&gt;// Get &amp;#x27;Callers&amp;#x27; list from settings&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; callers = appSettings.GetSection(&lt;span class=&#34;string&#34;&gt;&amp;quot;Callers&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        .Get&amp;lt;List&amp;lt;CallerSetting&amp;gt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;comment&#34;&gt;// Get all Callers with matching IP Adress and/or API Key via LINQ&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; current = callers.Where(c =&amp;gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        (c.IPAddress == requestIpAddress) || &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        (c.IPAddress == &lt;span class=&#34;string&#34;&gt;&amp;quot;*&amp;quot;&lt;/span&gt; &amp;amp;&amp;amp; c.ApiKey == requestApiKey) ||&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        (c.IPAddress == requestIpAddress &amp;amp;&amp;amp; c.ApiKey == requestApiKey));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;comment&#34;&gt;// Do we have a match?&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (current.Count() == &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// No, then return with an error &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        context.Result = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; ContentResult()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          StatusCode = &lt;span class=&#34;number&#34;&gt;401&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          Content = &lt;span class=&#34;string&#34;&gt;&amp;quot;Unauthorized Access&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;await&lt;/span&gt; next(); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;The-Result&#34;&gt;&lt;a href=&#34;#The-Result&#34; class=&#34;headerlink&#34; title=&#34;The Result&#34;&gt;&lt;/a&gt;The Result&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;/categories/C/Custom-Caller-Authentication-with-ASP-NET-Core-5-0-WebApi/api-request-nightingale.png&#34; alt=&#34;Test Request with Nightingale&#34;&gt;&lt;/p&gt;

        &lt;h2&gt;More Info&lt;/h2&gt;
        &lt;ul class=&#34;moreinfo-list&#34;&gt;
            &lt;li&gt;Microsoft Docs: &lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://docs.microsoft.com/de-de/aspnet/core/mvc/controllers/filters?view=aspnetcore-5.0&#34;&gt;Filters in ASP.NET Core&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Microsoft Docs: &lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://docs.microsoft.com/de-de/aspnet/core/fundamentals/configuration/?view=aspnetcore-5.0&#34;&gt;Configuration in ASP.NET Core&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
    
        </content>
        <category term="C#" scheme="https://kiko.io/categories/C/" />
        <category term="WebAPI" scheme="https://kiko.io/tags/WebAPI/" />
        <category term="Authentication" scheme="https://kiko.io/tags/Authentication/" />
        <category term="Visual Studio" scheme="https://kiko.io/tags/Visual-Studio/" />
            
    </entry>
    <entry>
        <id>https://kiko.io/categories/Discoveries/Discoveries-7/</id>
            <title>Discoveries #7</title>
            <published>2021-02-25T13:36:10.000Z</published>
        <link href="https://kiko.io/categories/Discoveries/Discoveries-7/"/>
        <summary type="html">
            &lt;p&gt;&lt;img src=&#34;https://kiko.io/photos/mobile/DSC_8892.jpg&#34; /&gt;&lt;/p&gt;&lt;p&gt;February and the first sunny days in 2021. What a delight! Have fun, sitting in the sun, discovering my newest finds on the web. This time, all regarding JavaScript…&lt;/p&gt;

        &lt;ul class=&#34;anchorlist&#34;&gt;
            &lt;li data-anchor=&#34;#github1s&#34;&gt;github1s: One second to read GitHub code with VS Code&lt;/li&gt;&lt;li data-anchor=&#34;#enhance-fetch-decorator-pattern&#34;&gt;How to enhance fetch() with the Decorator Pattern&lt;/li&gt;&lt;li data-anchor=&#34;#ky&#34;&gt;Ky - Delightful HTTP Requests&lt;/li&gt;&lt;li data-anchor=&#34;#vscode-rest-client&#34;&gt;VS Code’s REST Client Plugin is All You Need to Make API Calls&lt;/li&gt;&lt;li data-anchor=&#34;#jsonview&#34;&gt;json-view&lt;/li&gt;&lt;li data-anchor=&#34;#you-might-not-need-jquery&#34;&gt;You might not need jQuery&lt;/li&gt;&lt;li data-anchor=&#34;#js-algorithms-data-structures&#34;&gt;JavaScript Algorithms and Data Structures&lt;/li&gt;&lt;li data-anchor=&#34;#date-fns&#34;&gt;date-fns - Modern JavaScript date utility library&lt;/li&gt;&lt;li data-anchor=&#34;#parsing-markdown-into-toc&#34;&gt;Parsing Markdown into an Automated Table of Contents&lt;/li&gt;&lt;li data-anchor=&#34;#fake-scroll&#34;&gt;FakeScroll - lightweight custom-looking scrollbars&lt;/li&gt;
        &lt;/ul&gt;&lt;p&gt;Read more ...&lt;/p&gt;
        </summary>
        <content type="html">
            &lt;p&gt;February and the first sunny days in 2021. What a delight! Have fun, sitting in the sun, discovering my newest finds on the web. This time, all regarding JavaScript…&lt;/p&gt;

        &lt;ul class=&#34;anchorlist&#34;&gt;
            &lt;li data-anchor=&#34;#github1s&#34;&gt;github1s: One second to read GitHub code with VS Code&lt;/li&gt;&lt;li data-anchor=&#34;#enhance-fetch-decorator-pattern&#34;&gt;How to enhance fetch() with the Decorator Pattern&lt;/li&gt;&lt;li data-anchor=&#34;#ky&#34;&gt;Ky - Delightful HTTP Requests&lt;/li&gt;&lt;li data-anchor=&#34;#vscode-rest-client&#34;&gt;VS Code’s REST Client Plugin is All You Need to Make API Calls&lt;/li&gt;&lt;li data-anchor=&#34;#jsonview&#34;&gt;json-view&lt;/li&gt;&lt;li data-anchor=&#34;#you-might-not-need-jquery&#34;&gt;You might not need jQuery&lt;/li&gt;&lt;li data-anchor=&#34;#js-algorithms-data-structures&#34;&gt;JavaScript Algorithms and Data Structures&lt;/li&gt;&lt;li data-anchor=&#34;#date-fns&#34;&gt;date-fns - Modern JavaScript date utility library&lt;/li&gt;&lt;li data-anchor=&#34;#parsing-markdown-into-toc&#34;&gt;Parsing Markdown into an Automated Table of Contents&lt;/li&gt;&lt;li data-anchor=&#34;#fake-scroll&#34;&gt;FakeScroll - lightweight custom-looking scrollbars&lt;/li&gt;
        &lt;/ul&gt;
    

&lt;a id=&#34;more&#34;&gt;&lt;/a&gt;


    &lt;hr id=&#34;github1s&#34;&gt;
    &lt;h2 style=&#34;margin-bottom: 10px;&#34;&gt;
      github1s: One second to read GitHub code with VS Code
    &lt;/h2&gt;
    &lt;small&gt;by netcon (conwnet)&amp;nbsp;&lt;br&gt;&lt;a href=&#34;https://github.com/conwnet/github1s&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/conwnet/github1s&lt;/a&gt;&lt;/small&gt;
    &lt;p&gt;How do you peak in the code of a Github repository? Navigate back and forth on github.com? The chinese developer &lt;em&gt;netcon&lt;/em&gt; from Shenzhen has better idea: just add the 2 characters &lt;strong&gt;1s&lt;/strong&gt; to the github url and the repository opens up in the new version of VSCode, which now can be built for  browsers. Pretty handy…&lt;/p&gt;

    &lt;a style=&#34;display:block; margin: 10px 0 30px;&#34; class=&#34;img-link&#34; href=&#34;https://github.com/conwnet/github1s&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
      &lt;img src=&#34;/categories/Discoveries/Discoveries-7/github1s.png&#34; alt=&#34;github1s: One second to read GitHub code with VS Code&#34;&gt;
    &lt;/a&gt;
  


    &lt;hr id=&#34;enhance-fetch-decorator-pattern&#34;&gt;
    &lt;h2 style=&#34;margin-bottom: 10px;&#34;&gt;
      How to enhance fetch() with the Decorator Pattern
    &lt;/h2&gt;
    &lt;small&gt;by Dmitri Pavlutin&amp;nbsp;&lt;br&gt;&lt;a href=&#34;https://dmitripavlutin.com/enhance-fetch-with-decorator-pattern/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://dmitripavlutin.com/enhance-fetch-with-decorator-pattern/&lt;/a&gt;&lt;/small&gt;
    &lt;p&gt;Fetching JSON files with JavaScript means to call fetch() asynchronously and pick the response manually. Two AWAITS and a lot of stuff can go wrong. Dmitri shows how to construct a class which enables you to do this in one step.&lt;/p&gt;

    &lt;a style=&#34;display:block; margin: 10px 0 30px;&#34; class=&#34;img-link&#34; href=&#34;https://dmitripavlutin.com/enhance-fetch-with-decorator-pattern/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
      &lt;img src=&#34;/categories/Discoveries/Discoveries-7/enhance-fetch-decorator-pattern.png&#34; alt=&#34;How to enhance fetch() with the Decorator Pattern&#34;&gt;
    &lt;/a&gt;
  


    &lt;hr id=&#34;ky&#34;&gt;
    &lt;h2 style=&#34;margin-bottom: 10px;&#34;&gt;
      Ky - Delightful HTTP Requests
    &lt;/h2&gt;
    &lt;small&gt;by Sindre Sorhus&amp;nbsp;&lt;br&gt;&lt;a href=&#34;https://github.com/sindresorhus/ky&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/sindresorhus/ky&lt;/a&gt;&lt;/small&gt;
    &lt;p&gt;Fetch is nice, but if you want it nice and easy, you have to rely on a 3rd-party library, like &lt;em&gt;*Ky&lt;/em&gt;. Sindre Sorhus did a great job to bring fetching in one line, within around 13KB.&lt;/p&gt;

    &lt;a style=&#34;display:block; margin: 10px 0 30px;&#34; class=&#34;img-link&#34; href=&#34;https://github.com/sindresorhus/ky&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
      &lt;img src=&#34;/categories/Discoveries/Discoveries-7/ky.png&#34; alt=&#34;Ky - Delightful HTTP Requests&#34;&gt;
    &lt;/a&gt;
  


    &lt;hr id=&#34;vscode-rest-client&#34;&gt;
    &lt;h2 style=&#34;margin-bottom: 10px;&#34;&gt;
      VS Code’s REST Client Plugin is All You Need to Make API Calls
    &lt;/h2&gt;
    &lt;small&gt;by Paige Niedringhaus&amp;nbsp;&lt;br&gt;&lt;a href=&#34;https://blog.bitsrc.io/vs-codes-rest-client-plugin-is-all-you-need-to-make-api-calls-e9e95fcfd85a&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://blog.bitsrc.io/vs-codes-rest-client-plugin-is-all-you-need-to-make-api-calls-e9e95fcfd85a&lt;/a&gt;&lt;/small&gt;
    &lt;p&gt;Using &lt;a href=&#34;https://www.postman.com/product/rest-client/&#34;&gt;Postman&lt;/a&gt; or &lt;a href=&#34;https://nightingale.rest/&#34;&gt;Nightingale&lt;/a&gt; for testing your microservices? Not absolutely necessary, as there are possibilities to do it right in VSCode, as Paige show us in her post here. No need to leave your editor.&lt;/p&gt;

    &lt;a style=&#34;display:block; margin: 10px 0 30px;&#34; class=&#34;img-link&#34; href=&#34;https://blog.bitsrc.io/vs-codes-rest-client-plugin-is-all-you-need-to-make-api-calls-e9e95fcfd85a&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
      &lt;img src=&#34;/categories/Discoveries/Discoveries-7/vscode-rest-client.png&#34; alt=&#34;VS Code’s REST Client Plugin is All You Need to Make API Calls&#34;&gt;
    &lt;/a&gt;
  


    &lt;hr id=&#34;jsonview&#34;&gt;
    &lt;h2 style=&#34;margin-bottom: 10px;&#34;&gt;
      json-view
    &lt;/h2&gt;
    &lt;small&gt;by Pavel&amp;nbsp;&lt;br&gt;&lt;a href=&#34;https://github.com/pgrabovets/json-view&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/pgrabovets/json-view&lt;/a&gt;&lt;/small&gt;
    &lt;p&gt;It’s not often that a developer has to display raw JSON data on a website or app. Pavel from the Ukraine has a solution to do this with style.&lt;/p&gt;

    &lt;a style=&#34;display:block; margin: 10px 0 30px;&#34; class=&#34;img-link&#34; href=&#34;https://github.com/pgrabovets/json-view&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
      &lt;img src=&#34;/categories/Discoveries/Discoveries-7/jsonview.png&#34; alt=&#34;json-view&#34;&gt;
    &lt;/a&gt;
  


    &lt;hr id=&#34;you-might-not-need-jquery&#34;&gt;
    &lt;h2 style=&#34;margin-bottom: 10px;&#34;&gt;
      You might not need jQuery
    &lt;/h2&gt;
    &lt;small&gt;by Zack Bloom and Adam Schwartz&amp;nbsp;&lt;br&gt;&lt;a href=&#34;http://youmightnotneedjquery.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://youmightnotneedjquery.com/&lt;/a&gt;&lt;/small&gt;
    &lt;p&gt;Many of us relied on &lt;a href=&#34;https://jquery.com/&#34;&gt;jQuery&lt;/a&gt; in the past. So did Zack Bloom and Adam Schwartz as I suppose. They have published a website, that contrasts the native JavaScript methods for the most common jQuery methods. Go Vanilla, go!&lt;/p&gt;

    &lt;a style=&#34;display:block; margin: 10px 0 30px;&#34; class=&#34;img-link&#34; href=&#34;http://youmightnotneedjquery.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
      &lt;img src=&#34;/categories/Discoveries/Discoveries-7/you-might-not-need-jquery.png&#34; alt=&#34;You might not need jQuery&#34;&gt;
    &lt;/a&gt;
  


    &lt;hr id=&#34;js-algorithms-data-structures&#34;&gt;
    &lt;h2 style=&#34;margin-bottom: 10px;&#34;&gt;
      JavaScript Algorithms and Data Structures
    &lt;/h2&gt;
    &lt;small&gt;by Oleksii Trekhleb&amp;nbsp;&lt;br&gt;&lt;a href=&#34;https://github.com/trekhleb/javascript-algorithms&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/trekhleb/javascript-algorithms&lt;/a&gt;&lt;/small&gt;
    &lt;p&gt;Oleksii has collected a huge bunch of useful JS methods in his Github repository and has translated the docs for every method into 14 (!) languages. Whoop … what a job! Ever wanted to know how to calculate the Euclidean Distance? Oleksii has the answer and the code.&lt;/p&gt;

    &lt;a style=&#34;display:block; margin: 10px 0 30px;&#34; class=&#34;img-link&#34; href=&#34;https://github.com/trekhleb/javascript-algorithms&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
      &lt;img src=&#34;/categories/Discoveries/Discoveries-7/js-algorithms-data-structures.png&#34; alt=&#34;JavaScript Algorithms and Data Structures&#34;&gt;
    &lt;/a&gt;
  


    &lt;hr id=&#34;date-fns&#34;&gt;
    &lt;h2 style=&#34;margin-bottom: 10px;&#34;&gt;
      date-fns - Modern JavaScript date utility library
    &lt;/h2&gt;
    &lt;small&gt;by {Many}&amp;nbsp;&lt;br&gt;&lt;a href=&#34;https://date-fns.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://date-fns.org/&lt;/a&gt;&lt;/small&gt;
    &lt;p&gt;&lt;a href=&#34;https://momentjs.com/&#34;&gt;moment.js&lt;/a&gt;, maybe the most used JS library for calculating dates, is now in maintenance mode, because it is getting on in years. A good alternative is &lt;strong&gt;date-fns&lt;/strong&gt;, which supports tree-shaking and other modern approaches. In addition to that, you will find &lt;a href=&#34;https://github.com/you-dont-need/You-Dont-Need-Momentjs&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;https://blog.logrocket.com/4-alternatives-to-moment-js-for-internationalizing-dates/&#34;&gt;here&lt;/a&gt; good comparisons between several date libraries or even native JS.&lt;/p&gt;

    &lt;a style=&#34;display:block; margin: 10px 0 30px;&#34; class=&#34;img-link&#34; href=&#34;https://date-fns.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
      &lt;img src=&#34;/categories/Discoveries/Discoveries-7/date-fns.png&#34; alt=&#34;date-fns - Modern JavaScript date utility library&#34;&gt;
    &lt;/a&gt;
  


    &lt;hr id=&#34;parsing-markdown-into-toc&#34;&gt;
    &lt;h2 style=&#34;margin-bottom: 10px;&#34;&gt;
      Parsing Markdown into an Automated Table of Contents
    &lt;/h2&gt;
    &lt;small&gt;by Lisi Linhart&amp;nbsp;&lt;br&gt;&lt;a href=&#34;https://css-tricks.com/parsing-markdown-into-an-automated-table-of-contents/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://css-tricks.com/parsing-markdown-into-an-automated-table-of-contents/&lt;/a&gt;&lt;/small&gt;
    &lt;p&gt;A well-structured text has headings, subheadings and paragraphs. For the web we often write our stuff in &lt;a href=&#34;https://en.wikipedia.org/wiki/Markdown&#34;&gt;Markdown&lt;/a&gt;. Lisi shows us how to process such a Markdown file to get a TOC automatically.&lt;/p&gt;

    &lt;a style=&#34;display:block; margin: 10px 0 30px;&#34; class=&#34;img-link&#34; href=&#34;https://css-tricks.com/parsing-markdown-into-an-automated-table-of-contents/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
      &lt;img src=&#34;/categories/Discoveries/Discoveries-7/parsing-markdown-into-toc.png&#34; alt=&#34;Parsing Markdown into an Automated Table of Contents&#34;&gt;
    &lt;/a&gt;
  


    &lt;hr id=&#34;fake-scroll&#34;&gt;
    &lt;h2 style=&#34;margin-bottom: 10px;&#34;&gt;
      FakeScroll - lightweight custom-looking scrollbars
    &lt;/h2&gt;
    &lt;small&gt;by Yair Even Or&amp;nbsp;&lt;br&gt;&lt;a href=&#34;https://github.com/yairEO/fakescroll&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/yairEO/fakescroll&lt;/a&gt;&lt;/small&gt;
    &lt;p&gt;The scrollbar belongs to the website or app a developer is creating, in my opinion. Therefore it is a mess what browser manufacturers offer developers in terms of possibilities. Yair has constructed a JS library which replaces the build-in scrollbars completely with standard HTML elements. Nice…&lt;/p&gt;

    &lt;a style=&#34;display:block; margin: 10px 0 30px;&#34; class=&#34;img-link&#34; href=&#34;https://github.com/yairEO/fakescroll&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
      &lt;img src=&#34;/categories/Discoveries/Discoveries-7/fake-scroll.png&#34; alt=&#34;FakeScroll - lightweight custom-looking scrollbars&#34;&gt;
    &lt;/a&gt;
  
        </content>
        <category term="Discoveries" scheme="https://kiko.io/categories/Discoveries/" />
        <category term="Great Finds" scheme="https://kiko.io/tags/Great-Finds/" />
            
    </entry>
    <entry>
        <id>https://kiko.io/categories/JavaScript/Native-JavaScript-Multilanguage-Templating/</id>
            <title>Native JavaScript Multilanguage Templating</title>
            <published>2021-02-24T12:31:58.000Z</published>
        <link href="https://kiko.io/categories/JavaScript/Native-JavaScript-Multilanguage-Templating/"/>
        <summary type="html">
            &lt;p&gt;&lt;img src=&#34;https://kiko.io/photos/mobile/DSC_6682.jpg&#34; /&gt;&lt;/p&gt;&lt;p&gt;In the project I’m currently working on, I faced the “problem” to integrate multilanguage support, but due to the fact that the new app should be written in vanilla JS, without any plugins, libraries or other dependencies, I had to develop my own localization layer. In this article I want to show you my approach on this…&lt;/p&gt;&lt;p&gt;Read more ...&lt;/p&gt;
        </summary>
        <content type="html">
            &lt;p&gt;In the project I’m currently working on, I faced the “problem” to integrate multilanguage support, but due to the fact that the new app should be written in vanilla JS, without any plugins, libraries or other dependencies, I had to develop my own localization layer. In this article I want to show you my approach on this…&lt;/p&gt;
&lt;a id=&#34;more&#34;&gt;&lt;/a&gt;

&lt;p&gt;My solution is based on a template system that I implemented into my project at an earlier stage. If you are interested in how this works, I recommend you read my article &lt;strong&gt;&lt;a href=&#34;https://kiko.io/categories/JavaScript/Utilize-a-repository-of-reusable-ES6-template-literals/&#34;&gt;Utilize a repository of reusable ES6 template literals&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Let’s start with the standard scaffold of an HTML5 app, extended with some &lt;code&gt;style&lt;/code&gt;‘s, an initialization &lt;code&gt;script&lt;/code&gt; and a lonely &lt;code&gt;main&lt;/code&gt; element, we want to fill with some localized content:&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;figcaption&gt;&lt;span&gt;index.html&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&amp;lt;!DOCTYPE &lt;span class=&#34;meta-keyword&#34;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;html&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;lang&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;en&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;meta&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;charset&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;meta&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;http-equiv&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;language&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;content&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;en&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;Native JavaScript Multilanguage Templating&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;style&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;css&#34;&gt;            &lt;span class=&#34;selector-tag&#34;&gt;body&lt;/span&gt; &amp;#123; &lt;span class=&#34;attribute&#34;&gt;padding&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;2rem&lt;/span&gt;; &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;css&#34;&gt;            &lt;span class=&#34;selector-tag&#34;&gt;main&lt;/span&gt; &amp;#123; &lt;span class=&#34;attribute&#34;&gt;text-align&lt;/span&gt;: center; &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;style&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;script&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;module&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;javascript&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &amp;#123; App &amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;./app.js&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;javascript&#34;&gt;            &lt;span class=&#34;built_in&#34;&gt;window&lt;/span&gt;.app = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; App(); &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            app.init();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;main&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;main&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;The &lt;code&gt;script&lt;/code&gt; points to the following ES6 module class in the file &lt;strong&gt;app.js&lt;/strong&gt;:&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption&gt;&lt;span&gt;app.js&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;App&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;title&#34;&gt;constructor&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// do something when the class is instantiated&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;title&#34;&gt;init&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// do something to initialize the app&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &amp;#123; App &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Nothing uncommon so far, if you are familiar with &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes&#34;&gt;ES6 classes&lt;/a&gt; and &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import&#34;&gt;imports&lt;/a&gt;/&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export&#34;&gt;exports&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;Now let’s create a &lt;strong&gt;localizations.js&lt;/strong&gt; file, to store the needed localized strings in all wanted languages. Every language will have its own branch in a &lt;code&gt;Localizations&lt;/code&gt; object, represented by its two-letter &lt;a href=&#34;https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes&#34;&gt;ISO-639-1 language code&lt;/a&gt;. All translations are accessible via an unique english key word:&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption&gt;&lt;span&gt;localizations.js&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Localizations&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;EN&amp;quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;helloWorld&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;Hello World&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;DE&amp;quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;helloWorld&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;Hallo Welt&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;ES&amp;quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;helloWorld&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;Hola, mundo&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;FR&amp;quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;helloWorld&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;Bonjour le monde&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;RU&amp;quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;helloWorld&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;Здравствуйте, мир&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;JP&amp;quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;helloWorld&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;ハローワールド&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;As we import the &lt;strong&gt;localizations.js&lt;/strong&gt; in our &lt;strong&gt;app.js&lt;/strong&gt;, we can initialize the localizations in the constructor of the app class with the language code of the users browser:&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption&gt;&lt;span&gt;app.js&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &amp;#123; Localizations &amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;./localizations.js&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;App&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;title&#34;&gt;constructor&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// Get browser language&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.langCode = &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;built_in&#34;&gt;window&lt;/span&gt;.navigator.language.split(&lt;span class=&#34;string&#34;&gt;&amp;quot;-&amp;quot;&lt;/span&gt;)[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;].toUpperCase();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// Init localization to access via &amp;#x27;app.localization&amp;#x27; globally&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.localization = Localizations()[&lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.langCode];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;app.localization&lt;/code&gt; now holds the key/value list of the current language.&lt;/p&gt;
&lt;p&gt;Now we implement the templating class, as described in &lt;a href=&#34;https://kiko.io/categories/JavaScript/Utilize-a-repository-of-reusable-ES6-template-literals/&#34;&gt;Utilize a repository of reusable ES6 template literals&lt;/a&gt; and define a first template called &lt;code&gt;helloWorld&lt;/code&gt; …&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption&gt;&lt;span&gt;templates.js&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Templates&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;title&#34;&gt;helloWorld&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;data&lt;/span&gt;)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.fillTemplate(&lt;span class=&#34;string&#34;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;            &amp;lt;h1&amp;gt;&lt;span class=&#34;subst&#34;&gt;$&amp;#123;app.localization.helloWorld&amp;#125;&lt;/span&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        `&lt;/span&gt;, data);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;title&#34;&gt;fillTemplate&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;templateString, templateVars&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; func = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;Function&lt;/span&gt;(...Object.keys(templateVars),  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          &lt;span class=&#34;string&#34;&gt;&amp;quot;return `&amp;quot;&lt;/span&gt; + templateString + &lt;span class=&#34;string&#34;&gt;&amp;quot;`;&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; func(...Object.values(templateVars));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &amp;#123; Templates &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;The inner text of the &lt;code&gt;h1&lt;/code&gt; element in the &lt;code&gt;helloWorld&lt;/code&gt; template refers to the globally available variable &lt;code&gt;app.localization&lt;/code&gt;, we initialized in the last step, and points to the translation &lt;code&gt;helloWorld&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In &lt;strong&gt;app.js&lt;/strong&gt; we import the &lt;strong&gt;templates.js&lt;/strong&gt; and implement some code in the &lt;code&gt;init&lt;/code&gt; method, to get the template and bring it to the DOM:&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption&gt;&lt;span&gt;app.js&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &amp;#123; Localizations &amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;./localizations.js&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &amp;#123; Templates &amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;./templates.js&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;App&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;title&#34;&gt;init&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// Get &amp;quot;Hello World&amp;quot; H1 element in current language&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; helloWorld = app.templates.helloWorld(&amp;#123;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//Insert H1 element into MAIN element&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;document&lt;/span&gt;.querySelector(&lt;span class=&#34;string&#34;&gt;&amp;quot;main&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      .insertAdjacentHTML(&lt;span class=&#34;string&#34;&gt;&amp;quot;beforeend&amp;quot;&lt;/span&gt;, helloWorld);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;This is it …&lt;/p&gt;
&lt;p&gt;In the following &lt;strong&gt;Github&lt;/strong&gt; repository you will find a solution based on this example, extented with a language selector, cookie support and some helper methods to keep the code nice and clean:&lt;/p&gt;
&lt;p&gt;  &lt;a href=&#34;https://github.com/kristofzerbe/Native-JavaScript-Multilanguage-Templating&#34;&gt;https://github.com/kristofzerbe/Native-JavaScript-Multilanguage-Templating&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/categories/JavaScript/Native-JavaScript-Multilanguage-Templating/github-solution.gif&#34; alt&gt;&lt;/p&gt;

        </content>
        <category term="JavaScript" scheme="https://kiko.io/categories/JavaScript/" />
        <category term="Localization" scheme="https://kiko.io/tags/Localization/" />
        <category term="Templating" scheme="https://kiko.io/tags/Templating/" />
        <category term="ES6" scheme="https://kiko.io/tags/ES6/" />
            
    </entry>
    <entry>
        <id>https://kiko.io/categories/Tools/Remote-Testing-and-Debugging-with-Chrome/</id>
            <title>Remote Testing and Debugging with Chrome</title>
            <published>2021-01-24T13:47:10.000Z</published>
        <link href="https://kiko.io/categories/Tools/Remote-Testing-and-Debugging-with-Chrome/"/>
        <summary type="html">
            &lt;p&gt;&lt;img src=&#34;https://kiko.io/photos/mobile/DSC_9368.jpg&#34; /&gt;&lt;/p&gt;&lt;p&gt;Developing a website or web app means, you have installed an editor locally on your computer, writing your code locally and start a tiny, built-in web server for debugging locally in your preferred browser. In most browsers, there are some features to mimic a smartphone, to see if your solution is working on such a device too, but you only get a hint if it’s running properly. Some mobile features like &lt;code&gt;navigator.canShare&lt;/code&gt; do not work at all. Better is to see it live on your device.&lt;/p&gt;
&lt;p&gt;This article will show you firstly, how to test your local solution on a smartphone and secondly, how to debug it locally, when it runs on the smartphone after releasing.&lt;/p&gt;&lt;p&gt;Read more ...&lt;/p&gt;
        </summary>
        <content type="html">
            &lt;p&gt;Developing a website or web app means, you have installed an editor locally on your computer, writing your code locally and start a tiny, built-in web server for debugging locally in your preferred browser. In most browsers, there are some features to mimic a smartphone, to see if your solution is working on such a device too, but you only get a hint if it’s running properly. Some mobile features like &lt;code&gt;navigator.canShare&lt;/code&gt; do not work at all. Better is to see it live on your device.&lt;/p&gt;
&lt;p&gt;This article will show you firstly, how to test your local solution on a smartphone and secondly, how to debug it locally, when it runs on the smartphone after releasing.&lt;/p&gt;
&lt;a id=&#34;more&#34;&gt;&lt;/a&gt;

&lt;p&gt;I will use following setup:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Editor: &lt;strong&gt;Visual Studio Code&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Smartphone: &lt;strong&gt;Android&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Browser for Desktop &amp;amp; Mobile: &lt;strong&gt;Microsoft Edge&lt;/strong&gt; (any other Chromium based browser will work also)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Before we start, we have to enable the Android smartphone to connect to other devices, by switching on &lt;strong&gt;USB Debugging&lt;/strong&gt;:&lt;/p&gt;
&lt;h3 id=&#34;Enable-the-Developer-Options&#34;&gt;&lt;a href=&#34;#Enable-the-Developer-Options&#34; class=&#34;headerlink&#34; title=&#34;Enable the Developer Options&#34;&gt;&lt;/a&gt;Enable the Developer Options&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;Go to &lt;code&gt;Settings&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&amp;nbsp;&amp;gt; &lt;code&gt;About Phone&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;Tap 7 times on &lt;code&gt;Build Number&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;Enable-USB-Debugging&#34;&gt;&lt;a href=&#34;#Enable-USB-Debugging&#34; class=&#34;headerlink&#34; title=&#34;Enable USB Debugging&#34;&gt;&lt;/a&gt;Enable USB Debugging&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;Go to &lt;code&gt;Settings&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&amp;nbsp;&amp;gt; &lt;code&gt;System&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&amp;nbsp;&amp;gt; &lt;code&gt;Advanced&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&amp;nbsp;&amp;gt; &lt;code&gt;Developer Options&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Switch &lt;code&gt;USB debugging&lt;/code&gt; to &lt;code&gt;ON&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;Test-your-local-site-on-a-mobile-device&#34;&gt;&lt;a href=&#34;#Test-your-local-site-on-a-mobile-device&#34; class=&#34;headerlink&#34; title=&#34;Test your local site on a mobile device&#34;&gt;&lt;/a&gt;Test your local site on a mobile device&lt;/h1&gt;&lt;p&gt;When you start your local web server from VS Code, your solution can be accessed by a &lt;code&gt;localhost&lt;/code&gt; address at a specific port:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/categories/Tools/Remote-Testing-and-Debugging-with-Chrome/localhost.png&#34; alt=&#34;Localhost&#34;&gt;&lt;/p&gt;
&lt;p&gt;Even if you are in the same network with all your devices, this address is only available locally. You need to “announce” this address to your mobile device by using the mechanism called &lt;strong&gt;Port Forwarding&lt;/strong&gt;. This is a job for the browser…&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Connect you mobile device via USB with your local machine&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Open up &lt;strong&gt;&lt;a href=&#34;chrome://inspect/#devices&#34;&gt;chrome://inspect/#devices&lt;/a&gt;&lt;/strong&gt; in your Chromium based browser (works in all Chromium browsers)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Your mobile device will ask you to allow USB-Debugging … say &lt;code&gt;ALLOW&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Under &lt;code&gt;Devices&lt;/code&gt;, your mobile device will appear after a few seconds … my is here the &lt;code&gt;Pixel 4&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;/categories/Tools/Remote-Testing-and-Debugging-with-Chrome/devtools-devices.png&#34; alt=&#34;DevTools, Devices&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;&lt;p&gt;Click on &lt;code&gt;Port Forwarding&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Enter your local, to be forwarded address (&lt;code&gt;&amp;#39;localhost:&amp;#39; and port number&lt;/code&gt;) and check &lt;code&gt;Enable port forwarding&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;/categories/Tools/Remote-Testing-and-Debugging-with-Chrome/enable-port-forwarding.png&#34; alt=&#34;Enable Port Forwarding&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;7&#34;&gt;
&lt;li&gt;&lt;p&gt;Open your Chromium based browser on your mobile device&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Enter the URL &lt;code&gt;localhost:4000&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Your local solution will now be loaded on your mobile device and you will see this in your local DevTools:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/categories/Tools/Remote-Testing-and-Debugging-with-Chrome/remote-view-localhost.png&#34; alt=&#34;Remote View&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/categories/Tools/Remote-Testing-and-Debugging-with-Chrome/remotely-loaded.png&#34; alt=&#34;Remotely Loaded&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;Debug-a-site-running-on-your-mobile-device-locally&#34;&gt;&lt;a href=&#34;#Debug-a-site-running-on-your-mobile-device-locally&#34; class=&#34;headerlink&#34; title=&#34;Debug a site running on your mobile device locally&#34;&gt;&lt;/a&gt;Debug a site running on your mobile device locally&lt;/h1&gt;&lt;p&gt;This step is now very easy, because we are connected to the mobile device and a remote site is loaded. Just click &lt;code&gt;inspect&lt;/code&gt; at the appropriate item:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/categories/Tools/Remote-Testing-and-Debugging-with-Chrome/inspect-remote.png&#34; alt=&#34;Inspect Remote&#34;&gt;.&lt;/p&gt;
&lt;p&gt;This works now also on the released version of your solution, you want to debug. Just enter the URL in a new tab on your mobile device, find the item in DevTools-Devices and click on &lt;code&gt;inspect&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The window, which will be opened on &lt;code&gt;inspect&lt;/code&gt;, are the Chrome Developer Tools and every interaction with it, will be reflected on your mobile device, as you are used to when debugging locally: &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/categories/Tools/Remote-Testing-and-Debugging-with-Chrome/devtools-remote.png&#34; alt=&#34;DevTools Remote&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/categories/Tools/Remote-Testing-and-Debugging-with-Chrome/remote-view-debugging.png&#34; alt=&#34;Remote View Debugging&#34;&gt;&lt;/p&gt;

        &lt;h2&gt;More Info&lt;/h2&gt;
        &lt;ul class=&#34;moreinfo-list&#34;&gt;
            &lt;li&gt;Chrome DevTools: &lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://developers.google.com/web/tools/chrome-devtools/remote-debugging/local-server&#34;&gt;Access Local Servers&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Chrome DevTools: &lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://developers.google.com/web/tools/chrome-devtools/remote-debugging/&#34;&gt;Get Started with Remote Debugging Android Devices&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
    
        </content>
        <category term="Tools" scheme="https://kiko.io/categories/Tools/" />
        <category term="VS Code" scheme="https://kiko.io/tags/VS-Code/" />
        <category term="Browser" scheme="https://kiko.io/tags/Browser/" />
        <category term="Debugging" scheme="https://kiko.io/tags/Debugging/" />
            
    </entry>
    <entry>
        <id>https://kiko.io/categories/Discoveries/Discoveries-6/</id>
            <title>Discoveries #6</title>
            <published>2021-01-20T14:01:34.000Z</published>
        <link href="https://kiko.io/categories/Discoveries/Discoveries-6/"/>
        <summary type="html">
            &lt;p&gt;&lt;img src=&#34;https://kiko.io/photos/mobile/DSC_4935.jpg&#34; /&gt;&lt;/p&gt;&lt;p&gt;2020 is over and history. Well, may 2021 be with us. With this post I would like to continue the &lt;strong&gt;Discoveries&lt;/strong&gt;, with new momentum. There was a lot to read over the holidays.&lt;/p&gt;
&lt;p&gt;All the finds in this issue have something to do with visual aspects of web design in the broadest sense.&lt;/p&gt;

        &lt;ul class=&#34;anchorlist&#34;&gt;
            &lt;li data-anchor=&#34;#drop-shadow-underrated-css-filter&#34;&gt;Drop-Shadow: The Underrated CSS Filter&lt;/li&gt;&lt;li data-anchor=&#34;#css-gg&#34;&gt;css.gg - 700+ CSS Icons&lt;/li&gt;&lt;li data-anchor=&#34;#svgbox&#34;&gt;SVGBox - API for Web Icons&lt;/li&gt;&lt;li data-anchor=&#34;#change-color-svg-on-hover&#34;&gt;Change Color of SVG on Hover&lt;/li&gt;&lt;li data-anchor=&#34;#css-filter-generator&#34;&gt;CSS filter generator to convert from black to target hex color&lt;/li&gt;&lt;li data-anchor=&#34;#responsive-configurable-svg-waves&#34;&gt;Responsive &amp;&amp; Configurable SVG Waves&lt;/li&gt;&lt;li data-anchor=&#34;#balloon&#34;&gt;Balloon.css&lt;/li&gt;&lt;li data-anchor=&#34;#build-css-only-org-chart&#34;&gt;How to Build a CSS-only Organizational Chart&lt;/li&gt;&lt;li data-anchor=&#34;#shifty&#34;&gt;Shifty&lt;/li&gt;&lt;li data-anchor=&#34;#50-projects-50-days&#34;&gt;Brad Traversy&#39;s 50 Projects 50 Days&lt;/li&gt;
        &lt;/ul&gt;&lt;p&gt;Read more ...&lt;/p&gt;
        </summary>
        <content type="html">
            &lt;p&gt;2020 is over and history. Well, may 2021 be with us. With this post I would like to continue the &lt;strong&gt;Discoveries&lt;/strong&gt;, with new momentum. There was a lot to read over the holidays.&lt;/p&gt;
&lt;p&gt;All the finds in this issue have something to do with visual aspects of web design in the broadest sense.&lt;/p&gt;

        &lt;ul class=&#34;anchorlist&#34;&gt;
            &lt;li data-anchor=&#34;#drop-shadow-underrated-css-filter&#34;&gt;Drop-Shadow: The Underrated CSS Filter&lt;/li&gt;&lt;li data-anchor=&#34;#css-gg&#34;&gt;css.gg - 700+ CSS Icons&lt;/li&gt;&lt;li data-anchor=&#34;#svgbox&#34;&gt;SVGBox - API for Web Icons&lt;/li&gt;&lt;li data-anchor=&#34;#change-color-svg-on-hover&#34;&gt;Change Color of SVG on Hover&lt;/li&gt;&lt;li data-anchor=&#34;#css-filter-generator&#34;&gt;CSS filter generator to convert from black to target hex color&lt;/li&gt;&lt;li data-anchor=&#34;#responsive-configurable-svg-waves&#34;&gt;Responsive &amp;&amp; Configurable SVG Waves&lt;/li&gt;&lt;li data-anchor=&#34;#balloon&#34;&gt;Balloon.css&lt;/li&gt;&lt;li data-anchor=&#34;#build-css-only-org-chart&#34;&gt;How to Build a CSS-only Organizational Chart&lt;/li&gt;&lt;li data-anchor=&#34;#shifty&#34;&gt;Shifty&lt;/li&gt;&lt;li data-anchor=&#34;#50-projects-50-days&#34;&gt;Brad Traversy&#39;s 50 Projects 50 Days&lt;/li&gt;
        &lt;/ul&gt;
    

&lt;a id=&#34;more&#34;&gt;&lt;/a&gt;


    &lt;hr id=&#34;drop-shadow-underrated-css-filter&#34;&gt;
    &lt;h2 style=&#34;margin-bottom: 10px;&#34;&gt;
      Drop-Shadow: The Underrated CSS Filter
    &lt;/h2&gt;
    &lt;small&gt;by Michelle Barker&amp;nbsp;&lt;br&gt;&lt;a href=&#34;https://css-irl.info/drop-shadow-the-underrated-css-filter&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://css-irl.info/drop-shadow-the-underrated-css-filter&lt;/a&gt;&lt;/small&gt;
    &lt;p&gt;There are 2 built-in ways to drop a shadow on a HTML element with CSS. Michelle shows us the difference and the additional features &lt;code&gt;filter: drop-shadow&lt;/code&gt; has.&lt;/p&gt;

    &lt;a style=&#34;display:block; margin: 10px 0 30px;&#34; class=&#34;img-link&#34; href=&#34;https://css-irl.info/drop-shadow-the-underrated-css-filter&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
      &lt;img src=&#34;/categories/Discoveries/Discoveries-6/drop-shadow-underrated-css-filter.png&#34; alt=&#34;Drop-Shadow: The Underrated CSS Filter&#34;&gt;
    &lt;/a&gt;
  


    &lt;hr id=&#34;css-gg&#34;&gt;
    &lt;h2 style=&#34;margin-bottom: 10px;&#34;&gt;
      css.gg - 700+ CSS Icons
    &lt;/h2&gt;
    &lt;small&gt;by Astrit Malësia&amp;nbsp;&lt;br&gt;&lt;a href=&#34;https://css.gg&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://css.gg&lt;/a&gt;&lt;/small&gt;
    &lt;p&gt;Astrit, a swedish designer, has build this outstanding icon repository, with tons of icons in pure CSS or SVG. Chapeau…&lt;/p&gt;

    &lt;a style=&#34;display:block; margin: 10px 0 30px;&#34; class=&#34;img-link&#34; href=&#34;https://css.gg&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
      &lt;img src=&#34;/categories/Discoveries/Discoveries-6/css-gg.png&#34; alt=&#34;css.gg - 700+ CSS Icons&#34;&gt;
    &lt;/a&gt;
  


    &lt;hr id=&#34;svgbox&#34;&gt;
    &lt;h2 style=&#34;margin-bottom: 10px;&#34;&gt;
      SVGBox - API for Web Icons
    &lt;/h2&gt;
    &lt;small&gt;by ?&amp;nbsp;&lt;br&gt;&lt;a href=&#34;https://svgbox.net&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://svgbox.net&lt;/a&gt;&lt;/small&gt;
    &lt;p&gt;In case css.gg has not the appropriate SVG icon you are looking for, visit this site and explorer 12 icon sets with over 3.000 icons. Whoever brought this to us, thanks.&lt;/p&gt;

    &lt;a style=&#34;display:block; margin: 10px 0 30px;&#34; class=&#34;img-link&#34; href=&#34;https://svgbox.net&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
      &lt;img src=&#34;/categories/Discoveries/Discoveries-6/svgbox.png&#34; alt=&#34;SVGBox - API for Web Icons&#34;&gt;
    &lt;/a&gt;
  


    &lt;hr id=&#34;change-color-svg-on-hover&#34;&gt;
    &lt;h2 style=&#34;margin-bottom: 10px;&#34;&gt;
      Change Color of SVG on Hover
    &lt;/h2&gt;
    &lt;small&gt;by Chris Coyier&amp;nbsp;&lt;br&gt;&lt;a href=&#34;https://css-tricks.com/change-color-of-svg-on-hover&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://css-tricks.com/change-color-of-svg-on-hover&lt;/a&gt;&lt;/small&gt;
    &lt;p&gt;Once again Chris, who shows us here, how to colorize a SVG icon in case you use it as a background image by using CSS filter.&lt;/p&gt;

    &lt;a style=&#34;display:block; margin: 10px 0 30px;&#34; class=&#34;img-link&#34; href=&#34;https://css-tricks.com/change-color-of-svg-on-hover&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
      &lt;img src=&#34;/categories/Discoveries/Discoveries-6/change-color-svg-on-hover.png&#34; alt=&#34;Change Color of SVG on Hover&#34;&gt;
    &lt;/a&gt;
  


    &lt;hr id=&#34;css-filter-generator&#34;&gt;
    &lt;h2 style=&#34;margin-bottom: 10px;&#34;&gt;
      CSS filter generator to convert from black to target hex color
    &lt;/h2&gt;
    &lt;small&gt;by Barrett Sonntag&amp;nbsp;&lt;br&gt;&lt;a href=&#34;https://codepen.io/sosuke/pen/Pjoqqp&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://codepen.io/sosuke/pen/Pjoqqp&lt;/a&gt;&lt;/small&gt;
    &lt;p&gt;As Chris Coyer mentioned in the discovery above, you need the appropriate filter values on colorizing SVG’s. Barret has developed a converter in a pen. Useful tool…&lt;/p&gt;

    &lt;a style=&#34;display:block; margin: 10px 0 30px;&#34; class=&#34;img-link&#34; href=&#34;https://codepen.io/sosuke/pen/Pjoqqp&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
      &lt;img src=&#34;/categories/Discoveries/Discoveries-6/css-filter-generator.png&#34; alt=&#34;CSS filter generator to convert from black to target hex color&#34;&gt;
    &lt;/a&gt;
  


    &lt;hr id=&#34;responsive-configurable-svg-waves&#34;&gt;
    &lt;h2 style=&#34;margin-bottom: 10px;&#34;&gt;
      Responsive &amp;&amp; Configurable SVG Waves
    &lt;/h2&gt;
    &lt;small&gt;by Jhey Tompkins&amp;nbsp;&lt;br&gt;&lt;a href=&#34;https://codepen.io/jh3y/pen/poEvKxo&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://codepen.io/jh3y/pen/poEvKxo&lt;/a&gt;&lt;/small&gt;
    &lt;p&gt;Seperating content on a web site with some kind of divider is advisable  and motion is nice, if you don’t overdo it.  Jhey shows us, how to combine both with an animated wave.&lt;/p&gt;

    &lt;a style=&#34;display:block; margin: 10px 0 30px;&#34; class=&#34;img-link&#34; href=&#34;https://codepen.io/jh3y/pen/poEvKxo&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
      &lt;img src=&#34;/categories/Discoveries/Discoveries-6/responsive-configurable-svg-waves.png&#34; alt=&#34;Responsive &amp;&amp; Configurable SVG Waves&#34;&gt;
    &lt;/a&gt;
  


    &lt;hr id=&#34;balloon&#34;&gt;
    &lt;h2 style=&#34;margin-bottom: 10px;&#34;&gt;
      Balloon.css
    &lt;/h2&gt;
    &lt;small&gt;by Claudio Holanda&amp;nbsp;&lt;br&gt;&lt;a href=&#34;https://kazzkiq.github.io/balloon.css&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://kazzkiq.github.io/balloon.css&lt;/a&gt;&lt;/small&gt;
    &lt;p&gt;Ever needed tooltips for elements, which are not self-describing? Download this pure CSS solution from Claudio und you never search again for something like that.&lt;/p&gt;

    &lt;a style=&#34;display:block; margin: 10px 0 30px;&#34; class=&#34;img-link&#34; href=&#34;https://kazzkiq.github.io/balloon.css&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
      &lt;img src=&#34;/categories/Discoveries/Discoveries-6/balloon.png&#34; alt=&#34;Balloon.css&#34;&gt;
    &lt;/a&gt;
  


    &lt;hr id=&#34;build-css-only-org-chart&#34;&gt;
    &lt;h2 style=&#34;margin-bottom: 10px;&#34;&gt;
      How to Build a CSS-only Organizational Chart
    &lt;/h2&gt;
    &lt;small&gt;by someone at Envato Tuts+&amp;nbsp;&lt;br&gt;&lt;a href=&#34;https://codepen.io/tutsplus/pen/MWedpoj&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://codepen.io/tutsplus/pen/MWedpoj&lt;/a&gt;&lt;/small&gt;
    &lt;p&gt;Org charts are important to visualize hierarchies. Why not creating them with nothing else than HTML and CSS?&lt;/p&gt;

    &lt;a style=&#34;display:block; margin: 10px 0 30px;&#34; class=&#34;img-link&#34; href=&#34;https://codepen.io/tutsplus/pen/MWedpoj&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
      &lt;img src=&#34;/categories/Discoveries/Discoveries-6/build-css-only-org-chart.png&#34; alt=&#34;How to Build a CSS-only Organizational Chart&#34;&gt;
    &lt;/a&gt;
  


    &lt;hr id=&#34;shifty&#34;&gt;
    &lt;h2 style=&#34;margin-bottom: 10px;&#34;&gt;
      Shifty
    &lt;/h2&gt;
    &lt;small&gt;by Warren Galyen&amp;nbsp;&lt;br&gt;&lt;a href=&#34;https://wgalyen.github.io/shifty&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://wgalyen.github.io/shifty&lt;/a&gt;&lt;/small&gt;
    &lt;p&gt;No one can escape parallax effects on backgrounds. They are just too pleasing. Warren addresses this with his tiny JavaScript library.&lt;/p&gt;

    &lt;a style=&#34;display:block; margin: 10px 0 30px;&#34; class=&#34;img-link&#34; href=&#34;https://wgalyen.github.io/shifty&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
      &lt;img src=&#34;/categories/Discoveries/Discoveries-6/shifty.png&#34; alt=&#34;Shifty&#34;&gt;
    &lt;/a&gt;
  


    &lt;hr id=&#34;50-projects-50-days&#34;&gt;
    &lt;h2 style=&#34;margin-bottom: 10px;&#34;&gt;
      Brad Traversy&#39;s 50 Projects 50 Days
    &lt;/h2&gt;
    &lt;small&gt;by Brad Traversy&amp;nbsp;&lt;br&gt;&lt;a href=&#34;https://github.com/bradtraversy/50projects50days&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/bradtraversy/50projects50days&lt;/a&gt;&lt;/small&gt;
    &lt;p&gt;There are a lot of doing-a-thing-every-day projects, but Brad is pushing it with his 50 web projects in 50 days. Check out &lt;a href=&#34;https://50projects50days.com/projects/expanding-cards/&#34;&gt;Expanding Cards&lt;/a&gt; or &lt;a href=&#34;https://50projects50days.com/projects/rotating-navigation-animation/&#34;&gt;Rotating Navigation Animation&lt;/a&gt; or &lt;a href=&#34;https://50projects50days.com/projects/theme-clock/&#34;&gt;Theme Clock&lt;/a&gt;. Cool stuff and source code is available.&lt;/p&gt;

    &lt;a style=&#34;display:block; margin: 10px 0 30px;&#34; class=&#34;img-link&#34; href=&#34;https://github.com/bradtraversy/50projects50days&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
      &lt;img src=&#34;/categories/Discoveries/Discoveries-6/50-projects-50-days.png&#34; alt=&#34;Brad Traversy&#39;s 50 Projects 50 Days&#34;&gt;
    &lt;/a&gt;
  

        </content>
        <category term="Discoveries" scheme="https://kiko.io/categories/Discoveries/" />
        <category term="Great Finds" scheme="https://kiko.io/tags/Great-Finds/" />
            
    </entry>
    <entry>
        <id>https://kiko.io/categories/UI-Design/Use-a-duplicate-image-to-drop-a-shadow/</id>
            <title>Use a duplicate image to drop a shadow</title>
            <published>2021-01-20T09:38:50.000Z</published>
        <link href="https://kiko.io/categories/UI-Design/Use-a-duplicate-image-to-drop-a-shadow/"/>
        <summary type="html">
            &lt;p&gt;&lt;img src=&#34;https://kiko.io/photos/mobile/D702440.jpg&#34; /&gt;&lt;/p&gt;&lt;p&gt;Depending on your design, sometimes it is nice to drop a shadow on an image to highlight it:&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;img&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;src&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;my-image.jpg&amp;quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;selector-tag&#34;&gt;img&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attribute&#34;&gt;box-shadow&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;0px&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;25px&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;25px&lt;/span&gt; -&lt;span class=&#34;number&#34;&gt;10px&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;#666&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&#34;/categories/UI-Design/Use-a-duplicate-image-to-drop-a-shadow/normal-shadow.jpg&#34; alt=&#34;Normal Box Shadow&#34;&gt;&lt;/p&gt;
&lt;p&gt;But … it looks like a paper print of the image, with a light bulb in the first third above it. The shade is grey, boring and has been used and seen many times before…&lt;/p&gt;
&lt;p&gt;An design related &lt;a href=&#34;https://www.instagram.com/p/CIXUIXkBHMk/&#34;&gt;Instagram post&lt;/a&gt; from Muhammad Abdull of &lt;a href=&#34;https://www.instagram.com/thewilsonwings&#34;&gt;thewilsonthings&lt;/a&gt;, inspired me to &lt;strong&gt;use the image itself as the shadow&lt;/strong&gt; in order to make the image look a bit translucent. Should be the same technique as that of a reflection. Here is the HTML/CSS code for it, as the people asking for it in the comments.&lt;/p&gt;&lt;p&gt;Read more ...&lt;/p&gt;
        </summary>
        <content type="html">
            &lt;p&gt;Depending on your design, sometimes it is nice to drop a shadow on an image to highlight it:&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;img&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;src&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;my-image.jpg&amp;quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;selector-tag&#34;&gt;img&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attribute&#34;&gt;box-shadow&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;0px&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;25px&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;25px&lt;/span&gt; -&lt;span class=&#34;number&#34;&gt;10px&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;#666&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&#34;/categories/UI-Design/Use-a-duplicate-image-to-drop-a-shadow/normal-shadow.jpg&#34; alt=&#34;Normal Box Shadow&#34;&gt;&lt;/p&gt;
&lt;p&gt;But … it looks like a paper print of the image, with a light bulb in the first third above it. The shade is grey, boring and has been used and seen many times before…&lt;/p&gt;
&lt;p&gt;An design related &lt;a href=&#34;https://www.instagram.com/p/CIXUIXkBHMk/&#34;&gt;Instagram post&lt;/a&gt; from Muhammad Abdull of &lt;a href=&#34;https://www.instagram.com/thewilsonwings&#34;&gt;thewilsonthings&lt;/a&gt;, inspired me to &lt;strong&gt;use the image itself as the shadow&lt;/strong&gt; in order to make the image look a bit translucent. Should be the same technique as that of a reflection. Here is the HTML/CSS code for it, as the people asking for it in the comments.&lt;/p&gt;
&lt;a id=&#34;more&#34;&gt;&lt;/a&gt;

&lt;p&gt;What we want to achieve is this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/categories/UI-Design/Use-a-duplicate-image-to-drop-a-shadow/image-shadow.jpg&#34; alt=&#34;Duplicate Image Shadow&#34;&gt;&lt;/p&gt;
&lt;p&gt;Basically, we use a duplicate of the image and position it below the actual image, but slightly offset and blurred. It won’t be a performance issue, as some might think, because it is the very same file and will be loaded only once by the browser.&lt;/p&gt;
&lt;p&gt;For showing two images in the nearly same place in different layers, we need a wrapper…&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;image-wrapper&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;img&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;src&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;my-image.jpg&amp;quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;img&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;shadow&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;src&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;my-image.jpg&amp;quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;… and some CSS for positioning the images on top of each other first. Here are the defaults for both &lt;code&gt;image&lt;/code&gt; elements:&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;selector-tag&#34;&gt;div&lt;/span&gt;&lt;span class=&#34;selector-class&#34;&gt;.image-wrapper&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attribute&#34;&gt;position&lt;/span&gt;: relative;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;selector-tag&#34;&gt;div&lt;/span&gt;&lt;span class=&#34;selector-class&#34;&gt;.image-wrapper&lt;/span&gt; &lt;span class=&#34;selector-tag&#34;&gt;img&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attribute&#34;&gt;position&lt;/span&gt;: absolute;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attribute&#34;&gt;display&lt;/span&gt;: block;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attribute&#34;&gt;top&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attribute&#34;&gt;left&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attribute&#34;&gt;width&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;100%&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attribute&#34;&gt;z-index&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Now we have to style the duplicate image that it looks similar to the shadow. We washing it out using the &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/CSS/filter-function/blur&#34;&gt;blur filter&lt;/a&gt; and the opacity.&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;selector-tag&#34;&gt;div&lt;/span&gt;&lt;span class=&#34;selector-class&#34;&gt;.image-wrapper&lt;/span&gt; &lt;span class=&#34;selector-tag&#34;&gt;img&lt;/span&gt;&lt;span class=&#34;selector-class&#34;&gt;.shadow&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attribute&#34;&gt;filter&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;blur&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;10px&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attribute&#34;&gt;opacity&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;0.8&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&#34;/categories/UI-Design/Use-a-duplicate-image-to-drop-a-shadow/blurred-image.jpg&#34; alt=&#34;Blurred Duplicate&#34;&gt;&lt;/p&gt;
&lt;p&gt;Last step is to change the duplicates dimensions and the positioning below the original image. We squeeze it by 10% and shift it from left with half of the value back to the center, shift it from top to make it standout at the bottom and send it to the back by taking a lower z-index than the original image.&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;selector-tag&#34;&gt;div&lt;/span&gt;&lt;span class=&#34;selector-class&#34;&gt;.image-wrapper&lt;/span&gt; &lt;span class=&#34;selector-tag&#34;&gt;img&lt;/span&gt;&lt;span class=&#34;selector-class&#34;&gt;.shadow&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attribute&#34;&gt;filter&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;blur&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;10px&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attribute&#34;&gt;opacity&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;0.8&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attribute&#34;&gt;width&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;90%&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attribute&#34;&gt;left&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;5%&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attribute&#34;&gt;top&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;40px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attribute&#34;&gt;z-index&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Thats it. Here’s a pen to play around with the solution:&lt;/p&gt;

    &lt;iframe height=&#34;400&#34; id=&#34;codepen-XWjGBGy&#34; class=&#34;codepen&#34; src=&#34;https://codepen.io/kristofzerbe/embed/XWjGBGy?height=400&amp;default-tab=css,result&amp;theme-id=dark&#34; style=&#34;width: 100%;&#34; scrolling=&#34;no&#34; title=&#34;Codepen: Image Shadows&#34; frameborder=&#34;no&#34; loading=&#34;lazy&#34; allowtransparency=&#34;true&#34; allowfullscreen=&#34;true&#34;&gt;
    &lt;/iframe&gt;
  

        </content>
        <category term="UI-Design" scheme="https://kiko.io/categories/UI-Design/" />
        <category term="CSS" scheme="https://kiko.io/tags/CSS/" />
            
    </entry>
    <entry>
        <id>https://kiko.io/categories/JavaScript/Safely-remove-multiple-classes-using-a-prefix/</id>
            <title>Safely remove multiple classes using a prefix</title>
            <published>2021-01-18T10:17:46.000Z</published>
        <link href="https://kiko.io/categories/JavaScript/Safely-remove-multiple-classes-using-a-prefix/"/>
        <summary type="html">
            &lt;p&gt;&lt;img src=&#34;https://kiko.io/photos/mobile/DSC_1690.jpg&#34; /&gt;&lt;/p&gt;&lt;p&gt;Writing a Web App with HTML and JavaScript means you deal with several classes on your DOM elements in order to visualize state changes. And there are some pitfalls to be aware of with regard to removal.&lt;/p&gt;
&lt;p&gt;Assuming you want to open some kind of sidebar above a container. In this sidebar you have several buttons to show different content via JavaScript and a close button, which closes the sidebar again. You HTML code maybe looks like this:&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;container&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;... Main Content ...&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;nav&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;button&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;open-sidebar&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;nav&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;aside&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;sidebar&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;content&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;... Sidebar Content ...&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;button&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;close&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Close Sidebar&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;button&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;content1&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Show Content 1&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;button&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;content2&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Show Content 2&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;button&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;content3&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Show Content 3&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;aside&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;By clicking on the &lt;code&gt;open-sidebar&lt;/code&gt; button, the sidebar is opened and the action, respectively the new state, is vizualized by adding an appropriate class to the parent sidebar element. In order to make it easy for the user, the default content (Content 1) will be loaded also and its state will be marked with another class.&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;aside&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;sidebar open open-content1&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;A click on of the other content buttons (let’s say Content 2), will replace the current content and the &lt;code&gt;aside&lt;/code&gt; classes will change into:&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;aside&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;sidebar open open-content2&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Now we want to close the sidebar again, assuming that we don’t have stored the currently opened content in the JavaScript code…&lt;/p&gt;&lt;p&gt;Read more ...&lt;/p&gt;
        </summary>
        <content type="html">
            &lt;p&gt;Writing a Web App with HTML and JavaScript means you deal with several classes on your DOM elements in order to visualize state changes. And there are some pitfalls to be aware of with regard to removal.&lt;/p&gt;
&lt;p&gt;Assuming you want to open some kind of sidebar above a container. In this sidebar you have several buttons to show different content via JavaScript and a close button, which closes the sidebar again. You HTML code maybe looks like this:&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;container&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;... Main Content ...&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;nav&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;button&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;open-sidebar&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;nav&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;aside&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;sidebar&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;content&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;... Sidebar Content ...&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;button&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;close&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Close Sidebar&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;button&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;content1&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Show Content 1&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;button&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;content2&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Show Content 2&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;button&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;content3&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Show Content 3&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;aside&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;By clicking on the &lt;code&gt;open-sidebar&lt;/code&gt; button, the sidebar is opened and the action, respectively the new state, is vizualized by adding an appropriate class to the parent sidebar element. In order to make it easy for the user, the default content (Content 1) will be loaded also and its state will be marked with another class.&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;aside&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;sidebar open open-content1&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;A click on of the other content buttons (let’s say Content 2), will replace the current content and the &lt;code&gt;aside&lt;/code&gt; classes will change into:&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;aside&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;sidebar open open-content2&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Now we want to close the sidebar again, assuming that we don’t have stored the currently opened content in the JavaScript code…&lt;/p&gt;
&lt;a id=&#34;more&#34;&gt;&lt;/a&gt;

&lt;p&gt;What we have to do, is to iterate over all classes of &lt;code&gt;aside&lt;/code&gt; and remove those which starts with &lt;code&gt;open&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; sidebar = &lt;span class=&#34;built_in&#34;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&#34;string&#34;&gt;&amp;quot;sidebar&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; sidebar.classList.length; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; value = sidebar.classList[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (value.startsWith(&lt;span class=&#34;string&#34;&gt;&amp;quot;open&amp;quot;&lt;/span&gt;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    sidebar.classList.remove(value);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//or&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; sidebar = &lt;span class=&#34;built_in&#34;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&#34;string&#34;&gt;&amp;quot;sidebar&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sidebar.classList.forEach(&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;value&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(value.includes(&lt;span class=&#34;string&#34;&gt;&amp;quot;open&amp;quot;&lt;/span&gt;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    sidebar.classList.remove(value);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;); &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Both approaches have a pitfall: when the first class, starting with &lt;code&gt;open&lt;/code&gt;, is removed from the list, the length of the &lt;code&gt;classList&lt;/code&gt; array changes immediatly and we won’t reach the last class in the list … !&lt;/p&gt;
&lt;p&gt;The solution is to find and remove all appropriate classes at once, for example by using &lt;code&gt;RegEx&lt;/code&gt; and a reusable helper function:&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;removeClassByPrefix&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;el, prefix&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; pattern = &lt;span class=&#34;string&#34;&gt;&amp;#x27;(&amp;#x27;&lt;/span&gt; + prefix + &lt;span class=&#34;string&#34;&gt;&amp;#x27;(\\s|(-)?(\\w*)(\\s)?)).*?&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; regEx = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;RegExp&lt;/span&gt;(pattern, &lt;span class=&#34;string&#34;&gt;&amp;#x27;g&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  el.className = el.className.replace(regEx, &lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; sidebar = &lt;span class=&#34;built_in&#34;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&#34;string&#34;&gt;&amp;quot;sidebar&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;removeClassByPrefix(sidebar, &lt;span class=&#34;string&#34;&gt;&amp;quot;open&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;Update-24-Jan-2021&#34;&gt;&lt;a href=&#34;#Update-24-Jan-2021&#34; class=&#34;headerlink&#34; title=&#34;Update, 24 Jan 2021&#34;&gt;&lt;/a&gt;Update, 24 Jan 2021&lt;/h3&gt;&lt;p&gt;The first posted RegEx pattern didn’t worked properly, because it has found the prefix only and not the whole word, so I have updated the pattern.&lt;/p&gt;
&lt;p&gt;You can try it out at &lt;a href=&#34;https://regexr.com/5ktn3&#34;&gt;RegExr.com - Remove Class By Prefix&lt;/a&gt;.&lt;/p&gt;

        </content>
        <category term="JavaScript" scheme="https://kiko.io/categories/JavaScript/" />
        <category term="DOM" scheme="https://kiko.io/tags/DOM/" />
            
    </entry>
    <entry>
        <id>https://kiko.io/categories/Tools/Use-and-manage-multiple-Node-js-versions-on-Windows-10/</id>
            <title>Use and manage multiple Node.js versions on Windows 10</title>
            <published>2021-01-08T12:47:22.000Z</published>
        <link href="https://kiko.io/categories/Tools/Use-and-manage-multiple-Node-js-versions-on-Windows-10/"/>
        <summary type="html">
            &lt;p&gt;&lt;img src=&#34;https://kiko.io/photos/mobile/D70_8671.jpg&#34; /&gt;&lt;/p&gt;&lt;p&gt;For a new project I needed to have Node 14 running on my Windows 10 machine, so installation was done quickly via downloading and running the setup file.&lt;/p&gt;
&lt;p&gt;A short time later I wanted to write a new blog post here on kiko.io, which depends on the Node.js based static site generator &lt;a href=&#34;https://hexo.io&#34;&gt;Hexo&lt;/a&gt; … and ran into several problems.&lt;/p&gt;
&lt;p&gt;First of all my hero image processing script (see &lt;a href=&#34;/categories/Tools/Automatic-Header-Images-in-Hexo/&#34; title=&#34;Automatic Header Images in Hexo&#34;&gt;Automatic Header Images in Hexo&lt;/a&gt;) returned an exception. The script uses &lt;a href=&#34;https://github.com/hexojs/hexo-fs&#34;&gt;hexo-fs&lt;/a&gt; and the problem is known quite some time, according to this &lt;a href=&#34;https://github.com/hexojs/hexo/issues/4263&#34;&gt;Github issue&lt;/a&gt;. The guys recommend to downgrade to an older version of Node.js … :(&lt;/p&gt;
&lt;p&gt;Ok … I needed a solution to install multiple Node.js versions and switch between them, depending on which project I want to work on … and there is one: &lt;strong&gt;&lt;a href=&#34;https://github.com/coreybutler/nvm-windows&#34;&gt;nvm-windows&lt;/a&gt;&lt;/strong&gt; by Corey Butler!&lt;/p&gt;&lt;p&gt;Read more ...&lt;/p&gt;
        </summary>
        <content type="html">
            &lt;p&gt;For a new project I needed to have Node 14 running on my Windows 10 machine, so installation was done quickly via downloading and running the setup file.&lt;/p&gt;
&lt;p&gt;A short time later I wanted to write a new blog post here on kiko.io, which depends on the Node.js based static site generator &lt;a href=&#34;https://hexo.io&#34;&gt;Hexo&lt;/a&gt; … and ran into several problems.&lt;/p&gt;
&lt;p&gt;First of all my hero image processing script (see &lt;a href=&#34;/categories/Tools/Automatic-Header-Images-in-Hexo/&#34; title=&#34;Automatic Header Images in Hexo&#34;&gt;Automatic Header Images in Hexo&lt;/a&gt;) returned an exception. The script uses &lt;a href=&#34;https://github.com/hexojs/hexo-fs&#34;&gt;hexo-fs&lt;/a&gt; and the problem is known quite some time, according to this &lt;a href=&#34;https://github.com/hexojs/hexo/issues/4263&#34;&gt;Github issue&lt;/a&gt;. The guys recommend to downgrade to an older version of Node.js … :(&lt;/p&gt;
&lt;p&gt;Ok … I needed a solution to install multiple Node.js versions and switch between them, depending on which project I want to work on … and there is one: &lt;strong&gt;&lt;a href=&#34;https://github.com/coreybutler/nvm-windows&#34;&gt;nvm-windows&lt;/a&gt;&lt;/strong&gt; by Corey Butler!&lt;/p&gt;
&lt;a id=&#34;more&#34;&gt;&lt;/a&gt;

&lt;p&gt;This &lt;strong&gt;Node.js Version Manager for Windows&lt;/strong&gt; is working similar to the often mentioned &lt;a href=&#34;https://github.com/tj/n&#34;&gt;n&lt;/a&gt; and &lt;a href=&#34;https://github.com/nvm-sh/nvm&#34;&gt;nvm&lt;/a&gt;, which support Linux and Mac only. The latest release of &lt;strong&gt;nvm-windows&lt;/strong&gt; can be downloaded &lt;a href=&#34;https://github.com/coreybutler/nvm-windows/releases&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The setup is pretty straight forward and asks you at the very end, if the currently installed Node.js version should be managed by it. Confirmed…&lt;/p&gt;
&lt;p&gt;There are just a few commands to know and to run in the command line:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;List available Node.js versions&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight ps&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;nvm list available&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&#34;/categories/Tools/Use-and-manage-multiple-Node-js-versions-on-Windows-10/nvm-list-available.png&#34; alt=&#34;nvm install&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Install needed Node.js version&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight ps&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;nvm install &amp;lt;version&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&#34;/categories/Tools/Use-and-manage-multiple-Node-js-versions-on-Windows-10/nvm-install.png&#34; alt=&#34;nvm install&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Switch to particular Node.js version&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight ps&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;nvm use &amp;lt;version&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&#34;/categories/Tools/Use-and-manage-multiple-Node-js-versions-on-Windows-10/nvm-use.png&#34; alt=&#34;nvm use&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;List all installed Node.js versions&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight ps&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;nvm &lt;span class=&#34;built_in&#34;&gt;ls&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&#34;/categories/Tools/Use-and-manage-multiple-Node-js-versions-on-Windows-10/nvm-ls.png&#34; alt=&#34;nvm ls&#34;&gt;&lt;/p&gt;

    &lt;div class=&#34;alertbox alertbox-exclamation&#34;&gt;
      &lt;p&gt;In case you have Node.js version dependend utilities installed globally, you need to run &lt;code&gt;npm install -g&lt;/code&gt; after switch.&lt;/p&gt;

    &lt;/div&gt;
  


        &lt;h2&gt;More Info&lt;/h2&gt;
        &lt;ul class=&#34;moreinfo-list&#34;&gt;
            &lt;li&gt;Github: &lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://github.com/coreybutler/nvm-windows&#34;&gt;coreybutler/nvm-windows&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Microsoft Docs: &lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://docs.microsoft.com/en-us/windows/nodejs/setup-on-windows&#34;&gt;Set up your Node.js development environment directly on Windows&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
    
        </content>
        <category term="Tools" scheme="https://kiko.io/categories/Tools/" />
        <category term="Hexo" scheme="https://kiko.io/tags/Hexo/" />
        <category term="Windows" scheme="https://kiko.io/tags/Windows/" />
        <category term="Node.js" scheme="https://kiko.io/tags/Node-js/" />
            
    </entry>
    <entry>
        <id>https://kiko.io/categories/JavaScript/How-to-prevent-duplicate-events/</id>
            <title>How to prevent duplicate events</title>
            <published>2021-01-07T16:22:25.000Z</published>
        <link href="https://kiko.io/categories/JavaScript/How-to-prevent-duplicate-events/"/>
        <summary type="html">
            &lt;p&gt;&lt;img src=&#34;https://kiko.io/photos/mobile/DSC_7239.jpg&#34; /&gt;&lt;/p&gt;&lt;p&gt;I’m working on a new web app that contains a sliding out panel with some additional information on the selected element. This panel can be closed by the user via the ESC key. The implementation on initializing the panel seems very straight forward:&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Panel&lt;/span&gt;() &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;title&#34;&gt;init&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;document&lt;/span&gt;.addEventListener(&lt;span class=&#34;string&#34;&gt;&amp;quot;keydown&amp;quot;&lt;/span&gt;, &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;event&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(event.key === &lt;span class=&#34;string&#34;&gt;&amp;quot;Escape&amp;quot;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//close the panel&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Problem is: the panel, which is part of the basic HTML, will be initialized with its content and functionality in a ES6 class. So … on every init, another event listener is added.&lt;/p&gt;
&lt;p&gt;You can easily figure that out, by calling &lt;code&gt;getEventListeners(document)&lt;/code&gt; in the Chrome DevTools:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/categories/JavaScript/How-to-prevent-duplicate-events/chromedevtools-multiple-listeners.png&#34; alt=&#34;Chrome DevTools: Multiple Event Listeners&#34;&gt;&lt;/p&gt;&lt;p&gt;Read more ...&lt;/p&gt;
        </summary>
        <content type="html">
            &lt;p&gt;I’m working on a new web app that contains a sliding out panel with some additional information on the selected element. This panel can be closed by the user via the ESC key. The implementation on initializing the panel seems very straight forward:&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Panel&lt;/span&gt;() &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;title&#34;&gt;init&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;document&lt;/span&gt;.addEventListener(&lt;span class=&#34;string&#34;&gt;&amp;quot;keydown&amp;quot;&lt;/span&gt;, &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;event&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(event.key === &lt;span class=&#34;string&#34;&gt;&amp;quot;Escape&amp;quot;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//close the panel&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Problem is: the panel, which is part of the basic HTML, will be initialized with its content and functionality in a ES6 class. So … on every init, another event listener is added.&lt;/p&gt;
&lt;p&gt;You can easily figure that out, by calling &lt;code&gt;getEventListeners(document)&lt;/code&gt; in the Chrome DevTools:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/categories/JavaScript/How-to-prevent-duplicate-events/chromedevtools-multiple-listeners.png&#34; alt=&#34;Chrome DevTools: Multiple Event Listeners&#34;&gt;&lt;/p&gt;
&lt;a id=&#34;more&#34;&gt;&lt;/a&gt;

&lt;p&gt;As there is no way in JS to find and replace the event which was previously added, we have to remove the existing event by using &lt;code&gt;removeEventListener&lt;/code&gt; and add it again. Most important parameter on removing is the instance of the event handler, which was used the add the event previously.&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Panel&lt;/span&gt;() &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;title&#34;&gt;init&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;onEscapeKey&lt;/span&gt; (&lt;span class=&#34;params&#34;&gt;event&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(event.key === &lt;span class=&#34;string&#34;&gt;&amp;quot;Escape&amp;quot;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//close the panel&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;document&lt;/span&gt;.removeEventListener(&lt;span class=&#34;string&#34;&gt;&amp;quot;keydown&amp;quot;&lt;/span&gt;, onEscapeKey);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;document&lt;/span&gt;.addEventListener(&lt;span class=&#34;string&#34;&gt;&amp;quot;keydown&amp;quot;&lt;/span&gt;, onEscapeKey);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;But … as the handler &lt;code&gt;onEscapeKey&lt;/code&gt; is defined in a class, every time a new instance of the class is created, the handler will be not the same as the previous one! We have to store the event handler globally…&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Panel&lt;/span&gt;() &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;title&#34;&gt;init&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;document&lt;/span&gt;.removeEventListener(&lt;span class=&#34;string&#34;&gt;&amp;quot;keydown&amp;quot;&lt;/span&gt;, &lt;span class=&#34;built_in&#34;&gt;window&lt;/span&gt;.panelEscapeKeyHandler);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;window&lt;/span&gt;.panelEscapeKeyHandler = &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;onEscapeKey&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;event&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(event.key === &lt;span class=&#34;string&#34;&gt;&amp;quot;Escape&amp;quot;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//close the panel&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;document&lt;/span&gt;.addEventListener(&lt;span class=&#34;string&#34;&gt;&amp;quot;keydown&amp;quot;&lt;/span&gt;, &lt;span class=&#34;built_in&#34;&gt;window&lt;/span&gt;.panelEscapeKeyHandler);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Works!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/categories/JavaScript/How-to-prevent-duplicate-events/chromedevtools-one-listener.png&#34; alt=&#34;Chrome DevTools: One Event Listener&#34;&gt;&lt;/p&gt;

        </content>
        <category term="JavaScript" scheme="https://kiko.io/categories/JavaScript/" />
        <category term="Events" scheme="https://kiko.io/tags/Events/" />
            
    </entry>
    <entry>
        <id>https://kiko.io/categories/JavaScript/Utilize-a-repository-of-reusable-ES6-template-literals/</id>
            <title>Utilize a repository of reusable ES6 template literals</title>
            <published>2021-01-03T12:29:01.000Z</published>
        <link href="https://kiko.io/categories/JavaScript/Utilize-a-repository-of-reusable-ES6-template-literals/"/>
        <summary type="html">
            &lt;p&gt;&lt;img src=&#34;https://kiko.io/photos/mobile/DSC_7897.jpg&#34; /&gt;&lt;/p&gt;&lt;p&gt;The &lt;a href=&#34;http://es6-features.org/#StringInterpolation&#34;&gt;&lt;strong&gt;Template Literals&lt;/strong&gt;&lt;/a&gt; introduced with ES6 are very useful to deal with multiline strings, because they support &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#Expression_interpolation&#34;&gt;embedded expressions&lt;/a&gt;. Gone are the days of endless string concatination or replacing variables in a string by using RegEx.&lt;/p&gt;
&lt;p&gt;Instead of… &lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; url = ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; file = ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; template = &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;lt;div class=&amp;quot;photo&amp;quot;&amp;gt;&amp;#x27;&lt;/span&gt; + &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;lt;a href=&amp;quot;&amp;#x27;&lt;/span&gt; + url + &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;#x27; + &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        &amp;#x27;style=&amp;quot;&lt;/span&gt;background-image: url(&lt;span class=&#34;string&#34;&gt;&amp;#x27; + file + &amp;#x27;&lt;/span&gt;)&lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;lt;/a&amp;gt;&amp;#x27; + &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;  &amp;#x27;&amp;lt;/div&amp;gt;&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;… you can write:&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; url = ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; file = ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; template = &lt;span class=&#34;string&#34;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;  &amp;lt;div class=&amp;quot;photo&amp;quot;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;    &amp;lt;a href=&amp;quot;&lt;span class=&#34;subst&#34;&gt;$&amp;#123;url&amp;#125;&lt;/span&gt;/&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;    style=&amp;quot;background-image: url(&lt;span class=&#34;subst&#34;&gt;$&amp;#123;file&amp;#125;&lt;/span&gt;);&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;  &amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;`&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;It’s much cleaner and easier to handle, as you can copy your needed HTML right into your code and surround it by &lt;strong&gt;backtick&lt;/strong&gt; (!) characters. Insert your variable placeholders (expressions), indicated by a dollar sign and curly braces, and you are done.&lt;/p&gt;
&lt;p&gt;But there is one “restriction”, you have to be aware of: the interpolation (substitution of the expressions) is done at declaration time and not at runtime. You can’t define your literals seperatly, take one and make your substitution as you need it, like you would do with &lt;a href=&#34;https://handlebarsjs.com/&#34;&gt;Handlebars&lt;/a&gt; or other templating engines. Therefore the name &lt;em&gt;template&lt;/em&gt; literals is a bit misleading. But … there is a way to achieve this anyway…&lt;/p&gt;&lt;p&gt;Read more ...&lt;/p&gt;
        </summary>
        <content type="html">
            &lt;p&gt;The &lt;a href=&#34;http://es6-features.org/#StringInterpolation&#34;&gt;&lt;strong&gt;Template Literals&lt;/strong&gt;&lt;/a&gt; introduced with ES6 are very useful to deal with multiline strings, because they support &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#Expression_interpolation&#34;&gt;embedded expressions&lt;/a&gt;. Gone are the days of endless string concatination or replacing variables in a string by using RegEx.&lt;/p&gt;
&lt;p&gt;Instead of… &lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; url = ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; file = ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; template = &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;lt;div class=&amp;quot;photo&amp;quot;&amp;gt;&amp;#x27;&lt;/span&gt; + &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;lt;a href=&amp;quot;&amp;#x27;&lt;/span&gt; + url + &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;#x27; + &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        &amp;#x27;style=&amp;quot;&lt;/span&gt;background-image: url(&lt;span class=&#34;string&#34;&gt;&amp;#x27; + file + &amp;#x27;&lt;/span&gt;)&lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;lt;/a&amp;gt;&amp;#x27; + &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;  &amp;#x27;&amp;lt;/div&amp;gt;&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;… you can write:&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; url = ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; file = ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; template = &lt;span class=&#34;string&#34;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;  &amp;lt;div class=&amp;quot;photo&amp;quot;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;    &amp;lt;a href=&amp;quot;&lt;span class=&#34;subst&#34;&gt;$&amp;#123;url&amp;#125;&lt;/span&gt;/&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;    style=&amp;quot;background-image: url(&lt;span class=&#34;subst&#34;&gt;$&amp;#123;file&amp;#125;&lt;/span&gt;);&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;  &amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;`&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;It’s much cleaner and easier to handle, as you can copy your needed HTML right into your code and surround it by &lt;strong&gt;backtick&lt;/strong&gt; (!) characters. Insert your variable placeholders (expressions), indicated by a dollar sign and curly braces, and you are done.&lt;/p&gt;
&lt;p&gt;But there is one “restriction”, you have to be aware of: the interpolation (substitution of the expressions) is done at declaration time and not at runtime. You can’t define your literals seperatly, take one and make your substitution as you need it, like you would do with &lt;a href=&#34;https://handlebarsjs.com/&#34;&gt;Handlebars&lt;/a&gt; or other templating engines. Therefore the name &lt;em&gt;template&lt;/em&gt; literals is a bit misleading. But … there is a way to achieve this anyway…&lt;/p&gt;
&lt;a id=&#34;more&#34;&gt;&lt;/a&gt;

&lt;h2 id=&#34;Tagged-Templates&#34;&gt;&lt;a href=&#34;#Tagged-Templates&#34; class=&#34;headerlink&#34; title=&#34;Tagged Templates&#34;&gt;&lt;/a&gt;Tagged Templates&lt;/h2&gt;&lt;p&gt;Beside Template Literals, ES6 introduced &lt;strong&gt;Tagged Templates&lt;/strong&gt; (exact: Tagged Template Literals). These tags are functions, which allows you to parse a Template Literal. Definition is like this:&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;myTag&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;literals, ...expressions&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;//do the substitution and return a string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;You can use these tags by prefixing you literal:&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;myTag&lt;span class=&#34;string&#34;&gt;`Hello &lt;span class=&#34;subst&#34;&gt;$&amp;#123;firstName&amp;#125;&lt;/span&gt; &lt;span class=&#34;subst&#34;&gt;$&amp;#123;lastName&amp;#125;&lt;/span&gt;!`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Using Tagged Templates to build a template repository would mean, you have to write one tag function for every template … doable, but time consuming.&lt;/p&gt;
&lt;h2 id=&#34;Dynamic-Tag-Function&#34;&gt;&lt;a href=&#34;#Dynamic-Tag-Function&#34; class=&#34;headerlink&#34; title=&#34;Dynamic Tag Function&#34;&gt;&lt;/a&gt;Dynamic Tag Function&lt;/h2&gt;&lt;p&gt;To avoid this, we can write a universal tag function, which utilizes the &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/Function&#34;&gt;Function constructor&lt;/a&gt;, to create the tag function dynamically:&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;fillTemplate&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;templateString, templateVars&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; func = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;Function&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ...Object.keys(templateVars),  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;return `&amp;quot;&lt;/span&gt; + templateString + &lt;span class=&#34;string&#34;&gt;&amp;quot;`;&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; func(...Object.values(templateVars));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

    &lt;div class=&#34;alertbox alertbox-warning&#34;&gt;
      &lt;p&gt;Don’t use this approach on user inputs as expressions, to avoid XSS!&lt;/p&gt;

    &lt;/div&gt;
  

&lt;h2 id=&#34;Let’s-see-an-example…&#34;&gt;&lt;a href=&#34;#Let’s-see-an-example…&#34; class=&#34;headerlink&#34; title=&#34;Let’s see an example…&#34;&gt;&lt;/a&gt;Let’s see an example…&lt;/h2&gt;&lt;p&gt;Given is a tiny web app with the following structure:&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;figcaption&gt;&lt;span&gt;index.html&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&amp;lt;!DOCTYPE &lt;span class=&#34;meta-keyword&#34;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;Reusable ES6 template literals&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;meta&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;charset&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;UTF-8&amp;quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;link&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;rel&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;href&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;/src/style.css&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;main&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;main&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;main&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;script&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;src&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;src/index.js&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption&gt;&lt;span&gt;index.js&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &amp;#123; App &amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;./app.js&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; app = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; App();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;app.init();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption&gt;&lt;span&gt;app.js&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;App&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;title&#34;&gt;init&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//do something&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &amp;#123; App &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;What we want to do now, is to load some images into the &lt;code&gt;main&lt;/code&gt; element, by using a more or less complex element structure:&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;photo&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;href&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;lt;!-- Url to view the photo --&amp;gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;     &lt;span class=&#34;attr&#34;&gt;style&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;background-image: url(&amp;lt;!-- Url of the photo file --&amp;gt;);&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;To separate our templates from the main code, we create a template module, which contains the dynamic tag function from above and a &lt;code&gt;photo&lt;/code&gt; template we want to use in our app&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption&gt;&lt;span&gt;template.js&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Templates&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;//Template&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;title&#34;&gt;photo&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;data&lt;/span&gt;)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.fillTemplate(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;string&#34;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;      &amp;lt;div class=&amp;quot;photo&amp;quot;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        &amp;lt;a href=&amp;quot;&lt;span class=&#34;subst&#34;&gt;$&amp;#123;data.url&amp;#125;&lt;/span&gt;/&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        style=&amp;quot;background-image: url(&lt;span class=&#34;subst&#34;&gt;$&amp;#123;data.file&amp;#125;&lt;/span&gt;);&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;      &amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;      `&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      data&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;//Dynamic Tag Function&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;title&#34;&gt;fillTemplate&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;templateString, templateVars&lt;/span&gt;)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; func = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;Function&lt;/span&gt;(...Object.keys(templateVars),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                           &lt;span class=&#34;string&#34;&gt;&amp;quot;return `&amp;quot;&lt;/span&gt; + templateString + &lt;span class=&#34;string&#34;&gt;&amp;quot;`;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; func(...Object.values(templateVars));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &amp;#123; Templates &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;The template retrieves a &lt;code&gt;data&lt;/code&gt; object, with the values of the defined expressions, and calls the dynamic tag function on the literal template.&lt;/p&gt;
&lt;p&gt;This we can use now in our app code:&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption&gt;&lt;span&gt;app.js&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//Import Template module&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &amp;#123; Templates &amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;./templates.js&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;App&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;title&#34;&gt;init&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//Initialize Templates&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;._templates = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Templates();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//Insert photo into MAIN element&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; main = &lt;span class=&#34;built_in&#34;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&#34;string&#34;&gt;&amp;quot;main&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    main.insertAdjacentHTML(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;string&#34;&gt;&amp;quot;beforeend&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;._templates.photo(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        file: &lt;span class=&#34;string&#34;&gt;&amp;quot;my-photo.jpg&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        url: &lt;span class=&#34;string&#34;&gt;&amp;quot;https://link-to-my.photo.com&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &amp;#123; App &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;See it live at &lt;a href=&#34;https://codesandbox.io/s/reusable-es6-template-literals-4iyor?file=/src/templates.js&#34;&gt;codesandbox.io&lt;/a&gt;.&lt;/p&gt;

        &lt;h2&gt;More Info&lt;/h2&gt;
        &lt;ul class=&#34;moreinfo-list&#34;&gt;
            &lt;li&gt;Stackoverflow: &lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://stackoverflow.com/questions/30003353/can-es6-template-literals-be-substituted-at-runtime-or-reused&#34;&gt;Can ES6 template literals be substituted at runtime (or reused)?&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Github/Adelphos: &lt;a target=&#34;_blank&#34; rel=&#34;noopener&#34; href=&#34;https://github.com/Adelphos/ES6-Reuseable-Template&#34;&gt;ES6-Reuseable-Template&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
    

        </content>
        <category term="JavaScript" scheme="https://kiko.io/categories/JavaScript/" />
        <category term="Templating" scheme="https://kiko.io/tags/Templating/" />
        <category term="ES6" scheme="https://kiko.io/tags/ES6/" />
            
    </entry>
    <entry>
        <id>https://kiko.io/categories/Discoveries/Discoveries-5/</id>
            <title>Discoveries #5</title>
            <published>2020-12-19T11:12:44.000Z</published>
        <link href="https://kiko.io/categories/Discoveries/Discoveries-5/"/>
        <summary type="html">
            &lt;p&gt;&lt;img src=&#34;https://kiko.io/photos/mobile/D70_0789.jpg&#34; /&gt;&lt;/p&gt;&lt;p&gt;In this episode of the &lt;strong&gt;Discoveries&lt;/strong&gt; (almost) everything is about images and the web. There are so many pitfalls to do it wrong, but many more possibilities to do it right, especially with these resources I found in the last few weeks.&lt;/p&gt;

        &lt;ul class=&#34;anchorlist&#34;&gt;
            &lt;li data-anchor=&#34;#aspnet-core-image-resizing-middleware&#34;&gt;ASP.NET Core Image Resizing Middleware&lt;/li&gt;&lt;li data-anchor=&#34;#best-way-lazy-load-images&#34;&gt;Best way to lazy load images for maximum performance&lt;/li&gt;&lt;li data-anchor=&#34;#image-orientation-on-the-web&#34;&gt;image orientation on the web&lt;/li&gt;&lt;li data-anchor=&#34;#cosha&#34;&gt;cosha - Colorful shadows for your images&lt;/li&gt;&lt;li data-anchor=&#34;#parax-bg&#34;&gt;parax-bg - Parallax Backgrounds&lt;/li&gt;&lt;li data-anchor=&#34;#parax&#34;&gt;parax - Parallax Elements&lt;/li&gt;&lt;li data-anchor=&#34;#luminous&#34;&gt;Luminous Lightbox&lt;/li&gt;&lt;li data-anchor=&#34;#tiny-swiper&#34;&gt;Tiny-Swiper - Image Carousel&lt;/li&gt;
        &lt;/ul&gt;&lt;p&gt;Read more ...&lt;/p&gt;
        </summary>
        <content type="html">
            &lt;p&gt;In this episode of the &lt;strong&gt;Discoveries&lt;/strong&gt; (almost) everything is about images and the web. There are so many pitfalls to do it wrong, but many more possibilities to do it right, especially with these resources I found in the last few weeks.&lt;/p&gt;

        &lt;ul class=&#34;anchorlist&#34;&gt;
            &lt;li data-anchor=&#34;#aspnet-core-image-resizing-middleware&#34;&gt;ASP.NET Core Image Resizing Middleware&lt;/li&gt;&lt;li data-anchor=&#34;#best-way-lazy-load-images&#34;&gt;Best way to lazy load images for maximum performance&lt;/li&gt;&lt;li data-anchor=&#34;#image-orientation-on-the-web&#34;&gt;image orientation on the web&lt;/li&gt;&lt;li data-anchor=&#34;#cosha&#34;&gt;cosha - Colorful shadows for your images&lt;/li&gt;&lt;li data-anchor=&#34;#parax-bg&#34;&gt;parax-bg - Parallax Backgrounds&lt;/li&gt;&lt;li data-anchor=&#34;#parax&#34;&gt;parax - Parallax Elements&lt;/li&gt;&lt;li data-anchor=&#34;#luminous&#34;&gt;Luminous Lightbox&lt;/li&gt;&lt;li data-anchor=&#34;#tiny-swiper&#34;&gt;Tiny-Swiper - Image Carousel&lt;/li&gt;
        &lt;/ul&gt;
    

&lt;a id=&#34;more&#34;&gt;&lt;/a&gt;


    &lt;hr id=&#34;aspnet-core-image-resizing-middleware&#34;&gt;
    &lt;h2 style=&#34;margin-bottom: 10px;&#34;&gt;
      ASP.NET Core Image Resizing Middleware
    &lt;/h2&gt;
    &lt;small&gt;by Jeremy Paddison&amp;nbsp;&lt;br&gt;&lt;a href=&#34;https://www.paddo.org/asp-net-core-image-resizing-middleware/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.paddo.org/asp-net-core-image-resizing-middleware/&lt;/a&gt;&lt;/small&gt;
    &lt;p&gt;Jeremy shows in his blog post the possibilities of dealing with images in ASP.NET Core in terms of format, orientation and quality. A must read for every .NET developer.&lt;/p&gt;

    &lt;a style=&#34;display:block; margin: 10px 0 30px;&#34; class=&#34;img-link&#34; href=&#34;https://www.paddo.org/asp-net-core-image-resizing-middleware/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
      &lt;img src=&#34;/categories/Discoveries/Discoveries-5/aspnet-core-image-resizing-middleware.png&#34; alt=&#34;ASP.NET Core Image Resizing Middleware&#34;&gt;
    &lt;/a&gt;
  


    &lt;hr id=&#34;best-way-lazy-load-images&#34;&gt;
    &lt;h2 style=&#34;margin-bottom: 10px;&#34;&gt;
      Best way to lazy load images for maximum performance
    &lt;/h2&gt;
    &lt;small&gt;by Adrian Bece&amp;nbsp;&lt;br&gt;&lt;a href=&#34;https://blog.prototyp.digital/best-way-to-lazy-load-images-for-maximum-performance/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://blog.prototyp.digital/best-way-to-lazy-load-images-for-maximum-performance/&lt;/a&gt;&lt;/small&gt;
    &lt;p&gt;Delivering images on the web is difficult due to different devices and bandwidths. Adrian shows how to achieve a maximum of performance on lazy loading images via native JavaScript.&lt;/p&gt;

    &lt;a style=&#34;display:block; margin: 10px 0 30px;&#34; class=&#34;img-link&#34; href=&#34;https://blog.prototyp.digital/best-way-to-lazy-load-images-for-maximum-performance/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
      &lt;img src=&#34;/categories/Discoveries/Discoveries-5/best-way-lazy-load-images.png&#34; alt=&#34;Best way to lazy load images for maximum performance&#34;&gt;
    &lt;/a&gt;
  


    &lt;hr id=&#34;image-orientation-on-the-web&#34;&gt;
    &lt;h2 style=&#34;margin-bottom: 10px;&#34;&gt;
      image orientation on the web
    &lt;/h2&gt;
    &lt;small&gt;by Michael Scharnagl&amp;nbsp;&lt;br&gt;&lt;a href=&#34;https://justmarkup.com/articles/2019-10-21-image-orientation/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://justmarkup.com/articles/2019-10-21-image-orientation/&lt;/a&gt;&lt;/small&gt;
    &lt;p&gt;Automatic uploading and viewing images fails sometimes on portrait shots, because of misintrepretated orientation information by the different browsers. Michael adresses this problem with a Node.JS solution.&lt;/p&gt;

    &lt;a style=&#34;display:block; margin: 10px 0 30px;&#34; class=&#34;img-link&#34; href=&#34;https://justmarkup.com/articles/2019-10-21-image-orientation/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
      &lt;img src=&#34;/categories/Discoveries/Discoveries-5/image-orientation-on-the-web.png&#34; alt=&#34;image orientation on the web&#34;&gt;
    &lt;/a&gt;
  


    &lt;hr id=&#34;cosha&#34;&gt;
    &lt;h2 style=&#34;margin-bottom: 10px;&#34;&gt;
      cosha - Colorful shadows for your images
    &lt;/h2&gt;
    &lt;small&gt;by Robin Löffel&amp;nbsp;&lt;br&gt;&lt;a href=&#34;https://github.com/robinloeffel/cosha&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/robinloeffel/cosha&lt;/a&gt;&lt;/small&gt;
    &lt;p&gt;Adding a blurry shadow under an image to let the photo stand out from the background, is a nice technique to draw the users attention. Robin goes one step further with his JavaScript solution on colorful shadows, which represents the colors of the image.&lt;/p&gt;

    &lt;a style=&#34;display:block; margin: 10px 0 30px;&#34; class=&#34;img-link&#34; href=&#34;https://github.com/robinloeffel/cosha&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
      &lt;img src=&#34;/categories/Discoveries/Discoveries-5/cosha.png&#34; alt=&#34;cosha - Colorful shadows for your images&#34;&gt;
    &lt;/a&gt;
  


    &lt;hr id=&#34;parax-bg&#34;&gt;
    &lt;h2 style=&#34;margin-bottom: 10px;&#34;&gt;
      parax-bg - Parallax Backgrounds
    &lt;/h2&gt;
    &lt;small&gt;by Tobias Buschor&amp;nbsp;&lt;br&gt;&lt;a href=&#34;https://github.com/nuxodin/parax-bg&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/nuxodin/parax-bg&lt;/a&gt;&lt;/small&gt;
    &lt;p&gt;Parallaxing backgrounds are fairly attracting and so it is with Tobias’ approach on that for developers: easy to use and fast.&lt;/p&gt;

    &lt;a style=&#34;display:block; margin: 10px 0 30px;&#34; class=&#34;img-link&#34; href=&#34;https://github.com/nuxodin/parax-bg&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
      &lt;img src=&#34;/categories/Discoveries/Discoveries-5/parax-bg.png&#34; alt=&#34;parax-bg - Parallax Backgrounds&#34;&gt;
    &lt;/a&gt;
  


    &lt;hr id=&#34;parax&#34;&gt;
    &lt;h2 style=&#34;margin-bottom: 10px;&#34;&gt;
      parax - Parallax Elements
    &lt;/h2&gt;
    &lt;small&gt;by Tobias Buschor&amp;nbsp;&lt;br&gt;&lt;a href=&#34;https://github.com/nuxodin/parax&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/nuxodin/parax&lt;/a&gt;&lt;/small&gt;
    &lt;p&gt;If you just want to parallax some elements instead of backgrounds, Tobias has also a solution for that: Parax.&lt;/p&gt;

    &lt;a style=&#34;display:block; margin: 10px 0 30px;&#34; class=&#34;img-link&#34; href=&#34;https://github.com/nuxodin/parax&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
      &lt;img src=&#34;/categories/Discoveries/Discoveries-5/parax.png&#34; alt=&#34;parax - Parallax Elements&#34;&gt;
    &lt;/a&gt;
  


    &lt;hr id=&#34;luminous&#34;&gt;
    &lt;h2 style=&#34;margin-bottom: 10px;&#34;&gt;
      Luminous Lightbox
    &lt;/h2&gt;
    &lt;small&gt;by imgix&amp;nbsp;&lt;br&gt;&lt;a href=&#34;https://github.com/imgix/luminous&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/imgix/luminous&lt;/a&gt;&lt;/small&gt;
    &lt;p&gt;There are tons of image lightboxes out there and here is another one: Luminous from imgx. It is my favourite and I use it in this blog. Its lightweight and easy to use, for the user and the developer. A pearl…&lt;/p&gt;

    &lt;a style=&#34;display:block; margin: 10px 0 30px;&#34; class=&#34;img-link&#34; href=&#34;https://github.com/imgix/luminous&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
      &lt;img src=&#34;/categories/Discoveries/Discoveries-5/luminous.png&#34; alt=&#34;Luminous Lightbox&#34;&gt;
    &lt;/a&gt;
  


    &lt;hr id=&#34;tiny-swiper&#34;&gt;
    &lt;h2 style=&#34;margin-bottom: 10px;&#34;&gt;
      Tiny-Swiper - Image Carousel
    &lt;/h2&gt;
    &lt;small&gt;by Joe Harris&amp;nbsp;&lt;br&gt;&lt;a href=&#34;https://tiny-swiper.joe223.com/docs/demo/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://tiny-swiper.joe223.com/docs/demo/&lt;/a&gt;&lt;/small&gt;
    &lt;p&gt;The same applies to image carousels, but Tiny-Swiper is here outstanding too. It is simple, but powerful and well documented. A must use…&lt;/p&gt;

    &lt;a style=&#34;display:block; margin: 10px 0 30px;&#34; class=&#34;img-link&#34; href=&#34;https://tiny-swiper.joe223.com/docs/demo/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
      &lt;img src=&#34;/categories/Discoveries/Discoveries-5/tiny-swiper.png&#34; alt=&#34;Tiny-Swiper - Image Carousel&#34;&gt;
    &lt;/a&gt;
  
        </content>
        <category term="Discoveries" scheme="https://kiko.io/categories/Discoveries/" />
        <category term="Great Finds" scheme="https://kiko.io/tags/Great-Finds/" />
            
    </entry>
    <entry>
        <id>https://kiko.io/categories/Photo-Editing/Indian-Presets-for-Lightroom/</id>
            <title>Indian Presets for Lightroom</title>
            <published>2020-10-28T13:07:20.000Z</published>
        <link href="https://kiko.io/categories/Photo-Editing/Indian-Presets-for-Lightroom/"/>
        <summary type="html">
            &lt;p&gt;&lt;img src=&#34;https://kiko.io/photos/mobile/IMG_20191009_164133_HDR.jpg&#34; /&gt;&lt;/p&gt;&lt;p&gt;In 2019 I was on a short, stressful business trip to Dehli, India and one night we had the opportunity to relax a bit by driving around the city and visit some beautiful places of interest. I had no gear at all, just my Sony smartphone, but it is remarkable how good this worked out.&lt;/p&gt;&lt;p&gt;Read more ...&lt;/p&gt;
        </summary>
        <content type="html">
            &lt;p&gt;In 2019 I was on a short, stressful business trip to Dehli, India and one night we had the opportunity to relax a bit by driving around the city and visit some beautiful places of interest. I had no gear at all, just my Sony smartphone, but it is remarkable how good this worked out.&lt;/p&gt;
&lt;a id=&#34;more&#34;&gt;&lt;/a&gt;

&lt;h2 id=&#34;Indian-Sunset&#34;&gt;&lt;a href=&#34;#Indian-Sunset&#34; class=&#34;headerlink&#34; title=&#34;Indian Sunset&#34;&gt;&lt;/a&gt;Indian Sunset&lt;/h2&gt;
    &lt;div id=&#34;indian-sunset-compare-1&#34;&gt;
      &lt;img class=&#34;image-compare image-original&#34; src=&#34;/categories/Photo-Editing/Indian-Presets-for-Lightroom/IMG_20191009_165823_HDR_ORIGINAL.jpg&#34; alt&gt;
      &lt;img class=&#34;image-compare image-modified&#34; src=&#34;/categories/Photo-Editing/Indian-Presets-for-Lightroom/IMG_20191009_165823_HDR_PRESET_Sunset.jpg&#34; alt&gt;
    &lt;/div&gt;
    &lt;script&gt;
      var themeColor = &#34;#ffffff&#34;;
      if (localStorage.getItem(&#34;theme&#34;) === &#39;dark&#39;) {
        themeColor = &#34;#222222&#34;
      }
      new ImageCompare(document.getElementById(&#34;indian-sunset-compare-1&#34;),
      {
        controlColor: themeColor,
        controlShadow: false,
        verticalMode: false,
        showLabels: true,
        labelOptions: {
          before: &#39;Original&#39;,
          after: &#39;Preset&#39;,
          onHover: true,
        }
      }).mount();
    &lt;/script&gt;
  

&lt;hr&gt;

    &lt;div id=&#34;indian-sunset-compare-2&#34;&gt;
      &lt;img class=&#34;image-compare image-original&#34; src=&#34;/categories/Photo-Editing/Indian-Presets-for-Lightroom/IMG_20191009_164343_HDR_ORIGINAL.jpg&#34; alt&gt;
      &lt;img class=&#34;image-compare image-modified&#34; src=&#34;/categories/Photo-Editing/Indian-Presets-for-Lightroom/IMG_20191009_164343_HDR_PRESET_Sunset.jpg&#34; alt&gt;
    &lt;/div&gt;
    &lt;script&gt;
      var themeColor = &#34;#ffffff&#34;;
      if (localStorage.getItem(&#34;theme&#34;) === &#39;dark&#39;) {
        themeColor = &#34;#222222&#34;
      }
      new ImageCompare(document.getElementById(&#34;indian-sunset-compare-2&#34;),
      {
        controlColor: themeColor,
        controlShadow: false,
        verticalMode: true,
        showLabels: true,
        labelOptions: {
          before: &#39;Original&#39;,
          after: &#39;Preset&#39;,
          onHover: true,
        }
      }).mount();
    &lt;/script&gt;
  


    &lt;p class=&#34;download-link&#34;&gt;
      &lt;a class=&#34;button&#34; href=&#34;/categories/Photo-Editing/Indian-Presets-for-Lightroom/Indian Sunset.xmp&#34; download&gt;
        Download Lightroom Preset &lt;strong&gt;Indian Sunset.xmp&lt;/strong&gt;
      &lt;/a&gt;
    &lt;/p&gt;
    

        </content>
        <category term="Photo-Editing" scheme="https://kiko.io/categories/Photo-Editing/" />
        <category term="Lightroom" scheme="https://kiko.io/tags/Lightroom/" />
        <category term="Presets" scheme="https://kiko.io/tags/Presets/" />
            
    </entry>
    <entry>
        <id>https://kiko.io/categories/Photo-Editing/Israeli-Presets-for-Lightroom/</id>
            <title>Israeli Presets for Lightroom</title>
            <published>2020-10-27T14:07:20.000Z</published>
        <link href="https://kiko.io/categories/Photo-Editing/Israeli-Presets-for-Lightroom/"/>
        <summary type="html">
            &lt;p&gt;&lt;img src=&#34;https://kiko.io/photos/mobile/19-05 Israel-0498.jpg&#34; /&gt;&lt;/p&gt;&lt;p&gt;I’m a travel and event photo enthusiast, which means I’m shooting a lot of photographs on vacation or at special events only a few times a year. After I’m back home and start the image processing, I develop a particular look for my images of the past vacation or event. This has a lot to do with my mood and is very intuitive. Not all images are the same in terms of composition and light and so I create usually 3 or 4 different presets each time during image processing.&lt;/p&gt;
&lt;p&gt;Back in 2019, I was traveling around Israel, a fascinating country where almost every wall has a story to tell and I was listening through my viewfinder. Here I want to share the presets with you…&lt;/p&gt;&lt;p&gt;Read more ...&lt;/p&gt;
        </summary>
        <content type="html">
            &lt;p&gt;I’m a travel and event photo enthusiast, which means I’m shooting a lot of photographs on vacation or at special events only a few times a year. After I’m back home and start the image processing, I develop a particular look for my images of the past vacation or event. This has a lot to do with my mood and is very intuitive. Not all images are the same in terms of composition and light and so I create usually 3 or 4 different presets each time during image processing.&lt;/p&gt;
&lt;p&gt;Back in 2019, I was traveling around Israel, a fascinating country where almost every wall has a story to tell and I was listening through my viewfinder. Here I want to share the presets with you…&lt;/p&gt;
&lt;a id=&#34;more&#34;&gt;&lt;/a&gt;

&lt;h2 id=&#34;Israeli-Colors&#34;&gt;&lt;a href=&#34;#Israeli-Colors&#34; class=&#34;headerlink&#34; title=&#34;Israeli Colors&#34;&gt;&lt;/a&gt;Israeli Colors&lt;/h2&gt;&lt;p&gt;The mediaval walls of Jaffa glow in an inimitable way and brings other colors to shine the same way.&lt;/p&gt;

    &lt;div id=&#34;israeli-colors-compare&#34;&gt;
      &lt;img class=&#34;image-compare image-original&#34; src=&#34;/categories/Photo-Editing/Israeli-Presets-for-Lightroom/19-05 Israel-0078_ORIGINAL.jpg&#34; alt&gt;
      &lt;img class=&#34;image-compare image-modified&#34; src=&#34;/categories/Photo-Editing/Israeli-Presets-for-Lightroom/19-05 Israel-0078_PRESET_Colors.jpg&#34; alt&gt;
    &lt;/div&gt;
    &lt;script&gt;
      var themeColor = &#34;#ffffff&#34;;
      if (localStorage.getItem(&#34;theme&#34;) === &#39;dark&#39;) {
        themeColor = &#34;#222222&#34;
      }
      new ImageCompare(document.getElementById(&#34;israeli-colors-compare&#34;),
      {
        controlColor: themeColor,
        controlShadow: false,
        verticalMode: false,
        showLabels: true,
        labelOptions: {
          before: &#39;Original&#39;,
          after: &#39;Preset&#39;,
          onHover: true,
        }
      }).mount();
    &lt;/script&gt;
  


    &lt;p class=&#34;download-link&#34;&gt;
      &lt;a class=&#34;button&#34; href=&#34;/categories/Photo-Editing/Israeli-Presets-for-Lightroom/Israeli Colors.xmp&#34; download&gt;
        Download Lightroom Preset &lt;strong&gt;Israeli Colors.xmp&lt;/strong&gt;
      &lt;/a&gt;
    &lt;/p&gt;
    

&lt;hr&gt;
&lt;h2 id=&#34;Israeli-Lights&#34;&gt;&lt;a href=&#34;#Israeli-Lights&#34; class=&#34;headerlink&#34; title=&#34;Israeli Lights&#34;&gt;&lt;/a&gt;Israeli Lights&lt;/h2&gt;&lt;p&gt;The light in the eastern Mediterranean is stunning. The warm tone of the sand and the turquoise color of the water had to pop out.&lt;/p&gt;

    &lt;div id=&#34;israeli-lights-compare&#34;&gt;
      &lt;img class=&#34;image-compare image-original&#34; src=&#34;/categories/Photo-Editing/Israeli-Presets-for-Lightroom/19-05 Israel-0196_ORIGINAL.jpg&#34; alt&gt;
      &lt;img class=&#34;image-compare image-modified&#34; src=&#34;/categories/Photo-Editing/Israeli-Presets-for-Lightroom/19-05 Israel-0196_PRESET-Lights.jpg&#34; alt&gt;
    &lt;/div&gt;
    &lt;script&gt;
      var themeColor = &#34;#ffffff&#34;;
      if (localStorage.getItem(&#34;theme&#34;) === &#39;dark&#39;) {
        themeColor = &#34;#222222&#34;
      }
      new ImageCompare(document.getElementById(&#34;israeli-lights-compare&#34;),
      {
        controlColor: themeColor,
        controlShadow: false,
        verticalMode: false,
        showLabels: true,
        labelOptions: {
          before: &#39;Original&#39;,
          after: &#39;Preset&#39;,
          onHover: true,
        }
      }).mount();
    &lt;/script&gt;
  


    &lt;p class=&#34;download-link&#34;&gt;
      &lt;a class=&#34;button&#34; href=&#34;/categories/Photo-Editing/Israeli-Presets-for-Lightroom/Israeli Lights.xmp&#34; download&gt;
        Download Lightroom Preset &lt;strong&gt;Israeli Lights.xmp&lt;/strong&gt;
      &lt;/a&gt;
    &lt;/p&gt;
    

&lt;hr&gt;
&lt;h2 id=&#34;Israeli-Drama&#34;&gt;&lt;a href=&#34;#Israeli-Drama&#34; class=&#34;headerlink&#34; title=&#34;Israeli Drama&#34;&gt;&lt;/a&gt;Israeli Drama&lt;/h2&gt;&lt;p&gt;A visit of Yad Vashem moved me a lot and this preset is a expression of that.&lt;/p&gt;

    &lt;div id=&#34;israeli-drama-compare&#34;&gt;
      &lt;img class=&#34;image-compare image-original&#34; src=&#34;/categories/Photo-Editing/Israeli-Presets-for-Lightroom/19-05 Israel-0733_ORIGINAL.jpg&#34; alt&gt;
      &lt;img class=&#34;image-compare image-modified&#34; src=&#34;/categories/Photo-Editing/Israeli-Presets-for-Lightroom/19-05 Israel-0733_PRESET_Drama.jpg&#34; alt&gt;
    &lt;/div&gt;
    &lt;script&gt;
      var themeColor = &#34;#ffffff&#34;;
      if (localStorage.getItem(&#34;theme&#34;) === &#39;dark&#39;) {
        themeColor = &#34;#222222&#34;
      }
      new ImageCompare(document.getElementById(&#34;israeli-drama-compare&#34;),
      {
        controlColor: themeColor,
        controlShadow: false,
        verticalMode: false,
        showLabels: true,
        labelOptions: {
          before: &#39;Original&#39;,
          after: &#39;Preset&#39;,
          onHover: true,
        }
      }).mount();
    &lt;/script&gt;
  


    &lt;p class=&#34;download-link&#34;&gt;
      &lt;a class=&#34;button&#34; href=&#34;/categories/Photo-Editing/Israeli-Presets-for-Lightroom/Israeli Drama.xmp&#34; download&gt;
        Download Lightroom Preset &lt;strong&gt;Israeli Drama.xmp&lt;/strong&gt;
      &lt;/a&gt;
    &lt;/p&gt;
    

&lt;hr&gt;
&lt;h2 id=&#34;Israeli-Near-Black&#34;&gt;&lt;a href=&#34;#Israeli-Near-Black&#34; class=&#34;headerlink&#34; title=&#34;Israeli Near Black&#34;&gt;&lt;/a&gt;Israeli Near Black&lt;/h2&gt;&lt;p&gt;If you think of the tourists away, Jerusalem takes you to another level because of its age and history and nothing fits more to that than the sepia look of old pictures.&lt;/p&gt;

    &lt;div id=&#34;israeli-near-black-compare&#34;&gt;
      &lt;img class=&#34;image-compare image-original&#34; src=&#34;/categories/Photo-Editing/Israeli-Presets-for-Lightroom/19-05 Israel-0624_ORIGINAL.jpg&#34; alt&gt;
      &lt;img class=&#34;image-compare image-modified&#34; src=&#34;/categories/Photo-Editing/Israeli-Presets-for-Lightroom/19-05 Israel-0624_PRESET_Near Black.jpg&#34; alt&gt;
    &lt;/div&gt;
    &lt;script&gt;
      var themeColor = &#34;#ffffff&#34;;
      if (localStorage.getItem(&#34;theme&#34;) === &#39;dark&#39;) {
        themeColor = &#34;#222222&#34;
      }
      new ImageCompare(document.getElementById(&#34;israeli-near-black-compare&#34;),
      {
        controlColor: themeColor,
        controlShadow: false,
        verticalMode: false,
        showLabels: true,
        labelOptions: {
          before: &#39;Original&#39;,
          after: &#39;Preset&#39;,
          onHover: true,
        }
      }).mount();
    &lt;/script&gt;
  


    &lt;p class=&#34;download-link&#34;&gt;
      &lt;a class=&#34;button&#34; href=&#34;/categories/Photo-Editing/Israeli-Presets-for-Lightroom/Israeli Near Black.xmp&#34; download&gt;
        Download Lightroom Preset &lt;strong&gt;Israeli Near Black.xmp&lt;/strong&gt;
      &lt;/a&gt;
    &lt;/p&gt;
    

        </content>
        <category term="Photo-Editing" scheme="https://kiko.io/categories/Photo-Editing/" />
        <category term="Lightroom" scheme="https://kiko.io/tags/Lightroom/" />
        <category term="Presets" scheme="https://kiko.io/tags/Presets/" />
            
    </entry>
    <entry>
        <id>https://kiko.io/categories/Photo-Editing/Folder-based-publishing-in-Lightroom/</id>
            <title>Folder based publishing in Lightroom</title>
            <published>2020-10-26T12:28:59.000Z</published>
        <link href="https://kiko.io/categories/Photo-Editing/Folder-based-publishing-in-Lightroom/"/>
        <summary type="html">
            &lt;p&gt;&lt;img src=&#34;https://kiko.io/photos/mobile/DSC_0181.jpg&#34; /&gt;&lt;/p&gt;&lt;p&gt;In all times photography was a process: First you shoot you images, then you edit them and in the third step you publish them elsewhere.&lt;/p&gt;
&lt;p&gt;Today &lt;strong&gt;Adobe Lightroom&lt;/strong&gt; is a de-facto standard in photo processing, especially when you shoot RAW images. And I mean &lt;a href=&#34;https://www.adobe.com/de/products/photoshop-lightroom-classic.html&#34;&gt;Lightroom Classic&lt;/a&gt; and not the new web/smartphone based software, which doesn’t come even close to the desktop application yet.&lt;/p&gt;
&lt;p&gt;I use Lightroom for all purposes after I shot my images: editing, cataloguing, managing and … publishing. On publishing Lightroom offers you two approaches: &lt;em&gt;Export&lt;/em&gt; and &lt;em&gt;Publish&lt;/em&gt;. While &lt;em&gt;Export&lt;/em&gt; is mainly for creating JPG copies of edited RAW images, &lt;em&gt;Publish&lt;/em&gt; goes one step further and gives you the ability to do “something” with your exported JPG’s, for example upload them on Flickr, Instagram, 500px or to your own web server via FTP. Major difference to &lt;em&gt;Export&lt;/em&gt; is, that &lt;em&gt;Publish&lt;/em&gt; keeps your images in sync. Everytime you change the source images, the defined publish services recognizes and offer you to re-publish your image.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/categories/Photo-Editing/Folder-based-publishing-in-Lightroom/lr-re-publish.png&#34; alt=&#34;Lightroom Publish&#34;&gt;&lt;/p&gt;
&lt;p&gt;In the past years I tried a lot of Lightroom plugins for publishing on several platforms, but it doesn’t work out for long, because all these platforms change their API almost every year (or are stamped) and the sparely maintained 3rd party plugins break.&lt;/p&gt;
&lt;p&gt;My workflow for quite some time is to publish my photos on the hard drive, in a folder, which is synced via Dropbox with the cloud. From there I distribute them further.&lt;/p&gt;&lt;p&gt;Read more ...&lt;/p&gt;
        </summary>
        <content type="html">
            &lt;p&gt;In all times photography was a process: First you shoot you images, then you edit them and in the third step you publish them elsewhere.&lt;/p&gt;
&lt;p&gt;Today &lt;strong&gt;Adobe Lightroom&lt;/strong&gt; is a de-facto standard in photo processing, especially when you shoot RAW images. And I mean &lt;a href=&#34;https://www.adobe.com/de/products/photoshop-lightroom-classic.html&#34;&gt;Lightroom Classic&lt;/a&gt; and not the new web/smartphone based software, which doesn’t come even close to the desktop application yet.&lt;/p&gt;
&lt;p&gt;I use Lightroom for all purposes after I shot my images: editing, cataloguing, managing and … publishing. On publishing Lightroom offers you two approaches: &lt;em&gt;Export&lt;/em&gt; and &lt;em&gt;Publish&lt;/em&gt;. While &lt;em&gt;Export&lt;/em&gt; is mainly for creating JPG copies of edited RAW images, &lt;em&gt;Publish&lt;/em&gt; goes one step further and gives you the ability to do “something” with your exported JPG’s, for example upload them on Flickr, Instagram, 500px or to your own web server via FTP. Major difference to &lt;em&gt;Export&lt;/em&gt; is, that &lt;em&gt;Publish&lt;/em&gt; keeps your images in sync. Everytime you change the source images, the defined publish services recognizes and offer you to re-publish your image.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/categories/Photo-Editing/Folder-based-publishing-in-Lightroom/lr-re-publish.png&#34; alt=&#34;Lightroom Publish&#34;&gt;&lt;/p&gt;
&lt;p&gt;In the past years I tried a lot of Lightroom plugins for publishing on several platforms, but it doesn’t work out for long, because all these platforms change their API almost every year (or are stamped) and the sparely maintained 3rd party plugins break.&lt;/p&gt;
&lt;p&gt;My workflow for quite some time is to publish my photos on the hard drive, in a folder, which is synced via Dropbox with the cloud. From there I distribute them further.&lt;/p&gt;
&lt;a id=&#34;more&#34;&gt;&lt;/a&gt;

&lt;p&gt;Important on this approach is, to have a coherent output folder structure in order find a particular image afterwards.&lt;/p&gt;
&lt;p&gt;I store my RAW images on an external hard drive in a structure like this:&lt;/p&gt;
&lt;figure class=&#34;highlight txt&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;Drive:\&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  -&amp;gt;  Fotos&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      -&amp;gt;  &amp;lt;Year&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          -&amp;gt;  &amp;lt;Year&amp;gt;-&amp;lt;Month&amp;gt; &amp;lt;Eventname&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;First step after shooting is to copy all RAW files from the SD Card into a new subfolder of the current year. From there I import them into my Lightroom catalog.&lt;/p&gt;
&lt;p&gt;After sorting, rejecting, editing and flagging in Lightroom, I have to “export” the 4- and 5-star rated images into the cloud. There I have a slightly different structure, with a different root folder name and without the year:&lt;/p&gt;
&lt;figure class=&#34;highlight txt&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;Dropbox&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  -&amp;gt;  Photos&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      -&amp;gt;  &amp;lt;Year&amp;gt;-&amp;lt;Month&amp;gt; &amp;lt;Eventname&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;With the built-in “Hard Drive” publish service of Lightroom, it is feasible to “export” the images, but not in my wanted folder structure, because it is not possible to use the sources’ folder name as output folder name by option. It has to be specified manually each time, which is not very comfortable.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/categories/Photo-Editing/Folder-based-publishing-in-Lightroom/publish-hard-disk.png&#34; alt=&#34;Hard Disk Publish Service&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;Plugin-to-the-rescue&#34;&gt;&lt;a href=&#34;#Plugin-to-the-rescue&#34; class=&#34;headerlink&#34; title=&#34;Plugin to the rescue&#34;&gt;&lt;/a&gt;Plugin to the rescue&lt;/h2&gt;&lt;p&gt;Jeffrey Friedl, who is in the Lightroom plugin business about a decade, offers two plugins, which can solve the problem easily:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://regex.info/blog/lightroom-goodies/folder-publisher&#34;&gt;Jeffrey’s “&lt;strong&gt;Folder Publisher&lt;/strong&gt;“ Lightroom Plugin&lt;/a&gt;&lt;br&gt;Exports to disk in a folder hierarchy that mimics the folder hierarchy in your Lightroom catalog&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This one helps me not much, because my output folder would look like this:&lt;/p&gt;
&lt;figure class=&#34;highlight txt&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;Dropbox&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  -&amp;gt;  Photos&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      -&amp;gt;  Fotos&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          -&amp;gt; &amp;lt;Year&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;              -&amp;gt;  &amp;lt;Year&amp;gt;-&amp;lt;Month&amp;gt; &amp;lt;Eventname&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;a href=&#34;http://regex.info/blog/lightroom-goodies/collection-publisher&#34;&gt;Jeffrey’s “&lt;strong&gt;Collection Publisher&lt;/strong&gt;” Lightroom Plugin&lt;/a&gt;&lt;br&gt;Exports to local disk in a folder hierarchy that mimics the collection hierarchy you build within Lightroom&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Besides the commonality of defining a root folder, where the files are exported to, Jeffrey’s plugin has much more options to improve the export.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/categories/Photo-Editing/Folder-based-publishing-in-Lightroom/collection-publisher.png&#34; alt=&#34;Collection Publisher&#34;&gt;&lt;/p&gt;
&lt;p&gt;As the main feature, you can create collections within the plugin to define the export targets:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/categories/Photo-Editing/Folder-based-publishing-in-Lightroom/collection-publisher-create.png&#34; alt=&#34;Create Collection&#34;&gt;&lt;/p&gt;
&lt;p&gt;In the options of these collections, you can set several templates (variables) to let the plugin name the export subfolder automatically:  &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/categories/Photo-Editing/Folder-based-publishing-in-Lightroom/collection-publisher-options.png&#34; alt=&#34;Collection Options&#34;&gt;&lt;/p&gt;
&lt;p&gt;By using &lt;a href=&#34;https://helpx.adobe.com/lightroom-classic/help/photo-collections.html#work_with_smart_collections&#34;&gt;Smart Collections&lt;/a&gt; you don’t even need to drag &amp;amp; drop your images to publish to the publish collection. Lightroom will do this auto-magically.&lt;/p&gt;

        </content>
        <category term="Photo-Editing" scheme="https://kiko.io/categories/Photo-Editing/" />
        <category term="Lightroom" scheme="https://kiko.io/tags/Lightroom/" />
        <category term="Publishing" scheme="https://kiko.io/tags/Publishing/" />
        <category term="Plugin" scheme="https://kiko.io/tags/Plugin/" />
            
    </entry>
    <entry>
        <id>https://kiko.io/categories/Discoveries/Discoveries-4/</id>
            <title>Discoveries #4</title>
            <published>2020-10-10T13:27:47.000Z</published>
        <link href="https://kiko.io/categories/Discoveries/Discoveries-4/"/>
        <summary type="html">
            &lt;p&gt;&lt;img src=&#34;https://kiko.io/photos/mobile/DSC_6114.jpg&#34; /&gt;&lt;/p&gt;&lt;p&gt;It is so amazing how many cool stuff developers around the world are producing these days. Or they do what they always do, but I have more time to read about their smart ideas and solutions. This month I have 8 pearls for you:&lt;/p&gt;

        &lt;ul class=&#34;anchorlist&#34;&gt;
            &lt;li data-anchor=&#34;#waitForElementTransition&#34;&gt;waitForElementTransition()&lt;/li&gt;&lt;li data-anchor=&#34;#flexbox-and-ellipsis&#34;&gt;Using Flexbox and text ellipsis together&lt;/li&gt;&lt;li data-anchor=&#34;#using-trello-as-cms&#34;&gt;Using Trello as a Super Simple CMS&lt;/li&gt;&lt;li data-anchor=&#34;#memorize-scroll-position&#34;&gt;Memorize Scroll Position Across Page Loads&lt;/li&gt;&lt;li data-anchor=&#34;#head-dev&#34;&gt;A free guide to HTML5 &amp;lt;head&amp;gt; elements&lt;/li&gt;&lt;li data-anchor=&#34;#bv-select&#34;&gt;BVSelect - Vanilla JS&lt;/li&gt;&lt;li data-anchor=&#34;#hex-time&#34;&gt;A clock that represents the time as hex color values&lt;/li&gt;&lt;li data-anchor=&#34;#animate-css&#34;&gt;Animate.css - Just-add-water CSS animations&lt;/li&gt;
        &lt;/ul&gt;&lt;p&gt;Read more ...&lt;/p&gt;
        </summary>
        <content type="html">
            &lt;p&gt;It is so amazing how many cool stuff developers around the world are producing these days. Or they do what they always do, but I have more time to read about their smart ideas and solutions. This month I have 8 pearls for you:&lt;/p&gt;

        &lt;ul class=&#34;anchorlist&#34;&gt;
            &lt;li data-anchor=&#34;#waitForElementTransition&#34;&gt;waitForElementTransition()&lt;/li&gt;&lt;li data-anchor=&#34;#flexbox-and-ellipsis&#34;&gt;Using Flexbox and text ellipsis together&lt;/li&gt;&lt;li data-anchor=&#34;#using-trello-as-cms&#34;&gt;Using Trello as a Super Simple CMS&lt;/li&gt;&lt;li data-anchor=&#34;#memorize-scroll-position&#34;&gt;Memorize Scroll Position Across Page Loads&lt;/li&gt;&lt;li data-anchor=&#34;#head-dev&#34;&gt;A free guide to HTML5 &amp;lt;head&amp;gt; elements&lt;/li&gt;&lt;li data-anchor=&#34;#bv-select&#34;&gt;BVSelect - Vanilla JS&lt;/li&gt;&lt;li data-anchor=&#34;#hex-time&#34;&gt;A clock that represents the time as hex color values&lt;/li&gt;&lt;li data-anchor=&#34;#animate-css&#34;&gt;Animate.css - Just-add-water CSS animations&lt;/li&gt;
        &lt;/ul&gt;
    
&lt;a id=&#34;more&#34;&gt;&lt;/a&gt;


    &lt;hr id=&#34;waitForElementTransition&#34;&gt;
    &lt;h2 style=&#34;margin-bottom: 10px;&#34;&gt;
      waitForElementTransition()
    &lt;/h2&gt;
    &lt;small&gt;by Mark Kennedy&amp;nbsp;&lt;br&gt;&lt;a href=&#34;https://github.com/mkay581/wait-for-element-transition&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/mkay581/wait-for-element-transition&lt;/a&gt;&lt;/small&gt;
    &lt;p&gt;In these days a good UI doesn’t do without some animations or transitions and it is always advisible to use CSS for it, if possible. Marks shows us with his solution, how to wait in JavaScript for a transition to finish, before we continue to do something else in JS.&lt;/p&gt;

    &lt;a style=&#34;display:block; margin: 10px 0 30px;&#34; class=&#34;img-link&#34; href=&#34;https://github.com/mkay581/wait-for-element-transition&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
      &lt;img src=&#34;/categories/Discoveries/Discoveries-4/waitForElementTransition.png&#34; alt=&#34;waitForElementTransition()&#34;&gt;
    &lt;/a&gt;
  


    &lt;hr id=&#34;flexbox-and-ellipsis&#34;&gt;
    &lt;h2 style=&#34;margin-bottom: 10px;&#34;&gt;
      Using Flexbox and text ellipsis together
    &lt;/h2&gt;
    &lt;small&gt;by Leonardo Faria&amp;nbsp;&lt;br&gt;&lt;a href=&#34;https://leonardofaria.net/2020/07/18/using-flexbox-and-text-ellipsis-together/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://leonardofaria.net/2020/07/18/using-flexbox-and-text-ellipsis-together/&lt;/a&gt;&lt;/small&gt;
    &lt;p&gt;In case you offer downloads with very long file names from time to time, you might use CSS’s ellipsis to cut it down. But you always loose the last three chars, the file extension. Leonardo show us, how to avoid that, by using a clever mix of ellipsis and flexbox.&lt;/p&gt;

    &lt;a style=&#34;display:block; margin: 10px 0 30px;&#34; class=&#34;img-link&#34; href=&#34;https://leonardofaria.net/2020/07/18/using-flexbox-and-text-ellipsis-together/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
      &lt;img src=&#34;/categories/Discoveries/Discoveries-4/flexbox-and-ellipsis.png&#34; alt=&#34;Using Flexbox and text ellipsis together&#34;&gt;
    &lt;/a&gt;
  


    &lt;hr id=&#34;using-trello-as-cms&#34;&gt;
    &lt;h2 style=&#34;margin-bottom: 10px;&#34;&gt;
      Using Trello as a Super Simple CMS
    &lt;/h2&gt;
    &lt;small&gt;by Phil Hawksworth&amp;nbsp;&lt;br&gt;&lt;a href=&#34;https://css-tricks.com/using-trello-as-a-super-simple-cms&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://css-tricks.com/using-trello-as-a-super-simple-cms&lt;/a&gt;&lt;/small&gt;
    &lt;p&gt;As I love Trello and use it daily, among others as a reading list (see &lt;a href=&#34;/categories/Tools/Add-website-to-Trello-card-the-better-way/&#34; title=&#34;Add website to Trello card the better way&#34;&gt;Add website to Trello card the better way&lt;/a&gt;), I can’t wait to try Phils approach to process Trello boards automatically.&lt;/p&gt;

    &lt;a style=&#34;display:block; margin: 10px 0 30px;&#34; class=&#34;img-link&#34; href=&#34;https://css-tricks.com/using-trello-as-a-super-simple-cms&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
      &lt;img src=&#34;/categories/Discoveries/Discoveries-4/using-trello-as-cms.png&#34; alt=&#34;Using Trello as a Super Simple CMS&#34;&gt;
    &lt;/a&gt;
  


    &lt;hr id=&#34;memorize-scroll-position&#34;&gt;
    &lt;h2 style=&#34;margin-bottom: 10px;&#34;&gt;
      Memorize Scroll Position Across Page Loads
    &lt;/h2&gt;
    &lt;small&gt;by Chris Coyier&amp;nbsp;&lt;br&gt;&lt;a href=&#34;https://css-tricks.com/memorize-scroll-position-across-page-loads/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://css-tricks.com/memorize-scroll-position-across-page-loads/&lt;/a&gt;&lt;/small&gt;
    &lt;p&gt;Chris shows Hakim El Hattab’s trick, how to store the current scroll position and restore it when user comes back. Simple, but a gain in usability.&lt;/p&gt;

    &lt;a style=&#34;display:block; margin: 10px 0 30px;&#34; class=&#34;img-link&#34; href=&#34;https://css-tricks.com/memorize-scroll-position-across-page-loads/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
      &lt;img src=&#34;/categories/Discoveries/Discoveries-4/memorize-scroll-position.png&#34; alt=&#34;Memorize Scroll Position Across Page Loads&#34;&gt;
    &lt;/a&gt;
  


    &lt;hr id=&#34;head-dev&#34;&gt;
    &lt;h2 style=&#34;margin-bottom: 10px;&#34;&gt;
      A free guide to HTML5 &amp;lt;head&amp;gt; elements
    &lt;/h2&gt;
    &lt;small&gt;by Josh Buchea&amp;nbsp;&lt;br&gt;&lt;a href=&#34;https://htmlhead.dev&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://htmlhead.dev&lt;/a&gt;&lt;/small&gt;
    &lt;p&gt;Doing your Web Developer job right, means you have to be aware of the META tags in your HTML. htmlhead.dev is a good reference, because it lists and describes mostly all known META tags.&lt;/p&gt;

    &lt;a style=&#34;display:block; margin: 10px 0 30px;&#34; class=&#34;img-link&#34; href=&#34;https://htmlhead.dev&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
      &lt;img src=&#34;/categories/Discoveries/Discoveries-4/head-dev.png&#34; alt=&#34;A free guide to HTML5 &amp;lt;head&amp;gt; elements&#34;&gt;
    &lt;/a&gt;
  


    &lt;hr id=&#34;bv-select&#34;&gt;
    &lt;h2 style=&#34;margin-bottom: 10px;&#34;&gt;
      BVSelect - Vanilla JS
    &lt;/h2&gt;
    &lt;small&gt;by Bruno Vieira&amp;nbsp;&lt;br&gt;&lt;a href=&#34;https://bmsvieira.github.io/BVSelect-VanillaJS&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://bmsvieira.github.io/BVSelect-VanillaJS&lt;/a&gt;&lt;/small&gt;
    &lt;p&gt;There are many HTML/Javascript driven dropdowns out there. So has Bruno, but his solution don’t even looks nice, it is written in ES6, has no dependencies and is dead simple to use.&lt;/p&gt;

    &lt;a style=&#34;display:block; margin: 10px 0 30px;&#34; class=&#34;img-link&#34; href=&#34;https://bmsvieira.github.io/BVSelect-VanillaJS&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
      &lt;img src=&#34;/categories/Discoveries/Discoveries-4/bv-select.png&#34; alt=&#34;BVSelect - Vanilla JS&#34;&gt;
    &lt;/a&gt;
  


    &lt;hr id=&#34;hex-time&#34;&gt;
    &lt;h2 style=&#34;margin-bottom: 10px;&#34;&gt;
      A clock that represents the time as hex color values
    &lt;/h2&gt;
    &lt;small&gt;by Jamel Hammoud&amp;nbsp;&lt;br&gt;&lt;a href=&#34;https://github.com/JamelHammoud/hextime&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/JamelHammoud/hextime&lt;/a&gt;&lt;/small&gt;
    &lt;p&gt;The time is shown mostly as a six digit number … Hours, Minutes and Seconds, with a leading 0. Color Hex codes have also 6 digits and Jamel  the idea to bring both together…&lt;/p&gt;

    &lt;a style=&#34;display:block; margin: 10px 0 30px;&#34; class=&#34;img-link&#34; href=&#34;https://github.com/JamelHammoud/hextime&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
      &lt;img src=&#34;/categories/Discoveries/Discoveries-4/hex-time.png&#34; alt=&#34;A clock that represents the time as hex color values&#34;&gt;
    &lt;/a&gt;
  


    &lt;hr id=&#34;animate-css&#34;&gt;
    &lt;h2 style=&#34;margin-bottom: 10px;&#34;&gt;
      Animate.css - Just-add-water CSS animations
    &lt;/h2&gt;
    &lt;small&gt;by Daniel Eden&amp;nbsp;&lt;br&gt;&lt;a href=&#34;https://animate.style&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://animate.style&lt;/a&gt;&lt;/small&gt;
    &lt;p&gt;Daniel and his buddies offers an Stylesheet with dozens of cool and easy to use text animations.&lt;/p&gt;

    &lt;a style=&#34;display:block; margin: 10px 0 30px;&#34; class=&#34;img-link&#34; href=&#34;https://animate.style&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
      &lt;img src=&#34;/categories/Discoveries/Discoveries-4/animate-css.png&#34; alt=&#34;Animate.css - Just-add-water CSS animations&#34;&gt;
    &lt;/a&gt;
  
        </content>
        <category term="Discoveries" scheme="https://kiko.io/categories/Discoveries/" />
        <category term="Great Finds" scheme="https://kiko.io/tags/Great-Finds/" />
            
    </entry>
    <entry>
        <id>https://kiko.io/categories/JavaScript/Implement-source-switch-for-SPA/</id>
            <title>Implement source switch for SPA</title>
            <published>2020-10-04T15:01:02.000Z</published>
        <link href="https://kiko.io/categories/JavaScript/Implement-source-switch-for-SPA/"/>
        <summary type="html">
            &lt;p&gt;&lt;img src=&#34;https://kiko.io/photos/mobile/DSC_6063.jpg&#34; /&gt;&lt;/p&gt;&lt;p&gt;A while ago I wrote a Single Page Application (SPA) with jQuery and and decided to use some useful plugins to avoid reinventing the wheel. To keep the delivered sources small, I used the bundler &lt;a href=&#34;https://gulpjs.com/&#34;&gt;Gulp&lt;/a&gt;, to pack all JS plugins in a single file and another one for my custom JS code. I used the same procedure with the CSS files.&lt;/p&gt;
&lt;p&gt;The SPA contained only a single HTML file in which all bundeled sources and needed HTML template blocks were included, in order to load most of the stuff while starting the app, when the users sees a GMail-like  loading screen.&lt;/p&gt;
&lt;p&gt;But the whole thing had one disadvantage: Debugging for example in Chrome Dev Tool is not a joy, if the code is packed with &lt;a href=&#34;https://www.npmjs.com/package/gulp-concat&#34;&gt;Gulp Concat&lt;/a&gt; and &lt;a href=&#34;https://www.npmjs.com/package/gulp-concat&#34;&gt;Gulp Uglify&lt;/a&gt;. It would be much more convenient, if the source loading can be done depending on the environment.&lt;/p&gt;&lt;p&gt;Read more ...&lt;/p&gt;
        </summary>
        <content type="html">
            &lt;p&gt;A while ago I wrote a Single Page Application (SPA) with jQuery and and decided to use some useful plugins to avoid reinventing the wheel. To keep the delivered sources small, I used the bundler &lt;a href=&#34;https://gulpjs.com/&#34;&gt;Gulp&lt;/a&gt;, to pack all JS plugins in a single file and another one for my custom JS code. I used the same procedure with the CSS files.&lt;/p&gt;
&lt;p&gt;The SPA contained only a single HTML file in which all bundeled sources and needed HTML template blocks were included, in order to load most of the stuff while starting the app, when the users sees a GMail-like  loading screen.&lt;/p&gt;
&lt;p&gt;But the whole thing had one disadvantage: Debugging for example in Chrome Dev Tool is not a joy, if the code is packed with &lt;a href=&#34;https://www.npmjs.com/package/gulp-concat&#34;&gt;Gulp Concat&lt;/a&gt; and &lt;a href=&#34;https://www.npmjs.com/package/gulp-concat&#34;&gt;Gulp Uglify&lt;/a&gt;. It would be much more convenient, if the source loading can be done depending on the environment.&lt;/p&gt;
&lt;a id=&#34;more&#34;&gt;&lt;/a&gt;

&lt;p&gt;First step was to replace the SCRIPT and LINK tags in die &lt;code&gt;index.html&lt;/code&gt; with a dynamic loading approach using JavaScript.&lt;/p&gt;
&lt;h2 id=&#34;Dynamic-JS-loading&#34;&gt;&lt;a href=&#34;#Dynamic-JS-loading&#34; class=&#34;headerlink&#34; title=&#34;Dynamic JS loading&#34;&gt;&lt;/a&gt;Dynamic JS loading&lt;/h2&gt;&lt;p&gt;For some custom code it was necessary to load the plugins previously, because of dependencies.&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;addScriptAsync&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;url&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;Promise&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;resolve, reject&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; script = &lt;span class=&#34;built_in&#34;&gt;document&lt;/span&gt;.createElement(&lt;span class=&#34;string&#34;&gt;&amp;quot;script&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    script.type = &lt;span class=&#34;string&#34;&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    script.src = url;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    script.addEventListener(&lt;span class=&#34;string&#34;&gt;&amp;quot;load&amp;quot;&lt;/span&gt;, &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      resolve(script);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;, &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    script.addEventListener(&lt;span class=&#34;string&#34;&gt;&amp;quot;error&amp;quot;&lt;/span&gt;, &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      reject(script);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;, &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;document&lt;/span&gt;.getElementsByTagName(&lt;span class=&#34;string&#34;&gt;&amp;#x27;head&amp;#x27;&lt;/span&gt;)[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;].appendChild(script);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;By returning a &lt;code&gt;Promise&lt;/code&gt;, the calling code is able to wait for a dependent source to load:&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;addScriptAsync(&lt;span class=&#34;string&#34;&gt;&amp;quot;Build/vendor.min.js&amp;quot;&lt;/span&gt;).then(&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  addScriptAsync(&lt;span class=&#34;string&#34;&gt;&amp;quot;Build/custom.min.js&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;Dynamic-CSS-loading&#34;&gt;&lt;a href=&#34;#Dynamic-CSS-loading&#34; class=&#34;headerlink&#34; title=&#34;Dynamic CSS loading&#34;&gt;&lt;/a&gt;Dynamic CSS loading&lt;/h2&gt;&lt;p&gt;Loading CSS is pretty straightforward and includes an &lt;code&gt;id&lt;/code&gt; as parameter, in order to be able to access the style afterwards, for example when tehh user is chanhing the SPA’s theme: &lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;addStylesheet&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;url, id&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; stylesheet = &lt;span class=&#34;built_in&#34;&gt;document&lt;/span&gt;.createElement(&lt;span class=&#34;string&#34;&gt;&amp;#x27;link&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  stylesheet.rel = &lt;span class=&#34;string&#34;&gt;&amp;#x27;stylesheet&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  stylesheet.type = &lt;span class=&#34;string&#34;&gt;&amp;#x27;text/css&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  stylesheet.href = url;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (id) &amp;#123; stylesheet.setAttribute(&lt;span class=&#34;string&#34;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;, id); &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;built_in&#34;&gt;document&lt;/span&gt;.getElementsByTagName(&lt;span class=&#34;string&#34;&gt;&amp;#x27;head&amp;#x27;&lt;/span&gt;)[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;].appendChild(stylesheet);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;addStylesheet(&lt;span class=&#34;string&#34;&gt;&amp;quot;Build/vendor.css&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;addStylesheet(&lt;span class=&#34;string&#34;&gt;&amp;quot;Build/custom.css&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;Consider-the-environment&#34;&gt;&lt;a href=&#34;#Consider-the-environment&#34; class=&#34;headerlink&#34; title=&#34;Consider the environment&#34;&gt;&lt;/a&gt;Consider the environment&lt;/h2&gt;&lt;p&gt;Now everything was set up to implement a switch, depending on whether the SPA was started locally or in production.&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; _DEV = (&lt;span class=&#34;built_in&#34;&gt;window&lt;/span&gt;.location.hostname.indexOf(&lt;span class=&#34;string&#34;&gt;&amp;quot;localhost&amp;quot;&lt;/span&gt;) !== -&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;addStylesheet(&lt;span class=&#34;string&#34;&gt;&amp;quot;Build/vendor.css&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (_DEV) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  addStylesheet(&lt;span class=&#34;string&#34;&gt;&amp;quot;Libraries/styles.css&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  addStylesheet(&lt;span class=&#34;string&#34;&gt;&amp;quot;Libraries/helpers.css&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  addStylesheet(&lt;span class=&#34;string&#34;&gt;&amp;quot;Build/custom.css&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;addScriptAsync(&lt;span class=&#34;string&#34;&gt;&amp;quot;Build/vendor.min.js&amp;quot;&lt;/span&gt;).then(&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (_DEV) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    addScriptAsync(&lt;span class=&#34;string&#34;&gt;&amp;quot;Libraries/prototypes.js&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      .then(&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123; &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; addScriptAsync(&lt;span class=&#34;string&#34;&gt;&amp;quot;Libraries/tools.js&amp;quot;&lt;/span&gt;); &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      .then(&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123; &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; addScriptAsync(&lt;span class=&#34;string&#34;&gt;&amp;quot;Libraries/app.js&amp;quot;&lt;/span&gt;); &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; addScriptAsync(&lt;span class=&#34;string&#34;&gt;&amp;quot;Build/custom.min.js&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

        </content>
        <category term="JavaScript" scheme="https://kiko.io/categories/JavaScript/" />
        <category term="SPA" scheme="https://kiko.io/tags/SPA/" />
        <category term="Bundling" scheme="https://kiko.io/tags/Bundling/" />
            
    </entry>
</feed>
