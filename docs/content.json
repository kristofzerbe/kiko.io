{"meta":{"title":"kiko.io","subtitle":"Memorable Tech Stuff","description":"Blog about Development & Photography","author":"Kristof Zerbe","url":"https://kiko.io","root":"/"},"pages":[{"title":"About","date":"2020-09-05","updated":"2021-07-05","path":"about/index.html","permalink":"https://kiko.io/about/index.html","excerpt":"","text":"Hi there!I’m Kristof from the lovely snoring Wiesbaden, in sometimes too hot and most times to cold Germany.I love three things: Software Development, Photography and first and foremost the brightest star in my sky: Leni. tl;dr The Photo EnthusiastAs I was around 14 years old, I catched from wherever a Praktika TL 1000, a fully mechanic SLR build in the former GDR. It was a revelation. I pointed my camera on everything and spend all my little money in developing the negatives and getting the prints. My first big purchase was a Nikon F301 with some additional lenses and some equipment for my own black/white darkroom at home in the bathroom, for the joy of my family. Since then, I’m addicted to photography. I have even tried to become a photographer and started an apprenticeship in Frankfurt/Main after leaving school, but due to lack of support, I have given it up in favor of a “decent” profession, as my father would say ;) Today a have a lot of equipment, knowing that a good picture is done by the photographer and not by the camera, but it’s part of the fun, carrying 3 ore more kilos around my shoulder, to grab the right lens for the right shot. Find some of my photographs on 500px — https://500px.com/p/kikon The DeveloperI’m a creative person and most people are shaking their heads in disbelief, when I’m telling them, that IT has a lot to do with creativity and not with math. While learning a lot of stuff about business as an industrial clerk trainee at the German headquarter of Prime Computer around 1990 (the decent profession), there was a guy in the warehouse, Colin Urquhart, who was working with a new type of computer, a x68 machine from IBM and he taught me something about it and ignited my fascination about the possibilities of a computer. A little later I got in touch with a i386DX computer from Escom and started to fiddle around on how to achieve this or that under MS-DOS, installing Windows 3.x from a dozen of 3.5 discs, connecting via a 14.4k modem to the FidoNet (greets to all the guys from the 45er Infosystems) and talk shop with my fellow students at the University of Applied Aciences, Wiesbaden, department of economics. One of our teachers gave me a copy of Microsoft Access 1.1 and I started to explore the possibilities of this new relational database system. A short time later, our professor for computer science wanted to switch teaching DBase towards Access and so I became his assistant and held some class hours, where one of my students, having a little company on selling hardware, was asking me someday, if I was interested building Access-based software for his clients. I said yes. My starting point into a career as a freelance software developer. Years later, after dozens of clients, authoring a book about Access, coming and going technologies, building (and leaving) my own company Division by Zero with my good friend Marcus Michaels, I’m now Head of Software Development at SVG in Frankfurt, leading a bunch of cool software designers and engineers on developing good and relevant software … and my creativity is demanded day by day. I’m still first and foremost fascinated by the technology on building software, in particular in creating pleasing, but functional UI’s, a user wants to works with, even if I spend my daily working time on management stuff. So it is not surprising that I sit at my laptop in my spare time, working on my private projects or trying out new technologies. I made by hobby a profession… If you want to talk about the old, recent or new times in IT, you can find me at: Xinghttps://www.xing.com/profile/Kristof_Zerbe LinkedInhttps://www.linkedin.com/in/kristof-zerbe-91012510/ GitHubhttps://github.com/kristofzerbe The Tool GuyMy colleagues always start to giggle, when I’m telling them that I’ve found a new tool, which is doing this or that. I’m the Tool Guy. I love to look for those little helpers, which saves my time. Every machine, I work with, has a folder called TOOLS on the primary disc, with dozens of these little programs and the first thing I do, on setting up a new machine, is to install the foundation of my indespensable tools: KeePassThe one and only password store CropperIndividual screenshots with ease PaintDotNetThe bitmap imaging programm for in between PapercutTiny SMTP trap for debugging mail sending Process ExplorerThe one and only task manager AutorunsKnow whats happening on startup PNGGauntletNo PNG leaves my machine without compressing JPEGMini… and so do JPG’s FileZillaFTP’ing since 2007 SourceTreeGit management at it’s best for the window guys SyncBackProAutomating almost all file related stuff Visual Studio CodeBest IDE for almost everything VeryCryptSuccessor of TrueCrypt for creating encrypted containers 7ZipFile packing the Open Source way DeepLBest translator ever seen USBDLMStop looking, start knowing USB Drive Letters Sizer 4.0Predefined resizing windows FileMenu ToolsHelper for the Windows Explorer context menu"},{"title":"404","date":"2020-09-23","updated":"2021-04-16","path":"/404.html","permalink":"https://kiko.io/404.html","excerpt":"","text":"I don’t know how you ended up here, but you have jumped over the edge of this blog. Maybe it’s the end of the internet and you can power off your machine now…… or you climb back and read one of my recent posts :)"},{"title":"#TIL - Today I Learned","date":"2021-07-05","updated":"2021-07-06","path":"til/index.html","permalink":"https://kiko.io/til/index.html","excerpt":"","text":"06 Jul 2021 Execute ES6 module with node.jsWhen executing a script designed as an ES6 module (f.e. node my-module.js), it will fail with the error Cannot use import statement outside a module. Add &quot;type&quot;: &quot;module&quot; to package.json and it will work. 05 Jul 2021 Async Delay using TimeoutA little helper function to delay the execution of a script asynchonously 12345const delay = ms =&gt; new Promise((resolve, reject) =&gt; &#123; setTimeout(_ =&gt; resolve(), ms)&#125;);await delay(1000); 02 Jul 2021 Detect Touch Input DevicesAs of the W3C draft of Media Queries Level 5, touch devices can be detected by using the hover and the pointer media feature: 123456789/* smartphones, touchscreens */@media (hover: none) and (pointer: coarse) &#123; /* ... */&#125;/* mouse, touch pad */@media (hover: hover) and (pointer: fine) &#123; /* ... */&#125; 05 Jan 2021 Module Script AccessWhen using &lt;script type=&quot;module&quot;&gt;, which allows to dynamically include ES6 modules via import, and bootstrapping the app in the script via var app = new App();, there is no access to app in developer tools or links with javascript: app.myFunc(). It has to be made visible by window.app = New App();."},{"title":"","date":"2021-06-10","updated":"2020-09-26","path":"downloads/code/test.js","permalink":"https://kiko.io/downloads/code/test.js","excerpt":"","text":"alert('This is a test...'); console.log('This is a test...');"}],"posts":[{"title":"Generate Social Media Images Automatically","subtitle":null,"date":"2021-07-10","updated":"2021-07-11","path":"post/Generate-Social-Media-Images-Automatically/","permalink":"https://kiko.io/post/Generate-Social-Media-Images-Automatically/","excerpt":"From day one of this blog I wanted to combine two of my passions: tech stuff and photography. All these photos I have shot myself in recent years and now they are representing my thoughts &amp; findings about digital technology. I wrote about my approach to provide these images in my post Automatic Header Images in Hexo. When I share one of my posts on social media I provide the appropriate image as a visual anchor to my writing. The technique behind this are the meta tags in the HTML of my posts: 123456789&lt;!-- Schema.org for Google --&gt;&lt;meta itemprop=&quot;image&quot; content=&quot;https://kiko.io/photos/normal/DSC_6776.jpg&quot;&gt;&lt;!-- Open Graph --&gt;&lt;meta property=&quot;og:image&quot; content=&quot;https://kiko.io/photos/normal/DSC_6776.jpg&quot;&gt;&lt;!-- Twitter --&gt;&lt;meta property=&quot;twitter:card&quot; content=&quot;summary_large_image&quot;&gt;&lt;meta property=&quot;twitter:image&quot; content=&quot;https://kiko.io/photos/normal/DSC_6776.jpg&quot;&gt; There are several meta tags for different purposes regarding images. For more information see the links at the end of this post. To make a long story short: The sum of these approaches ensures that when an article is posted, the corresponding image is also displayed in the social media post. But … it’s only the image, without a visual reference to the post itself. In this article I want to show you how to combine the photo with some meta information of the post automatically, to get a Social Media Image.","keywords":"day blog wanted combine passions tech stuff photography photos shot recent years representing thoughts &amp findings digital technology wrote approach provide images post automatic header hexo share posts social media image visual anchor writing technique meta tags html 123456789&lt-- schemaorg google --&gt&ltmeta itemprop=&quotimage&quot content=&quot;https://kiko.io/photos/normal/DSC_6776.jpg&quot;&gt;&lt;!-- open graph property=&quotogimage&quot twitter property=&quottwittercard&quot content=&quotsummary_large_image&quot&gt&ltmeta property=&quottwitterimage&quot content=&quot;https://kiko.io/photos/normal/DSC_6776.jpg&quot;&gt; purposes information links end make long story short sum approaches ensures article posted displayed … reference show photo automatically","text":"From day one of this blog I wanted to combine two of my passions: tech stuff and photography. All these photos I have shot myself in recent years and now they are representing my thoughts &amp; findings about digital technology. I wrote about my approach to provide these images in my post Automatic Header Images in Hexo. When I share one of my posts on social media I provide the appropriate image as a visual anchor to my writing. The technique behind this are the meta tags in the HTML of my posts: 123456789&lt;!-- Schema.org for Google --&gt;&lt;meta itemprop=&quot;image&quot; content=&quot;https://kiko.io/photos/normal/DSC_6776.jpg&quot;&gt;&lt;!-- Open Graph --&gt;&lt;meta property=&quot;og:image&quot; content=&quot;https://kiko.io/photos/normal/DSC_6776.jpg&quot;&gt;&lt;!-- Twitter --&gt;&lt;meta property=&quot;twitter:card&quot; content=&quot;summary_large_image&quot;&gt;&lt;meta property=&quot;twitter:image&quot; content=&quot;https://kiko.io/photos/normal/DSC_6776.jpg&quot;&gt; There are several meta tags for different purposes regarding images. For more information see the links at the end of this post. To make a long story short: The sum of these approaches ensures that when an article is posted, the corresponding image is also displayed in the social media post. But … it’s only the image, without a visual reference to the post itself. In this article I want to show you how to combine the photo with some meta information of the post automatically, to get a Social Media Image. Starting point of my thoughts were two posts from Drew McLellan (Dynamic Social Sharing Images) and Ryan Filler (Automatic Social Share Images), to which I have already referred in my post Discoveries #11. Drew and Ryan utilizes the Node.JS library Puppeteer, which runs a headless Chromium (or Chrome browser) over the DevTools protocol to process a web page … for example to take a screenshot: 12345678const puppeteer = require(&#x27;puppeteer&#x27;);(async () =&gt; &#123; const browser = await puppeteer.launch(); const page = await browser.newPage(); await page.goto(&#x27;https://example.com&#x27;); await page.screenshot(&#123; path: &#x27;example.png&#x27; &#125;); await browser.close();&#125;)(); The idea is, to create a temporary HTML page with the photo and all necessary text for the social media image, take a screenshot of it and save it as PNG. As I run my blog with Hexo, a Static Site Generator (SSG), all information about a post is defined in a Markdown (MD) file with some Frontmatter for the meta information. Therefore, the Social Media Image Generator script in my mind had to do following tasks: Iterate recursively over all MD files in Hexo _source/posts folder Read the MD’s Frontmatter (for information about photo, title, subtitle and more) Create a temporary HTML file with the aid of a template Run Puppeteer script over the temporary file to take a screenshot Store the PNG to a central folder Optimize the PNG Change the meta tags in the posts to reference the new image The FrontmatterI pimped the Frontmatter of the original Hexo configuration a bit, in order to provide an individual photo for each post: 123456789101112---title: Generate Social Media Images Automaticallysubtitle:date: 2021-07-10 11:07:31photograph: file: DSC_6776.jpg name: Color Brushes link: &#x27;https://500px.com/photo/79965349&#x27;categories: - JavaScript...--- Among other, there are the basic information, I wanted to have on my social media image: photograph.file (as the image itself) and title, subtitle and categories (for the text on the image). The ScriptThe complete script, in two versions (CommonJS and ES Module) is available at GitHub. tl;dr My script became a JavaScript class, separating the tasks in several methods and a constructor to get all necessary information as parameters. The class exports the main method generate() for calling the script: social-media-image-generator.cjs12345678910111213141516171819202122232425const _currentPath = __dirname;var _postFolder;var _photoFolder;var _templateFile;var _targetFolder;class Generator &#123; constructor(postFolder, photoFolder, templateFile, targetFolder) &#123; _postFolder = path.join(_currentPath, postFolder); _photoFolder = path.join(_currentPath, photoFolder); _templateFile = path.join(_currentPath, templateFile); _targetFolder = path.join(_currentPath, targetFolder); &#125; generate() &#123; ... &#125; getPostFiles(dirPath, allFiles) &#123; ... &#125; async processPost(fileName, vars) &#123; ... &#125; async createImage(fileName, tempFile) &#123; ... &#125;&#125;module.exports.Generator = Generator I chose parameters, in order not to bind the script too tightly to my favourite SSG Hexo: _postFolder - Where are the post files stored? _photoFolder - Where are the photos stored? _templateFile - Where is the template file for the temporary HTML stored? _targetFolder - Where should the generated PNG files be stored? Get the postsFirst task was to get all MD files out of the _postFolder recursively: social-media-image-generator.cjs123456789101112131415161718192021222324252627282930const fs = require(&quot;fs&quot;);const path = require(&quot;path&quot;);class Generator &#123; generate() &#123; const postFiles = this.getPostFiles(_postFolder); &#125; getPostFiles(dirPath, allFiles) &#123; // READ FOLDER CONTENT let files = fs.readdirSync(dirPath); //INIT TEMP ARRAY allFiles = allFiles || []; files.forEach((file) =&gt; &#123; if (fs.statSync(dirPath + &quot;/&quot; + file).isDirectory()) &#123; // CALL THE METHOD RECURSIVELY allFiles = this.getPostFiles(dirPath + &quot;/&quot; + file, allFiles) &#125; else if (file.indexOf(&quot;.md&quot;)&gt;=0) &#123; // PUSH MD FILES TO TEMP ARRAY allFiles.push(path.join(dirPath, &quot;/&quot;, file)) &#125; &#125;); return allFiles; &#125; &#125;&#125; Get the template and the temporary folderI chose Handlebars as the template engine to generate the temporary HTML file, because it is so easy to handle. social-media-image.handlebars1234567891011121314151617181920212223242526&lt;html&gt; &lt;head&gt; &lt;style&gt; ... &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=&quot;wrap&quot;&gt; ... &lt;img id=&quot;photo&quot; src=&quot;&#123;&#123;photo&#125;&#125;&quot;&gt; &lt;div class=&quot;container&quot;&gt; ... &lt;section id=&quot;title&quot;&gt; &#123;&#123;#each categories&#125;&#125; &lt;small&gt;&#123;&#123;this&#125;&#125;&lt;/small&gt; &#123;&#123;/each&#125;&#125; &lt;h1&gt;&#123;&#123;title&#125;&#125;&lt;/h1&gt; &#123;&#123;#if subtitle&#125;&#125; &lt;h2&gt;&#123;&#123;subtitle&#125;&#125;&lt;/h2&gt; &#123;&#123;/if&#125;&#125; &lt;/section&gt; &lt;/div&gt; &lt;/div&gt; &lt;/body&gt;&lt;/html&gt;... Handlebars is able to compile a template into a JavaScript variable, what makes it easy to reuse it. Good for performance and stability. As I wanted to utilize the template to generate temporary HTML files, I needed a temporary folder, which can be deleted afterwards. social-media-image-generator.cjs123456789101112131415161718192021222324const handlebars = require(&quot;handlebars&quot;);var _template;const _tempFolder = &quot;./~temp&quot;;class Generator &#123; constructor(postFolder, photoFolder, templateFile, targetFolder) &#123; ... // GET THE TEMPLATE CONTENT let source = fs.readFileSync(_templateFile).toString(&#x27;utf8&#x27;); // COMPILE THE TEMPLATE FOR FURTHER USE ONCE _template = handlebars.compile(source); // CREATE TEMP FOLDER IN THE WORKING DIRECTORY if (!fs.existsSync(_tempFolder)) &#123; fs.mkdirSync(_tempFolder); &#125; &#125;&#125; Process the postsSecond step was to process all the posts found. social-media-image-generator.cjs1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374const fs = require(&quot;fs&quot;);const path = require(&quot;path&quot;);const url = require(&quot;url&quot;);const frontmatter = require(&quot;front-matter&quot;);const _tempFolder = &quot;./~temp&quot;;class Generator &#123; generate() &#123; let self = this; const postFiles = this.getPostFiles(_postFolder); var postsProcessed = 0; // ITERATE OVER ALL POSTS postFiles.forEach((file) =&gt; &#123; fs.readFile(file, &#x27;utf8&#x27;, function(err, data) &#123; if (err) throw err // READ THE FRONTMATTER let content = frontmatter(data); let fileName = path.basename(file, path.extname(file)); // only process posts with defined photograph file // and if social media file is missing if (content.attributes.photograph?.file &amp;&amp; !fs.existsSync(path.join(_targetFolder, fileName + &quot;.png&quot;))) &#123; // CALL PROCESSING METHOD self.processPost( fileName, &#123; title: content.attributes.title, subtitle: content.attributes.subtitle, categories: content.attributes.categories, photo: url.pathToFileURL( path.join(_photoFolder, content.attributes.photograph.file) ) &#125;) .then(() =&gt; &#123; // DELETE TEMP FOLDER AFTER PROCESSING if (postsProcessed === postFiles.length) &#123; fs.rmdirSync(_tempFolder, &#123; recursive: true &#125;); &#125; &#125;); &#125; postsProcessed += 1; &#125;) &#125;); &#125; async processPost(fileName, vars) &#123; // GET HTML FOR POST VIA HANDLEBARS let html = _template(vars); let tempFile = path.join(_tempFolder, fileName + &quot;.html&quot;); //WRITE TEMPORARY HTML FILE fs.writeFile(tempFile, html, (err) =&gt; &#123; if(err) &#123; throw(err); &#125; //console.log(tempFile + &quot; saved&quot;); &#125;); //CALL IMAGING METHOD await this.createImage(fileName, tempFile); return; &#125;&#125; Get the imageAs I had the temporary HTML file now, I only had to open up a Puppeteer instance, load the file and take the screenshot: 12345678910111213141516171819202122232425262728293031323334353637383940414243const puppeteer = require(&quot;puppeteer/cjs-entry&quot;);const imagemin = require(&quot;imagemin&quot;);const imageminPngquant = require(&quot;imagemin-pngquant&quot;);class Generator &#123; async createImage(fileName, tempFile) &#123; var self = this; // LAUNCH CHROMIUM AND A NEW PAGE const browser = await puppeteer.launch(); const page = await browser.newPage(); // LOAD THE TEMPORARY HTML FILE await page.goto(url.pathToFileURL(tempFile)); // SET THE EXACT WIDTH &amp; HEIGHT await page.setViewport(&#123; width: 1200, height: 630, deviceScaleFactor: 1 &#125;); let imgFile = path.join(_targetFolder, fileName + &quot;.png&quot;); // TAKE SCREENSHOT INTO PNG FILE AT TARGET FOLDER await page.screenshot(&#123; path: imgFile &#125;); await browser.close(); // OPTIMIZE THE PNG FILE await imagemin([imgFile], &#x27;build&#x27;, &#123; plugins: [ imageminPngquant(&#123; quality: &#x27;75-90&#x27; &#125;) ] &#125;); return; &#125;&#125; Running the scriptIf you already have lots of post in MD files and appropriate photographs, you can create an execution script… run-social-media-images.cjs123456789const Generator = require(&quot;./social-media-image-generator.cjs&quot;).Generator;const postFolder = process.argv[2].toString();const photoFolder = process.argv[3].toString();const templateFile = process.argv[4].toString();const targetFolder = process.argv[5].toString();const generator = new Generator(postFolder, photoFolder, templateFile, targetFolder);generator.generate(); … and run it as follows: Example execution in the console...1node &quot;./lib/run-social-media-images.cjs&quot; &quot;../source/_posts&quot; &quot;../static/photos/normal&quot; &quot;../templates/social-media-image.handlebars&quot; &quot;../static/images/social-media&quot; Hexo IntegrationIn case you are running your blog with Hexo also, you can hook on the ready event to let it run on hexo generate automatically: /scripts/on-ready-generate-social-media-images.js1234567891011121314151617181920const log = require(&#x27;hexo-log&#x27;)(&#123; debug: false, silent: false&#125;);const Generator = require(&quot;../lib/social-media-image-generator.cjs&quot;).Generator;hexo.on(&quot;ready&quot;, function() &#123; log.info(&quot;Running Social-Media-Image-Generator...&quot;); const postFolder = &quot;../source/_posts&quot;; const photoFolder = &quot;../static/photos/normal&quot;; const templateFile = &quot;../templates/social-media-image.handlebars&quot;; const targetFolder = &quot;../static/images/social-media&quot;; const generator = new Generator(postFolder, photoFolder, templateFile, targetFolder); generator.generate();&#125;); It is important not to store the social-media-image-generator.cjs in Hexo’s scripts folder like the event script above, because Hexo will try to execute it automatically. You have to create a different folder like lib to store and reference it from there. The ResultHere is the result from my approach in Hexo, as I run hexo generate for this blog post: The very last thing I had to do, was to change the source of the image meta tag mentioned at the top, to reference to newly created social media image. Here’s the new image in action at Twitter: More Info CSS Tricks: The Essential Meta Tags for Social MediaThe Open Graph Protocol: The Open Graph ProtocolDrew McLellan: Dynamic Social Sharing ImagesRyan Filler: Automatic Social Share ImagesThe GitHub Blog: A framework for building Open Graph images","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://kiko.io/categories/JavaScript/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://kiko.io/tags/Hexo/"},{"name":"Blogging","slug":"Blogging","permalink":"https://kiko.io/tags/Blogging/"},{"name":"Imaging","slug":"Imaging","permalink":"https://kiko.io/tags/Imaging/"},{"name":"ES6","slug":"ES6","permalink":"https://kiko.io/tags/ES6/"},{"name":"Github","slug":"Github","permalink":"https://kiko.io/tags/Github/"}]},{"title":"Discoveries #11","subtitle":null,"series":"Discoveries","date":"2021-06-28","updated":"2021-06-28","path":"post/Discoveries-11/","permalink":"https://kiko.io/post/Discoveries-11/","excerpt":"Todays issue of Discoveries is all about images. Show them, manipulate them, get information about them, protect them, use them and create them with JavaScript. Have fun trying out one of these cool solutions. PhotoSwipelightGalleryPicaResemble.jsmedium-zoomLC-Mouse-DragProtectImage.jsTinygraphsDynamic Social Sharing ImagesAutomatic Social Share Images","keywords":"todays issue discoveries images show manipulate information protect create javascript fun cool solutions photoswipelightgallerypicaresemblejsmedium-zoomlc-mouse-dragprotectimagejstinygraphsdynamic social sharing imagesautomatic share","text":"Todays issue of Discoveries is all about images. Show them, manipulate them, get information about them, protect them, use them and create them with JavaScript. Have fun trying out one of these cool solutions. PhotoSwipelightGalleryPicaResemble.jsmedium-zoomLC-Mouse-DragProtectImage.jsTinygraphsDynamic Social Sharing ImagesAutomatic Social Share Images PhotoSwipe by Dmytro Semenov&nbsp;https://photoswipe.com PhotoSwipe is a simple, but powerful image gallery written with jQuery, which has plugin support for some CRM’s. Currently Dmytro is working on the next version v5. lightGallery by Sachin Neravath&nbsp;https://www.lightgalleryjs.com/ Another wionderful image gallery, but with more (useful?) images features, realized as plugins. It supports video and IFrames also and is fully responsive. Pica by Nodeca&nbsp;https://github.com/nodeca/pica Pica is an Open Source project for resizing images with JavaScript. It supports several technologies, like WebAssembly, WebWorkers or even pure JS. Resemble.js by James Cryer&nbsp;http://rsmbl.github.io/Resemble.js/ Analyse and compare images with Javascript and visualizes the differences. Great stuff. medium-zoom by François Chalifour&nbsp;https://github.com/francoischalifour/medium-zoom Zoom your images on your website to fullsize like on medium.com. LC-Mouse-Drag by Luca from LCWeb Italia&nbsp;https://github.com/LCweb-ita/LC-Mouse-Drag Instead of zooming your image on your website, you can let the users scroll into an oversized image, to see the details. ProtectImage.js by ColonelParrot&nbsp;https://github.com/ColonelParrot/ProtectImage.js ProtectImage.js is a Javascript library that helps prevent image theft by disabling traditional user interactions to download/copy images. Tinygraphs by Taironas&nbsp;https://www.tinygraphs.com/ Supporting avatars in the comment section of a website is cool, but not every user wants to share an image. Tinygraphs helps out with random graphic images. Dynamic Social Sharing Images by Drew McLellan&nbsp;https://24ways.org/2018/dynamic-social-sharing-images/ Sharing posts on Social Media is vital to get readers and it is a good idea to provide a generic post image. Drew shows how to utilize Node.js to get a page screenshot automatically. The posted script has some pitfalls, but I will post a HowTo shortly. Automatic Social Share Images by Ryan Filler&nbsp;https://www.ryanfiller.com/blog/automatic-social-share-images/ Having a screenshot of a page is one side of the coin on creating Social Share images. Ryan shows us, how to enrich them with the appropriate text.","categories":[{"name":"Discoveries","slug":"Discoveries","permalink":"https://kiko.io/categories/Discoveries/"}],"tags":[{"name":"Great Finds","slug":"Great-Finds","permalink":"https://kiko.io/tags/Great-Finds/"}]},{"title":"Open Source Insights - Seeing the big picture","subtitle":"Google's new experimental platform to get a grip on project dependencies","date":"2021-06-06","updated":"2021-06-07","path":"post/Open-Source-Insights-Seeing-the-big-picture/","permalink":"https://kiko.io/post/Open-Source-Insights-Seeing-the-big-picture/","excerpt":"A while ago I needed some functionality regarding database access in one of my spare time projects and I decided to use a library from NPM. Typed npm install and the hell was breaking loose … 186 direct dependencies and nearly 200K of files were flooding my harddrive! The mental basis of IT is lazyness, which means that we produce software to make our and others life easier. This also applies to the building process. Don’t reinvent the wheel, but reuse the work of other developers. But … we have to recognize the limits and prevent to fall into the dependency hell. To get a better overview over dependencies, regarding NPM and other repositories, some Google engineers have published a project called Open Source Insights a couple of days ago.","keywords":"ago needed functionality database access spare time projects decided library npm typed install hell breaking loose … direct dependencies 200k files flooding harddrive mental basis lazyness means produce software make life easier applies building process dont reinvent wheel reuse work developers recognize limits prevent fall dependency overview repositories google engineers published project called open source insights couple days","text":"A while ago I needed some functionality regarding database access in one of my spare time projects and I decided to use a library from NPM. Typed npm install and the hell was breaking loose … 186 direct dependencies and nearly 200K of files were flooding my harddrive! The mental basis of IT is lazyness, which means that we produce software to make our and others life easier. This also applies to the building process. Don’t reinvent the wheel, but reuse the work of other developers. But … we have to recognize the limits and prevent to fall into the dependency hell. To get a better overview over dependencies, regarding NPM and other repositories, some Google engineers have published a project called Open Source Insights a couple of days ago. If you look at a library on NPM, you immediately see the direct dependencies, but that could just be the tip of the iceberg. Insights shows you the big picture in form of an interactive graph or a complete list with many additional information of the complete dependency chain. As Google says: Your software and your users rely not only on the code you write, but also on the code your code depends on, the code that code depends on, and so on. An accurate view of the complete dependency graph is critical to understanding the state of your project. Next time, before you type npm install ... take a quick look at the Insights page of the library, because it won’t give you an overview over the dependecies only, but also some security advisories to let you decide if it is a good idea to use it. Very valueable for the authors of exisiting NPM projects also, because it shows the consequences of dependency decisions very clearly and gives hints to make the own library less sensitive to vulnerabilities. Let us hope, that Google removes the describing adjective experimental from the project some day and adds more and more functionality to it (like a working responsiveness ;) in order to establish Open Source Insights as a main source of information about reusable Open Source software.","categories":[{"name":"Tools","slug":"Tools","permalink":"https://kiko.io/categories/Tools/"}],"tags":[{"name":"Great Finds","slug":"Great-Finds","permalink":"https://kiko.io/tags/Great-Finds/"}]},{"title":"Discoveries #10","subtitle":null,"series":"Discoveries","date":"2021-05-24","updated":"2021-06-28","path":"post/Discoveries-10/","permalink":"https://kiko.io/post/Discoveries-10/","excerpt":"Todays Discoveries it’s all about my favourite programming language JavaScript. Some tiny tips and tricks alongside with a deep dive into ‘console’ and some helful UI libraries. Have fun… Beyond Console.log()DOMGuard - Stop scammers from the manipulating DOMHandling User Permissions in JavaScripthtml-chain - Make html by chaining javascript functionsAccessible AutocompleteJS DataTableMK ChartsSnabbt.js - Fast animations with Javascript and CSS transformsSimplyLazy - Pure JavaScript Image Lazy LoaderBlury-Loading","keywords":"todays discoveries favourite programming language javascript tiny tips tricks alongside deep dive console helful ui libraries fun… consolelogdomguard stop scammers manipulating domhandling user permissions javascripthtml-chain make html chaining functionsaccessible autocompletejs datatablemk chartssnabbtjs fast animations css transformssimplylazy pure image lazy loaderblury-loading","text":"Todays Discoveries it’s all about my favourite programming language JavaScript. Some tiny tips and tricks alongside with a deep dive into ‘console’ and some helful UI libraries. Have fun… Beyond Console.log()DOMGuard - Stop scammers from the manipulating DOMHandling User Permissions in JavaScripthtml-chain - Make html by chaining javascript functionsAccessible AutocompleteJS DataTableMK ChartsSnabbt.js - Fast animations with Javascript and CSS transformsSimplyLazy - Pure JavaScript Image Lazy LoaderBlury-Loading Beyond Console.log() by Christian Heilmann&nbsp;https://www.sitepoint.com/beyond-console-log-level-up-your-debugging-skills/ The browser console is propably the most used tool for debugging JavaScript, but most of the time we all just scatch the surface. Christian show us the power of the console. DOMGuard - Stop scammers from the manipulating DOM by David Wells&nbsp;https://dom-guard.netlify.app/ There are many attack vectors scammers use to draw money out of the pockets. You have to make it as difficult as possible for them. Davids idea is to protect the DOM of the browser against changes utilizing the JS MutationObserver. Clever. Handling User Permissions in JavaScript by Andreas Remdt&nbsp;https://css-tricks.com/handling-user-permissions-in-javascript/ In case you have to intregrate a permission system into your Web App, to separate features from different user groups, Andreas post on CSS Tricks is a very good entry point into the subject. html-chain - Make html by chaining javascript functions by Matthew Elphick&nbsp;https://github.com/maael/html-chain There are several ways on dealing with HTML in JavaScript. My favourite approach are literals. Matthew gives us with his library the possibility to do it in a LINQ-style by chaining commands. Accessible Autocomplete by Government Digital Service&nbsp;https://github.com/alphagov/accessible-autocomplete Many cool looking UI elements on the web are not accessible for the impaired. But especially public services has to be aware of that. Developers from the British Government Digital Service have created a full WAI-ARIA compatible library for autocomplete inputs. JS DataTable by Luigi Verolla&nbsp;https://github.com/luverolla/js-datatable Deaing with tables in HTML can be a mess, when you try to add some functionality like searching, sorting and paging and that also responsive. Take a nap, because Luigi has a fully functional solution for this. MK Charts by Marcus Kirschen&nbsp;https://mkirschen.de/mk-scripts/mk-charts/ Dashboards everywhere. In case you don’t have a specialized UI library and just want to add some circle charts to your UI, try out Marcus’ solution. Just define the values in your HTML tag and let MK Charts do the rest. Simple and easy. Snabbt.js - Fast animations with Javascript and CSS transforms by Daniel Lundin&nbsp;https://daniel-lundin.github.io/snabbt.js/ Snabbt is quite old in terms of the IT industry, but still worth mentioning, because it is a really light and fast solution for adding animations to your Web App. See the demos … it’s still stunning. SimplyLazy - Pure JavaScript Image Lazy Loader by Max (maxshuty)&nbsp;https://maxshuty.github.io/simply-lazy/ Lazy loading can be a must on image heavy webs and you got bazillion results while searching for the right JS library. I can recommend Max’s solution, because it’s quite tiny and has callback as well as default image support. Blury-Loading by S.M.Abtahi Noor&nbsp;https://github.com/19smabtahinoor/Blury-Loading Apropos loading … maybe you want to preload your Web App’s sources completely and show the user a loading visual? Take this nice looking approach: while a percentage figure is running upwards, the background image is getting less blurry. A three-liner, but cool. Thanks Mr. Noor.","categories":[{"name":"Discoveries","slug":"Discoveries","permalink":"https://kiko.io/categories/Discoveries/"}],"tags":[{"name":"Great Finds","slug":"Great-Finds","permalink":"https://kiko.io/tags/Great-Finds/"}]},{"title":"Hexo and the IndieWeb (Receiving Webmentions)","subtitle":"Use webmention.io the easy way","series":"IndieWeb","date":"2021-05-13","updated":"2021-05-17","path":"post/Hexo-and-the-IndieWeb-Receiving-Webmentions/","permalink":"https://kiko.io/post/Hexo-and-the-IndieWeb-Receiving-Webmentions/","excerpt":"This is part three of the splitted original post Hexo and the IndieWeb. Don’t miss Part 2 Hexo and the IndieWeb (Sending Webmentions) either. A meaningful interaction has always two directions: sending and receiving. In this part of the post I want to show you how to receive Webmentions from other blogs participating in the IndieWeb. As Hexo is a SSG it generates static HTML pages. This has the advantage that the pages can be hosted just about anywhere (in my case Github Pages, but also the disadvantage of not having a real backend. Therefore, we need an external service that acts as an Webmention endpoint, where other people can send their webmentions. Aaron Parecki, co-founder of the IndieWeb, has made a service called webmention.io we can use for free. It is able to convert old-fashioned Pingbacks to Webmentions, supports deleting of unwanted mentions, has a Blocklist for blocking domains, Webhooks for real-time processing and last but not least an API to get all your Webmentions per page or per site.","keywords":"part splitted original post hexo indieweb dont miss sending webmentions meaningful interaction directions receiving show receive blogs participating ssg generates static html pages advantage hosted case github disadvantage real backend external service acts webmention endpoint people send aaron parecki co-founder made called webmentionio free convert old-fashioned pingbacks supports deleting unwanted mentions blocklist blocking domains webhooks real-time processing api page site","text":"This is part three of the splitted original post Hexo and the IndieWeb. Don’t miss Part 2 Hexo and the IndieWeb (Sending Webmentions) either. A meaningful interaction has always two directions: sending and receiving. In this part of the post I want to show you how to receive Webmentions from other blogs participating in the IndieWeb. As Hexo is a SSG it generates static HTML pages. This has the advantage that the pages can be hosted just about anywhere (in my case Github Pages, but also the disadvantage of not having a real backend. Therefore, we need an external service that acts as an Webmention endpoint, where other people can send their webmentions. Aaron Parecki, co-founder of the IndieWeb, has made a service called webmention.io we can use for free. It is able to convert old-fashioned Pingbacks to Webmentions, supports deleting of unwanted mentions, has a Blocklist for blocking domains, Webhooks for real-time processing and last but not least an API to get all your Webmentions per page or per site. Setupwebmention.io needs a registration and Aaron uses his own authentication method Web Sign-In over IndieLogin to achieve that. After you have signed in, you see your settings with two important links, you have to integrate in the head of your HTML: 12&lt;link rel=&quot;webmention&quot; href=&quot;https://webmention.io/[YOUR-BLOG-DOMAIN]/webmention&quot; /&gt;&lt;link rel=&quot;pingback&quot; href=&quot;https://webmention.io/[YOUR-BLOG-DOMAIN]/xmlrpc&quot; /&gt; They define your page on the one hand as a webmention- and on the other hand as a pingback endpoint. Every send Webmention or Pingback from another blog is routed to these URL’s. You will also find your API Key on this page. To be honest, is not a real API key, but rather a key to retrieve all incoming webmentions at once. Therefore it does not need to be kept private and secured. There is no way to modify your incoming Webmentions over it. Incoming Webmentions I’m implementing my Hexo/Webmention solution as I’m writing this post, therefore I don’t have any Webmentions to show as an example. Since all mentions on webmention.io are publicly accessible, I simply use Max Böcks article Using Webmentions in Eleventy in the following. Max, I hope it is ok … :) Aaron has defined three ways to get the incoming mentions of a particular article on your blog: 1. View as HTML page https://webmention.io/api/mentions.html?target=https://mxb.dev/blog/using-webmentions-on-static-sites/ Using it this way, webmention.io integrates the content with some styles and other information of the sending post for easy reading. 2. Consume as Atom feed https://webmention.io/api/mentions.atom?target=https://mxb.dev/blog/using-webmentions-on-static-sites/ 3. Get as JSON https://webmention.io/api/mentions.jf2?target=https://mxb.dev/blog/using-webmentions-on-static-sites/ Especially the last one is interesting for us, because we can use it to automate getting the data and integrate it in our blog post. You can also use all these Url’s to get the Webmentions of all of your pages, by changing the target parameter into: ...?token=[YOUR-API-KEY] The feed with token for getting all webmentions is particularly practical for checking whether there are new ones for your blog via a feed reader. There are some parameters you have to be aware of: Parameter Example Paging ?per-page=20&amp;page=0 (default, page 1 with 20 entries) Sorting By ?sort-by=created (default) Sorting Direction ?sort-dir=down (default, newest first) Time Limit ?since=2021-05-10T12:00:00-0700 ID Limit ?since_id=500). You can find more on parameters in the documentation of webmention.io’s source code here: https://github.com/aaronpk/webmention.io. The DataLet’s dive into the data. The JSON is a list and every Webmention is an entry underneath children, with following useful fields: Field Purpose author.name Name of the sender author.photo Avatar photo of the sender author.url Personal URL of the sender wm-id Unique ID of the Webmention wm-target URL of your post wm-received UTC Date/Time sended wm-source URL of the sending post published Publish Date/Time of the sending post wm-property Webmention type out of the following values:mention-of&nbsp;:&nbsp;Mention as link in postin-reply-to&nbsp;:&nbsp;Reply to your postlike-of&nbsp;:&nbsp;Like of your postrepost-of&nbsp;:&nbsp;Repost of your postbookmark-of&nbsp;:&nbsp;Bookmark of your post Other occuring fields are optional, but no less interesting for displaying them at your post: Field Purpose name Name of the Webmention (title of the sending post or something) summary.type Summary type of the Webmention, e.g. “text/plain” summary.value Summary text of the Webmention content.html Content as HTML of sending post content.text Content as text of sending post The fact that we get the complete HTML content of the sending post, means that we easily can parse it for IndieWeb microformats (see Part 1) to get even more information about it and the blog owner! IntegrationWe have two ways to choose from in order to integrate the data thus obtained into the post: Static … means while generating the site Dynamic … means real-time via client-side Javascript The static approach has two big disadvantages: The Webmentions are only visible with a time delay, due to the need of generating the pages of the site Hexos generation mechanism only takes those, whose content has beed updated in the meanwhile, but do not take into account any external data like Webmentions. We would have to fire up the time consuming clean and generate all the time So, let’s go for the dynamic approach, a little bit JavaScript, which loads the Webmentions on page load (like most Commenting platforms do). First of all, we need a placeholder in our article.ejs, where the Webmentions will be displayed. Somewhere near the comments and implemented as another partial: layout/_partial/article.ejs12345678910111213&lt;article id=&quot;&lt;%= post.layout %&gt;-&lt;%= post.slug %&gt;&quot; class=&quot;article article-type-&lt;%= post.layout %&gt; h-entry&quot; itemscope itemprop=&quot;blogPost&quot;&gt; ... &lt;%- partial(&#x27;post/webmentions&#x27;) %&gt; &lt;%- partial(&#x27;post/comments&#x27;) %&gt; &lt;%- partial(&#x27;post/related&#x27;) %&gt; &lt;%- partial(&#x27;post/nav&#x27;) %&gt;&lt;/article&gt; layout/_partial/post/webmentions.ejs12345678910111213&lt;div class=&quot;article-webmentions&quot;&gt; &lt;div class=&quot;webmentions-placeholder&quot;&gt; &lt;p class=&quot;wm-placeholder&quot;&gt;No Webmentions yet...&lt;/p&gt; &lt;/div&gt; &lt;script&gt; window.addEventListener(&#x27;load&#x27;, function () &#123; insertWebmentions(&#x27;&lt;%- post.slug.toLowerCase() %&gt;&#x27;); &#125;) &lt;/script&gt;&lt;/div&gt; The call insertWebmentions references to the asset script webmentions.js, which will be bundled via Grunt in my case, but you can place it where you want and add it to your articles head element. The main thing is, that it will load when the article page is launched. The script checks, if the user has already loaded the Webmentions for the current page from webmention.io in the last hour and do so if not, and stores the data in the browser by the pages key (slug) and with a timestamp: assets/webmentions.js12345678910111213141516171819202122232425262728293031323334353637383940414243function insertWebmentions(key) &#123; const lsTimestamp = &quot;wmts_&quot; + key; const lsWebmentions = &quot;wm_&quot; + key; const currentUrl = window.location.href; const wmUrl = `https://webmention.io/api/mentions.jf2?target=$&#123;currentUrl&#125;&amp;per-page=1000&amp;sort-dir=up`; let lastRequest; let webmentions; // Get data from browser storage, if available if (localStorage.getItem(lsTimestamp) &amp;&amp; localStorage.getItem(lsWebmentions)) &#123; lastRequest = localStorage.getItem(lsTimestamp); webmentions = JSON.parse(localStorage.getItem(lsWebmentions)); &#125; if(webmentions &amp;&amp; lastRequest &amp;&amp; Math.abs(Date.now() - lastRequest) / (60*60*1000) &lt; 1) &#123; // Webmentions are present and not older than an hour process(); &#125; else &#123; // Get Webmentions from webmention.io load().then(() =&gt; &#123; process(); &#125;); &#125;; /** * Load webmention.io&#x27;s JSON data for the current page */ async function load() &#123; const response = await fetch(wmUrl); webmentions = await response.json(); localStorage.setItem(lsWebmentions, JSON.stringify(webmentions)); localStorage.setItem(lsTimestamp, Date.now()); &#125; /** * Process Webmentions */ function process() &#123; ... &#125;&#125; Actually the script loads the first 1000 Webmentions in ascending order of their retreiving date. Should last for a while or I may feel like adding real paging at some point ;) On processing the webmentions, a separate HTML block is generated for each type (wm-property) regarding the content of the Webmention, whereby the header is always the same. The VERB refers to the Webmentions type: mentioned, replied, liked, bookmarked or reposted. HEADER1234567891011121314&lt;div class=&quot;wm-card h_card&quot;&gt; &lt;a class=&quot;wm-photo-link u-url&quot; href=&quot;[AUTHOR.URL]&quot;&gt; &lt;img class=&quot;wm-photo u-photo&quot; width=&quot;44&quot; height=&quot;44&quot; src=&quot;[AUTHOR.PHOTO]&quot; alt=&quot;[AUTHOR.NAME]&quot;&gt; &lt;/a&gt; &lt;div class=&quot;wm-meta&quot;&gt; &lt;a class=&quot;wm-name p-name&quot; href=&quot;[AUTHOR.URL]&quot;&gt;[AUTHOR.NAME]&lt;/a&gt; &lt;span class=&quot;wm-verb&quot;&gt;[VERB] on&lt;/span&gt; &lt;time class=&quot;wm-date dt-published&quot; datetime=&quot;[WM-RECEIVED]&quot;&gt; [formatted WM-RECEIVED] &lt;/time&gt; &lt;small&gt;[Running Number]&lt;/small&gt; &lt;/div&gt;&lt;/div&gt; The HTML of the five implemented types: MENTION1234567&lt;div class=&quot;webmention wm-mentioned&quot; id=&quot;[WM-ID]&quot;&gt; [HEADER HTML] &lt;div class=&quot;wm-content p-content&quot;&gt; &lt;p&gt;[First 50 words of CONTENT.TEXT with ellipsis]&lt;/p&gt; &lt;a class=&quot;wm-source&quot; href=&quot;[WM-SOURCE]&quot;&gt;[WM-SOURCE]&lt;/a&gt; &lt;/div&gt;&lt;/div&gt; REPLY1234567&lt;div class=&quot;webmention wm-mentioned&quot; id=&quot;[WM-ID]&quot;&gt; [HEADER HTML] &lt;div class=&quot;wm-content p-content&quot;&gt; &lt;p&gt;[Complete CONTENT.HTML]&lt;/p&gt; &lt;a class=&quot;wm-source&quot; href=&quot;[WM-SOURCE]&quot;&gt;[WM-SOURCE]&lt;/a&gt; &lt;/div&gt;&lt;/div&gt; LIKE & BOOKMARK (no content)123&lt;div class=&quot;webmention wm-mentioned&quot; id=&quot;[WM-ID]&quot;&gt; [HEADER HTML]&lt;/div&gt; REPOST12345678&lt;div class=&quot;webmention wm-mentioned&quot; id=&quot;[WM-ID]&quot;&gt; [HEADER HTML] &lt;div class=&quot;wm-content p-content&quot;&gt; &lt;p&gt; ... at &lt;a href=&quot;[WM-SOURCE]&quot;&gt;[WM-SOURCE]&lt;/a&gt; &lt;/p&gt; &lt;/div&gt;&lt;/div&gt; The result will look like this, after adding some styles: You can download the complete JavaScript- and the Stylus file on Github:https://github.com/kristofzerbe/Hexo-and-the-IndieWeb-Files Form for sending Webmentions manuallyAs you may noticed in Part 2, some manual work is necessary to have webmentions sent. Therefore, it is good to give the user a possibility to submit his blog post, where he mentions yours, directly. As webmentions.io supports posting a new source, the HTML form is quite simple an we can integrate it in the partial from above, below the script tag: layout/_partial/post/webmentions.ejs1234567891011121314151617181920&lt;div class=&quot;article-webmentions&quot;&gt; ... &lt;form class=&quot;webmention-form&quot; action=&quot;https://webmention.io/&lt;%- config.title %&gt;&gt;/webmention&quot; name=&quot;webmention-form&quot; method=&quot;post&quot;&gt; &lt;label for=&quot;webmention-form-source&quot;&gt;Your Article URL:&lt;/label&gt;&lt;br&gt; &lt;input class=&quot;webmention-form-source&quot; type=&quot;url&quot; name=&quot;source&quot; placeholder=&quot;https://your-blog.com/your-article&quot; required=&quot;&quot;&gt; &lt;input type=&quot;hidden&quot; name=&quot;target&quot; value=&quot;&lt;%- post.permalink %&gt;&gt;&quot;&gt; &lt;input type=&quot;submit&quot; value=&quot;Send Webmention&quot;&gt; &lt;/form&gt;&lt;/div&gt; The variable config.title defines the name of your blog with which you have registered at webmention.io. In the hidden input, we use the permalink of the current page/article as the mentions target. Building BridgesYes, the IndieWeb and Webmentions are an alternative concept of social networking, bypassing the big silos like Facebook, Twitter and Co. … but they exist and they have a massive reach. Of course, your posts will be shared there, so why not include those mentions? Bridgy is such a bridge builder. It connects your blog with the big social media players: The only thing you have to do, is to allow Bridgy to access your social media data, like your Tweets on Twitter. If somebody mentions you and one of your articles as a Tweet, Reply or Like, it sends a mention to the endpoint defined in your HTML, in our case webmention.io. Thats it … kinda magic. SummarySome people say, Webmentions makes commenting forms on blogs, like Disqus or others, obsolete, but I don’t agree with that, because not every visitor owns a blog and not every blog owner want’s to write a post only to comment the thoughts of another blogger. Both approaches work well side by side and complement each other. Webmentions are super to build a blog network and increasing your blogs coverage. As I said in Part 1 … we write for readers. More Info indieweb.org: webmention.ioMax Böck: Using Webmentions in EleventyMax Böck: Webmention AnalyticsPaul Kinlan: Using Web Mentions in a static site (Hugo)Sia Karamalegos: An In-Depth Tutorial of Webmentions + EleventyKeith J. Grant: Adding Webmention Support to a Static SiteChris Bongers: Goodbye comments, welcome Webmentions","categories":[{"name":"Tools","slug":"Tools","permalink":"https://kiko.io/categories/Tools/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://kiko.io/tags/Hexo/"},{"name":"Blogging","slug":"Blogging","permalink":"https://kiko.io/tags/Blogging/"},{"name":"Publishing","slug":"Publishing","permalink":"https://kiko.io/tags/Publishing/"},{"name":"Share","slug":"Share","permalink":"https://kiko.io/tags/Share/"}]},{"title":"Hexo and the IndieWeb (Sending Webmentions)","subtitle":"Use webmention.app the easy way","series":"IndieWeb","date":"2021-05-08","updated":"2021-05-17","path":"post/Hexo-and-the-IndieWeb-Sending-Webmentions/","permalink":"https://kiko.io/post/Hexo-and-the-IndieWeb-Sending-Webmentions/","excerpt":"This is part two of a blog post that turned out to be a bit too long. Don’t miss Part 1: Hexo and the IndieWeb … After you have created your new Hexo post with hexo new post &quot;My Fancy Post&quot; and spend a couple of minutes/hours/days on writing meaningful text, you publish it by running hexo generate and copying the generated HTML to your server. Next step would be to inform all the blogs you linked to in your now published post, that you have done just that. You want to send Webmentions. Good news: you don’t have to write your own solution to scan your article for external URL’s and sending Webmentions to their creators: Remy Sharp has done that already with his service webmention.app. It supports the long existing Pingbacks too and offers several ways to achieve your goal:","keywords":"part blog post turned bit long dont miss hexo indieweb … created &quotmy fancy post&quot spend couple minutes/hours/days writing meaningful text publish running generate copying generated html server step inform blogs linked published send webmentions good news write solution scan article external urls sending creators remy sharp service webmentionapp supports existing pingbacks offers ways achieve goal","text":"This is part two of a blog post that turned out to be a bit too long. Don’t miss Part 1: Hexo and the IndieWeb … After you have created your new Hexo post with hexo new post &quot;My Fancy Post&quot; and spend a couple of minutes/hours/days on writing meaningful text, you publish it by running hexo generate and copying the generated HTML to your server. Next step would be to inform all the blogs you linked to in your now published post, that you have done just that. You want to send Webmentions. Good news: you don’t have to write your own solution to scan your article for external URL’s and sending Webmentions to their creators: Remy Sharp has done that already with his service webmention.app. It supports the long existing Pingbacks too and offers several ways to achieve your goal: (1) Use the service at https://webmention.app/test manually with your newly published article URLVery time consuming approach and actually only intended for tests. You rely on Remy’s service and need a token to avoid existing rate limits. (2) Perform a POST of your new article URL or the URL of your RSS feed to his service endpoint using CURL or any other HTTP requesting methodCan be integrated at the end of your build &amp; deploy process. Rely on Remy’s service and needs a token. (3) Use IFTTT to do the job described in (2) using your feedSeems best way for ‘set up and forget’, but you rely not only on Remy’s service, but on IFTTT also. Not really controllable. (4) Use his Command line tool independentlyUse the executable behind Remy’s service on your own, without tokens and stuff. Integrable into your build &amp; deploy process and the source code is available on Github, in case you want to change it to your needs. 12345678REM Installnpm install @remy/webmentionREM Run test locallynpx webmention https://localhost:4000/my-fancy-post --debugREM Run send with your published URLnpx webmention https://my-blog.com/my-fancy-post --send --limit 0 Whatever method you use: If you use your RSS feed for scanning, you have to ensure, that your feeds content contains the complete text of your article and not only the excerpt, in case you work with Hexo’s &lt;!-- more --&gt; feature. Sending Hexo-StyleTo avoid having to look up the published URL each time, I wrote a Hexo console command that either processes a post by its filename (slug) or simply the last ones. It is based on and uses Remy’s NPM package. You can install hexo-console-webmention by executing: npm install hexo-console-webmention --save The command has 3 options: Parameter Type Description slug string Parse a particular post by its filename (slug) count int Parse a number of latest posts (not considered when –slug is used)&gt;; default = 1 send bool Parse and send Webmentions (without, only the endpoints found are displayed) ExamplesParse and show endpoints for the latest post: 1hexo webmention Parse and show endpoints for the latest 20 posts: 1hexo webmention --count 20 Parse and send Webmentions for the latest post: 1hexo webmention --send true Parse and send Webmentions for the post “My Fancy Blogpost”: 1hexo webmention --slug my-fancy-blogpost --send true Sample Output The source code is available at: https://github.com/kristofzerbe/hexo-console-webmention. Do not linger … this way to Part 3: Hexo and the IndieWeb (Receiving Webmentions) … More Info Paul Kinlan: Webmention.appRemy Sharp: Send Outgoing WebmentionsGithub: Remy Sharp: Source Code from webmention.app","categories":[{"name":"Tools","slug":"Tools","permalink":"https://kiko.io/categories/Tools/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://kiko.io/tags/Hexo/"},{"name":"Blogging","slug":"Blogging","permalink":"https://kiko.io/tags/Blogging/"},{"name":"Publishing","slug":"Publishing","permalink":"https://kiko.io/tags/Publishing/"},{"name":"Share","slug":"Share","permalink":"https://kiko.io/tags/Share/"}]},{"title":"Hexo and the IndieWeb","subtitle":"Make your blog ready for social interaction via Webmentions","series":"IndieWeb","date":"2021-05-05","updated":"2021-05-17","path":"post/Hexo-and-the-IndieWeb/","permalink":"https://kiko.io/post/Hexo-and-the-IndieWeb/","excerpt":"Posted on IndieNews It is cool to publish your thoughts on your own blog under your only domain and not only on big social media platforms, because that way you keep control over your content. But what makes Facebook, Twitter and others “social” is the interaction between the people. Likes, Retweets, Mentions, Replies are the fuel which drives them. But most of the blogging solutions offers only rudimentary interactions, in form of article comments. The comment hurdle is high because interacting on someone else’s site is different from interacting on what is supposed to be your own, such as your Twitter or Facebook feed. The project IndieWeb and their approach of Webmentions, has the goal to fill this gap. As a W3C recommendation, it defines standards how the social interaction of independent blogging solutions can be technically implemented without the need of manual intervention. Let software do the job… In this article I will only briefly go into the basics and then show an implementation solution for the SSG Hexo.","keywords":"posted indienews cool publish thoughts blog domain big social media platforms control content makes facebook twitter interaction people likes retweets mentions replies fuel drives blogging solutions offers rudimentary interactions form article comments comment hurdle high interacting elses site supposed feed project indieweb approach webmentions goal fill gap w3c recommendation defines standards independent technically implemented manual intervention software job… briefly basics show implementation solution ssg hexo","text":"Posted on IndieNews It is cool to publish your thoughts on your own blog under your only domain and not only on big social media platforms, because that way you keep control over your content. But what makes Facebook, Twitter and others “social” is the interaction between the people. Likes, Retweets, Mentions, Replies are the fuel which drives them. But most of the blogging solutions offers only rudimentary interactions, in form of article comments. The comment hurdle is high because interacting on someone else’s site is different from interacting on what is supposed to be your own, such as your Twitter or Facebook feed. The project IndieWeb and their approach of Webmentions, has the goal to fill this gap. As a W3C recommendation, it defines standards how the social interaction of independent blogging solutions can be technically implemented without the need of manual intervention. Let software do the job… In this article I will only briefly go into the basics and then show an implementation solution for the SSG Hexo. Basic ConceptsNothing describes the flow of Webmentions better than this: Frankie posts a blog entry. Alex has thoughts in response, so also posts a blog entry linking to Frankie’s. Alex’s publishing software finds the link and fetches Frankie’s post, finding the URL of Frankie’s Webmention endpoint in the document. Alex’s software sends a notification to the endpoint. Frankie’s software then fetches Alex’s post to verify that it really does link back, and then chooses how to display the reaction alongside Frankie’s post. --- Drew McLellan Basically Webmentions allow notifications between web addresses, therefore every post, which is part of the interaction, has to have a unique permalink. A blog software that wants to support webmentions must cover 4 main points: The HTML has to tell others who you are The HTML has to give dedicated informations about your posts Sending a message to another blog, in case you mentioned one of its posts Reveiving messages from other blogs, in case they mentioned one of your posts Point 4 is probably the most interesting for all of us, because it pats our own ego on the back, since we usually don’t write for ourselves, but for others, and reactions to it, show us that it wasn’t pointless. Step 1: The Personal &amp; Profile HTMLAs you want to interact with other blogs participating in the IndieWeb with your posts, they have to know something about you and your articles in a machine-readable form. Personal InformationHTML is machine-readable per se, but you have to tell others what to look for by adding defined classes to the tags which holds the information, in order to enable them to get specific information about you, like your name, your mail-address or links to other profiles f.e. Github, Twitter and so on. It is necessary to have this information not only in an ABOUT page, but also on each post page. You can achieve this either by having an ABOUT block like here on kiko.io or providing the information in hidden HTML tags elsewhere in your HTML. It does not matter which tags you use, you only have to add the defined class to the tag of a particular information in your Hexo EJS file. The information will be extracted out of the tag’s inner text. The most used classes for personal blogs as follows: Class Information h-card Wrapper for all personal information. All other classes below has to be used on child tags p-name Full name u-email Email address u-photo Photo p-role Role u-url URL representing the person p-locality City or Town p-region State or province p-country-name Country name Please keep in mind not to give too much information about you to the public. It could get unpleasant… Profile InformationFor providing links to other profiles, anchor (A) tags with the special attribute rel=&quot;me&quot; will be used, which indicates profile equivalence and can be used for identity-consolidation. With this extension of your blog HTML, you are able to sign in using your domain at sites which supports Web Sign-In over the concept of RelMeAuth, for example those who use IndieAuth.net - OAuth for the open web. You only have to make sure, that the endpoints of your profile links have backlinks to your blog with a rel=&quot;me“. Unfortunately, not many services offer the definition of such a backlink. Github, for example, is an exception. You can give it a try at IndieAuth.com. Example Step 2: The Article HTMLTagging articles with meta information for the IndieWeb is similarly simple, by adding following classes in your article.ejs file: Class Information h-entry Wrapper for all article related information p-name Title p-summary Short summary e-content Content dt-published Publish date dt-updated Update date u-url Permalink In case you work with the default Hexo theme ‘landscape’, I advise you to split your article.ejs in two files, because it is used for the article itself and for the excerpts on the start page and archive pages also. I have made an excerpt.ejs with all the information needed for listing the posts and cut back my article.ejs to the bare minimum, but with the IndieWeb related classes above (or in the linked partials if necessary), because only the article page itself should have these informations, respectively an h-entry class, to indicate that there are IndieWeb data! layout/_partial/article.ejs123456789101112131415161718192021222324252627282930313233343536&lt;article id=&quot;&lt;%= post.layout %&gt;-&lt;%= post.slug %&gt;&quot; class=&quot;article article-type-&lt;%= post.layout %&gt; h-entry&quot; itemscope itemprop=&quot;blogPost&quot;&gt; &lt;div class=&quot;article-meta&quot;&gt; &lt;div class=&quot;h-card p-author&quot; style=&quot;display:none&quot;&gt; &lt;img class=&quot;u-photo&quot; src=&quot;&lt;%- config.photo %&gt;&quot; alt=&quot;&lt;%- config.author %&gt;&quot; /&gt; &lt;a class=&quot;p-name u-url&quot; href=&quot;&lt;%- config.url %&gt;&quot; rel=&quot;author&quot;&gt;&lt;%- config.author %&gt;&lt;/a&gt; &lt;/div&gt; &lt;%- partial(&#x27;post/date&#x27;, &#123; class_name: &#x27;article-date dt-published&#x27;, date_format: &#x27;DD MMM YYYY&#x27; &#125;) %&gt; &lt;%- partial(&#x27;post/category&#x27;, &#123; class_name: &#x27;article-category p-category&#x27; &#125;) %&gt; &lt;/div&gt; &lt;div class=&quot;article-inner&quot;&gt; &lt;header class=&quot;article-header&quot;&gt; &lt;%- partial(&#x27;post/title&#x27;, &#123; class_name: &#x27;article-title p-name&#x27;, show_link: false &#125;) %&gt; &lt;%- partial(&#x27;post/subtitle&#x27;, &#123; class_name: &#x27;article-subtitle p-summary&#x27; &#125;) %&gt; &lt;/header&gt; &lt;div class=&quot;article-entry e-content&quot; itemprop=&quot;articleBody&quot;&gt; &lt;%- post.content %&gt; &lt;/div&gt; &lt;footer class=&quot;article-footer&quot;&gt; &lt;%- partial(&#x27;post/tag&#x27;, &#123; class_name: &#x27;article-tags&#x27; &#125;) %&gt; &lt;%- partial(&#x27;post/permalink&#x27;, &#123; class_name: &#x27;article-permalink u-url&#x27; &#125;) %&gt; &lt;/footer&gt; &lt;/div&gt; &lt;%- partial(&#x27;post/comments&#x27;) %&gt; &lt;%- partial(&#x27;post/related&#x27;) %&gt; &lt;%- partial(&#x27;post/nav&#x27;) %&gt;&lt;/article&gt; External LinksThe Interaction with other blogs takes place through linking to those external sources in the content of your article. Lets say you want to write about a specific topic and to mention the work of another developer, then you just place a link to his post in your Markdown, as you have been doing all along: /source/_posts/my-fancy-post.md1234# My Fancy Post...Jack has done a wonderful job with his [Awesome Work](https://jacks-blog.com/awesome-work)... It will be transformed while generating into something like that: /output/.../my-fancy-post/index.html123456789101112131415161718192021&lt;body&gt; ... &lt;article class=&quot;h-entry&quot;&gt; ... &lt;div class=&quot;article-inner&quot;&gt; &lt;header class=&quot;article-header&quot;&gt; &lt;h1 class=&quot;p-name&quot;&gt;My Fancy Post&lt;/h1&gt; &lt;/header&gt; &lt;div class=&quot;article-entry e-content&quot;&gt; ... &lt;p&gt; Jack has done a wonderful job with his &lt;a href=&quot;https://jacks-blog.com/awesome-work&quot;&gt;Awesome Work&lt;/a&gt;. &lt;/p&gt; ... &lt;/div&gt; ... &lt;/div&gt; ... &lt;/article&gt; ...&lt;/body&gt; In the terms of the IndieWeb concept, your post will a be an article, which mentions other posts, as the old-fashioned pingbacks do. Special Post FormatsA true interaction takes place, when you are posting in a certain syndication context … with a note as a response to the work of others, mainly by adding additional classes to the external link: u-in-reply-to … to indicate that your post is a reply to a post as part of a conversation u-like-of … to indicate that your post is a like u-repost-of … to indicate that your post is a repost (100% re-publication) u-bookmark-of … to indicate that your post is a bookmark Every response type can have additional information about your post and the syndication of it. Example REPLY12345678910111213&lt;body&gt; ... &lt;div class=&quot;h-entry&quot;&gt; &lt;p&gt; In reply to: &lt;a class=&quot;u-in-reply-to&quot; href=&quot;https://jacks-blog.com/awesome-work&quot;&gt;Jacks Blog: Awesome Work&lt;/a&gt; &lt;/p&gt; &lt;p class=&quot;p-name e-content&quot;&gt; Jack, you have done a wonderful job! &lt;/p&gt; ... &lt;/div&gt; ...&lt;/body&gt; Example LIKE12345678910&lt;body&gt; ... &lt;div class=&quot;h-entry&quot;&gt; &lt;p class=&quot;p-summary&quot;&gt; Kristof liked &lt;a class=&quot;u-like-of&quot; href=&quot;https://jacks-blog.com/awesome-work&quot;&gt;Jacks Awesome Work at https://jacks-blog.com/awesome-work&lt;/a&gt; &lt;/p&gt; ... &lt;/div&gt; ...&lt;/body&gt; Currently, I would not recommend writing responses as a normal post in Hexo, as it is based on structured text, that best describes the IndieWeb concept of an ARTICLE.As this post is part of a new series called IndieWeb, I will post a solution for responses is the near future. VerificationTo check all your changes, you can use IndieWebify.Me (Level 1 &amp; 2): This was supposed to be just one post, but it got longer and longer and so I split it into 3 parts. Don’t miss Part 2: Hexo and the IndieWeb (Sending Webmentions) … TerminologyThere are a lot of posts out there which explains the basic concepts of the IndieWeb and Webmentions in particular and you will stumble upon some terms, which has to be explained: Personal Domain … is a domain name that you personally own, control, and use to represent yourself on the internet. Getting a personal domain is the first step towards getting on the indieweb, and is therefore a requirement for IndieMark Level 1 --- indieweb.org (Personal Domain) Microformats … are small patterns of HTML to represent commonly published things like people, events, blog posts, reviews and tags in web pages. They are the quickest &amp; simplest way to provide an API to the information on your website. --- microformats.org (Wiki) POSSE … is an abbreviation for Publish (on your) Own Site, Syndicate Elsewhere, the practice of posting content on your own site first, then publishing copies or sharing links to third parties (like social media silos) with original post links to provide viewers a path to directly interacting with your content. --- indieweb.org (POSSE) Backfeed … is the process of syndicating interactions on your POSSE copies back (AKA reverse syndicating) to your original posts. --- indieweb.org (Backfeed) Web sign-in … is signing in to websites using your personal web address (without having to use your e-mail address). Web sign-in supersedes OpenID. --- indieweb.org (Web sign-in) RelMeAuth … is a proposed open standard for using rel=”me” links to profiles on oauth supporting services to authenticate via either those profiles or your own site. RelMeAuth is the technology behind Web sign-in. --- microformats.org (RelMeAuth) IndieAuth … is a federated login protocol for Web sign-in, enabling users to use their own domain to sign in to other sites and services. --- indieweb.org (IndieAuth) More Info A List Apart: Webmentions: Enabling Better Communication on the Internetindieweb.org: Getting Startedindieweb.org: How to set up web sign-in on your own domainindieweb.org: IndieWeb ExamplesBryce Wray: Webmentions in three SSGs: Part 1Keith J. Grant: Adding Webmention Support to a Static SiteAlessio Caiazza: Articles tagged ´indieweb´* (Forum): Anyone for Webmention?","categories":[{"name":"Tools","slug":"Tools","permalink":"https://kiko.io/categories/Tools/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://kiko.io/tags/Hexo/"},{"name":"Blogging","slug":"Blogging","permalink":"https://kiko.io/tags/Blogging/"},{"name":"Publishing","slug":"Publishing","permalink":"https://kiko.io/tags/Publishing/"},{"name":"Share","slug":"Share","permalink":"https://kiko.io/tags/Share/"}]},{"title":"Triangulate your images with Triangula","subtitle":null,"date":"2021-04-30","updated":"2021-05-17","path":"post/Triangulate-your-images-with-Triangula/","permalink":"https://kiko.io/post/Triangulate-your-images-with-Triangula/","excerpt":"As I am a photo enthusiast I’m always excited to find new tools, to give images a unique look. Today I stumbled over Triangula. Ever seen one of those cool backgrounds, where a picture has been broken up into lots of little triangles? In trigonometry and elementary geometry, the division of a surface into triangles is called a triangular grid, triangular mesh or triangulation.Wikipedia Whoever RH12503 (Ryan H??) is, he did an amazing job on creating this little Go program, including a pleasing UI, do convert images into those equivalents.","keywords":"photo enthusiast im excited find tools give images unique today stumbled triangula cool backgrounds picture broken lots triangles trigonometry elementary geometry division surface called triangular grid mesh triangulationwikipedia rh12503 ryan amazing job creating program including pleasing ui convert equivalents","text":"As I am a photo enthusiast I’m always excited to find new tools, to give images a unique look. Today I stumbled over Triangula. Ever seen one of those cool backgrounds, where a picture has been broken up into lots of little triangles? In trigonometry and elementary geometry, the division of a surface into triangles is called a triangular grid, triangular mesh or triangulation.Wikipedia Whoever RH12503 (Ryan H??) is, he did an amazing job on creating this little Go program, including a pleasing UI, do convert images into those equivalents. These images are absolute great for background images in websites, in order to make the details less recognisable. There is a web version of Triangula, but the desktop version (including a console version) is much faster. Best feature is the ability not only to save the generated images as PNG, but also as SVG! Example with 1.000 Generations var themeColor = \"#ffffff\"; if (localStorage.getItem(\"theme\") === 'dark') { themeColor = \"#222222\" } new ImageCompare(document.getElementById(\"triangula-1-compare\"), { controlColor: themeColor, controlShadow: false, verticalMode: false, showLabels: true, labelOptions: { before: 'Original', after: 'Triangulated', onHover: true, } }).mount(); Example with 10.000 Generations var themeColor = \"#ffffff\"; if (localStorage.getItem(\"theme\") === 'dark') { themeColor = \"#222222\" } new ImageCompare(document.getElementById(\"triangula-2-compare\"), { controlColor: themeColor, controlShadow: false, verticalMode: false, showLabels: true, labelOptions: { before: 'Original', after: 'Triangulated', onHover: true, } }).mount(); Example with 20.000 Generations var themeColor = \"#ffffff\"; if (localStorage.getItem(\"theme\") === 'dark') { themeColor = \"#222222\" } new ImageCompare(document.getElementById(\"triangula-3-compare\"), { controlColor: themeColor, controlShadow: false, verticalMode: false, showLabels: true, labelOptions: { before: 'Original', after: 'Triangulated', onHover: true, } }).mount();","categories":[{"name":"Photo-Editing","slug":"Photo-Editing","permalink":"https://kiko.io/categories/Photo-Editing/"}],"tags":[{"name":"Great Finds","slug":"Great-Finds","permalink":"https://kiko.io/tags/Great-Finds/"},{"name":"Imaging","slug":"Imaging","permalink":"https://kiko.io/tags/Imaging/"},{"name":"SVG","slug":"SVG","permalink":"https://kiko.io/tags/SVG/"}]},{"title":"Forking Hexo plugin 'hexo-index-anything'","subtitle":"Introducing its successor 'hexo-generator-anything'","date":"2021-04-25","updated":"2021-05-17","path":"post/Forking-Hexo-plugin-hexo-index-anything/","permalink":"https://kiko.io/post/Forking-Hexo-plugin-hexo-index-anything/","excerpt":"As I started with this blog 2 years ago, I wanted to document the customization of Hexo to my needs in a series of articles. To group these articles I considered using the build-in categories, but I already used them to group articles by the underlying tech stack or area, like ´JavaScript´, ´C#´ or ´Tools´ and I didn’t want to mix it, as the category was also used in the Url of a post. I was researching another grouping solution for Hexo and stumbled upon hexo-index-anything, a very clever Hexo plugin to generate index pages for almost every FrontMatter variable in a post. As it was freely available under a MIT license on Github, I forked it in July 2020 and made some bug fixes and drop a pull request to Levi … but he unfortunately never answered my pull or issue requests and has set the status of the project to DEPRECATED. Ok then … make a successor on your own, fella…","keywords":"started blog years ago wanted document customization hexo series articles group considered build-in categories underlying tech stack area ´javascript´ ´c#´ ´tools´ didnt mix category url post researching grouping solution stumbled hexo-index-anything clever plugin generate index pages frontmatter variable freely mit license github forked july made bug fixes drop pull request levi … answered issue requests set status project deprecated make successor fella…","text":"As I started with this blog 2 years ago, I wanted to document the customization of Hexo to my needs in a series of articles. To group these articles I considered using the build-in categories, but I already used them to group articles by the underlying tech stack or area, like ´JavaScript´, ´C#´ or ´Tools´ and I didn’t want to mix it, as the category was also used in the Url of a post. I was researching another grouping solution for Hexo and stumbled upon hexo-index-anything, a very clever Hexo plugin to generate index pages for almost every FrontMatter variable in a post. As it was freely available under a MIT license on Github, I forked it in July 2020 and made some bug fixes and drop a pull request to Levi … but he unfortunately never answered my pull or issue requests and has set the status of the project to DEPRECATED. Ok then … make a successor on your own, fella… Basic FunctionalityLet me describe how the original plugin and my successor are working in general: Assume, you have several posts from different authors and you want a list of all posts for every author. The only thing you have to do (after installation and configuration of the plugin), is to add a custom variable called author to the FrontMatter of each post, with the name of the author as value. /source/_posts/my-fancy-post.md1234title: My Fancy Postdate: 2021-04-25 13:41:46author: Kristof... Next time you run hexo generate, several new files will be available in your output folder: One INDEX page … for the author index, with a list of all available authors and the number of the posts: /authors/index.html Many POSTS pages …, one for each author for the author index, with all of the authors posts: /authors/kristof/index.html /authors/ … /index.html New Plugin NameIn order to avoid confusion (and be able to provide the plugin on Github/NPM) I needed a new name for the plugin and due to the fact that it is a generator, I named it simply hexo-generator-anything. New FeaturesThe original code was really hard to read, because every second variable was named ‘index’, therefore I started with some refactorings, before I continued implementing new features. ConfigurationThe original, one-dimensional variable to index mapping, wasn’t meaningful enough for me. The new mapping is now a dictionary and has unique identifiers: /_config.yml123456anything: layout_index: anything-index layout_posts: anything-posts index_mappings: - variable: author path: authors The template* setting names has changed into layout_*, to make more clear what they are meant for. They are pointing to an existing EJS file in your Hexo themes layout folder to render the particular page. layout_indexEJS file (without extension) to render the INDEX page layout_PostsEJS file (without extension) to render each POSTS page On Github and in the NPM package you will find sample EJS files and some partials, to take the SoC pattern into account. The original titleSeparator setting is not longer available, because it is not necessary anymore. By providing a data structure for index with the attributes name and caption, a title can be put together in the EJS file itself. Introducing linked Markdown filesOne of my needs was, to provide more information on the INDEX page and the POSTS pages for each entry or, to stay with the example, for each author. As the _posts folder is used for storing the post data files, I introduced a _anything folder for dropping MD files, which are linked to the index and its values. The subfolders of _anything are representing the index and the files in it each possible value of the index. The file is structured like any other post file: the FrontMatter data at the top and below some content to show along with the the entry to describe it: /source/_anything/authors/kristof.md1234567---title: Kristofgithub: https://github.com/kristofzerbeavatar: kristof.png---... some smart things to say about Kristof, or links or images, whatever ... The INDEX file itself may have its own Markdown file, to provide addition text or data to it, like describing the list. The variable title is a requirement in the Markdown files, but you can add as many variables as you need and use it in the EJS files. All data will be passed through to the template. ConclusionThe new plugin runs very well and it is heavy in use on generating the sections Series and Projects of this blog. Give it a try …","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://kiko.io/categories/JavaScript/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://kiko.io/tags/Hexo/"},{"name":"GitHub","slug":"GitHub","permalink":"https://kiko.io/tags/GitHub/"},{"name":"Plugin","slug":"Plugin","permalink":"https://kiko.io/tags/Plugin/"}]},{"title":"Discoveries #9","subtitle":null,"series":"Discoveries","date":"2021-04-20","updated":"2021-05-24","path":"post/Discoveries-9/","permalink":"https://kiko.io/post/Discoveries-9/","excerpt":"Todays issue is all about extending your Web Developers toolbox with some useful libraries to provide the best UX to your users or visitors. Tables, Dropdowns, Color Pickers, Footnotes and GDPR dialogs on steroids. JSTableLuckysheetVirtual SelectLC SelectVanilla ColorfulDuet Date PickerCookie ThoughFull-Screen-Touch-SliderBigfootNumber Rollup","keywords":"todays issue extending web developers toolbox libraries provide ux users visitors tables dropdowns color pickers footnotes gdpr dialogs steroids jstableluckysheetvirtual selectlc selectvanilla colorfulduet date pickercookie thoughfull-screen-touch-sliderbigfootnumber rollup","text":"Todays issue is all about extending your Web Developers toolbox with some useful libraries to provide the best UX to your users or visitors. Tables, Dropdowns, Color Pickers, Footnotes and GDPR dialogs on steroids. JSTableLuckysheetVirtual SelectLC SelectVanilla ColorfulDuet Date PickerCookie ThoughFull-Screen-Touch-SliderBigfootNumber Rollup JSTable by Tobias Hägenläuer&nbsp;https://github.com/Trekky12/JSTable JSTable is a library to convert a static HTML TABLE element into an interactive and responsive one, which supports paging, sorting and searching. Luckysheet by MengShu Open Source&nbsp;https://github.com/mengshukeji/Luckysheet Luckysheet is an Excel or Google Sheets clone, for using in your own web projects. It is nearly as powerfull as his role models, but Open Source. Supports imports and has a plugin interface. Virtual Select by Sa Si Dev&nbsp;https://sa-si-dev.github.io/virtual-select/#/ Whoever ‘Sa Si Dev’ is … he/she made a replacement for the ordinary HTML SELECT element, which is nearly unrivalled. It supports search, matched term marking, multi-select, disabling options, option groups, adding new options and many others. One of the best features, is the dialog style select on mobile devices. LC Select by Luca&nbsp;https://lcweb.it/lc-select-javascript-plugin Luca from Italy made this excellent SELECT replacement, which can show the selected options as pills or as grouped lists with images. It supports a search bar, light/dark theme, multilanguage and is mobile ready as well as it has full keyboard support. Vanilla Colorful by Serhii Kulykov&nbsp;https://web-padawan.github.io/vanilla-colorful/ This color picker is just awesome. It looks really pleasing and has all the features you expect. It is written in TypeScript and authored using native ES modules, without dependencies. Duet Date Picker by Duet Design System&nbsp;https://duetds.github.io/date-picker/ This clean looking date picker is easy to integrate and supports mostly everything you can expect: keyboard, mobile devices and even screen readers. Cookie Though by In The Pocket&nbsp;https://cookiethough.dev/ Since the GDPR has hit the industry, there are tons of solutions to show the necessary consent dialog. A team from Belgium has made a really nice one, without misleading buttons, annoying full screen modes or other dark patterns. And it is Open Source… Full-Screen-Touch-Slider by Will Adams&nbsp;https://github.com/bushblade/Full-Screen-Touch-Slider Will has created a really simple, but good looking and animated full screen touch slider, which works great on mobile devices. The only question is: Why is he so addicted to knifes? Bigfoot by Chris Sauve&nbsp;http://www.bigfootjs.com/ Chris from Canada has a smart solution for showing footnotes in HTML documents: show them as bubbles above the text by clicking a tiny button, which replaces the orginial footnote. Only drawback: it’s a jQuery plugin… Number Rollup by marknorrapscm&nbsp;https://marknorrapscm.github.io/number-rollup/ Number Rollup does what the name suggests: it rollups a number from a starting to an end point, animated and customizable. Nice.","categories":[{"name":"Discoveries","slug":"Discoveries","permalink":"https://kiko.io/categories/Discoveries/"}],"tags":[{"name":"Great Finds","slug":"Great-Finds","permalink":"https://kiko.io/tags/Great-Finds/"}]},{"title":"Scotch Presets for Lightroom","subtitle":null,"series":"Lightroom Presets","date":"2021-04-18","updated":"2021-05-17","path":"post/Scotch-Presets-for-Lightroom/","permalink":"https://kiko.io/post/Scotch-Presets-for-Lightroom/","excerpt":"Have you ever been in Scotland during summertime? Wonderful tranquility, great scenery and great photo opportunities at every turn. In 2019 I’ve made some great shots there and I want to share the presets with you, that I have developed for processing the photos from my trip through the Highlands and the Isle of Skye.","keywords":"scotland summertime wonderful tranquility great scenery photo opportunities turn ive made shots share presets developed processing photos trip highlands isle skye","text":"Have you ever been in Scotland during summertime? Wonderful tranquility, great scenery and great photo opportunities at every turn. In 2019 I’ve made some great shots there and I want to share the presets with you, that I have developed for processing the photos from my trip through the Highlands and the Isle of Skye. Scotch LightsSo far in the north the light is totally different. When it shines through the clouds, it hits you. var themeColor = \"#ffffff\"; if (localStorage.getItem(\"theme\") === 'dark') { themeColor = \"#222222\" } new ImageCompare(document.getElementById(\"scotch-lights-compare\"), { controlColor: themeColor, controlShadow: false, verticalMode: false, showLabels: true, labelOptions: { before: 'Original', after: 'Preset', onHover: true, } }).mount(); Download Lightroom Preset Scotch Lights.xmp Scotch StrengthYou must be made of different stuff if you are Scottish. There is hardly anything fine and graceful about the landscape and the weather. It’s rough and tough and you have to deal with it. var themeColor = \"#ffffff\"; if (localStorage.getItem(\"theme\") === 'dark') { themeColor = \"#222222\" } new ImageCompare(document.getElementById(\"scotch-strength-compare\"), { controlColor: themeColor, controlShadow: false, verticalMode: false, showLabels: true, labelOptions: { before: 'Original', after: 'Preset', onHover: true, } }).mount(); Download Lightroom Preset Scotch Strength.xmp Scotch SunsetThe view over the North Sea at the edge of the continent is really unique, especially at sunset. Hear the the seagulls scream, the waves crashing against the cliffs and see the stunning colors. var themeColor = \"#ffffff\"; if (localStorage.getItem(\"theme\") === 'dark') { themeColor = \"#222222\" } new ImageCompare(document.getElementById(\"scotch-sunset-compare\"), { controlColor: themeColor, controlShadow: false, verticalMode: false, showLabels: true, labelOptions: { before: 'Original', after: 'Preset', onHover: true, } }).mount(); Download Lightroom Preset Scotch Sunset.xmp Scotch EnergyScotland is bold and so full with energy, even in the details. var themeColor = \"#ffffff\"; if (localStorage.getItem(\"theme\") === 'dark') { themeColor = \"#222222\" } new ImageCompare(document.getElementById(\"scotch-energy-compare\"), { controlColor: themeColor, controlShadow: false, verticalMode: false, showLabels: true, labelOptions: { before: 'Original', after: 'Preset', onHover: true, } }).mount(); Download Lightroom Preset Scotch Energy.xmp Scotch TattooThe Edinburgh Military Tattoo, which takes place twice a year, is a feast for the senses. The incredible sound on one hand and the colors on the other. The brass, the feathers, the uniforms stand out in the setting sun. var themeColor = \"#ffffff\"; if (localStorage.getItem(\"theme\") === 'dark') { themeColor = \"#222222\" } new ImageCompare(document.getElementById(\"scotch-tattoo-compare\"), { controlColor: themeColor, controlShadow: false, verticalMode: false, showLabels: true, labelOptions: { before: 'Original', after: 'Preset', onHover: true, } }).mount(); Download Lightroom Preset Scotch Tattoo.xmp","categories":[{"name":"Photo-Editing","slug":"Photo-Editing","permalink":"https://kiko.io/categories/Photo-Editing/"}],"tags":[{"name":"Lightroom","slug":"Lightroom","permalink":"https://kiko.io/tags/Lightroom/"},{"name":"Presets","slug":"Presets","permalink":"https://kiko.io/tags/Presets/"}]},{"title":"Spice Up Windows Terminal","subtitle":"How to make Powershell a little prettier","date":"2021-04-16","updated":"2021-05-24","path":"post/Spice-Up-Windows-Terminal/","permalink":"https://kiko.io/post/Spice-Up-Windows-Terminal/","excerpt":"Working with the PowerShell in 2020 means fun, because of the new Windows Terminal (get it from Windows Store). It has more power as the old Powershell Console and it is visually adaptable to your personal taste, by installing the wonderful theming engine oh-my-posh from Jan De Dobbeleer. To get Oh-My-Posh properly run, there are several steps to do I want to show here in a nutshell…","keywords":"working powershell means fun windows terminal store power console visually adaptable personal taste installing wonderful theming engine oh-my-posh jan de dobbeleer properly run steps show nutshell…","text":"Working with the PowerShell in 2020 means fun, because of the new Windows Terminal (get it from Windows Store). It has more power as the old Powershell Console and it is visually adaptable to your personal taste, by installing the wonderful theming engine oh-my-posh from Jan De Dobbeleer. To get Oh-My-Posh properly run, there are several steps to do I want to show here in a nutshell… Step 1 - Install a suitable fontAs the theming engine uses Powerline glyphs, you need to install a font which support them, for example the new Cascadia Code PL from Microsoft. Download, unzip and install the OTF and/or TTF font files via context menu in your Windows Explorer. Step 2 - Set new font in your settingsOpen up you Terminal settings… … and add following new line to the PowerShell section: 1&quot;fontFace&quot;: &quot;Cascadia Code PL&quot;, Step 3 - Install oh-my-poshFollowing PowerShell command installs the theming engine itself: 1Install-Module oh-my-posh -Scope CurrentUser If you want to display Git status information also, run this command: 1Install-Module posh-git -Scope CurrentUser To let the command-line editing environment to be customized install PSReadline: 1Install-Module -Name PSReadLine -Scope CurrentUser -Force -SkipPublisherCheck Step 4 - Load on startupIn order to load the theming engine in every new terminal window, edit your PowerShell profile by opening it up with the command … 1notepad $PROFILE and add following lines in the upcoming text file: 123Import-Module oh-my-poshImport-Module posh-gitSet-Theme Paradox Paradox is one of 27 themes available. You will find all themes in your DOCUMENTS folder under ..\\WindowsPowerShell\\Modules\\oh-my-posh\\&lt;version&gt;\\Themes and some visual representations at https://github.com/JanDeDobbeleer/oh-my-posh?#themes. #Update, April 2021Scott Hanselman has mentioned a new improvement recently: Show suitable icons on listing files: Download and install CaskaydiaCove Nerd Font at https://www.nerdfonts.com/font-downloads Open Terminal Settings (like in Step 2) Replace the fontface with &quot;CaskaydiaCove Nerd Font&quot; Run Install-Module -Name Terminal-Icons -Repository PSGallery in Terminal, opened as administrator Add Import-Module -Name Terminal-Icons in your profile (like in Step 4) You will get this on calling dir, for example: More Info Windows Store: Windows TerminalMicrosoft: Cascadia Code PLGitHub: JanDeDobbeleer/oh-my-poshMicrosoft Docs: Set up Powerline in Windows TerminalScott Hanselman: How to make a pretty prompt in Windows Terminal with Powerline, Nerd Fonts, Cascadia Code, WSL, and oh-my-poshScott Hanselman: Taking your PowerShell prompt to the next level with Windows Terminal and Oh my Posh 3Scott Hanselman: Take your Windows Terminal and PowerShell to the next level with Terminal Icons","categories":[{"name":"Tools","slug":"Tools","permalink":"https://kiko.io/categories/Tools/"}],"tags":[{"name":"Windows","slug":"Windows","permalink":"https://kiko.io/tags/Windows/"},{"name":"Theming","slug":"Theming","permalink":"https://kiko.io/tags/Theming/"},{"name":"PowerShell","slug":"PowerShell","permalink":"https://kiko.io/tags/PowerShell/"}]},{"title":"Adding Screenshots to Trello Cards on Android","subtitle":null,"series":"Step By Step","date":"2021-04-11","updated":"2021-05-17","path":"post/Adding-Screenshots-to-Trello-Cards-on-Android/","permalink":"https://kiko.io/post/Adding-Screenshots-to-Trello-Cards-on-Android/","excerpt":"I’m collecting interesting One-Page-Tools on the web on a Trello board. To add a new card, I use a simple little script on my Android smartphone, I wrote about here: Add website to Trello card the better way. On processing the page to store on a card, Trello scrapes the page and takes the &lt;meta&gt; tag og:image out of the HTML to generate an image attachment and take it as cover for the card. This sometimes works, but most of the time it doesn’t, because website owners often don’t pay attention to reasonable &lt;meta&gt; tags. Because it is easier to find a card with visual support, I create my own screenshots for the cards in a manual, but streamlined, process, I want to show you here.","keywords":"im collecting interesting one-page-tools web trello board add card simple script android smartphone wrote website processing page store scrapes takes &ltmeta&gt tag ogimage html generate image attachment cover works time doesnt owners dont pay attention reasonable tags easier find visual support create screenshots cards manual streamlined process show","text":"I’m collecting interesting One-Page-Tools on the web on a Trello board. To add a new card, I use a simple little script on my Android smartphone, I wrote about here: Add website to Trello card the better way. On processing the page to store on a card, Trello scrapes the page and takes the &lt;meta&gt; tag og:image out of the HTML to generate an image attachment and take it as cover for the card. This sometimes works, but most of the time it doesn’t, because website owners often don’t pay attention to reasonable &lt;meta&gt; tags. Because it is easier to find a card with visual support, I create my own screenshots for the cards in a manual, but streamlined, process, I want to show you here. PrerequisitesOS: Android 5 and above Apps: Trellohttps://play.google.com/store/apps/details?id=com.trello Screenshot Touchhttps://play.google.com/store/apps/details?id=com.mdiwebma.screenshot Step 1 Open up Screenshot Touch and set under Shaking and Delay the option Caption by shaking [1]. Set the Shake sensitivity option to Hard [2]. Set the Resize option to 50% [3]. Start the capture monitoring service [4]. Step 2 Open up Trello and got to the card, where you want to add an screenshot for use as an cover. Click on the URL attachment to open it in your browser [1]. Step 3 Shake you smartphone to capture the current website. Step 4 Switch to Screenshot Touch and open the Photo Viewer [1] Step 5 Open the Crop Image dialog. Step 6 Set the Crop Mode to 1:1 to get a squared image. It will be persisted in the apps settings for further use. Step 7 Place the overlay to select you preferred part of the image [1]. Save the image [2]. Step 8 Switch back to Trello and click to add a new attachment [1]. Step 9 Choose to add from file [1]. Step 10 In Androids file dialog, head up to Recent Files [1]. Select the new image [2]. Step 11 In the context menu of the added attachment, select Make Card Cover [1], if Trello has not done it yet. ResultOnce you have done this two or three times, the process takes less than 30 seconds.","categories":[{"name":"Misc","slug":"Misc","permalink":"https://kiko.io/categories/Misc/"}],"tags":[{"name":"Trello","slug":"Trello","permalink":"https://kiko.io/tags/Trello/"},{"name":"Android","slug":"Android","permalink":"https://kiko.io/tags/Android/"},{"name":"Imaging","slug":"Imaging","permalink":"https://kiko.io/tags/Imaging/"}]},{"title":"SVG Resources","subtitle":null,"date":"2021-04-09","updated":"2021-05-29","path":"post/SVG-Resources/","permalink":"https://kiko.io/post/SVG-Resources/","excerpt":"#post-SVG-Resources button { background-color: #f1f1f1; border: none; padding: 1rem; margin-bottom: 1rem; margin-right: 1rem; cursor: pointer; } #post-SVG-Resources em { opacity: 0.33; } #post-SVG-Resources #info { color: silver; display: block; height: 24px; } #post-SVG-Resources #info.result { color: green; font-weight: bold; } var timeoutID; function setInfo(e,m) { let info = document.getElementById(e); info.textContent = m; info.classList.add(\"result\"); window.clearTimeout(timeoutID); timeoutID = setTimeout(function() { info.textContent = \"Guess and click...\"; info.classList.remove(\"result\"); window.clearTimeout(timeoutID); }, 2000); } Since beginning beginning of time, people are using symbols to make things clear quickly and easily. So do we when developing websites and web apps by using icons. Everybody knows what’s behind a loupe symbol or a hamburger icon. Guess and click... The way we implement icons have changed in the past. From BMP files to GIF and JPG files, PNG files, to complete or customizable symbol fonts like fontello.com, to Scalable Vector Graphics (SVG). SVG’s in particular are becoming increasingly popular, because they are nothing more than XML-like code, that can be manipulated via CSS or JS, their digital footprint is unbeatable small and they scale seemlessly. Dealing with SVG’s is a little bit more difficult than placing a PNG in HTML, because of its complexity, but it is worth learning as much as possible about it. So did I in the last couple of month and I want to share my finds on the web with you in this post.","keywords":"#post-svg-resources button { background-color #f1f1f1 border padding 1rem margin-bottom margin-right cursor pointer } em opacity #info color silver display block height 24px #inforesult green font-weight bold var timeoutid function setinfoem info = documentgetelementbyide infotextcontent infoclasslistaddresult windowcleartimeouttimeoutid settimeoutfunction guess click infoclasslistremoveresult beginning time people symbols make things clear quickly easily developing websites web apps icons whats loupe symbol hamburger icon implement changed past bmp files gif jpg png complete customizable fonts fontellocom scalable vector graphics svg svgs increasingly popular xml-like code manipulated css js digital footprint unbeatable small scale seemlessly dealing bit difficult placing html complexity worth learning couple month share finds post","text":"#post-SVG-Resources button { background-color: #f1f1f1; border: none; padding: 1rem; margin-bottom: 1rem; margin-right: 1rem; cursor: pointer; } #post-SVG-Resources em { opacity: 0.33; } #post-SVG-Resources #info { color: silver; display: block; height: 24px; } #post-SVG-Resources #info.result { color: green; font-weight: bold; } var timeoutID; function setInfo(e,m) { let info = document.getElementById(e); info.textContent = m; info.classList.add(\"result\"); window.clearTimeout(timeoutID); timeoutID = setTimeout(function() { info.textContent = \"Guess and click...\"; info.classList.remove(\"result\"); window.clearTimeout(timeoutID); }, 2000); } Since beginning beginning of time, people are using symbols to make things clear quickly and easily. So do we when developing websites and web apps by using icons. Everybody knows what’s behind a loupe symbol or a hamburger icon. Guess and click... The way we implement icons have changed in the past. From BMP files to GIF and JPG files, PNG files, to complete or customizable symbol fonts like fontello.com, to Scalable Vector Graphics (SVG). SVG’s in particular are becoming increasingly popular, because they are nothing more than XML-like code, that can be manipulated via CSS or JS, their digital footprint is unbeatable small and they scale seemlessly. Dealing with SVG’s is a little bit more difficult than placing a PNG in HTML, because of its complexity, but it is worth learning as much as possible about it. So did I in the last couple of month and I want to share my finds on the web with you in this post. Using SVG’s in briefThe most useful way of using SVG’s is as an image out of a file, either directly …: (use DevTools [F12] to inspect the element) 1&lt;img src=&quot;images/options.svg&quot; /&gt; … or as a background image: button.options { height: 56px; width: 56px; background-image: url(options.svg); background-repeat: no-repeat; background-position: 50% 50%; } (use DevTools [F12] to inspect the element) 1234567891011&lt;style&gt; button.options &#123; height: 56px; width: 56px; background: url(images/options.svg); background-repeat: no-repeat; background-position: 50% 50%; &#125;&lt;/style&gt;&lt;button class=&quot;options&quot;&gt;&lt;/button&gt; As files, no matter how small, has to be requested from the server, you can also define SVG’s inline for better performance: (use DevTools [F12] to inspect the element) 12345678910111213&lt;body&gt; ... &lt;button&gt; &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;24&quot; height=&quot;24&quot; viewBox=&quot;0 0 24 24&quot; fill=&quot;none&quot;&gt; &lt;path fill=&quot;currentColor&quot; fill-rule=&quot;evenodd&quot; clip-rule=&quot;evenodd&quot; d=&quot;M7 3C8.86384 3 10.4299 4.27477 10.874 6H19V8H10.874C10.4299 9.72523 8.86384 11 7 11C4.79086 11 3 9.20914 3 7C3 4.79086 4.79086 3 7 3ZM7 9C8.10457 9 9 8.10457 9 7C9 5.89543 8.10457 5 7 5C5.89543 5 5 5.89543 5 7C5 8.10457 5.89543 9 7 9Z&quot; /&gt; &lt;path fill=&quot;currentColor&quot; fill-rule=&quot;evenodd&quot; clip-rule=&quot;evenodd&quot; d=&quot;M17 20C15.1362 20 13.5701 18.7252 13.126 17H5V15H13.126C13.5701 13.2748 15.1362 12 17 12C19.2091 12 21 13.7909 21 16C21 18.2091 19.2091 20 17 20ZM17 18C18.1046 18 19 17.1046 19 16C19 14.8954 18.1046 14 17 14C15.8954 14 15 14.8954 15 16C15 17.1046 15.8954 18 17 18Z&quot; /&gt; &lt;/svg&gt; &lt;/button&gt; ...&lt;/body&gt; If you want to use a SVG multiple times, you can define it once by wrapping it up in a symbol tag with an id and use it wherever you want: (use DevTools [F12] to inspect the elements) 12345678910111213141516171819&lt;body&gt; &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt; &lt;symbol id=&quot;options&quot; width=&quot;24&quot; height=&quot;24&quot; viewBox=&quot;0 0 24 24&quot; fill=&quot;none&quot;&gt; &lt;path fill=&quot;currentColor&quot; fill-rule=&quot;evenodd&quot; clip-rule=&quot;evenodd&quot; d=&quot;M7 3C8.86384 3 10.4299 4.27477 10.874 6H19V8H10.874C10.4299 9.72523 8.86384 11 7 11C4.79086 11 3 9.20914 3 7C3 4.79086 4.79086 3 7 3ZM7 9C8.10457 9 9 8.10457 9 7C9 5.89543 8.10457 5 7 5C5.89543 5 5 5.89543 5 7C5 8.10457 5.89543 9 7 9Z&quot; /&gt; &lt;path fill=&quot;currentColor&quot; fill-rule=&quot;evenodd&quot; clip-rule=&quot;evenodd&quot; d=&quot;M17 20C15.1362 20 13.5701 18.7252 13.126 17H5V15H13.126C13.5701 13.2748 15.1362 12 17 12C19.2091 12 21 13.7909 21 16C21 18.2091 19.2091 20 17 20ZM17 18C18.1046 18 19 17.1046 19 16C19 14.8954 18.1046 14 17 14C15.8954 14 15 14.8954 15 16C15 17.1046 15.8954 18 17 18Z&quot; /&gt; &lt;/symbol&gt; &lt;/svg&gt; ... &lt;button&gt; &lt;svg width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;use xlink:href=&quot;#options&quot; /&gt;&lt;/svg&gt; &lt;/button&gt; ... &lt;button&gt; &lt;svg width=&quot;24&quot; height=&quot;24&quot;&gt;&lt;use xlink:href=&quot;#options&quot; /&gt;&lt;/svg&gt; &lt;/button&gt; ...&lt;/body&gt; SVG ResourcesFinding the right SVG for your project is time consuming, like it is for symbol fonts or PNG’s. So here are a few tips getting SVG’s for free: css.gg https://css.gg 700+ icons, downloadable as SVG, PNG, XD, Figma, Styled Component (Typescript) or even pure CSS. Tabler Icons https://tabler-icons.io Over 1.250 icons in several categories, downloadable as SVG or PNG. Boxicons https://boxicons.com 1.500 regular or filled icons, downloadable as SVG or PNG. Supports animations, Web Components and is also available as font. Feather https://feathericons.com 268 icons as SVG, with customizable size, stroke with and color. Majesticons https://majesticons.com 210 line and solid icons, with Figma support and also available as Github repository. Simple icons https://simpleicons.org Over 1800 icons of popular brands, with hex color code. SVG Repo https://www.svgrepo.com 300.000+ vectors and icons in over 400 collections from different artists. Google Fonts - Material Icons https://fonts.google.com/icons At least … an own frontend of Googles Material Icons inside Google Fonts for downloading them individually as SVG, PNG or Android/iOS package. Last but not least, SVG is more powerful then drawing stuff. It’s possible to add raster images, text with a particular font and use many CSS-like techniques like gradients and animations. See links below… More Info CSS Tricks: Using SVGCSS-Tricks: Use and Reuse Everything in SVG… Even Animations!CSS Tricks: An SVG That Isn’t All… SVGmediaevent.de: Sieben Wege, SVG in HTML-Seiten zu setzen (German)Foxland: Simple and Accessible SVG Menu Hamburger Animation","categories":[{"name":"UI-Design","slug":"UI-Design","permalink":"https://kiko.io/categories/UI-Design/"}],"tags":[{"name":"Great Finds","slug":"Great-Finds","permalink":"https://kiko.io/tags/Great-Finds/"},{"name":"Imaging","slug":"Imaging","permalink":"https://kiko.io/tags/Imaging/"},{"name":"SVG","slug":"SVG","permalink":"https://kiko.io/tags/SVG/"}]},{"title":"Discoveries #8","subtitle":null,"series":"Discoveries","date":"2021-03-31","updated":"2021-05-17","path":"post/Discoveries-8/","permalink":"https://kiko.io/post/Discoveries-8/","excerpt":"This month my discoveries are all about CSS … at least almost. See the stunning solutions developers around the world have created and take them to improve yours. Have fun exploring. Charts.cssAnimXYZMagic Animationstransition.cssMake Animated Content Placeholders with HTML and CSSAnimating UnderlinesNew aspect-ratio CSS propertyHow to display language-specific quotes in CSSMaking the DETAILS element look and behave like a modalBetter Line Breaks for Long URLs","keywords":"month discoveries css … stunning solutions developers world created improve fun exploring chartscssanimxyzmagic animationstransitioncssmake animated content placeholders html cssanimating underlinesnew aspect-ratio propertyhow display language-specific quotes cssmaking details element behave modalbetter line breaks long urls","text":"This month my discoveries are all about CSS … at least almost. See the stunning solutions developers around the world have created and take them to improve yours. Have fun exploring. Charts.cssAnimXYZMagic Animationstransition.cssMake Animated Content Placeholders with HTML and CSSAnimating UnderlinesNew aspect-ratio CSS propertyHow to display language-specific quotes in CSSMaking the DETAILS element look and behave like a modalBetter Line Breaks for Long URLs Charts.css by Rami Yushuvaev and Lana Gordiievski&nbsp;https://chartscss.org Mentioned in hundreds of other blog posts earlier, Chart.css is so good that I have to mention it here too. Pure CSS charts, with animations, responsiveness, customizable and Open Source … what more could a heart desire? AnimXYZ by Miles and Mattan Ingram&nbsp;https://animxyz.com AnimXYZ is a CSS library for composing animations, powered by CSS variables. It has Vue and React support. Magic Animations by Christian Pucci&nbsp;https://www.minimamente.com/project/magic Christian from Italy brings us an animation library with 64 beautiful effects, to get started directly. transition.css by Adam Argyle&nbsp;https://github.com/argyleink/transition.css Another CSS library for animating things on the web. Adam is targeting the transition of an element. Cool and easy to use. Make Animated Content Placeholders with HTML and CSS by James Sinkala&nbsp;https://dev.to/xinnks/make-animated-content-placeholders-with-html-and-css-3ekn A modern approach to entertain web users while loading some content or images is to show animated placeholders, like Instagram, Facebook and others do. James gives us the instructions how to implement these with pre CSS. Animating Underlines by Michelle Barker&nbsp;https://css-irl.info/animating-underlines From the beginning of time, URL’s has shown as underlined text. How boring. Michelle has some ideas to bring some life into links. New aspect-ratio CSS property by Una Kravets&nbsp;https://web.dev/aspect-ratio Dealing with images in CSS can be a mess sometimes, especially on responsive layouts. Read about the common hacks regarding aspect ratio and the upcoming new CSS feature aspect-ratio. How to display language-specific quotes in CSS by Stefan Judis&nbsp;https://www.stefanjudis.com/today-i-learned/how-to-use-language-dependent-quotes-in-css Doing internationalization right, you have to beware of some pitfalls, like the different quotes in some languages. Germans are using different double quotes for start and end, French are using double arrows and so on. Stefan shows us how to do it right. Making the DETAILS element look and behave like a modal by Niels Voogt&nbsp;https://codepen.io/NielsVoogt/full/XWjPdjO In this pen, Niels is playing around with the DETAILS tag and shows how it can be used for a modal dialog with CSS only. Great idea! Better Line Breaks for Long URLs by Reuben Lillie&nbsp;https://css-tricks.com/better-line-breaks-for-long-urls Reuben addresses in his post at CSS-Tricks the problem of displaying long URL’s and shows a solution with a little bit JavaScript how to do it right once and for all.","categories":[{"name":"Discoveries","slug":"Discoveries","permalink":"https://kiko.io/categories/Discoveries/"}],"tags":[{"name":"Great Finds","slug":"Great-Finds","permalink":"https://kiko.io/tags/Great-Finds/"}]},{"title":"Custom Caller Authentication with ASP.NET Core 5.0 Web API","subtitle":null,"date":"2021-02-28","updated":"2021-05-17","path":"post/Custom-Caller-Authentication-with-ASP-NET-Core-5-0-WebApi/","permalink":"https://kiko.io/post/Custom-Caller-Authentication-with-ASP-NET-Core-5-0-WebApi/","excerpt":"Developing micro services with Microsoft ASP.NET Core 5.0 Web API is powerful and fun, but the fun stops, if your data are accesses unauthorized. It is absolutely fundamental to have a protection layer, which filters out unwanted data requests. A common way is to limit the service access by providing API Keys to well known clients. In this post I will show you how to implement such a filter in terms of API keys and IP addresses.","keywords":"developing micro services microsoft aspnet core web api powerful fun stops data accesses unauthorized absolutely fundamental protection layer filters unwanted requests common limit service access providing keys clients post show implement filter terms ip addresses","text":"Developing micro services with Microsoft ASP.NET Core 5.0 Web API is powerful and fun, but the fun stops, if your data are accesses unauthorized. It is absolutely fundamental to have a protection layer, which filters out unwanted data requests. A common way is to limit the service access by providing API Keys to well known clients. In this post I will show you how to implement such a filter in terms of API keys and IP addresses. The SettingsLets start with the list of clients, who should be able to access the data. The most useful place for this is in the appsettings.json of the Core 5.0 Web API project: appsettings.json123456789101112131415...&quot;Callers&quot;: [ &#123; &quot;Name&quot;: &quot;localhost&quot;, &quot;ApiKey&quot;: null, &quot;IPAddress&quot;: &quot;::1&quot; &#125;, &#123; &quot;Name&quot;: &quot;John Doe&quot;, &quot;ApiKey&quot;: &quot;mytopsecretapikeyforjohndoe&quot;, &quot;IPAddress&quot;: &quot;*&quot; &#125; ]... This list has two entries: one for the server itself (“localhost”), which is restricted to the local IP address &quot;::1&quot;, and one for the test user &quot;John Doe&quot;, who can access from any IP address (&quot;*&quot;), but must supply his personal API key with his requests. In order to handle this setting, we have to introduce it to the system at startup as a class: CallerSetting.cs123456public class CallerSetting&#123; public string Name &#123; get; set; &#125; public string ApiKey &#123; get; set; &#125; public string IPAddress &#123; get; set; &#125;&#125; Startup.cs1234567891011...public void ConfigureServices(IServiceCollection services) &#123; ... IConfigurationSection configSection = Configuration.GetSection(&quot;Callers&quot;); services.Configure&lt;List&lt;CallerSetting&gt;&gt;(configSection);&#125;... The ControllerLet’s assume we have a controller, which handles the API requests, like this: MyFancyController.cs123456789101112131415using Microsoft.AspNetCore.Mvc;namespace MyAPIProject&#123; [Route(&quot;api/helloworld&quot;)] [ApiController] public class MyFancyAPIController : ControllerBase &#123; [HttpGet] public string Get() &#123; return &quot;Hello World&quot;; &#125; &#125;&#125; To prevent to write a request check against our new settings in each action method, we can decorate the whole controller class by introducing an new custom Attribute, which will do the work: MyFancyController.cs1234567...[Route(&quot;api/helloworld&quot;)][ApiController][AuthenticateApiRequest]public class MyFancyAPIController : ControllerBase... The AttributeHere is the code for the new attribute. It uses the IActionFilter. These filters run within the ASP.NET Core action invocation pipeline, in our case BEFORE the action is entered (OnActionExecutionAsync). AuthenticateApiRequestAttribute.cs1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859using Microsoft.AspNetCore.Mvc;using Microsoft.AspNetCore.Mvc.Filters;using Microsoft.Extensions.Configuration;using Microsoft.Extensions.DependencyInjection;using System;using System.Collections.Generic;using System.Threading.Tasks;using System.Linq;namespace MyAPIProject&#123; [AttributeUsage(AttributeTargets.Class)] public class AuthenticateApiRequestAttribute : Attribute, IAsyncActionFilter &#123; public async Task OnActionExecutionAsync ( ActionExecutingContext context, ActionExecutionDelegate next ) &#123; // Get an Api Key from Request Header context.HttpContext.Request.Headers.TryGetValue( &quot;ApiKey&quot;, out var requestApiKey ); // Get the remote IP Address var requestIpAddress = context.HttpContext.Connection.RemoteIpAddress.ToString(); // Get access to &#x27;appsettings.json&#x27; var appSettings = context.HttpContext.RequestServices.GetRequiredService&lt;IConfiguration&gt;(); // Get &#x27;Callers&#x27; list from settings var callers = appSettings.GetSection(&quot;Callers&quot;) .Get&lt;List&lt;CallerSetting&gt;&gt;(); // Get all Callers with matching IP Adress and/or API Key via LINQ var current = callers.Where(c =&gt; (c.IPAddress == requestIpAddress) || (c.IPAddress == &quot;*&quot; &amp;&amp; c.ApiKey == requestApiKey) || (c.IPAddress == requestIpAddress &amp;&amp; c.ApiKey == requestApiKey)); // Do we have a match? if (current.Count() == 0) &#123; // No, then return with an error context.Result = new ContentResult() &#123; StatusCode = 401, Content = &quot;Unauthorized Access&quot; &#125;; return; &#125; await next(); &#125; &#125;&#125; The Result More Info Microsoft Docs: Filters in ASP.NET CoreMicrosoft Docs: Configuration in ASP.NET Core","categories":[{"name":"C#","slug":"C","permalink":"https://kiko.io/categories/C/"}],"tags":[{"name":"Visual Studio","slug":"Visual-Studio","permalink":"https://kiko.io/tags/Visual-Studio/"},{"name":"WebAPI","slug":"WebAPI","permalink":"https://kiko.io/tags/WebAPI/"},{"name":"Authentication","slug":"Authentication","permalink":"https://kiko.io/tags/Authentication/"}]},{"title":"Discoveries #7","subtitle":null,"series":"Discoveries","date":"2021-02-25","updated":"2021-05-17","path":"post/Discoveries-7/","permalink":"https://kiko.io/post/Discoveries-7/","excerpt":"February and the first sunny days in 2021. What a delight! Have fun, sitting in the sun, discovering my newest finds on the web. This time, all regarding JavaScript… github1s: One second to read GitHub code with VS CodeHow to enhance fetch() with the Decorator PatternKy - Delightful HTTP RequestsVS Code’s REST Client Plugin is All You Need to Make API Callsjson-viewYou might not need jQueryJavaScript Algorithms and Data Structuresdate-fns - Modern JavaScript date utility libraryParsing Markdown into an Automated Table of ContentsFakeScroll - lightweight custom-looking scrollbars","keywords":"february sunny days delight fun sitting sun discovering newest finds web time javascript… github1s read github code codehow enhance fetch decorator patternky delightful http requestsvs codes rest client plugin make api callsjson-viewyou jqueryjavascript algorithms data structuresdate-fns modern javascript date utility libraryparsing markdown automated table contentsfakescroll lightweight custom-looking scrollbars","text":"February and the first sunny days in 2021. What a delight! Have fun, sitting in the sun, discovering my newest finds on the web. This time, all regarding JavaScript… github1s: One second to read GitHub code with VS CodeHow to enhance fetch() with the Decorator PatternKy - Delightful HTTP RequestsVS Code’s REST Client Plugin is All You Need to Make API Callsjson-viewYou might not need jQueryJavaScript Algorithms and Data Structuresdate-fns - Modern JavaScript date utility libraryParsing Markdown into an Automated Table of ContentsFakeScroll - lightweight custom-looking scrollbars github1s: One second to read GitHub code with VS Code by netcon (conwnet)&nbsp;https://github.com/conwnet/github1s How do you peak in the code of a Github repository? Navigate back and forth on github.com? The chinese developer netcon from Shenzhen has better idea: just add the 2 characters 1s to the github url and the repository opens up in the new version of VSCode, which now can be built for browsers. Pretty handy… How to enhance fetch() with the Decorator Pattern by Dmitri Pavlutin&nbsp;https://dmitripavlutin.com/enhance-fetch-with-decorator-pattern/ Fetching JSON files with JavaScript means to call fetch() asynchronously and pick the response manually. Two AWAITS and a lot of stuff can go wrong. Dmitri shows how to construct a class which enables you to do this in one step. Ky - Delightful HTTP Requests by Sindre Sorhus&nbsp;https://github.com/sindresorhus/ky Fetch is nice, but if you want it nice and easy, you have to rely on a 3rd-party library, like *Ky. Sindre Sorhus did a great job to bring fetching in one line, within around 13KB. VS Code’s REST Client Plugin is All You Need to Make API Calls by Paige Niedringhaus&nbsp;https://blog.bitsrc.io/vs-codes-rest-client-plugin-is-all-you-need-to-make-api-calls-e9e95fcfd85a Using Postman or Nightingale for testing your microservices? Not absolutely necessary, as there are possibilities to do it right in VSCode, as Paige show us in her post here. No need to leave your editor. json-view by Pavel&nbsp;https://github.com/pgrabovets/json-view It’s not often that a developer has to display raw JSON data on a website or app. Pavel from the Ukraine has a solution to do this with style. You might not need jQuery by Zack Bloom and Adam Schwartz&nbsp;http://youmightnotneedjquery.com/ Many of us relied on jQuery in the past. So did Zack Bloom and Adam Schwartz as I suppose. They have published a website, that contrasts the native JavaScript methods for the most common jQuery methods. Go Vanilla, go! JavaScript Algorithms and Data Structures by Oleksii Trekhleb&nbsp;https://github.com/trekhleb/javascript-algorithms Oleksii has collected a huge bunch of useful JS methods in his Github repository and has translated the docs for every method into 14 (!) languages. Whoop … what a job! Ever wanted to know how to calculate the Euclidean Distance? Oleksii has the answer and the code. date-fns - Modern JavaScript date utility library by {Many}&nbsp;https://date-fns.org/ moment.js, maybe the most used JS library for calculating dates, is now in maintenance mode, because it is getting on in years. A good alternative is date-fns, which supports tree-shaking and other modern approaches. In addition to that, you will find here and here good comparisons between several date libraries or even native JS. Parsing Markdown into an Automated Table of Contents by Lisi Linhart&nbsp;https://css-tricks.com/parsing-markdown-into-an-automated-table-of-contents/ A well-structured text has headings, subheadings and paragraphs. For the web we often write our stuff in Markdown. Lisi shows us how to process such a Markdown file to get a TOC automatically. FakeScroll - lightweight custom-looking scrollbars by Yair Even Or&nbsp;https://github.com/yairEO/fakescroll The scrollbar belongs to the website or app a developer is creating, in my opinion. Therefore it is a mess what browser manufacturers offer developers in terms of possibilities. Yair has constructed a JS library which replaces the build-in scrollbars completely with standard HTML elements. Nice…","categories":[{"name":"Discoveries","slug":"Discoveries","permalink":"https://kiko.io/categories/Discoveries/"}],"tags":[{"name":"Great Finds","slug":"Great-Finds","permalink":"https://kiko.io/tags/Great-Finds/"}]},{"title":"Native JavaScript Multilanguage Templating","subtitle":null,"date":"2021-02-24","updated":"2021-05-17","path":"post/Native-JavaScript-Multilanguage-Templating/","permalink":"https://kiko.io/post/Native-JavaScript-Multilanguage-Templating/","excerpt":"In the project I’m currently working on, I faced the “problem” to integrate multilanguage support, but due to the fact that the new app should be written in vanilla JS, without any plugins, libraries or other dependencies, I had to develop my own localization layer. In this article I want to show you my approach on this…","keywords":"project im working faced problem integrate multilanguage support due fact app written vanilla js plugins libraries dependencies develop localization layer article show approach this…","text":"In the project I’m currently working on, I faced the “problem” to integrate multilanguage support, but due to the fact that the new app should be written in vanilla JS, without any plugins, libraries or other dependencies, I had to develop my own localization layer. In this article I want to show you my approach on this… My solution is based on a template system that I implemented into my project at an earlier stage. If you are interested in how this works, I recommend you read my article Utilize a repository of reusable ES6 template literals. Let’s start with the standard scaffold of an HTML5 app, extended with some style‘s, an initialization script and a lonely main element, we want to fill with some localized content: index.html1234567891011121314151617181920212223242526&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;meta http-equiv=&quot;language&quot; content=&quot;en&quot;&gt; &lt;title&gt;Native JavaScript Multilanguage Templating&lt;/title&gt; &lt;style&gt; body &#123; padding: 2rem; &#125; main &#123; text-align: center; &#125; &lt;/style&gt; &lt;script type=&quot;module&quot;&gt; import &#123; App &#125; from &#x27;./app.js&#x27;; window.app = new App(); app.init(); &lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;main&gt;&lt;/main&gt; &lt;/body&gt;&lt;/html&gt; The script points to the following ES6 module class in the file app.js: app.js1234567891011class App &#123; constructor() &#123; // do something when the class is instantiated &#125; init() &#123; // do something to initialize the app &#125;&#125;export &#123; App &#125;; Nothing uncommon so far, if you are familiar with ES6 classes and imports/exports. Now let’s create a localizations.js file, to store the needed localized strings in all wanted languages. Every language will have its own branch in a Localizations object, represented by its two-letter ISO-639-1 language code. All translations are accessible via an unique english key word: localizations.js12345678910111213141516171819202122export function Localizations() &#123; return &#123; &quot;EN&quot;: &#123; &quot;helloWorld&quot;: &quot;Hello World&quot; &#125;, &quot;DE&quot;: &#123; &quot;helloWorld&quot;: &quot;Hallo Welt&quot; &#125;, &quot;ES&quot;: &#123; &quot;helloWorld&quot;: &quot;Hola, mundo&quot; &#125;, &quot;FR&quot;: &#123; &quot;helloWorld&quot;: &quot;Bonjour le monde&quot; &#125;, &quot;RU&quot;: &#123; &quot;helloWorld&quot;: &quot;Здравствуйте, мир&quot; &#125;, &quot;JP&quot;: &#123; &quot;helloWorld&quot;: &quot;ハローワールド&quot; &#125; &#125;&#125; As we import the localizations.js in our app.js, we can initialize the localizations in the constructor of the app class with the language code of the users browser: app.js12345678910111213141516import &#123; Localizations &#125; from &#x27;./localizations.js&#x27;;class App &#123; constructor() &#123; // Get browser language this.langCode = window.navigator.language.split(&quot;-&quot;)[0].toUpperCase(); // Init localization to access via &#x27;app.localization&#x27; globally this.localization = Localizations()[this.langCode]; &#125; ... app.localization now holds the key/value list of the current language. Now we implement the templating class, as described in Utilize a repository of reusable ES6 template literals and define a first template called helloWorld … templates.js123456789101112131415class Templates &#123; helloWorld(data) &#123; return this.fillTemplate(` &lt;h1&gt;$&#123;app.localization.helloWorld&#125;&lt;/h1&gt; `, data); &#125; fillTemplate(templateString, templateVars)&#123; var func = new Function(...Object.keys(templateVars), &quot;return `&quot; + templateString + &quot;`;&quot;); return func(...Object.values(templateVars)); &#125;&#125;export &#123; Templates &#125;; The inner text of the h1 element in the helloWorld template refers to the globally available variable app.localization, we initialized in the last step, and points to the translation helloWorld. In app.js we import the templates.js and implement some code in the init method, to get the template and bring it to the DOM: app.js1234567891011121314151617import &#123; Localizations &#125; from &#x27;./localizations.js&#x27;;import &#123; Templates &#125; from &#x27;./templates.js&#x27;;class App &#123; ... init() &#123; // Get &quot;Hello World&quot; H1 element in current language let helloWorld = app.templates.helloWorld(&#123;&#125;); //Insert H1 element into MAIN element document.querySelector(&quot;main&quot;) .insertAdjacentHTML(&quot;beforeend&quot;, helloWorld); &#125; This is it … In the following Github repository you will find a solution based on this example, extented with a language selector, cookie support and some helper methods to keep the code nice and clean: https://github.com/kristofzerbe/Native-JavaScript-Multilanguage-Templating","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://kiko.io/categories/JavaScript/"}],"tags":[{"name":"Localization","slug":"Localization","permalink":"https://kiko.io/tags/Localization/"},{"name":"ES6","slug":"ES6","permalink":"https://kiko.io/tags/ES6/"},{"name":"Templating","slug":"Templating","permalink":"https://kiko.io/tags/Templating/"}]},{"title":"Remote Testing and Debugging with Chrome","subtitle":"How to test a local site on a mobile device and debug it locally","date":"2021-01-24","updated":"2021-05-17","path":"post/Remote-Testing-and-Debugging-with-Chrome/","permalink":"https://kiko.io/post/Remote-Testing-and-Debugging-with-Chrome/","excerpt":"Developing a website or web app means, you have installed an editor locally on your computer, writing your code locally and start a tiny, built-in web server for debugging locally in your preferred browser. In most browsers, there are some features to mimic a smartphone, to see if your solution is working on such a device too, but you only get a hint if it’s running properly. Some mobile features like navigator.canShare do not work at all. Better is to see it live on your device. This article will show you firstly, how to test your local solution on a smartphone and secondly, how to debug it locally, when it runs on the smartphone after releasing.","keywords":"developing website web app means installed editor locally computer writing code start tiny built-in server debugging preferred browser browsers features mimic smartphone solution working device hint running properly mobile navigatorcanshare work live article show firstly test local debug runs releasing","text":"Developing a website or web app means, you have installed an editor locally on your computer, writing your code locally and start a tiny, built-in web server for debugging locally in your preferred browser. In most browsers, there are some features to mimic a smartphone, to see if your solution is working on such a device too, but you only get a hint if it’s running properly. Some mobile features like navigator.canShare do not work at all. Better is to see it live on your device. This article will show you firstly, how to test your local solution on a smartphone and secondly, how to debug it locally, when it runs on the smartphone after releasing. I will use following setup: Editor: Visual Studio Code Smartphone: Android Browser for Desktop &amp; Mobile: Microsoft Edge (any other Chromium based browser will work also) Before we start, we have to enable the Android smartphone to connect to other devices, by switching on USB Debugging: Enable the Developer Options Go to Settings &nbsp;&gt; About Phone Tap 7 times on Build Number Enable USB Debugging Go to Settings &nbsp;&gt; System &nbsp;&gt; Advanced &nbsp;&gt; Developer Options Switch USB debugging to ON Test your local site on a mobile deviceWhen you start your local web server from VS Code, your solution can be accessed by a localhost address at a specific port: Even if you are in the same network with all your devices, this address is only available locally. You need to “announce” this address to your mobile device by using the mechanism called Port Forwarding. This is a job for the browser… Connect you mobile device via USB with your local machine Open up chrome://inspect/#devices in your Chromium based browser (works in all Chromium browsers) Your mobile device will ask you to allow USB-Debugging … say ALLOW Under Devices, your mobile device will appear after a few seconds … my is here the Pixel 4 Click on Port Forwarding Enter your local, to be forwarded address (&#39;localhost:&#39; and port number) and check Enable port forwarding Open your Chromium based browser on your mobile device Enter the URL localhost:4000 Your local solution will now be loaded on your mobile device and you will see this in your local DevTools: Debug a site running on your mobile device locallyThis step is now very easy, because we are connected to the mobile device and a remote site is loaded. Just click inspect at the appropriate item: . This works now also on the released version of your solution, you want to debug. Just enter the URL in a new tab on your mobile device, find the item in DevTools-Devices and click on inspect. The window, which will be opened on inspect, are the Chrome Developer Tools and every interaction with it, will be reflected on your mobile device, as you are used to when debugging locally: More Info Chrome DevTools: Access Local ServersChrome DevTools: Get Started with Remote Debugging Android Devices","categories":[{"name":"Tools","slug":"Tools","permalink":"https://kiko.io/categories/Tools/"}],"tags":[{"name":"VS Code","slug":"VS-Code","permalink":"https://kiko.io/tags/VS-Code/"},{"name":"Browser","slug":"Browser","permalink":"https://kiko.io/tags/Browser/"},{"name":"Debugging","slug":"Debugging","permalink":"https://kiko.io/tags/Debugging/"}]},{"title":"Discoveries #6","subtitle":null,"series":"Discoveries","date":"2021-01-20","updated":"2021-05-17","path":"post/Discoveries-6/","permalink":"https://kiko.io/post/Discoveries-6/","excerpt":"2020 is over and history. Well, may 2021 be with us. With this post I would like to continue the Discoveries, with new momentum. There was a lot to read over the holidays. All the finds in this issue have something to do with visual aspects of web design in the broadest sense. Drop-Shadow: The Underrated CSS Filtercss.gg - 700+ CSS IconsSVGBox - API for Web IconsChange Color of SVG on HoverCSS filter generator to convert from black to target hex colorResponsive && Configurable SVG WavesBalloon.cssHow to Build a CSS-only Organizational ChartShiftyBrad Traversy's 50 Projects 50 Days","keywords":"history post continue discoveries momentum lot read holidays finds issue visual aspects web design broadest sense drop-shadow underrated css filtercssgg 700+ iconssvgbox api iconschange color svg hovercss filter generator convert black target hex colorresponsive && configurable wavesballooncsshow build css-only organizational chartshiftybrad traversy's projects days","text":"2020 is over and history. Well, may 2021 be with us. With this post I would like to continue the Discoveries, with new momentum. There was a lot to read over the holidays. All the finds in this issue have something to do with visual aspects of web design in the broadest sense. Drop-Shadow: The Underrated CSS Filtercss.gg - 700+ CSS IconsSVGBox - API for Web IconsChange Color of SVG on HoverCSS filter generator to convert from black to target hex colorResponsive && Configurable SVG WavesBalloon.cssHow to Build a CSS-only Organizational ChartShiftyBrad Traversy's 50 Projects 50 Days Drop-Shadow: The Underrated CSS Filter by Michelle Barker&nbsp;https://css-irl.info/drop-shadow-the-underrated-css-filter There are 2 built-in ways to drop a shadow on a HTML element with CSS. Michelle shows us the difference and the additional features filter: drop-shadow has. css.gg - 700+ CSS Icons by Astrit Malësia&nbsp;https://css.gg Astrit, a swedish designer, has build this outstanding icon repository, with tons of icons in pure CSS or SVG. Chapeau… SVGBox - API for Web Icons by ?&nbsp;https://svgbox.net In case css.gg has not the appropriate SVG icon you are looking for, visit this site and explorer 12 icon sets with over 3.000 icons. Whoever brought this to us, thanks. Change Color of SVG on Hover by Chris Coyier&nbsp;https://css-tricks.com/change-color-of-svg-on-hover Once again Chris, who shows us here, how to colorize a SVG icon in case you use it as a background image by using CSS filter. CSS filter generator to convert from black to target hex color by Barrett Sonntag&nbsp;https://codepen.io/sosuke/pen/Pjoqqp As Chris Coyer mentioned in the discovery above, you need the appropriate filter values on colorizing SVG’s. Barret has developed a converter in a pen. Useful tool… Responsive && Configurable SVG Waves by Jhey Tompkins&nbsp;https://codepen.io/jh3y/pen/poEvKxo Seperating content on a web site with some kind of divider is advisable and motion is nice, if you don’t overdo it. Jhey shows us, how to combine both with an animated wave. Balloon.css by Claudio Holanda&nbsp;https://kazzkiq.github.io/balloon.css Ever needed tooltips for elements, which are not self-describing? Download this pure CSS solution from Claudio und you never search again for something like that. How to Build a CSS-only Organizational Chart by someone at Envato Tuts+&nbsp;https://codepen.io/tutsplus/pen/MWedpoj Org charts are important to visualize hierarchies. Why not creating them with nothing else than HTML and CSS? Shifty by Warren Galyen&nbsp;https://wgalyen.github.io/shifty No one can escape parallax effects on backgrounds. They are just too pleasing. Warren addresses this with his tiny JavaScript library. Brad Traversy's 50 Projects 50 Days by Brad Traversy&nbsp;https://github.com/bradtraversy/50projects50days There are a lot of doing-a-thing-every-day projects, but Brad is pushing it with his 50 web projects in 50 days. Check out Expanding Cards or Rotating Navigation Animation or Theme Clock. Cool stuff and source code is available.","categories":[{"name":"Discoveries","slug":"Discoveries","permalink":"https://kiko.io/categories/Discoveries/"}],"tags":[{"name":"Great Finds","slug":"Great-Finds","permalink":"https://kiko.io/tags/Great-Finds/"}]},{"title":"Use a duplicate image to drop a shadow","subtitle":"An alternative for 'box-shadow' on images","date":"2021-01-20","updated":"2021-05-17","path":"post/Use-a-duplicate-image-to-drop-a-shadow/","permalink":"https://kiko.io/post/Use-a-duplicate-image-to-drop-a-shadow/","excerpt":"Depending on your design, sometimes it is nice to drop a shadow on an image to highlight it: 1&lt;img src=&quot;my-image.jpg&quot; /&gt; 123img &#123; box-shadow: 0px 25px 25px -10px #666;&#125; But … it looks like a paper print of the image, with a light bulb in the first third above it. The shade is grey, boring and has been used and seen many times before… An design related Instagram post from Muhammad Abdull of thewilsonthings, inspired me to use the image itself as the shadow in order to make the image look a bit translucent. Should be the same technique as that of a reflection. Here is the HTML/CSS code for it, as the people asking for it in the comments.","keywords":"depending design nice drop shadow image highlight 1&ltimg src=&quotmy-imagejpg&quot /&gt 123img &#123 box-shadow 0px 25px -10px #666&#125 … paper print light bulb shade grey boring times before… related instagram post muhammad abdull thewilsonthings inspired order make bit translucent technique reflection html/css code people comments","text":"Depending on your design, sometimes it is nice to drop a shadow on an image to highlight it: 1&lt;img src=&quot;my-image.jpg&quot; /&gt; 123img &#123; box-shadow: 0px 25px 25px -10px #666;&#125; But … it looks like a paper print of the image, with a light bulb in the first third above it. The shade is grey, boring and has been used and seen many times before… An design related Instagram post from Muhammad Abdull of thewilsonthings, inspired me to use the image itself as the shadow in order to make the image look a bit translucent. Should be the same technique as that of a reflection. Here is the HTML/CSS code for it, as the people asking for it in the comments. What we want to achieve is this: Basically, we use a duplicate of the image and position it below the actual image, but slightly offset and blurred. It won’t be a performance issue, as some might think, because it is the very same file and will be loaded only once by the browser. For showing two images in the nearly same place in different layers, we need a wrapper… 1234&lt;div class=&quot;image-wrapper&quot;&gt; &lt;img src=&quot;my-image.jpg&quot; /&gt; &lt;img class=&quot;shadow&quot; src=&quot;my-image.jpg&quot; /&gt;&lt;/div&gt; … and some CSS for positioning the images on top of each other first. Here are the defaults for both image elements: 123456789101112div.image-wrapper &#123; position: relative;&#125;div.image-wrapper img &#123; position: absolute; display: block; top: 0; left: 0; width: 100%; z-index: 1;&#125; Now we have to style the duplicate image that it looks similar to the shadow. We washing it out using the blur filter and the opacity. 1234div.image-wrapper img.shadow &#123; filter: blur(10px); opacity: 0.8;&#125; Last step is to change the duplicates dimensions and the positioning below the original image. We squeeze it by 10% and shift it from left with half of the value back to the center, shift it from top to make it standout at the bottom and send it to the back by taking a lower z-index than the original image. 123456789div.image-wrapper img.shadow &#123; filter: blur(10px); opacity: 0.8; width: 90%; left: 5%; top: 40px; z-index: 0;&#125; Thats it. Here’s a pen to play around with the solution:","categories":[{"name":"UI-Design","slug":"UI-Design","permalink":"https://kiko.io/categories/UI-Design/"}],"tags":[{"name":"CSS","slug":"CSS","permalink":"https://kiko.io/tags/CSS/"}]},{"title":"Safely remove multiple classes using a prefix","subtitle":"Avoiding pitfalls when iterating over classList","date":"2021-01-18","updated":"2021-05-17","path":"post/Safely-remove-multiple-classes-using-a-prefix/","permalink":"https://kiko.io/post/Safely-remove-multiple-classes-using-a-prefix/","excerpt":"Writing a Web App with HTML and JavaScript means you deal with several classes on your DOM elements in order to visualize state changes. And there are some pitfalls to be aware of with regard to removal. Assuming you want to open some kind of sidebar above a container. In this sidebar you have several buttons to show different content via JavaScript and a close button, which closes the sidebar again. You HTML code maybe looks like this: 123456789101112131415161718&lt;html&gt; &lt;body&gt; &lt;div id=&quot;container&quot;&gt;... Main Content ...&lt;/div&gt; &lt;nav&gt; &lt;button id=&quot;open-sidebar&quot;&gt; &lt;/nav&gt; &lt;aside id=&quot;sidebar&quot;&gt; &lt;div class=&quot;content&quot;&gt;... Sidebar Content ...&lt;/div&gt; &lt;button id=&quot;close&quot;&gt;Close Sidebar&lt;/button&gt; &lt;button id=&quot;content1&quot;&gt;Show Content 1&lt;/button&gt; &lt;button id=&quot;content2&quot;&gt;Show Content 2&lt;/button&gt; &lt;button id=&quot;content3&quot;&gt;Show Content 3&lt;/button&gt; &lt;/aside&gt; &lt;/body&gt;&lt;/html&gt; By clicking on the open-sidebar button, the sidebar is opened and the action, respectively the new state, is vizualized by adding an appropriate class to the parent sidebar element. In order to make it easy for the user, the default content (Content 1) will be loaded also and its state will be marked with another class. 1&lt;aside class=&quot;sidebar open open-content1&quot;&gt; A click on of the other content buttons (let’s say Content 2), will replace the current content and the aside classes will change into: 1&lt;aside class=&quot;sidebar open open-content2&quot;&gt; Now we want to close the sidebar again, assuming that we don’t have stored the currently opened content in the JavaScript code…","keywords":"writing web app html javascript means deal classes dom elements order visualize state pitfalls aware regard removal assuming open kind sidebar container buttons show content close button closes code 123456789101112131415161718&lthtml&gt &ltbody&gt &ltdiv id=&quotcontainer&quot&gt main &lt/div&gt &ltnav&gt &ltbutton id=&quotopen-sidebar&quot&gt &lt/nav&gt &ltaside id=&quotsidebar&quot&gt class=&quotcontent&quot&gt id=&quotclose&quot&gtclose sidebar&lt/button&gt id=&quotcontent1&quot&gtshow 1&lt/button&gt id=&quotcontent2&quot&gtshow 2&lt/button&gt id=&quotcontent3&quot&gtshow 3&lt/button&gt &lt/aside&gt &lt/body&gt&lt/html&gt clicking open-sidebar opened action vizualized adding class parent element make easy user default loaded marked 1&ltaside class=&quotsidebar open-content1&quot&gt click lets replace current change open-content2&quot&gt dont stored code…","text":"Writing a Web App with HTML and JavaScript means you deal with several classes on your DOM elements in order to visualize state changes. And there are some pitfalls to be aware of with regard to removal. Assuming you want to open some kind of sidebar above a container. In this sidebar you have several buttons to show different content via JavaScript and a close button, which closes the sidebar again. You HTML code maybe looks like this: 123456789101112131415161718&lt;html&gt; &lt;body&gt; &lt;div id=&quot;container&quot;&gt;... Main Content ...&lt;/div&gt; &lt;nav&gt; &lt;button id=&quot;open-sidebar&quot;&gt; &lt;/nav&gt; &lt;aside id=&quot;sidebar&quot;&gt; &lt;div class=&quot;content&quot;&gt;... Sidebar Content ...&lt;/div&gt; &lt;button id=&quot;close&quot;&gt;Close Sidebar&lt;/button&gt; &lt;button id=&quot;content1&quot;&gt;Show Content 1&lt;/button&gt; &lt;button id=&quot;content2&quot;&gt;Show Content 2&lt;/button&gt; &lt;button id=&quot;content3&quot;&gt;Show Content 3&lt;/button&gt; &lt;/aside&gt; &lt;/body&gt;&lt;/html&gt; By clicking on the open-sidebar button, the sidebar is opened and the action, respectively the new state, is vizualized by adding an appropriate class to the parent sidebar element. In order to make it easy for the user, the default content (Content 1) will be loaded also and its state will be marked with another class. 1&lt;aside class=&quot;sidebar open open-content1&quot;&gt; A click on of the other content buttons (let’s say Content 2), will replace the current content and the aside classes will change into: 1&lt;aside class=&quot;sidebar open open-content2&quot;&gt; Now we want to close the sidebar again, assuming that we don’t have stored the currently opened content in the JavaScript code… What we have to do, is to iterate over all classes of aside and remove those which starts with open: 12345678910111213141516let sidebar = document.getElementById(&quot;sidebar&quot;);for (let i = 0; i &lt; sidebar.classList.length; i++) &#123; let value = sidebar.classList[i]; if (value.startsWith(&quot;open&quot;)) &#123; sidebar.classList.remove(value); &#125;&#125;//orlet sidebar = document.getElementById(&quot;sidebar&quot;);sidebar.classList.forEach(function(value)&#123; if(value.includes(&quot;open&quot;)) &#123; sidebar.classList.remove(value); &#125;;&#125;); Both approaches have a pitfall: when the first class, starting with open, is removed from the list, the length of the classList array changes immediatly and we won’t reach the last class in the list … ! The solution is to find and remove all appropriate classes at once, for example by using RegEx and a reusable helper function: 12345678910function removeClassByPrefix(el, prefix) &#123; let pattern = &#x27;(&#x27; + prefix + &#x27;(\\\\s|(-)?(\\\\w*)(\\\\s)?)).*?&#x27;; var regEx = new RegExp(pattern, &#x27;g&#x27;); el.className = el.className.replace(regEx, &#x27;&#x27;);&#125;//...let sidebar = document.getElementById(&quot;sidebar&quot;);removeClassByPrefix(sidebar, &quot;open&quot;); Update, 24 Jan 2021The first posted RegEx pattern didn’t worked properly, because it has found the prefix only and not the whole word, so I have updated the pattern. You can try it out at RegExr.com - Remove Class By Prefix.","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://kiko.io/categories/JavaScript/"}],"tags":[{"name":"DOM","slug":"DOM","permalink":"https://kiko.io/tags/DOM/"}]},{"title":"Use and manage multiple Node.js versions on Windows 10","subtitle":null,"date":"2021-01-08","updated":"2021-05-17","path":"post/Use-and-manage-multiple-Node-js-versions-on-Windows-10/","permalink":"https://kiko.io/post/Use-and-manage-multiple-Node-js-versions-on-Windows-10/","excerpt":"For a new project I needed to have Node 14 running on my Windows 10 machine, so installation was done quickly via downloading and running the setup file. A short time later I wanted to write a new blog post here on kiko.io, which depends on the Node.js based static site generator Hexo … and ran into several problems. First of all my hero image processing script (see Automatic Header Images in Hexo) returned an exception. The script uses hexo-fs and the problem is known quite some time, according to this Github issue. The guys recommend to downgrade to an older version of Node.js … :( Ok … I needed a solution to install multiple Node.js versions and switch between them, depending on which project I want to work on … and there is one: nvm-windows by Corey Butler!","keywords":"project needed node running windows machine installation quickly downloading setup file short time wanted write blog post kikoio depends nodejs based static site generator hexo … ran problems hero image processing script automatic header images returned exception hexo-fs problem github issue guys recommend downgrade older version solution install multiple versions switch depending work nvm-windows corey butler","text":"For a new project I needed to have Node 14 running on my Windows 10 machine, so installation was done quickly via downloading and running the setup file. A short time later I wanted to write a new blog post here on kiko.io, which depends on the Node.js based static site generator Hexo … and ran into several problems. First of all my hero image processing script (see Automatic Header Images in Hexo) returned an exception. The script uses hexo-fs and the problem is known quite some time, according to this Github issue. The guys recommend to downgrade to an older version of Node.js … :( Ok … I needed a solution to install multiple Node.js versions and switch between them, depending on which project I want to work on … and there is one: nvm-windows by Corey Butler! This Node.js Version Manager for Windows is working similar to the often mentioned n and nvm, which support Linux and Mac only. The latest release of nvm-windows can be downloaded here. The setup is pretty straight forward and asks you at the very end, if the currently installed Node.js version should be managed by it. Confirmed… There are just a few commands to know and to run in the command line: List available Node.js versions 1nvm list available Install needed Node.js version 1nvm install &lt;version&gt; Switch to particular Node.js version 1nvm use &lt;version&gt; List all installed Node.js versions 1nvm ls In case you have Node.js version dependend utilities installed globally, you need to run npm install -g after switch. More Info Github: coreybutler/nvm-windowsMicrosoft Docs: Set up your Node.js development environment directly on Windows","categories":[{"name":"Tools","slug":"Tools","permalink":"https://kiko.io/categories/Tools/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://kiko.io/tags/Hexo/"},{"name":"Windows","slug":"Windows","permalink":"https://kiko.io/tags/Windows/"},{"name":"Node.js","slug":"Node-js","permalink":"https://kiko.io/tags/Node-js/"}]},{"title":"How to prevent duplicate events","subtitle":null,"date":"2021-01-07","updated":"2021-05-17","path":"post/How-to-prevent-duplicate-events/","permalink":"https://kiko.io/post/How-to-prevent-duplicate-events/","excerpt":"I’m working on a new web app that contains a sliding out panel with some additional information on the selected element. This panel can be closed by the user via the ESC key. The implementation on initializing the panel seems very straight forward: 1234567891011class Panel() &#123; init() &#123; document.addEventListener(&quot;keydown&quot;, function(event) &#123; if(event.key === &quot;Escape&quot;)&#123; //close the panel &#125; &#125;); &#125;&#125; Problem is: the panel, which is part of the basic HTML, will be initialized with its content and functionality in a ES6 class. So … on every init, another event listener is added. You can easily figure that out, by calling getEventListeners(document) in the Chrome DevTools:","keywords":"im working web app sliding panel additional information selected element closed user esc key implementation initializing straight forward 1234567891011class &#123 init documentaddeventlistener&quotkeydown&quot functionevent ifeventkey === &quotescape&quot&#123 //close &#125 &#125&#125 problem part basic html initialized content functionality es6 class … event listener added easily figure calling geteventlistenersdocument chrome devtools","text":"I’m working on a new web app that contains a sliding out panel with some additional information on the selected element. This panel can be closed by the user via the ESC key. The implementation on initializing the panel seems very straight forward: 1234567891011class Panel() &#123; init() &#123; document.addEventListener(&quot;keydown&quot;, function(event) &#123; if(event.key === &quot;Escape&quot;)&#123; //close the panel &#125; &#125;); &#125;&#125; Problem is: the panel, which is part of the basic HTML, will be initialized with its content and functionality in a ES6 class. So … on every init, another event listener is added. You can easily figure that out, by calling getEventListeners(document) in the Chrome DevTools: As there is no way in JS to find and replace the event which was previously added, we have to remove the existing event by using removeEventListener and add it again. Most important parameter on removing is the instance of the event handler, which was used the add the event previously. 12345678910111213class Panel() &#123; init() &#123; function onEscapeKey (event) &#123; if(event.key === &quot;Escape&quot;)&#123; //close the panel &#125; &#125; document.removeEventListener(&quot;keydown&quot;, onEscapeKey); document.addEventListener(&quot;keydown&quot;, onEscapeKey); &#125;&#125; But … as the handler onEscapeKey is defined in a class, every time a new instance of the class is created, the handler will be not the same as the previous one! We have to store the event handler globally… 12345678910111213class Panel() &#123; init() &#123; document.removeEventListener(&quot;keydown&quot;, window.panelEscapeKeyHandler); window.panelEscapeKeyHandler = function onEscapeKey(event) &#123; if(event.key === &quot;Escape&quot;)&#123; //close the panel &#125; &#125;; document.addEventListener(&quot;keydown&quot;, window.panelEscapeKeyHandler); &#125;&#125; Works!","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://kiko.io/categories/JavaScript/"}],"tags":[{"name":"Events","slug":"Events","permalink":"https://kiko.io/tags/Events/"}]},{"title":"Utilize a repository of reusable ES6 template literals","subtitle":null,"date":"2021-01-03","updated":"2021-05-17","path":"post/Utilize-a-repository-of-reusable-ES6-template-literals/","permalink":"https://kiko.io/post/Utilize-a-repository-of-reusable-ES6-template-literals/","excerpt":"The Template Literals introduced with ES6 are very useful to deal with multiline strings, because they support embedded expressions. Gone are the days of endless string concatination or replacing variables in a string by using RegEx. Instead of… 12345678var url = ...var file = ...var template = &#x27;&lt;div class=&quot;photo&quot;&gt;&#x27; + &#x27;&lt;a href=&quot;&#x27; + url + &quot;&#x27; + &#x27;style=&quot;background-image: url(&#x27; + file + &#x27;)&quot;&lt;/a&gt;&#x27; + &#x27;&lt;/div&gt;&#x27; … you can write: 123456789var url = ...var file = ...var template = ` &lt;div class=&quot;photo&quot;&gt; &lt;a href=&quot;$&#123;url&#125;/&quot; style=&quot;background-image: url($&#123;file&#125;);&quot;&gt;&lt;/a&gt; &lt;/div&gt;`, It’s much cleaner and easier to handle, as you can copy your needed HTML right into your code and surround it by backtick (!) characters. Insert your variable placeholders (expressions), indicated by a dollar sign and curly braces, and you are done. But there is one “restriction”, you have to be aware of: the interpolation (substitution of the expressions) is done at declaration time and not at runtime. You can’t define your literals seperatly, take one and make your substitution as you need it, like you would do with Handlebars or other templating engines. Therefore the name template literals is a bit misleading. But … there is a way to achieve this anyway…","keywords":"template literals introduced es6 deal multiline strings support embedded expressions days endless string concatination replacing variables regex of… 12345678var url = var file &#x27&ltdiv class=&quotphoto&quot&gt&#x27 + &#x27&lta href=&quot&#x27 &quot&#x27 &#x27style=&quotbackground-image url&#x27 &#x27&quot&lt/a&gt&#x27 &#x27&lt/div&gt&#x27 … write 123456789var ` &ltdiv class=&quotphoto&quot&gt &lta href=&quot$&#123url&#125/&quot style=&quotbackground-image url$&#123file&#125&quot&gt&lt/a&gt &lt/div&gt` cleaner easier handle copy needed html code surround backtick characters insert variable placeholders dollar sign curly braces restriction aware interpolation substitution declaration time runtime define seperatly make handlebars templating engines bit misleading achieve anyway…","text":"The Template Literals introduced with ES6 are very useful to deal with multiline strings, because they support embedded expressions. Gone are the days of endless string concatination or replacing variables in a string by using RegEx. Instead of… 12345678var url = ...var file = ...var template = &#x27;&lt;div class=&quot;photo&quot;&gt;&#x27; + &#x27;&lt;a href=&quot;&#x27; + url + &quot;&#x27; + &#x27;style=&quot;background-image: url(&#x27; + file + &#x27;)&quot;&lt;/a&gt;&#x27; + &#x27;&lt;/div&gt;&#x27; … you can write: 123456789var url = ...var file = ...var template = ` &lt;div class=&quot;photo&quot;&gt; &lt;a href=&quot;$&#123;url&#125;/&quot; style=&quot;background-image: url($&#123;file&#125;);&quot;&gt;&lt;/a&gt; &lt;/div&gt;`, It’s much cleaner and easier to handle, as you can copy your needed HTML right into your code and surround it by backtick (!) characters. Insert your variable placeholders (expressions), indicated by a dollar sign and curly braces, and you are done. But there is one “restriction”, you have to be aware of: the interpolation (substitution of the expressions) is done at declaration time and not at runtime. You can’t define your literals seperatly, take one and make your substitution as you need it, like you would do with Handlebars or other templating engines. Therefore the name template literals is a bit misleading. But … there is a way to achieve this anyway… Tagged TemplatesBeside Template Literals, ES6 introduced Tagged Templates (exact: Tagged Template Literals). These tags are functions, which allows you to parse a Template Literal. Definition is like this: 123function myTag(literals, ...expressions) &#123; //do the substitution and return a string&#125; You can use these tags by prefixing you literal: 1myTag`Hello $&#123;firstName&#125; $&#123;lastName&#125;!` Using Tagged Templates to build a template repository would mean, you have to write one tag function for every template … doable, but time consuming. Dynamic Tag FunctionTo avoid this, we can write a universal tag function, which utilizes the Function constructor, to create the tag function dynamically: 12345678function fillTemplate(templateString, templateVars) &#123; var func = new Function( ...Object.keys(templateVars), &quot;return `&quot; + templateString + &quot;`;&quot;) return func(...Object.values(templateVars));&#125; Don’t use this approach on user inputs as expressions, to avoid XSS! Let’s see an example…Given is a tiny web app with the following structure: index.html123456789101112&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;title&gt;Reusable ES6 template literals&lt;/title&gt; &lt;meta charset=&quot;UTF-8&quot; /&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;/src/style.css&quot;&gt; &lt;/head&gt; &lt;body&gt; &lt;main id=&quot;main&quot;&gt;&lt;/main&gt; &lt;script src=&quot;src/index.js&quot;&gt;&lt;/script&gt; &lt;/body&gt;&lt;/html&gt; index.js12345import &#123; App &#125; from &quot;./app.js&quot;;const app = new App();app.init(); app.js123456class App &#123; init() &#123; //do something &#125;&#125;export &#123; App &#125;; What we want to do now, is to load some images into the main element, by using a more or less complex element structure: 1234&lt;div class=&quot;photo&quot;&gt; &lt;a href=&quot;&lt;!-- Url to view the photo --&gt;&quot; style=&quot;background-image: url(&lt;!-- Url of the photo file --&gt;);&quot;&gt;&lt;/a&gt;&lt;/div&gt; To separate our templates from the main code, we create a template module, which contains the dynamic tag function from above and a photo template we want to use in our app template.js12345678910111213141516171819202122232425class Templates &#123; //Template photo(data) &#123; return this.fillTemplate( ` &lt;div class=&quot;photo&quot;&gt; &lt;a href=&quot;$&#123;data.url&#125;/&quot; style=&quot;background-image: url($&#123;data.file&#125;);&quot;&gt;&lt;/a&gt; &lt;/div&gt; `, data ); &#125; //Dynamic Tag Function fillTemplate(templateString, templateVars) &#123; var func = new Function(...Object.keys(templateVars), &quot;return `&quot; + templateString + &quot;`;&quot; ); return func(...Object.values(templateVars)); &#125; &#125;export &#123; Templates &#125;; The template retrieves a data object, with the values of the defined expressions, and calls the dynamic tag function on the literal template. This we can use now in our app code: app.js12345678910111213141516171819202122//Import Template moduleimport &#123; Templates &#125; from &quot;./templates.js&quot;;class App &#123; init() &#123; //Initialize Templates this._templates = new Templates(); //Insert photo into MAIN element let main = document.getElementById(&quot;main&quot;); main.insertAdjacentHTML( &quot;beforeend&quot;, this._templates.photo(&#123; file: &quot;my-photo.jpg&quot;, url: &quot;https://link-to-my.photo.com&quot; &#125;) ); &#125;&#125;export &#123; App &#125;; See it live at codesandbox.io. More Info Stackoverflow: Can ES6 template literals be substituted at runtime (or reused)?Github/Adelphos: ES6-Reuseable-Template","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://kiko.io/categories/JavaScript/"}],"tags":[{"name":"ES6","slug":"ES6","permalink":"https://kiko.io/tags/ES6/"},{"name":"Templating","slug":"Templating","permalink":"https://kiko.io/tags/Templating/"}]},{"title":"Discoveries #5","subtitle":null,"series":"Discoveries","date":"2020-12-19","updated":"2021-05-17","path":"post/Discoveries-5/","permalink":"https://kiko.io/post/Discoveries-5/","excerpt":"In this episode of the Discoveries (almost) everything is about images and the web. There are so many pitfalls to do it wrong, but many more possibilities to do it right, especially with these resources I found in the last few weeks. ASP.NET Core Image Resizing MiddlewareBest way to lazy load images for maximum performanceimage orientation on the webcosha - Colorful shadows for your imagesparax-bg - Parallax Backgroundsparax - Parallax ElementsLuminous LightboxTiny-Swiper - Image Carousel","keywords":"episode discoveries images web pitfalls wrong possibilities resources found weeks aspnet core image resizing middlewarebest lazy load maximum performanceimage orientation webcosha colorful shadows imagesparax-bg parallax backgroundsparax elementsluminous lightboxtiny-swiper carousel","text":"In this episode of the Discoveries (almost) everything is about images and the web. There are so many pitfalls to do it wrong, but many more possibilities to do it right, especially with these resources I found in the last few weeks. ASP.NET Core Image Resizing MiddlewareBest way to lazy load images for maximum performanceimage orientation on the webcosha - Colorful shadows for your imagesparax-bg - Parallax Backgroundsparax - Parallax ElementsLuminous LightboxTiny-Swiper - Image Carousel ASP.NET Core Image Resizing Middleware by Jeremy Paddison&nbsp;https://www.paddo.org/asp-net-core-image-resizing-middleware/ Jeremy shows in his blog post the possibilities of dealing with images in ASP.NET Core in terms of format, orientation and quality. A must read for every .NET developer. Best way to lazy load images for maximum performance by Adrian Bece&nbsp;https://blog.prototyp.digital/best-way-to-lazy-load-images-for-maximum-performance/ Delivering images on the web is difficult due to different devices and bandwidths. Adrian shows how to achieve a maximum of performance on lazy loading images via native JavaScript. image orientation on the web by Michael Scharnagl&nbsp;https://justmarkup.com/articles/2019-10-21-image-orientation/ Automatic uploading and viewing images fails sometimes on portrait shots, because of misintrepretated orientation information by the different browsers. Michael adresses this problem with a Node.JS solution. cosha - Colorful shadows for your images by Robin Löffel&nbsp;https://github.com/robinloeffel/cosha Adding a blurry shadow under an image to let the photo stand out from the background, is a nice technique to draw the users attention. Robin goes one step further with his JavaScript solution on colorful shadows, which represents the colors of the image. parax-bg - Parallax Backgrounds by Tobias Buschor&nbsp;https://github.com/nuxodin/parax-bg Parallaxing backgrounds are fairly attracting and so it is with Tobias’ approach on that for developers: easy to use and fast. parax - Parallax Elements by Tobias Buschor&nbsp;https://github.com/nuxodin/parax If you just want to parallax some elements instead of backgrounds, Tobias has also a solution for that: Parax. Luminous Lightbox by imgix&nbsp;https://github.com/imgix/luminous There are tons of image lightboxes out there and here is another one: Luminous from imgx. It is my favourite and I use it in this blog. Its lightweight and easy to use, for the user and the developer. A pearl… Tiny-Swiper - Image Carousel by Joe Harris&nbsp;https://tiny-swiper.joe223.com/docs/demo/ The same applies to image carousels, but Tiny-Swiper is here outstanding too. It is simple, but powerful and well documented. A must use…","categories":[{"name":"Discoveries","slug":"Discoveries","permalink":"https://kiko.io/categories/Discoveries/"}],"tags":[{"name":"Great Finds","slug":"Great-Finds","permalink":"https://kiko.io/tags/Great-Finds/"}]},{"title":"Indian Presets for Lightroom","subtitle":null,"series":"Lightroom Presets","date":"2020-10-28","updated":"2021-05-17","path":"post/Indian-Presets-for-Lightroom/","permalink":"https://kiko.io/post/Indian-Presets-for-Lightroom/","excerpt":"In 2019 I was on a short, stressful business trip to Dehli, India and one night we had the opportunity to relax a bit by driving around the city and visit some beautiful places of interest. I had no gear at all, just my Sony smartphone, but it is remarkable how good this worked out.","keywords":"short stressful business trip dehli india night opportunity relax bit driving city visit beautiful places interest gear sony smartphone remarkable good worked","text":"In 2019 I was on a short, stressful business trip to Dehli, India and one night we had the opportunity to relax a bit by driving around the city and visit some beautiful places of interest. I had no gear at all, just my Sony smartphone, but it is remarkable how good this worked out. Indian Sunset var themeColor = \"#ffffff\"; if (localStorage.getItem(\"theme\") === 'dark') { themeColor = \"#222222\" } new ImageCompare(document.getElementById(\"indian-sunset-compare-1\"), { controlColor: themeColor, controlShadow: false, verticalMode: false, showLabels: true, labelOptions: { before: 'Original', after: 'Preset', onHover: true, } }).mount(); var themeColor = \"#ffffff\"; if (localStorage.getItem(\"theme\") === 'dark') { themeColor = \"#222222\" } new ImageCompare(document.getElementById(\"indian-sunset-compare-2\"), { controlColor: themeColor, controlShadow: false, verticalMode: true, showLabels: true, labelOptions: { before: 'Original', after: 'Preset', onHover: true, } }).mount(); Download Lightroom Preset Indian Sunset.xmp","categories":[{"name":"Photo-Editing","slug":"Photo-Editing","permalink":"https://kiko.io/categories/Photo-Editing/"}],"tags":[{"name":"Lightroom","slug":"Lightroom","permalink":"https://kiko.io/tags/Lightroom/"},{"name":"Presets","slug":"Presets","permalink":"https://kiko.io/tags/Presets/"}]},{"title":"Israeli Presets for Lightroom","subtitle":null,"series":"Lightroom Presets","date":"2020-10-27","updated":"2021-05-17","path":"post/Israeli-Presets-for-Lightroom/","permalink":"https://kiko.io/post/Israeli-Presets-for-Lightroom/","excerpt":"I’m a travel and event photo enthusiast, which means I’m shooting a lot of photographs on vacation or at special events only a few times a year. After I’m back home and start the image processing, I develop a particular look for my images of the past vacation or event. This has a lot to do with my mood and is very intuitive. Not all images are the same in terms of composition and light and so I create usually 3 or 4 different presets each time during image processing. Back in 2019, I was traveling around Israel, a fascinating country where almost every wall has a story to tell and I was listening through my viewfinder. Here I want to share the presets with you…","keywords":"im travel event photo enthusiast means shooting lot photographs vacation special events times year back home start image processing develop images past mood intuitive terms composition light create presets time traveling israel fascinating country wall story listening viewfinder share you…","text":"I’m a travel and event photo enthusiast, which means I’m shooting a lot of photographs on vacation or at special events only a few times a year. After I’m back home and start the image processing, I develop a particular look for my images of the past vacation or event. This has a lot to do with my mood and is very intuitive. Not all images are the same in terms of composition and light and so I create usually 3 or 4 different presets each time during image processing. Back in 2019, I was traveling around Israel, a fascinating country where almost every wall has a story to tell and I was listening through my viewfinder. Here I want to share the presets with you… Israeli ColorsThe mediaval walls of Jaffa glow in an inimitable way and brings other colors to shine the same way. var themeColor = \"#ffffff\"; if (localStorage.getItem(\"theme\") === 'dark') { themeColor = \"#222222\" } new ImageCompare(document.getElementById(\"israeli-colors-compare\"), { controlColor: themeColor, controlShadow: false, verticalMode: false, showLabels: true, labelOptions: { before: 'Original', after: 'Preset', onHover: true, } }).mount(); Download Lightroom Preset Israeli Colors.xmp Israeli LightsThe light in the eastern Mediterranean is stunning. The warm tone of the sand and the turquoise color of the water had to pop out. var themeColor = \"#ffffff\"; if (localStorage.getItem(\"theme\") === 'dark') { themeColor = \"#222222\" } new ImageCompare(document.getElementById(\"israeli-lights-compare\"), { controlColor: themeColor, controlShadow: false, verticalMode: false, showLabels: true, labelOptions: { before: 'Original', after: 'Preset', onHover: true, } }).mount(); Download Lightroom Preset Israeli Lights.xmp Israeli DramaA visit of Yad Vashem moved me a lot and this preset is a expression of that. var themeColor = \"#ffffff\"; if (localStorage.getItem(\"theme\") === 'dark') { themeColor = \"#222222\" } new ImageCompare(document.getElementById(\"israeli-drama-compare\"), { controlColor: themeColor, controlShadow: false, verticalMode: false, showLabels: true, labelOptions: { before: 'Original', after: 'Preset', onHover: true, } }).mount(); Download Lightroom Preset Israeli Drama.xmp Israeli Near BlackIf you think of the tourists away, Jerusalem takes you to another level because of its age and history and nothing fits more to that than the sepia look of old pictures. var themeColor = \"#ffffff\"; if (localStorage.getItem(\"theme\") === 'dark') { themeColor = \"#222222\" } new ImageCompare(document.getElementById(\"israeli-near-black-compare\"), { controlColor: themeColor, controlShadow: false, verticalMode: false, showLabels: true, labelOptions: { before: 'Original', after: 'Preset', onHover: true, } }).mount(); Download Lightroom Preset Israeli Near Black.xmp","categories":[{"name":"Photo-Editing","slug":"Photo-Editing","permalink":"https://kiko.io/categories/Photo-Editing/"}],"tags":[{"name":"Lightroom","slug":"Lightroom","permalink":"https://kiko.io/tags/Lightroom/"},{"name":"Presets","slug":"Presets","permalink":"https://kiko.io/tags/Presets/"}]},{"title":"Folder based publishing in Lightroom","subtitle":null,"date":"2020-10-26","updated":"2021-05-17","path":"post/Folder-based-publishing-in-Lightroom/","permalink":"https://kiko.io/post/Folder-based-publishing-in-Lightroom/","excerpt":"In all times photography was a process: First you shoot you images, then you edit them and in the third step you publish them elsewhere. Today Adobe Lightroom is a de-facto standard in photo processing, especially when you shoot RAW images. And I mean Lightroom Classic and not the new web/smartphone based software, which doesn’t come even close to the desktop application yet. I use Lightroom for all purposes after I shot my images: editing, cataloguing, managing and … publishing. On publishing Lightroom offers you two approaches: Export and Publish. While Export is mainly for creating JPG copies of edited RAW images, Publish goes one step further and gives you the ability to do “something” with your exported JPG’s, for example upload them on Flickr, Instagram, 500px or to your own web server via FTP. Major difference to Export is, that Publish keeps your images in sync. Everytime you change the source images, the defined publish services recognizes and offer you to re-publish your image. In the past years I tried a lot of Lightroom plugins for publishing on several platforms, but it doesn’t work out for long, because all these platforms change their API almost every year (or are stamped) and the sparely maintained 3rd party plugins break. My workflow for quite some time is to publish my photos on the hard drive, in a folder, which is synced via Dropbox with the cloud. From there I distribute them further.","keywords":"times photography process shoot images edit step publish today adobe lightroom de-facto standard photo processing raw classic web/smartphone based software doesnt close desktop application purposes shot editing cataloguing managing … publishing offers approaches export creating jpg copies edited ability exported jpgs upload flickr instagram 500px web server ftp major difference sync everytime change source defined services recognizes offer re-publish image past years lot plugins platforms work long api year stamped sparely maintained 3rd party break workflow time photos hard drive folder synced dropbox cloud distribute","text":"In all times photography was a process: First you shoot you images, then you edit them and in the third step you publish them elsewhere. Today Adobe Lightroom is a de-facto standard in photo processing, especially when you shoot RAW images. And I mean Lightroom Classic and not the new web/smartphone based software, which doesn’t come even close to the desktop application yet. I use Lightroom for all purposes after I shot my images: editing, cataloguing, managing and … publishing. On publishing Lightroom offers you two approaches: Export and Publish. While Export is mainly for creating JPG copies of edited RAW images, Publish goes one step further and gives you the ability to do “something” with your exported JPG’s, for example upload them on Flickr, Instagram, 500px or to your own web server via FTP. Major difference to Export is, that Publish keeps your images in sync. Everytime you change the source images, the defined publish services recognizes and offer you to re-publish your image. In the past years I tried a lot of Lightroom plugins for publishing on several platforms, but it doesn’t work out for long, because all these platforms change their API almost every year (or are stamped) and the sparely maintained 3rd party plugins break. My workflow for quite some time is to publish my photos on the hard drive, in a folder, which is synced via Dropbox with the cloud. From there I distribute them further. Important on this approach is, to have a coherent output folder structure in order find a particular image afterwards. I store my RAW images on an external hard drive in a structure like this: 1234&lt;Drive:\\&gt; -&gt; Fotos -&gt; &lt;Year&gt; -&gt; &lt;Year&gt;-&lt;Month&gt; &lt;Eventname&gt; First step after shooting is to copy all RAW files from the SD Card into a new subfolder of the current year. From there I import them into my Lightroom catalog. After sorting, rejecting, editing and flagging in Lightroom, I have to “export” the 4- and 5-star rated images into the cloud. There I have a slightly different structure, with a different root folder name and without the year: 123&lt;Dropbox&gt; -&gt; Photos -&gt; &lt;Year&gt;-&lt;Month&gt; &lt;Eventname&gt; With the built-in “Hard Drive” publish service of Lightroom, it is feasible to “export” the images, but not in my wanted folder structure, because it is not possible to use the sources’ folder name as output folder name by option. It has to be specified manually each time, which is not very comfortable. Plugin to the rescueJeffrey Friedl, who is in the Lightroom plugin business about a decade, offers two plugins, which can solve the problem easily: Jeffrey’s “Folder Publisher“ Lightroom PluginExports to disk in a folder hierarchy that mimics the folder hierarchy in your Lightroom catalog This one helps me not much, because my output folder would look like this: 12345&lt;Dropbox&gt; -&gt; Photos -&gt; Fotos -&gt; &lt;Year&gt; -&gt; &lt;Year&gt;-&lt;Month&gt; &lt;Eventname&gt; Jeffrey’s “Collection Publisher” Lightroom PluginExports to local disk in a folder hierarchy that mimics the collection hierarchy you build within Lightroom Besides the commonality of defining a root folder, where the files are exported to, Jeffrey’s plugin has much more options to improve the export. As the main feature, you can create collections within the plugin to define the export targets: In the options of these collections, you can set several templates (variables) to let the plugin name the export subfolder automatically: By using Smart Collections you don’t even need to drag &amp; drop your images to publish to the publish collection. Lightroom will do this auto-magically.","categories":[{"name":"Photo-Editing","slug":"Photo-Editing","permalink":"https://kiko.io/categories/Photo-Editing/"}],"tags":[{"name":"Lightroom","slug":"Lightroom","permalink":"https://kiko.io/tags/Lightroom/"},{"name":"Publishing","slug":"Publishing","permalink":"https://kiko.io/tags/Publishing/"},{"name":"Plugin","slug":"Plugin","permalink":"https://kiko.io/tags/Plugin/"}]},{"title":"Discoveries #4","subtitle":null,"series":"Discoveries","date":"2020-10-10","updated":"2021-05-17","path":"post/Discoveries-4/","permalink":"https://kiko.io/post/Discoveries-4/","excerpt":"It is so amazing how many cool stuff developers around the world are producing these days. Or they do what they always do, but I have more time to read about their smart ideas and solutions. This month I have 8 pearls for you: waitForElementTransition()Using Flexbox and text ellipsis togetherUsing Trello as a Super Simple CMSMemorize Scroll Position Across Page LoadsA free guide to HTML5 &lt;head&gt; elementsBVSelect - Vanilla JSA clock that represents the time as hex color valuesAnimate.css - Just-add-water CSS animations","keywords":"amazing cool stuff developers world producing days time read smart ideas solutions month pearls waitforelementtransitionusing flexbox text ellipsis togetherusing trello super simple cmsmemorize scroll position page loadsa free guide html5 &lthead&gt elementsbvselect vanilla jsa clock represents hex color valuesanimatecss just-add-water css animations","text":"It is so amazing how many cool stuff developers around the world are producing these days. Or they do what they always do, but I have more time to read about their smart ideas and solutions. This month I have 8 pearls for you: waitForElementTransition()Using Flexbox and text ellipsis togetherUsing Trello as a Super Simple CMSMemorize Scroll Position Across Page LoadsA free guide to HTML5 &lt;head&gt; elementsBVSelect - Vanilla JSA clock that represents the time as hex color valuesAnimate.css - Just-add-water CSS animations waitForElementTransition() by Mark Kennedy&nbsp;https://github.com/mkay581/wait-for-element-transition In these days a good UI doesn’t do without some animations or transitions and it is always advisible to use CSS for it, if possible. Marks shows us with his solution, how to wait in JavaScript for a transition to finish, before we continue to do something else in JS. Using Flexbox and text ellipsis together by Leonardo Faria&nbsp;https://leonardofaria.net/2020/07/18/using-flexbox-and-text-ellipsis-together/ In case you offer downloads with very long file names from time to time, you might use CSS’s ellipsis to cut it down. But you always loose the last three chars, the file extension. Leonardo show us, how to avoid that, by using a clever mix of ellipsis and flexbox. Using Trello as a Super Simple CMS by Phil Hawksworth&nbsp;https://css-tricks.com/using-trello-as-a-super-simple-cms As I love Trello and use it daily, among others as a reading list (see Add website to Trello card the better way), I can’t wait to try Phils approach to process Trello boards automatically. Memorize Scroll Position Across Page Loads by Chris Coyier&nbsp;https://css-tricks.com/memorize-scroll-position-across-page-loads/ Chris shows Hakim El Hattab’s trick, how to store the current scroll position and restore it when user comes back. Simple, but a gain in usability. A free guide to HTML5 &lt;head&gt; elements by Josh Buchea&nbsp;https://htmlhead.dev Doing your Web Developer job right, means you have to be aware of the META tags in your HTML. htmlhead.dev is a good reference, because it lists and describes mostly all known META tags. BVSelect - Vanilla JS by Bruno Vieira&nbsp;https://bmsvieira.github.io/BVSelect-VanillaJS There are many HTML/Javascript driven dropdowns out there. So has Bruno, but his solution don’t even looks nice, it is written in ES6, has no dependencies and is dead simple to use. A clock that represents the time as hex color values by Jamel Hammoud&nbsp;https://github.com/JamelHammoud/hextime The time is shown mostly as a six digit number … Hours, Minutes and Seconds, with a leading 0. Color Hex codes have also 6 digits and Jamel the idea to bring both together… Animate.css - Just-add-water CSS animations by Daniel Eden&nbsp;https://animate.style Daniel and his buddies offers an Stylesheet with dozens of cool and easy to use text animations.","categories":[{"name":"Discoveries","slug":"Discoveries","permalink":"https://kiko.io/categories/Discoveries/"}],"tags":[{"name":"Great Finds","slug":"Great-Finds","permalink":"https://kiko.io/tags/Great-Finds/"}]},{"title":"Implement source switch for SPA","subtitle":"Asynchronous loading of JS and CSS depending on the environment","date":"2020-10-04","updated":"2021-05-17","path":"post/Implement-source-switch-for-SPA/","permalink":"https://kiko.io/post/Implement-source-switch-for-SPA/","excerpt":"A while ago I wrote a Single Page Application (SPA) with jQuery and and decided to use some useful plugins to avoid reinventing the wheel. To keep the delivered sources small, I used the bundler Gulp, to pack all JS plugins in a single file and another one for my custom JS code. I used the same procedure with the CSS files. The SPA contained only a single HTML file in which all bundeled sources and needed HTML template blocks were included, in order to load most of the stuff while starting the app, when the users sees a GMail-like loading screen. But the whole thing had one disadvantage: Debugging for example in Chrome Dev Tool is not a joy, if the code is packed with Gulp Concat and Gulp Uglify. It would be much more convenient, if the source loading can be done depending on the environment.","keywords":"ago wrote single page application spa jquery decided plugins avoid reinventing wheel delivered sources small bundler gulp pack js file custom code procedure css files contained html bundeled needed template blocks included order load stuff starting app users sees gmail-like loading screen thing disadvantage debugging chrome dev tool joy packed concat uglify convenient source depending environment","text":"A while ago I wrote a Single Page Application (SPA) with jQuery and and decided to use some useful plugins to avoid reinventing the wheel. To keep the delivered sources small, I used the bundler Gulp, to pack all JS plugins in a single file and another one for my custom JS code. I used the same procedure with the CSS files. The SPA contained only a single HTML file in which all bundeled sources and needed HTML template blocks were included, in order to load most of the stuff while starting the app, when the users sees a GMail-like loading screen. But the whole thing had one disadvantage: Debugging for example in Chrome Dev Tool is not a joy, if the code is packed with Gulp Concat and Gulp Uglify. It would be much more convenient, if the source loading can be done depending on the environment. First step was to replace the SCRIPT and LINK tags in die index.html with a dynamic loading approach using JavaScript. Dynamic JS loadingFor some custom code it was necessary to load the plugins previously, because of dependencies. 123456789101112131415161718function addScriptAsync(url) &#123; return new Promise(function(resolve, reject) &#123; var script = document.createElement(&quot;script&quot;); script.type = &quot;text/javascript&quot;; script.src = url; script.addEventListener(&quot;load&quot;, function() &#123; resolve(script); &#125;, false); script.addEventListener(&quot;error&quot;, function() &#123; reject(script); &#125;, false); document.getElementsByTagName(&#x27;head&#x27;)[0].appendChild(script); &#125;);&#125; By returning a Promise, the calling code is able to wait for a dependent source to load: 123addScriptAsync(&quot;Build/vendor.min.js&quot;).then(function() &#123; addScriptAsync(&quot;Build/custom.min.js&quot;);&#125;); Dynamic CSS loadingLoading CSS is pretty straightforward and includes an id as parameter, in order to be able to access the style afterwards, for example when tehh user is chanhing the SPA’s theme: 12345678910function addStylesheet(url, id) &#123; var stylesheet = document.createElement(&#x27;link&#x27;); stylesheet.rel = &#x27;stylesheet&#x27;; stylesheet.type = &#x27;text/css&#x27;; stylesheet.href = url; if (id) &#123; stylesheet.setAttribute(&quot;id&quot;, id); &#125; document.getElementsByTagName(&#x27;head&#x27;)[0].appendChild(stylesheet);&#125; 12addStylesheet(&quot;Build/vendor.css&quot;);addStylesheet(&quot;Build/custom.css&quot;); Consider the environmentNow everything was set up to implement a switch, depending on whether the SPA was started locally or in production. 12345678910111213141516171819202122var _DEV = (window.location.hostname.indexOf(&quot;localhost&quot;) !== -1);addStylesheet(&quot;Build/vendor.css&quot;);if (_DEV) &#123; addStylesheet(&quot;Libraries/styles.css&quot;); addStylesheet(&quot;Libraries/helpers.css&quot;); ...&#125; else &#123; addStylesheet(&quot;Build/custom.css&quot;);&#125;addScriptAsync(&quot;Build/vendor.min.js&quot;).then(function() &#123; if (_DEV) &#123; addScriptAsync(&quot;Libraries/prototypes.js&quot;) .then(function() &#123; return addScriptAsync(&quot;Libraries/tools.js&quot;); &#125;) .then(function() &#123; return addScriptAsync(&quot;Libraries/app.js&quot;); &#125;) ... &#125; else &#123; return addScriptAsync(&quot;Build/custom.min.js&quot;); &#125;&#125;)","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://kiko.io/categories/JavaScript/"}],"tags":[{"name":"SPA","slug":"SPA","permalink":"https://kiko.io/tags/SPA/"},{"name":"Bundling","slug":"Bundling","permalink":"https://kiko.io/tags/Bundling/"}]},{"title":"Show related posts in Hexo","subtitle":null,"series":"A New Blog","date":"2020-10-03","updated":"2021-05-17","path":"post/Show-related-posts-in-Hexo/","permalink":"https://kiko.io/post/Show-related-posts-in-Hexo/","excerpt":"It is always nice to point the readers of your blog’s articles to related posts, they might be interested in. They stay a little longer to understand what you have to offer and increases the likelihood that they become loyal readers, followers or subscribers. Related posts has become a standard on delivering news and posts. In the default Hexo theme Landscape, on which this blog is based, there is no such function built in, but as the Hexo community is very busy, there are some plugins you can use.","keywords":"nice point readers blogs articles related posts interested stay longer understand offer increases likelihood loyal followers subscribers standard delivering news default hexo theme landscape blog based function built community busy plugins","text":"It is always nice to point the readers of your blog’s articles to related posts, they might be interested in. They stay a little longer to understand what you have to offer and increases the likelihood that they become loyal readers, followers or subscribers. Related posts has become a standard on delivering news and posts. In the default Hexo theme Landscape, on which this blog is based, there is no such function built in, but as the Hexo community is very busy, there are some plugins you can use. Plugin: hexo-list-related-postsThis plugin, available at GitHub is pretty lean and generates a list of links to related posts based on tags. It just counts how often a tag is occuring and shows a list of related posts either by count descending or randomly. Advantage: Easy and fast Disadvantage: Necessity of a sophisticated tag system Technical approach Plugin: hexo-related-postsSergey Zwezdin made much more effort in his solution. The plugins depends on statistic methodologies like Stemming and TF/IDF, provided by the Node library Natural. It has plenty setting options like weighting and reserved words in order to optimize results. Advantages: Much better results Disadvantages: Huge installation, because of many dependent Node modules Necessity of maintaining reserved words Technical approach Manually CuratedOne point, that no technical solution can achieve is: you can guide the reader through your blog, by pointing out posts, which doesn’t really belong to the topic, but tries to give him a wider perspective on your thoughts or work. This is only possible, if you link the related posts manually. Here is a way to implement the requirements… The right place to store related posts is in the Frontmatter of your article. Create a list below the keyword related and take the slug (name of the post file) of the posts you want to show below the article as entries: 12345title: My New fancy Postrelated: - my-other-post - one-of-my-first-posts - yet-another-post In your article.ejs add a new partial called related to the place where it should be shown under the content of the actual article: 123456789101112131415161718192021&lt;article id=&quot;&lt;%= post.layout %&gt;-&lt;%= post.slug %&gt;&quot; class=&quot;article article-type-&lt;%= post.layout %&gt;&quot; itemscope itemprop=&quot;blogPost&quot;&gt; ... &lt;div class=&quot;article-inner&quot;&gt; &lt;%- post.content %&gt; &lt;/div&gt; &lt;% if (!index)&#123; %&gt; &lt;!-- NEW RELATED PARTIAL --&gt; &lt;%- partial(&#x27;post/related&#x27;) %&gt; &lt;%- partial(&#x27;post/comments&#x27;) %&gt; &lt;%- partial(&#x27;post/nav&#x27;) %&gt; &lt;% &#125; %&gt;&lt;/article&gt; In the folder themes/landscape/layout/_partial/post, where all partials are stored which belongs to posts, create the new partial file: related.ejs12345678910111213141516171819202122232425&lt;% if (post.related &amp;&amp; post.related.length)&#123; %&gt; &lt;div class=&quot;article-related&quot;&gt; &lt;h2&gt;Related&lt;/h2&gt; &lt;div class=&quot;archives&quot;&gt; &lt;!-- Loop through the Frontmatter list of RELATED posts --&gt; &lt;% post.related.forEach(function(item) &#123; %&gt; &lt;!--Determine the post(s) with the given slug --&gt; &lt;% var posts = site.posts.filter(function(post) &#123; return post.slug.toLowerCase() === item.toLowerCase(); &#125;); %&gt; &lt;!-- Loop through the post(s) and render the archive panel --&gt; &lt;% posts.each(function(post) &#123; %&gt; &lt;%- partial(&#x27;../archive-post&#x27;, &#123; post: post, show_link: true &#125;) %&gt; &lt;% &#125;); %&gt; &lt;% &#125;); %&gt; &lt;/div&gt; &lt;/div&gt;&lt;% &#125; %&gt; (Remove the comments, because they doesn’t belong to EJS) In this partial we loop through the Frontmatter list of related posts, determine the post by the given slug and render an archive panel for each post. The list site.posts should always contain a slug just once, therefore getting an array of posts and looping is just a precuation. What you are getting you can see below…","categories":[{"name":"Tools","slug":"Tools","permalink":"https://kiko.io/categories/Tools/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://kiko.io/tags/Hexo/"},{"name":"Blogging","slug":"Blogging","permalink":"https://kiko.io/tags/Blogging/"}]},{"title":"Discoveries #3 - Tutorials","subtitle":null,"series":"Discoveries","date":"2020-09-29","updated":"2021-05-17","path":"post/Discoveries-3-Tutorials/","permalink":"https://kiko.io/post/Discoveries-3-Tutorials/","excerpt":"Some articles I stumble upon in my daily routine of reading news and blogs are diving very deep in a certain topic, especially if they are describing the basics of techniques I use every day. All of the following reading tips are of the type “ahh, that’s why this works like that” or “uuh, I just scatch on the surface on that”. Take your time and read the articles in detail. We all never stop learning and it’s a pleasure to do so… CSS CSS Viewport UnitsGrid for layout, Flexbox for componentsHow CSS Perspective WorksLinearly Scale font-size with CSS clamp() Based on the ViewportLearn CSS Centering JavaScript The Flavors of Object-Oriented Programming (in JavaScript)Understanding the Event Loop, Callbacks, Promises, and Async/Await in JavaScript","keywords":"articles stumble daily routine reading news blogs diving deep topic describing basics techniques day tips type ahh works uuh scatch surface time read detail stop learning pleasure so… css viewport unitsgrid layout flexbox componentshow perspective workslinearly scale font-size clamp based viewportlearn centering javascript flavors object-oriented programming javascriptunderstanding event loop callbacks promises async/await","text":"Some articles I stumble upon in my daily routine of reading news and blogs are diving very deep in a certain topic, especially if they are describing the basics of techniques I use every day. All of the following reading tips are of the type “ahh, that’s why this works like that” or “uuh, I just scatch on the surface on that”. Take your time and read the articles in detail. We all never stop learning and it’s a pleasure to do so… CSS CSS Viewport UnitsGrid for layout, Flexbox for componentsHow CSS Perspective WorksLinearly Scale font-size with CSS clamp() Based on the ViewportLearn CSS Centering JavaScript The Flavors of Object-Oriented Programming (in JavaScript)Understanding the Event Loop, Callbacks, Promises, and Async/Await in JavaScript CSS Viewport Units by Ahmad Shadeed&nbsp;https://ishadeed.com/article/viewport-units Ahmad is a true master of CSS and describes complex topics in an understandable way. Here he deals with the different Viewport Units: how they are calculated and how to use them properly. Grid for layout, Flexbox for components by Ahmad Shadeed&nbsp;https://ishadeed.com/article/grid-layout-flexbox-components Another one from Ahmad. Here he talks about the usage of Grid and/or Flexbox. Both techniques have their purpose and he shows when to use this or that. How CSS Perspective Works by Amit Sheen&nbsp;https://css-tricks.com/how-css-perspective-works Amit shows in this tutorial how to deal with perspective on using transform and animation in CSS. A true eye opener… Linearly Scale font-size with CSS clamp() Based on the Viewport by Pedro Rodriguez&nbsp;https://css-tricks.com/linearly-scale-font-size-with-css-clamp-based-on-the-viewport Few of us really deal with repsonsive typography. We fiddle arounf with line-height and font-size to achieve an B+ effect. Pedro shows how do it right with clamp() … and it is amazing. Centering in CSS by Ahmad Shadeed&nbsp;https://ishadeed.com/article/learn-css-centering Ahmad again (I told you, he is amazing). In this tutorial he goes through every technique to center stuff in CSS. Never again google ‘center text flexbox’… The Flavors of Object-Oriented Programming (in JavaScript) by Zell Liew&nbsp;https://css-tricks.com/the-flavors-of-object-oriented-programming-in-javascript There are different methods to ‘organize’ your JavaScript code. Zell shows the possibilities and pitfalls of techniques like Constructor Functions, Classes, Factory Functions and OLOO. Huge post, but couldn’t stop reading… Understanding the Event Loop, Callbacks, Promises, and Async/Await in JavaScript by Tania Rascia&nbsp;https://www-digitalocean-com.cdn.ampproject.org/v/s/www.digitalocean.com/community/tutorials/understanding-the-event-loop-callbacks-promises-and-async-await-in-javascript.amp?usqp=mq331AQFKAGwASA%3D&amp_js_v=0.1 Tanias deep knowledge of asynchronous JavaScript techniques and its basics is as long as this tutorials title and its Url. A must-read.","categories":[{"name":"Discoveries","slug":"Discoveries","permalink":"https://kiko.io/categories/Discoveries/"}],"tags":[{"name":"Great Finds","slug":"Great-Finds","permalink":"https://kiko.io/tags/Great-Finds/"}]},{"title":"Device Class Detection in JavaScript","subtitle":"The unusual way by using CSS Media Queries","date":"2020-09-28","updated":"2021-05-17","path":"post/Device-Class-Detection-in-JavaScript/","permalink":"https://kiko.io/post/Device-Class-Detection-in-JavaScript/","excerpt":"In some occasions it is necessary to know which device a user is using while writing JavaScript Web Apps. Should be nothing regarding layout, because for this we have CSS Media Queries. Somewhere around 2011 W3C introduced matchMedia(), which returns a MediaQueryList object that can be used to detemnine if the document matches the media query string. The using is pretty straightforward and feels a bit like RegEx matching in JS: 1234const mediaQuery = window.matchMedia(&#x27;(min-width: 1025px)&#x27;)if (mediaQuery.matches) &#123; // do something... &#125; If you are interested in this API, you will find good introductions to the topic here, here and here (German). One point of criticism on this pure JS approach can be, that you have to maintain the breakpoints in addition to CSS … but why not use these existing breakpoints in JS?","keywords":"occasions device user writing javascript web apps layout css media queries w3c introduced matchmedia returns mediaquerylist object detemnine document matches query string pretty straightforward feels bit regex matching js 1234const mediaquery = windowmatchmedia&#x27min-width 1025px&#x27if mediaquerymatches &#123 // &#125 interested api find good introductions topic german point criticism pure approach maintain breakpoints addition … existing","text":"In some occasions it is necessary to know which device a user is using while writing JavaScript Web Apps. Should be nothing regarding layout, because for this we have CSS Media Queries. Somewhere around 2011 W3C introduced matchMedia(), which returns a MediaQueryList object that can be used to detemnine if the document matches the media query string. The using is pretty straightforward and feels a bit like RegEx matching in JS: 1234const mediaQuery = window.matchMedia(&#x27;(min-width: 1025px)&#x27;)if (mediaQuery.matches) &#123; // do something... &#125; If you are interested in this API, you will find good introductions to the topic here, here and here (German). One point of criticism on this pure JS approach can be, that you have to maintain the breakpoints in addition to CSS … but why not use these existing breakpoints in JS? If you implement a feature that is based on the different device classes, you don’t have to determine the current class with dozens of lines of JavaScript code, if you just can ask the DOM. The CSS/JS Breakpoint HackFor this approach, we take advantage of the fact, that CSS can be used to define not only styles, but also content. We always use it, when showing an icon by using a symbol font like FontAwesome: 1234my-fancy-icon::before &#123; font-family: FontAwesome5Solid; content: &quot;\\f186&quot;;&#125; Mixed with a @media rule, we can “inject” the needed device value into the DOM, for example into the BODY tag, but you can take whatever you want: 12345@media (min-width: 1025px) &#123; body:before &#123; content: &quot;DESKTOP&quot;; &#125;&#125; Just one line more in the masses of CSS code to make a Web App responsive, but with this one you can do without many lines of JS. Now you can read out this value via JavaScript by getting the styles of the tag and get the injected content: 12var style = window.getComputedStyle(document.querySelector(&quot;body&quot;), &quot;:before&quot;);var breakpoint = style.getPropertyValue(&quot;content&quot;).replace(/\\&quot;/g, &quot;&quot;); It is advisable to embed this request into an event listener of DOMContentLoaded, because the rule has to be set, before you can access it. See a simple working pen:","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://kiko.io/categories/JavaScript/"}],"tags":[{"name":"CSS","slug":"CSS","permalink":"https://kiko.io/tags/CSS/"},{"name":"Browser","slug":"Browser","permalink":"https://kiko.io/tags/Browser/"},{"name":"MediaQuery","slug":"MediaQuery","permalink":"https://kiko.io/tags/MediaQuery/"}]},{"title":"404 Page in Hexo for GitHub Pages","subtitle":"Provide an error page automatically when resource not found","series":"A New Blog","date":"2020-09-23","updated":"2021-05-16","path":"post/404-Page-in-Hexo-for-GitHub-Pages/","permalink":"https://kiko.io/post/404-Page-in-Hexo-for-GitHub-Pages/","excerpt":"As this blog is a static one, generated by Hexo and hostet at GitHub, the page which was shown, when a user enters an Url which points to nowhere, was the default GitHub 404 page.","keywords":"blog static generated hexo hostet github page shown user enters url points default","text":"As this blog is a static one, generated by Hexo and hostet at GitHub, the page which was shown, when a user enters an Url which points to nowhere, was the default GitHub 404 page. Not optimal and should be solved by an own Hexo page, because GitHub Pages allows you to deliver a custom 404 page by creating simply a 404.html in the root of the website. As you can create separate pages in Hexo, this is done quickly by: 1hexo new page &quot;404&quot; It generates a new folder named 404 in your source folder, where a index.md is placed. In this file you can enter the text as Markdown you want to show to the user, in case of a 404 error (page not found) occurs. On generating the static files by hexo generate, a subfolder 404 with a index.html will be created, which doesn’t really work with GitHub Pages, because it needs a 404.htm in the root. You can fix this, by defining the permalink in the Frontmatter of your page: 1234---title: 404permalink: /404.html--- Example … click here: https://kiko.io/no-page-here","categories":[{"name":"Tools","slug":"Tools","permalink":"https://kiko.io/categories/Tools/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://kiko.io/tags/Hexo/"},{"name":"GitHub","slug":"GitHub","permalink":"https://kiko.io/tags/GitHub/"},{"name":"Error","slug":"Error","permalink":"https://kiko.io/tags/Error/"}]},{"title":"Pimping the Permalink","subtitle":"How to copy and share the permalink programatically","series":"A New Blog","date":"2020-09-20","updated":"2021-05-17","path":"post/Pimping-the-Permalink/","permalink":"https://kiko.io/post/Pimping-the-Permalink/","excerpt":"Until now I did not show the permalink under my posts in this blog, but in the past I had sometimes the need to pass one of the links and it was not very user-friendly, on desktop as well as on mobile. Not the One-Click experience I prefer. My goal was to show the permalink and, even more important, provide a simple way to copy and to share. JavaScript to the rescue…","keywords":"show permalink posts blog past pass links user-friendly desktop mobile one-click experience prefer goal important provide simple copy share javascript rescue…","text":"Until now I did not show the permalink under my posts in this blog, but in the past I had sometimes the need to pass one of the links and it was not very user-friendly, on desktop as well as on mobile. Not the One-Click experience I prefer. My goal was to show the permalink and, even more important, provide a simple way to copy and to share. JavaScript to the rescue… DisplayAs I run my blog with Hexo, I deal with EJS files. To show the permalink in my article.ejs, was quite simple. First step was to create a new partial file named permalink.ejs, to be called every time when the complete article has to be rendered: 123&lt;% if (!index)&#123; %&gt; &lt;%- partial(&#x27;post/permalink&#x27;, &#123; class_name: &#x27;article-permalink&#x27; &#125;) %&gt;&lt;% &#125; %&gt; The partial file looked like this in this step: 123&lt;div class=&quot;&lt;%= class_name %&gt;&quot;&quot;&gt; &lt;a id=&quot;article-permalink&quot; href=&quot;&lt;%- post.permalink %&gt;&quot;&gt;&lt;%- post.permalink %&gt;&lt;/a&gt;&lt;/div&gt; CopyAs I read a little bit about the possibilities to copy text into the clipboard via JavaScript on MDN, it became obvious that a link is not the best solution, because using the exeCommand needs to have something selected and this is difficult on anchors. Then … do it with an input: 123456789101112131415161718192021222324252627&lt;div class=&quot;&lt;%= class_name %&gt;&quot;&quot;&gt; &lt;input id=&quot;article-permalink&quot; value=&quot;&lt;%- post.permalink %&gt;&quot; /&gt; &lt;a id=&quot;action-copy&quot; class=&quot;article-action&quot; href=&quot;javascript:copyPermalink();&quot;&gt;&lt;/a&gt;&lt;/div&gt;&lt;script&gt; var copyText = document.querySelector(&quot;#article-permalink&quot;); //Disable Input by default copyText.disabled = true; function copyPermalink() &#123; //Enable Input copyText.disabled = false; //Select permalink text copyText.select(); //Copy to clipboard document.execCommand(&quot;copy&quot;); //Remove selection again copyText.blur(); //Disable Input again copyText.disabled = true; &#125;&lt;/script&gt; Nice, but a user feedback, that the text has been copied to the clipboard, was advisable, because nothing is more annoying, when you click somewhere and nothing seems to happen. As I hate default browser confirmations and other distracting messaging methods, I wanted to use the input itself, by fading out the link text, replace it with a message and fade in the text again: I extended my animation.styl (Hexo works with Stylus) with two keyframe animations … one for fading in, one for fading out… 12345678910111213141516171819202122232425@keyframes fadeIn &#123; 0% &#123; opacity:0; &#125; 100% &#123; opacity:1; &#125;&#125;.fade-in-500 animation: fadeIn ease 0.5s;.fade-in-1000 animation: fadeIn ease 1s;@keyframes fadeOut &#123; 0% &#123; opacity:1; &#125; 100% &#123; opacity:0; &#125;&#125;.fade-out-500 animation: fadeOut ease 0.5s;.fade-out-1000 animation: fadeOut ease 1s; … and wrote a setTimeout cascade to achive the effect: 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152&lt;div class=&quot;&lt;%= class_name %&gt;&quot;&quot;&gt; &lt;input id=&quot;article-permalink&quot; value=&quot;&lt;%- post.permalink %&gt;&quot; /&gt; &lt;a class=&quot;article-action action-copy&quot; href=&quot;javascript:copyPermalink();&quot;&gt;&lt;/a&gt;&lt;/div&gt;&lt;script&gt; var copyText = document.querySelector(&quot;#article-permalink&quot;); copyText.disabled = true; function copyPermalink() &#123; copyText.disabled = false; copyText.select(); document.execCommand(&quot;copy&quot;); copyText.blur(); copyText.disabled = true; //Store original text var permalink = copyText.value; //Start fading out copyText.classList.add(&quot;fade-out-500&quot;); //Wait until animation is done setTimeout(function()&#123; //Set message, remove fadout class and add start fading in copyText.value = &quot;copied to clipboard&quot;; copyText.classList.remove(&quot;fade-out-500&quot;); copyText.classList.add(&quot;fade-in-1000&quot;); //Wait 2 seconds to show the message setTimeout(function() &#123; //Start to fade out message copyText.classList.add(&quot;fade-out-500&quot;); //Wait until animation is done setTimeout(function() &#123; //Set original text again and remove fadout class copyText.value = permalink; copyText.classList.remove(&quot;fade-out-500&quot;); //Wait until animation is done setTimeout(function() &#123; //Remove fadeout class copyText.classList.remove(&quot;fade-in-1000&quot;); &#125;, 500); &#125;, 500); &#125;, 2000); &#125;, 500); &#125;&lt;/script&gt; ShareThe second permalink feature was a little bit trickier, because I didn’t want to use one of the sharing libraries out there, whose business model is based on my readers data (always keep conservative on implementing third party stuff, because you never know what they are doing with the data). But a couple of months ago I read about a new native browser API for WebApps on the rise: Web Share API. Since 2019 W3C is working on this API, for sharing text, links and other content to an arbitrary destination of the user’s choice. On 27 August 2020 the published a Working Draft and on 16 September 2020 the latest Editors Draft. Brand new stuff. The browser support is not the best yet, but it will be getting better in the near feature, especially as Edge Chrome is one of the early adopters. web.dev lists important requirements on using this new feature in JavaScript: It can only be used on a site that supports HTTPS It must be invoked in response to a user action such as a click But it can share URL’s, text and even files! A raw implementation can be: 12345678910if (navigator.share === undefined) &#123; navigator.share(&#123; title: &#x27;My Post&#x27;, url: &#x27;https://my-domain.com/my-url&#x27;, &#125;) .then(() =&gt; console.log(&#x27;Successful share&#x27;)) .catch((error) =&gt; console.log(&#x27;Error sharing&#x27;, error));&#125; else &#123; // fallback&#125; I refrain to implement a fallback, rather I would like to show the appropriate button only to those users, whose browser supports it: 12345678910111213141516171819202122&lt;div class=&quot;&lt;%= class_name %&gt;&quot;&quot;&gt; &lt;input id=&quot;article-permalink&quot; value=&quot;&lt;%- post.permalink %&gt;&quot; data-id=&quot;&lt;%= post._id %&gt;&quot; /&gt; &lt;a id=&quot;action-copy&quot; class=&quot;article-action&quot; href=&quot;javascript:copyPermalink();&quot;&gt;&lt;/a&gt; &lt;a id=&quot;action-share&quot; class=&quot;article-action&quot; href=&quot;javascript:sharePermalink();&quot;&gt;&lt;/a&gt;&lt;/div&gt;&lt;script&gt; function copyPermalink() &#123; -- SEE ABOVE &#125; if (navigator.share === undefined) &#123; var shareLink = document.querySelector(&quot;#action-share&quot;); shareLink.style.display = &quot;none&quot;; &#125; function sharePermalink() &#123; navigator.share(&#123; title: &quot;&lt;%- post.title %&gt;&quot;, url: &quot;&lt;%- post.permalink %&gt;&quot;, &#125;) &#125;&lt;/script&gt; More Info w3c.github.io: W3C Web Share Testheise Developer: Features von übermorgen: Die Web Share API und die Web Share Target API (German)CSS-Tricks: How to Use the Web Share API","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://kiko.io/categories/JavaScript/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://kiko.io/tags/Hexo/"},{"name":"CSS","slug":"CSS","permalink":"https://kiko.io/tags/CSS/"},{"name":"Stylus","slug":"Stylus","permalink":"https://kiko.io/tags/Stylus/"},{"name":"Share","slug":"Share","permalink":"https://kiko.io/tags/Share/"}]},{"title":"Discoveries #2","subtitle":null,"series":"Discoveries","date":"2020-09-07","updated":"2021-05-17","path":"post/Discoveries-2/","permalink":"https://kiko.io/post/Discoveries-2/","excerpt":"New month, new discoveries. We will deal with key bindings, downloads on the fly, a lot of animations and contrasting images. Have fun, trying out these stunning solutions. tinykeys - Modern library for keybindingsCreating files in JavaScript in your browserCSS Animated Google FontsSkeleton Screen CSSMore Control Over CSS Borders With background-imageA CSS-only, animated, wrapping underlineNailing the Perfect Contrast Between Light Text and a Background ImageContrast.js","keywords":"month discoveries deal key bindings downloads fly lot animations contrasting images fun stunning solutions tinykeys modern library keybindingscreating files javascript browsercss animated google fontsskeleton screen cssmore control css borders background-imagea css-only wrapping underlinenailing perfect contrast light text background imagecontrastjs","text":"New month, new discoveries. We will deal with key bindings, downloads on the fly, a lot of animations and contrasting images. Have fun, trying out these stunning solutions. tinykeys - Modern library for keybindingsCreating files in JavaScript in your browserCSS Animated Google FontsSkeleton Screen CSSMore Control Over CSS Borders With background-imageA CSS-only, animated, wrapping underlineNailing the Perfect Contrast Between Light Text and a Background ImageContrast.js tinykeys - Modern library for keybindings by Jamie Kyle&nbsp;https://jamiebuilds.github.io/tinykeys Very easy to use key binding library for JavaScript. Supports key sequences and modifier keys. Creating files in JavaScript in your browser by Kilian Valkhof&nbsp;https://kilianvalkhof.com/2020/javascript/creating-files-in-javascript-in-your-browser Kilian shows how to prepare data in JavaScript and offer them to download on the fly, without the use of storing a file. CSS Animated Google Fonts by Jhey Tompkins&nbsp;https://dev.to/jh3y/animated-google-fonts-193d As Google Fonts now supports variable fonts, Jhey shows a solution how to create neat font animations with them. Skeleton Screen CSS by Dmitriy Kuznetsov&nbsp;https://github.com/nullilac/skeleton-screen-css When loading data on demand, it is sometimes advisable to show placeholders, where the data will be filled in. Dimitriy has founded a CSS framework for these skeletons. More Control Over CSS Borders With background-image by Chris Coyier&nbsp;https://css-tricks.com/more-control-over-css-borders-with-background-image Borders are used to seperate things in a layout, but the build-in possibilities of CSS are restricted. Chris found a way by pimping borders up, using background images. A CSS-only, animated, wrapping underline by Nicky Meuleman&nbsp;https://nickymeuleman.netlify.app/blog/css-animated-wrapping-underline As Chris did for the borders, Nick’s doing on underlined links. An end to boring rigid unterlines, let’s animate them. Nailing the Perfect Contrast Between Light Text and a Background Image by Yaphi Berhanu&nbsp;https://css-tricks.com/nailing-the-perfect-contrast-between-light-text-and-a-background-image Showing text on background images can be challenging due to contrast and readability. Yaphi has developed a solution to find always the right transparent overlay to show the most of the picture, but keep the text readable. Stunning… Contrast.js by Misha Petrov&nbsp;https://github.com/MishaPetrov/Contrast.js Misha addresses the same problem as Yaphi, showing text on background images, but goes a different way with his library, which is trying to find the best constrasting text color, even if the page is responsive.","categories":[{"name":"Discoveries","slug":"Discoveries","permalink":"https://kiko.io/categories/Discoveries/"}],"tags":[{"name":"Great Finds","slug":"Great-Finds","permalink":"https://kiko.io/tags/Great-Finds/"}]},{"title":"Add website to Trello card the better way","subtitle":"Avoid default share, use the Trello bookmarklet","date":"2020-09-07","updated":"2021-05-17","path":"post/Add-website-to-Trello-card-the-better-way/","permalink":"https://kiko.io/post/Add-website-to-Trello-card-the-better-way/","excerpt":"I was looking for a new way to store interesting website articles for reading later, as Pocket, my favourite tool until here, gets worse and worse. As I am a big Trello fan, I wanted to give it a chance to be Pockets successor on my smartphone, where I’m reading mostly. On installing the Trello Android app, you will find a new SHARE target Add new Trello card, which is comfortable to use: (Sry, for the German screenshots ;) The result, website’s title and Url set, is nice at best: … but Trello has a Bookmarklet, which does the job much better.","keywords":"store interesting website articles reading pocket favourite tool worse big trello fan wanted give chance pockets successor smartphone im installing android app find share target add card comfortable sry german screenshots result websites title url set nice … bookmarklet job","text":"I was looking for a new way to store interesting website articles for reading later, as Pocket, my favourite tool until here, gets worse and worse. As I am a big Trello fan, I wanted to give it a chance to be Pockets successor on my smartphone, where I’m reading mostly. On installing the Trello Android app, you will find a new SHARE target Add new Trello card, which is comfortable to use: (Sry, for the German screenshots ;) The result, website’s title and Url set, is nice at best: … but Trello has a Bookmarklet, which does the job much better. The following approach works best in the Google Chrome browser. First, a Bookmarklet is a small piece of JavaScript, which is stored as a bookmark in your browser. As you can’t actually create such a Bookmarklet in your Android Chrome, you have to create it in your desktop Chrome and switch on the bookmark sync of chrome. You should right away choose a short, concise name for the bookmark, so you find it easier in Android Chrome afterwards. I called it 2TrelloCard, because few websites start with an number. After Chrome’s sync is done, go to any website do you want to store as a Trello card. Now enter the Url box and type the name of the bookmarklet and select it. Instead of requesting a different page, Chrome executes the JavaScript of the Bookmarklet against the currently open website. This script shows a Trello dialog, where you can choose, which board and list the new card should be created on. This card creation method not only sets the title of the card, but fills the description with the meta description of the page, adds the first found meta image as cover and adds the Url as an attachment:","categories":[{"name":"Tools","slug":"Tools","permalink":"https://kiko.io/categories/Tools/"}],"tags":[{"name":"Trello","slug":"Trello","permalink":"https://kiko.io/tags/Trello/"},{"name":"Browser","slug":"Browser","permalink":"https://kiko.io/tags/Browser/"}]},{"title":"Horizontal navigation menu above an image","subtitle":"How to deal with coverage, readability and scrollbars","series":"A New Blog","date":"2020-07-20","updated":"2021-05-17","path":"post/Horizontal-navigation-menu-above-an-image/","permalink":"https://kiko.io/post/Horizontal-navigation-menu-above-an-image/","excerpt":"I changed the main menu of my blog, because I wanted to get rid of the hamburger menu on the upper left, which was shown only for smartphones, but was not really reachable conveniently. Beside that it made no sense to have different navigations for different devices. My choice was to implement a horizontal scrolling menu, which can grow over the time, without any need of customizing. As I have quite big header images and I wanted to place the new navigation in a more accessible zone, I decided to place it at the bottom, but above the header image.","keywords":"changed main menu blog wanted rid hamburger upper left shown smartphones reachable conveniently made sense navigations devices choice implement horizontal scrolling grow time customizing big header images place navigation accessible zone decided bottom image","text":"I changed the main menu of my blog, because I wanted to get rid of the hamburger menu on the upper left, which was shown only for smartphones, but was not really reachable conveniently. Beside that it made no sense to have different navigations for different devices. My choice was to implement a horizontal scrolling menu, which can grow over the time, without any need of customizing. As I have quite big header images and I wanted to place the new navigation in a more accessible zone, I decided to place it at the bottom, but above the header image. Problem was, not to cover a big part of the image with a full-colored or even semitransparent bar, by using a RGBA background color. I wanted it more translucent, but with enough contrast on bright images for the menu items to read. The recently introduced W3C feature backdrop-filter was just the right thing for that. It is supported by most modern browsers, but it has to have a backup strategy for the rest of the bunch. The HTML is simple: 1234567891011121314151617&lt;nav id=&quot;header-nav&quot; role=&quot;navigation&quot;&gt; &lt;ul class=&quot;menu&quot;&gt; &lt;li class=&quot;menu-item&quot;&gt; &lt;a href=&quot;/first&quot; title=&quot;First&quot;&gt; &lt;span&gt;First Item&lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;li class=&quot;menu-item&quot;&gt; &lt;a href=&quot;/second&quot; title=&quot;Second&quot;&gt; &lt;span&gt;Second Item&lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;/ul&gt;&lt;/nav&gt; And here’s the Stylus code for my approach: 123456789101112131415161718192021222324252627282930313233343536373839404142#header-nav position: absolute bottom: 0 width: 100% height: auto box-sizing: content-box overflow-x: scroll overflow-y: hidden // BACKDROP-FILTER backdrop-filter: blur(5px) brightness(90%) @supports not (backdrop-filter: none) background: rgba(0,0,0,0.25) // SCROLLBAR &amp;::-webkit-scrollbar display: none @supports not (webkit-scrollbar) scrollbar-width: none .menu display: flex list-style: none margin: 0 padding: 0 .menu-item flex-basis: 80px flex-shrink: 0 flex-grow: 1 max-width: 100px margin: 0 2px text-overflow: ellipsis; a display: inline-block width: 100% padding: 10px 0 color: #ffffff font-weight: bold text-decoration: none text-align: center The navigation box is absolute positioned on the image, is as wide as the screen and scrolls exclusively horizontal. The items are a unordered list, with default width and arranged by flex. In case a browser doesn’t understand backdrop-filter, the navigation bar is shown with a classic alpha channel opacity. When having a horizontal scroll feature, the scrollbar shown by the browser is beyond beautiful. To prevent this, I used the CSS pseudo element ::-webkit-scrollbar, which is supported by WebKit and Blink bowsers, with a fallback for all other browsers. Both strategies allows to be still able to scroll. If you want to have a scrollbar, but not the built-in, I can only recommend to read something about styling scrollbars, like here and here.","categories":[{"name":"UI-Design","slug":"UI-Design","permalink":"https://kiko.io/categories/UI-Design/"}],"tags":[{"name":"CSS","slug":"CSS","permalink":"https://kiko.io/tags/CSS/"},{"name":"Stylus","slug":"Stylus","permalink":"https://kiko.io/tags/Stylus/"}]},{"title":"Change CSS class when element scrolls into viewport","subtitle":null,"series":"A New Blog","date":"2020-07-13","updated":"2021-05-17","path":"post/Change-CSS-class-when-element-scrolls-into-viewport/","permalink":"https://kiko.io/post/Change-CSS-class-when-element-scrolls-into-viewport/","excerpt":"I had a neat visual gimmick on the start page of this blog, that the gray-scaled header image of a post in the list scaled up to 100% and became colored, when the user hovered over it: 123456789101112131415.article-inner .article-photo &#123; height: 150px; width: 100%; object-fit: cover; transform: scale(1); transform-style: preserve-3d; transition: all ease-out 0.6s; opacity: 0.3; filter: grayscale(1) contrast(0.5);&#125;.article-inner:hover .article-photo &#123; transform: scale(1.1); opacity: 1; filter: grayscale(0) contrast(1);&#125; Nice, but a little bit useless on smartphones or tablets, where HOVER doesn’t really work.","keywords":"neat visual gimmick start page blog gray-scaled header image post list scaled 100% colored user hovered 123456789101112131415article-inner article-photo &#123 height 150px width object-fit cover transform scale1 transform-style preserve-3d transition ease-out 06s opacity filter grayscale1 contrast05&#125article-innerhover scale11 grayscale0 contrast1&#125 nice bit useless smartphones tablets hover doesnt work","text":"I had a neat visual gimmick on the start page of this blog, that the gray-scaled header image of a post in the list scaled up to 100% and became colored, when the user hovered over it: 123456789101112131415.article-inner .article-photo &#123; height: 150px; width: 100%; object-fit: cover; transform: scale(1); transform-style: preserve-3d; transition: all ease-out 0.6s; opacity: 0.3; filter: grayscale(1) contrast(0.5);&#125;.article-inner:hover .article-photo &#123; transform: scale(1.1); opacity: 1; filter: grayscale(0) contrast(1);&#125; Nice, but a little bit useless on smartphones or tablets, where HOVER doesn’t really work. A better idea was to transform the header image automatically, when it becomes visible to the user. So I changed the HOVER selector into a class… 12345.article-photo.in-view &#123; transform: scale(1.1); opacity: 1; filter: grayscale(0) contrast(1);&#125; … and wrote a little JS function to determine the point, where the images is fully visible in the viewport: 1234567function isVisibleInViewPort(e) &#123; var viewTop = $(window).scrollTop(); var viewBottom = viewTop + $(window).height(); var eTop = $(e).offset().top; var eBottom = eTop + $(e).height(); return ((eBottom &lt;= viewBottom) &amp;&amp; (eTop &gt;= viewTop));&#125; This function I had to bind to the windows scroll event to all header images only: 123456789$(window).on(&#x27;scroll&#x27;, function() &#123; $(&quot;.article-photo&quot;).each(function() &#123; if (isVisibleInViewPort($(this))) &#123; $(this).addClass(&quot;in-view&quot;); &#125; else &#123; $(this).removeClass(&quot;in-view&quot;); &#125; &#125;);&#125;);","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://kiko.io/categories/JavaScript/"}],"tags":[{"name":"CSS","slug":"CSS","permalink":"https://kiko.io/tags/CSS/"},{"name":"jQuery","slug":"jQuery","permalink":"https://kiko.io/tags/jQuery/"}]},{"title":"Discoveries #1","subtitle":null,"series":"Discoveries","date":"2020-07-12","updated":"2021-05-17","path":"post/Discoveries-1/","permalink":"https://kiko.io/post/Discoveries-1/","excerpt":"Due to my daily routine, I’m reading a lot of articles on the web regarding software development. The most interesting stuff ends up on my Pocket list, which grows from day to day. Hard to find the pearls, when I need them. This recurring posts will throw a stroke of light on them. They are maybe not the newest finds, not the fanciest ones, but remarkable for me and maybe for you also. Pure CSS halftone portrait from .jpg sourceScrollTrigger - Highlight TextTiny long-press event handlerShow More/Less3D banners with ScrollTriggerImage Compare ViewerAdd Read or Scroll Progress Bar To A Website To Indicate Read ProgressHow to Get a Progressive Web App into the Google Play Store","keywords":"due daily routine im reading lot articles web software development interesting stuff ends pocket list grows day hard find pearls recurring posts throw stroke light newest finds fanciest remarkable pure css halftone portrait jpg sourcescrolltrigger highlight texttiny long-press event handlershow more/less3d banners scrolltriggerimage compare vieweradd read scroll progress bar website progresshow progressive app google play store","text":"Due to my daily routine, I’m reading a lot of articles on the web regarding software development. The most interesting stuff ends up on my Pocket list, which grows from day to day. Hard to find the pearls, when I need them. This recurring posts will throw a stroke of light on them. They are maybe not the newest finds, not the fanciest ones, but remarkable for me and maybe for you also. Pure CSS halftone portrait from .jpg sourceScrollTrigger - Highlight TextTiny long-press event handlerShow More/Less3D banners with ScrollTriggerImage Compare ViewerAdd Read or Scroll Progress Bar To A Website To Indicate Read ProgressHow to Get a Progressive Web App into the Google Play Store Pure CSS halftone portrait from .jpg source by Ana Tudor&nbsp;https://codepen.io/thebabydino/pen/LYGGwrm Ana, author at CSS Tricks, shows a CSS-only technique to convert an image into a halftone one. ScrollTrigger - Highlight Text by Ryan Mulligan&nbsp;https://codepen.io/hexagoncircle/details/gOPMwvd We all highlight important text passages for our readers. Ryan does the in an unusual, butt cool way by using GSAP ScrollTrigger. Tiny long-press event handler by MudOnTire&nbsp;https://github.com/MudOnTire/web-long-press Vanilla JS multi-instance handling of long press event the easy way. Show More/Less by Grzegorz Tomicki&nbsp;https://github.com/tomik23/show-more Grzegorz’s little JS helper to cut texts, lists and even tables and show a MORE link. 3D banners with ScrollTrigger by supamike&nbsp;https://codepen.io/supamike/full/KKVqXmR Awesome 3D effect on scrolling made with ScrollTrigger. Image Compare Viewer by Kyle Wetton&nbsp;https://image-compare-viewer.netlify.app/ Comparison slider in Vanilla JS to compare BEFORE and AFTER images, which works responsively on every device. Add Read or Scroll Progress Bar To A Website To Indicate Read Progress by Jun711&nbsp;https://jun711.github.io/web/add-scroll-progress-bar-to-a-website-to-indicate-read-progress/ A classic, simply explained… Here another approach: CSS Tricks: Reading Position Indicator How to Get a Progressive Web App into the Google Play Store by Mateusz Rybczonek&nbsp;https://css-tricks.com/how-to-get-a-progressive-web-app-into-the-google-play-store/ Mateusz describes very detailed how offer your PWA as an App via Google Play Store.","categories":[{"name":"Discoveries","slug":"Discoveries","permalink":"https://kiko.io/categories/Discoveries/"}],"tags":[{"name":"Great Finds","slug":"Great-Finds","permalink":"https://kiko.io/tags/Great-Finds/"}]},{"title":"Dopamine: How Software should be...","subtitle":"A great media player for Windows 10","date":"2020-07-10","updated":"2021-05-17","path":"post/Dopamine-How-Software-should-be/","permalink":"https://kiko.io/post/Dopamine-How-Software-should-be/","excerpt":"Not very often, when I’m looking for a new tool to replace some annoying or outdated piece of software, I have to blog about it … but from time to time, I’m discovering pearls, worth to lose a word about. The Windows 10 built-in media player Groove is (to be kind) … nice, but it is more or less a leftover from Microsoft’s attempt to create a competitor to iTunes, years ago. The crippeled UI is not the most modern and I was more than once annoyed about its usability. Doing a research for a good alternative, you stumble always over the usual suspects: MediaMonkey, Foobar2000, Winamp, VLC or even Media Player Classic!? Not modern enough, not user friendly enough, not lean enough. I really don’t remember where, but there was a screenshot of a player, which seems to be the complete opposite of the others: Dopamine from Digimezzo, a project by the Belgian developer Raphaël Godart…","keywords":"im tool replace annoying outdated piece software blog … time discovering pearls worth lose word windows built-in media player groove kind nice leftover microsofts attempt create competitor itunes years ago crippeled ui modern annoyed usability research good alternative stumble usual suspects mediamonkey foobar2000 winamp vlc classic user friendly lean dont remember screenshot complete opposite dopamine digimezzo project belgian developer raphaël godart…","text":"Not very often, when I’m looking for a new tool to replace some annoying or outdated piece of software, I have to blog about it … but from time to time, I’m discovering pearls, worth to lose a word about. The Windows 10 built-in media player Groove is (to be kind) … nice, but it is more or less a leftover from Microsoft’s attempt to create a competitor to iTunes, years ago. The crippeled UI is not the most modern and I was more than once annoyed about its usability. Doing a research for a good alternative, you stumble always over the usual suspects: MediaMonkey, Foobar2000, Winamp, VLC or even Media Player Classic!? Not modern enough, not user friendly enough, not lean enough. I really don’t remember where, but there was a screenshot of a player, which seems to be the complete opposite of the others: Dopamine from Digimezzo, a project by the Belgian developer Raphaël Godart… But that wasn’t the best, especially for me. Dopamine is written in C# as a WPF application and it is OpenSource, hosted on GitHub. The software is so wonderful lean and its integrating in Windows 10 like a charm. It has several categories to find the right music to play, a context-sensitive search, a folder view, is able to import and manage playlists, a light and dark mode and translations into currently 28 languages. It can update your collection automatically from several folders, has two player modes and is incredibly fast. The keep long story short … I fell in love on Dopamine‘s simple beauty and it is now my favourite player on Windows 10! Thanks Raphaël…","categories":[{"name":"Tools","slug":"Tools","permalink":"https://kiko.io/categories/Tools/"}],"tags":[{"name":"Great Finds","slug":"Great-Finds","permalink":"https://kiko.io/tags/Great-Finds/"}]},{"title":"Using GitHub as Commenting Platform","subtitle":"Integrate Utterances' GitHub Issue Commenting to Hexo","series":"A New Blog","date":"2020-07-05","updated":"2021-05-17","path":"post/Using-GitHub-as-Commenting-Platform/","permalink":"https://kiko.io/post/Using-GitHub-as-Commenting-Platform/","excerpt":"If you run a blog, it is always advisable to integrate a commenting system, in order to get feedback on your posts from your readers. So did I, when I start this blog and I decided to use the Disqus platform, as it was very easy to integrate … but I always had a bad feeling about a third-party platform collecting data from my readers. Disqus is probably not without reason under criticism by many people in the community. As I host this blog at GitHub (see A New Blog (Part One): VS Code, Hexo and GitHub Pages) I was looking for a solution to host the comments also on my prefered platform. There were some solutions, which uses GitHub Issues for this and wanted to implement something like that someday.","keywords":"run blog advisable integrate commenting system order feedback posts readers start decided disqus platform easy … bad feeling third-party collecting data reason criticism people community host github part code hexo pages solution comments prefered solutions issues wanted implement someday","text":"If you run a blog, it is always advisable to integrate a commenting system, in order to get feedback on your posts from your readers. So did I, when I start this blog and I decided to use the Disqus platform, as it was very easy to integrate … but I always had a bad feeling about a third-party platform collecting data from my readers. Disqus is probably not without reason under criticism by many people in the community. As I host this blog at GitHub (see A New Blog (Part One): VS Code, Hexo and GitHub Pages) I was looking for a solution to host the comments also on my prefered platform. There were some solutions, which uses GitHub Issues for this and wanted to implement something like that someday. As I read a post from on Thomas Lavesques’ blog, to solve another problem, his commenting section came to my attention: utteranc.es … exactly the solution I needed! Thanx guys… On their website is a small configurator for a script to implement in each post, which needs only few information: Name of the Repo How the mapping of the post to the Issues should work Name of the Theme, in order to fit to the colors of the blog The script had to be included to my Hexo article.js: 123456789&lt;% if (!index &amp;&amp; post.comments)&#123; %&gt; &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;utteranc.es&#x2F;client.js&quot; repo&#x3D;&quot;kristofzerbe&#x2F;kiko.io&quot; issue-term&#x3D;&quot;pathname&quot; theme&#x3D;&quot;github-light&quot; crossorigin&#x3D;&quot;anonymous&quot; async&gt; &lt;&#x2F;script&gt;&lt;% &#125; %&gt; That’s pretty much it. On entering the first comment, Utterances told me to install the needed GitHub App to my repo, in order to make it work … and done. The result you see below … UPDATE…The utterances script tag has the attribute theme, to tell utterances which style should be delivered. There are several themes available, but if users are able to switch between light or dark mode on the page (see Hexo and the Dark Mode), the comment block should change to an suitable theme also. On order to respond on a mode change, it is necessary to write a more dynamic script loading. First we define a function in a global script file to load the utterances script via JS: 1234567891011121314151617181920function insertUtterancesCommentBlock() &#123; var commentTheme = &quot;github-light&quot;; if(localStorage.getItem(&quot;theme&quot;) === &quot;dark&quot;)&#123; commentTheme = &quot;github-dark&quot;; &#125; const scriptId = &quot;comment-theme-script&quot;; const existingScript = document.getElementById(scriptId); if (!existingScript) &#123; const commentScript = document.createElement(&quot;script&quot;); commentScript.id = scriptId; commentScript.src = &quot;https://utteranc.es/client.js&quot;; commentScript.setAttribute(&quot;repo&quot;, &quot;kristofzerbe/kiko.io&quot;); commentScript.setAttribute(&quot;issue-term&quot;, &quot;pathname&quot;); commentScript.setAttribute(&quot;theme&quot;, commentTheme); commentScript.setAttribute(&quot;crossorigin&quot;, &quot;anonymous&quot;); const placeholder = document.getElementById(&quot;comment-placeholder&quot;); placeholder.innerHTML = &quot;&quot;; placeholder.appendChild(commentScript); &#125;&#125; Then we change the placement in the EJS file, by defining a placeholder and ensuring that the script above is loaded, before we call it: 123456&lt;div id&#x3D;&quot;comment-placeholder&quot;&gt;&lt;&#x2F;div&gt;&lt;script&gt; window.addEventListener(&#39;load&#39;, function () &#123; insertUtterancesCommentBlock(); &#125;)&lt;&#x2F;script&gt; On my blog, everytime the user switches between light/dark mode the body tag will be decorated with the data tag data-theme and the value of the mode. To keep the loading of the utterances script independent from this functionality, we just have to listen to this change via MutationObserver: 12345678910//observe theme change, to adjust comment block themevar target = document.documentElement, observer = new MutationObserver(function(mutations) &#123; mutations.forEach(function(mutation) &#123; if (mutation.attributionName === &quot;data-theme&quot; ); insertUtterancesCommentBlock(); &#125;); &#125;), config = &#123; attributes: true &#125;;observer.observe(target, config);","categories":[{"name":"Tools","slug":"Tools","permalink":"https://kiko.io/categories/Tools/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://kiko.io/tags/Hexo/"},{"name":"GitHub","slug":"GitHub","permalink":"https://kiko.io/tags/GitHub/"},{"name":"Blogging","slug":"Blogging","permalink":"https://kiko.io/tags/Blogging/"}]},{"title":"Meaningful automatic versioning with T4","subtitle":"How to implement versioning in C# projects the better way","date":"2020-06-27","updated":"2021-05-17","path":"post/Meaningful-automatic-versioning-with-T4/","permalink":"https://kiko.io/post/Meaningful-automatic-versioning-with-T4/","excerpt":"Every developer has to have an idea of versioning his products. If you work with Visual Studio you have the Assembly Information in the project properties dialog, to enter it manually everytime you want to release a new version: The four fields are: MAJOR, MINOR, BUILD, REVISION. But seriously … who does that? I guess 99% of all C# developers are entering the AssemblyInfo.cs and enter the famous 2 asterisks into the version declaration of BUILD and REVISION, to let Visual Studio do the incrementation job: 12[assembly: AssemblyVersion(&quot;1.0.*.*&quot;)][assembly: AssemblyFileVersion(&quot;1.0.*.*&quot;)] But this is not the end of the possibilities … Let’s do it more meaningful, with some goodies and still automatic…","keywords":"developer idea versioning products work visual studio assembly information project properties dialog enter manually everytime release version fields major minor build revision … guess 99% c# developers entering assemblyinfocs famous asterisks declaration incrementation job 12[assembly assemblyversion&quot10**&quot][assembly assemblyfileversion&quot10**&quot] end possibilities lets meaningful goodies automatic…","text":"Every developer has to have an idea of versioning his products. If you work with Visual Studio you have the Assembly Information in the project properties dialog, to enter it manually everytime you want to release a new version: The four fields are: MAJOR, MINOR, BUILD, REVISION. But seriously … who does that? I guess 99% of all C# developers are entering the AssemblyInfo.cs and enter the famous 2 asterisks into the version declaration of BUILD and REVISION, to let Visual Studio do the incrementation job: 12[assembly: AssemblyVersion(&quot;1.0.*.*&quot;)][assembly: AssemblyFileVersion(&quot;1.0.*.*&quot;)] But this is not the end of the possibilities … Let’s do it more meaningful, with some goodies and still automatic… More informative versioningA build with an increased MAJOR version number means, that there are significant changes in the product, even breaking changes. This always should be set manually. Also the MINOR. It stands for significant functional extensions of the product. How does Visual Studio calculate BUILD and REVISION? When specifying a version, you have to at least specify major. If you specify major and minor, you can specify an asterisk for build. This will cause build to be equal to the number of days since January 1, 2000 local time, and for revision to be equal to the number of seconds since midnight local time, divided by 2. But, the BUILD number should explain, how often a software with a particular MAJOR.MINOR has been build, due to minor changes and bug fixes. The “Asterisk” REVISION number is a little weird, but at least with the BUILD number unique. But it says nothing. Better to pick up the idea of a date calculated, unique number, but not an arbitrary date … let’s take the date the project has started. For example: 1.2.16.158 … reads version 1.2 with 16 builds on the 158’th day after the project has started. Start with T4T4 (Text Template Transformation Toolkit) is a templating system in Visual Studio for generating text files during design time. It is very suitable to even generate code. Read about it here and here. A Text Template (.tt) has Directives (how the template is processed), Text blocks (text copied to the output) and Control blocks (program code). For our versioning template, we start with this in a new file named AssemblyVersion.tt: Directives: 12&lt;#@ template hostspecific=&quot;true&quot; language=&quot;C#&quot; #&gt;&lt;#@ output extension=&quot;.cs&quot; #&gt; Control block: 123456&lt;# int major = 1; int minor = 0; int build = 0; int revision = 0;#&gt; Text block: 1234567// This code was generated by a tool. Any changes made manually will be lost// the next time this code is regenerated.using System.Reflection;[assembly: AssemblyVersion(&quot;&lt;#= $&quot;&#123;major&#125;.&#123;minor&#125;.&#123;build&#125;.&#123;revision&#125;&quot; #&gt;&quot;)][assembly: AssemblyFileVersion(&quot;&lt;#= $&quot;&#123;major&#125;.&#123;minor&#125;.&#123;build&#125;.&#123;revision&#125;&quot; #&gt;&quot;)] On saving the TT file, a new CS file with the same name will be created automatically and you got an error like this: A new place for version infoTh error occurs, because we have now two AssemblyVersion and AssemblyFileVersion attributes in our project. We need to comment out the original in Properties\\AssemblyInfo.cs: Structural ConsiderationsIt makes sense to store all needed files for the new versioning system in a new root folder of the project, named AssemblyVersion, starting with the AssemblyVersion.tt, because there will be more files later on. New app information fileAs we replaced the original version attributes in the project with those from our generated AssemblyVersion.cs, we cannot control the MAJOR and MINOR version number via the project property dialog any longer. We need a new approach on that, which can be edited easily and processed automatically. AssemblyVersion.json1234567891011121314151617&#123; &quot;initialDate&quot;: &quot;2019-09-29&quot;, &quot;versions&quot;: [ &#123; &quot;major&quot;: 1, &quot;minor&quot;: 1, &quot;releaseDate&quot;: &quot;&quot;, &quot;remarks&quot;: &quot;Some cool new features; New versioning system&quot; &#125;, &#123; &quot;major&quot;: 1, &quot;minor&quot;: 0, &quot;releaseDate&quot;: &quot;2019-10-01&quot;, &quot;remarks&quot;: &quot;Initial Release&quot; &#125; ]&#125; This new JSON file has two main items: initialDate - the date the project has started, to calculate the REVISION later on versions - a list with all different MAJOR/MINOR versions we have done so far, with at least one without a release date … the one with the highest major and minor. The remarks attribute of a list item holds some information about the changes in a new version. Together with releaseDate, useful for a possible release history, shown in the product itself. Library references in T4T4 runs in its own app domain, therefore it can use built-in libraries as System.IO, but not third-party libraries like Newtonsoft.JSON. We could reference those libraries from the projects package folder via the absolute path (if we use it in our product), but when we are running a NuGet update, the reference will break. It is advisable to store such libraries directly in a fixed folder, like AssemblyVersion\\Libraries. They won’t have any impact to our product, because the are only used while design time. The MAJOR and MINORTo process the new AssemblyVersion.json in the template, we need some new directives for referencing the needed libraries and the import of the appropriate namepaces: 123456&lt;#@ assembly name=&quot;System.Core&quot; #&gt;&lt;#@ assembly name=&quot;$(SolutionDir)\\AssemblyVersion\\Libraries\\Newtonsoft.Json.dll&quot; #&gt;&lt;#@ import namespace=&quot;System.IO&quot; #&gt;&lt;#@ import namespace=&quot;System.Linq&quot; #&gt;&lt;#@ import namespace=&quot;Newtonsoft.Json&quot; #&gt; Via the use of the T4 variable $(SolutionDir), we can point to our copy of Newtonsoft JSON. Now we can read and convert the JSON into an anonymous object and get the highest values of MAJOR and MINOR: 12345678910111213141516171819202122232425262728&lt;# string avPath = this.Host.ResolvePath(&quot;AssemblyVersion.json&quot;); string avJson = File.ReadAllText(avPath); var avDefinition = new &#123; initialDate = &quot;&quot;, versions = new [] &#123; new &#123; major = 0, minor = 0, releaseDate = &quot;&quot;, remarks = &quot;&quot; &#125; &#125; &#125;; var avObject = JsonConvert.DeserializeAnonymousType(avJson, avDefinition); //Get highest Major/Minor from versions list var maxVersion = avObject.versions .OrderByDescending(i =&gt; i.major) .ThenByDescending(j =&gt; j.minor) .First(); //Set MAJOR int major = maxVersion.major; //Set MINOR int minor = maxVersion.minor;#&gt; The BuildLogIn order to get the version number for BUILD, we need a method to count and store every build that has been run, separated by the MAJOR/MINOR versions. This is a job for a Post-build event, which can be configured in the project properties dialog. The event uses shell commands as they are used on the command line. What the commands should do:&nbsp;&nbsp;&nbsp;Write a new line with the current date and time in a log file, named after the MAJOR/MINOR version and stored in the folder AssemblyVersion\\BuildLogs. Extending build event macrosShell commands for build events are supporting built-in variables, so called ‘macros’, like $(ProjectDir) (which returns the project directory path), but there is no such macro for the current version number. We have to introduce it via extending the project with a new build target. Unload the project in Visual Studio for editing the CSPROJ (or VBPROJ) file of your product manually and write the following definition just before the end-tag: 123456789101112131415&lt;PropertyGroup&gt; &lt;PostBuildEventDependsOn&gt; $(PostBuildEventDependsOn); PostBuildMacros; &lt;/PostBuildEventDependsOn&gt;&lt;/PropertyGroup&gt;&lt;Target Name=&quot;PostBuildMacros&quot;&gt; &lt;GetAssemblyIdentity AssemblyFiles=&quot;$(TargetPath)&quot;&gt; &lt;Output TaskParameter=&quot;Assemblies&quot; ItemName=&quot;Targets&quot; /&gt; &lt;/GetAssemblyIdentity&gt; &lt;ItemGroup&gt; &lt;VersionNumber Include=&quot;@(Targets-&gt;&#x27;%(Version)&#x27;)&quot; /&gt; &lt;/ItemGroup&gt;&lt;/Target&gt; After reloading the project in Visual Studio, we can use @(VersionNumber) in our commands. CreateBuildLog.batThe event build editor is not very comfortable, so we create the batch file CreateBuildLog.bat in our AssemblyVersion folder and use this as the post build event command. The BuildLog folder must exist, before running the following command the first time! 123456789101112131415161718192021222324252627@echo offREM --Get parametersset PROJECT_DIR=%1set VERSION_NUMBER=%2REM --Set what to logset LOG_LINE=%DATE% %TIME%REM --Inform the userset MSG=CreateBuildLog &#x27;%LOG_LINE%&#x27; for version %VERSION_NUMBER%echo %MSG%REM --Get version partsFOR /f &quot;tokens=1,2,3,4 delims=.&quot; %%a IN (&quot;%VERSION_NUMBER%&quot;) do ( set MAJOR=%%a set MINOR=%%b set BUILD=%%c set REVISION=%%d)REM --Define BuildLog file and folder set BUILDLOG_FILE=%MAJOR%.%MINOR%.logset BUILDLOG_FOLDER=%PROJECT_DIR%\\AssemblyVersion\\BuildLogsREM --Write current date and time as new line in the fileecho %LOG_LINE% &gt;&gt; %BUILDLOG_FOLDER%\\%BUILDLOG_FILE%&quot; 1&quot;$(ProjectDir)\\AssemblyVersion\\CreateBuildLog.bat&quot; &quot;$(ProjectDir)&quot; @(VersionNumber) The BUILDAs we have now the BuildLogs, we can use them in the template: 123456789101112131415161718192021&lt;# ... //Get BuildLog of max version string buildlogFolder = this.Host.ResolvePath(&quot;BuildLogs&quot;); string buildLog = buildlogFolder + &quot;\\\\&quot; + maxVersion.major + &quot;.&quot; + maxVersion.minor + &quot;.log&quot;; //Get number of lines from BuildLog or create a new log (!) var buildCount = 1; if (File.Exists(buildLog)) &#123; buildCount = File.ReadLines(buildLog).Count() + 1; &#125; else &#123; File.Create(buildLog).Dispose(); &#125; //Set BUILD int build = buildCount;#&gt; Very important is to create the log file, if it doesn’t exists! Otherwise the build will always fail, because the version attributes can’t be created. The REVISIONAt least we have to set the REVISION number, by calculating the difference between the current date and the initialDate, which we have previously read from the AssemblyVersion.json: 1234567&lt;# ... //Set REVISION var dateCreated = DateTime.Parse(avObject.initialDate); int revision = (DateTime.Now.Date - dateCreated.Date).Days;#&gt; Transforming T4 template on buildThe last hurdle is to run the text transformation every time you build your product. Until now it runs only on saving the AssemblyVersion.tt. A great helper on that was Thomas Levesque’s post “Transform T4 templates as part of the build, and pass variables from the project”, where he describes every difficulty to reach this goal. To make it short: We have to edit the CSPROJ file again, to introduce TextTemplating to MSBuild. First we need following near the beginning of the projects XML: 1234567891011&lt;PropertyGroup&gt; &lt;VisualStudioVersion Condition=&quot;&#x27;$(VisualStudioVersion)&#x27; == &#x27;&#x27;&quot;&gt; 16.0 &lt;/VisualStudioVersion&gt; &lt;VSToolsPath Condition=&quot;&#x27;$(VSToolsPath)&#x27; == &#x27;&#x27;&quot;&gt; $(MSBuildExtensionsPath32)\\Microsoft\\VisualStudio\\v$(VisualStudioVersion) &lt;/VSToolsPath&gt; &lt;TransformOnBuild&gt;true&lt;/TransformOnBuild&gt; &lt;OverwriteReadOnlyOutputFiles&gt;true&lt;/OverwriteReadOnlyOutputFiles&gt; &lt;TransformOutOfDateOnly&gt;false&lt;/TransformOutOfDateOnly&gt;&lt;/PropertyGroup&gt; Secondly add the IMPORT of the TextTemplating target AFTER the CSharp target: 123&lt;Import Project=&quot;$(MSBuildToolsPath)\\Microsoft.CSharp.targets&quot; /&gt;...&lt;Import Project=&quot;$(VSToolsPath)\\TextTemplating\\Microsoft.TextTemplating.targets&quot; /&gt; If you build your product now, a new build log is created and the version numbers BUILD and REVISION are automatically increased. See it in actionThe project where I implemented this versioning first is HexoCommander. Feel free to download the code and see how the new versioning mechanism works. Enjoy versioning…","categories":[{"name":"C#","slug":"C","permalink":"https://kiko.io/categories/C/"}],"tags":[{"name":"Visual Studio","slug":"Visual-Studio","permalink":"https://kiko.io/tags/Visual-Studio/"},{"name":"Versioning","slug":"Versioning","permalink":"https://kiko.io/tags/Versioning/"},{"name":"T4","slug":"T4","permalink":"https://kiko.io/tags/T4/"}]},{"title":"Automatic Header Images in Hexo","subtitle":"Use static images randomly for posts via Hexo script","series":"A New Blog","date":"2020-06-22","updated":"2021-05-17","path":"post/Automatic-Header-Images-in-Hexo/","permalink":"https://kiko.io/post/Automatic-Header-Images-in-Hexo/","excerpt":"Every article in this blog has an individual header image, to bring a little bit color into it. In this post I will show you how I deal with the images in using and automatic provisioning. For serving these pictures I use a static folder, as described in A New Blog: Customizing Hexo. The hard work is done by the plugin Hexo Generator Copy, which copies the static files into the public_dir while generating.","keywords":"article blog individual header image bring bit color post show deal images automatic provisioning serving pictures static folder customizing hexo hard work plugin generator copy copies files public_dir generating","text":"Every article in this blog has an individual header image, to bring a little bit color into it. In this post I will show you how I deal with the images in using and automatic provisioning. For serving these pictures I use a static folder, as described in A New Blog: Customizing Hexo. The hard work is done by the plugin Hexo Generator Copy, which copies the static files into the public_dir while generating. Static File StructureIt is always advisable to provide one image for every device class, in order to save bandwidth and make the page loading as fast as possible: 1234567891011| static/ | photos/ | mobile/ | my-lovely-picture.jpg | ... | tablet/ | my-lovely-picture.jpg | ... | normal/ | my-lovely-picture.jpg | ... The mobile images are at least 480 pixels wide, the tablet variants 768 pixels and the standard or normal one 1280 pixels. While creating the JPG files, it is important to compress them with a tool like JPEGMini to save data while loading. BindingIn order to bind a picture with some additional information to an article, I have extended the Frontmatter of every post: 1234photograph: file: &#x27;my-lovely-image.jpg&#x27; name: &#x27;My Lovely Image&#x27; link: &#x27;https://500px.com/photo/123456789/My-Lovely-Image&#x27; Usage in ThemeIt relies on your Hexo theme, how to use a header image. In my theme (derived from the standard theme) I just added following code in the article.js to show the individual header image as a background image at the top of the article: 123456789101112131415161718192021222324252627&lt;% if (!index &amp;&amp; post.photograph)&#123; %&gt;&lt;style&gt; #banner &#123; background-size: cover; &#125; @media screen and (max-width: 479px) &#123; #banner &#123; background-image: linear-gradient(to bottom, rgba(0,0,0,0.75) 0%, rgba(0,0,0,0) 75%), url(&quot;/photos/mobile/&lt;%= post.photograph.file %&gt;&quot;); &#125; &#125; @media screen and (min-width: 480px) and (max-width: 767px) &#123; #banner &#123; background-image: linear-gradient(to bottom, rgba(0,0,0,0.75) 0%, rgba(0,0,0,0) 75%), url(&quot;/photos/tablet/&lt;%= post.photograph.file %&gt;&quot;); &#125; &#125; @media screen and (min-width: 768px) &#123; #banner &#123; background-image: linear-gradient(to bottom, rgba(0,0,0,0.75) 0%, rgba(0,0,0,0) 75%), url(&quot;/photos/normal/&lt;%= post.photograph.file %&gt;&quot;); &#125; &#125;&lt;/style&gt;&lt;script&gt; var photoLink = document.getElementById(&quot;header-photo-link&quot;); photoLink.href = &quot;&lt;%= post.photograph.link%&gt;&quot;; photoLink.innerHTML = &quot;see &lt;strong&gt;&lt;%= post.photograph.name%&gt;&lt;/strong&gt; at 500px&quot;;&lt;/script&gt;&lt;% &#125; %&gt; Important part here is the use of the Frontmatter data post.photograph.file in the URL of the background CSS. The script fills the additional information into the absolute positioned element header-photo-link which is placed on top of the header. Pooling ImagesAs it is time consuming to generate the necessary images, I have created another static folder pool to store prepared files and a text file with the additional information about the image. The structure of pool is different to photos, because of my image workflow and some limitations of automating the provisioning. 12345678| static/ | pool/ | my-lovely-picture/ | meta.txt | mobile.jpg | normal.jpg | tablet.jpg | ... The meta.txt is a simple text file with two lines of text: first the name of the image and second the Url to link to, which will be inserted in the appropriate Frontmatter fields on creating a new post: 12My Lovely Imagehttps://500px.com/photo/123456789/My-Lovely-Image Automate binding and provisioning on new postDevelopers are lazy and I do not make an exception. Having all these pool images and the meta informations, it would be nice, if Hexo just picks and processes one of the pool folders automatically, when I’m creating a new post by calling hexo new &quot;My shiny new post&quot; … and it was easier then I thought. Where to place the code for the automatismHexo has a great API to write plugins and it is not very difficult to setup a new plugin for this, which can be published to the NPM registry. But it is also possible to extend Hexo’s functionality by using a simple script. All you need is a script folder in the root of your Hexo project. Any JS files which is placed there, will be executed by Hexo. Therefore, lets use a script called \\scripts\\process-photo-on-new.js … Things an automatism should do - Step by Step Hook into the creation of a post Pick randomly one of the pool images Place the content of the meta.txt in the Frontmatter Move the 3 device-dependend images into the photos folder Step 1 - Hook into the creation of a postThe needed event, the automatism can hook on, is: 123hexo.on(&#x27;new&#x27;, function(data)&#123; //&#125;); It will be executed every time you call the hexo new command. The parameter data is an object with two fields: pathFull path to the MD file of the new post contentComplete content of the scaffold (template), which Hexo has used to create the new post; default is /scaffolds/post.md. By preloading the Hexo Front matter library and parsing data.content we get access to the definition of the new post: 1234567const front = require(&#x27;hexo-front-matter&#x27;);hexo.on(&#x27;new&#x27;, function(post)&#123; // parse article content var post = front.parse(data.content);&#125;); Step 2 - Pick randomly one of the pool imagesThere are some build-in variables to get the full path, for example, of the source folder, we can use to define the needed paths to the pool and the photo folder. 123456789const front = require(&#x27;hexo-front-matter&#x27;);hexo.on(&#x27;new&#x27;, function(post)&#123; var post = front.parse(data.content); // set the path variables var poolDir = hexo.source_dir.replace(&quot;\\source&quot;, hexo.config.static_dir) + &quot;pool&quot;; var photosDir = hexo.source_dir.replace(&quot;\\source&quot;, hexo.config.static_dir) + &quot;photos&quot;;&#125;); Next, we need to preload the Hexo FS library for file access, to list the content of the poolDir, including the subfolders, and filter out the meta files. Out of the resulting array we pick one randomly, to use for the new post: 123456789101112131415161718192021const front = require(&#x27;hexo-front-matter&#x27;);const fs = require(&#x27;hexo-fs&#x27;);hexo.on(&#x27;new&#x27;, function(post)&#123; var post = front.parse(data.content); var poolDir = hexo.source_dir.replace(&quot;\\source&quot;, hexo.config.static_dir) + &quot;pool&quot;; var photosDir = hexo.source_dir.replace(&quot;\\source&quot;, hexo.config.static_dir) + &quot;photos&quot;; // list all files var files = fs.listDirSync(poolDir); // filter the list to get meta files of each subfolder var metaFiles = files.filter(file =&gt; file.match(/.*[\\\\]meta.txt/g)); // pick one randomly var metaFile = metaFiles[Math.floor(Math.random() * metaFiles.length)]; // get the name of the picked photo (foldername) var photoName = metaFile.split(&quot;\\\\&quot;)[0];&#125;); Step 3 - Place the content of the meta.txt in the FrontmatterNow we have to read the meta file, place the data in the Frontmatter and save the article file: 123456789101112131415161718192021222324252627282930const front = require(&#x27;hexo-front-matter&#x27;);const fs = require(&#x27;hexo-fs&#x27;);hexo.on(&#x27;new&#x27;, function(post)&#123; var post = front.parse(data.content); var poolDir = hexo.source_dir.replace(&quot;\\source&quot;, hexo.config.static_dir) + &quot;pool&quot;; var photosDir = hexo.source_dir.replace(&quot;\\source&quot;, hexo.config.static_dir) + &quot;photos&quot;; var files = fs.listDirSync(poolDir); var metaFiles = files.filter(file =&gt; file.match(/.*[\\\\]meta.txt/g)); var metaFile = metaFiles[Math.floor(Math.random() * metaFiles.length)]; var photoName = metaFile.split(&quot;\\\\&quot;)[0]; // read meta file var meta = fs.readFileSync(poolDir + &quot;\\\\&quot; + metaFile); var metas = meta.split(&quot;\\n&quot;); // place file and additional info in the Frontmatter post.photograph.file = photoName + &quot;.jpg&quot;; post.photograph.name = metas[0]; post.photograph.link = metas[1]; // convert content back postStr = front.stringify(post); postStr = &#x27;---\\n&#x27; + postStr; // store article fs.writeFile(data.path, postStr, &#x27;utf-8&#x27;);&#125;); Step 4 - Move the 3 device-dependend images into the photos folderLast but not least, we have to move the pool images into the photos folder and remove the pool folder with all its processed content: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051const front = require(&#x27;hexo-front-matter&#x27;);const fs = require(&#x27;hexo-fs&#x27;);hexo.on(&#x27;new&#x27;, function(post)&#123; var post = front.parse(data.content); var poolDir = hexo.source_dir.replace(&quot;\\source&quot;, hexo.config.static_dir) + &quot;pool&quot;; var photosDir = hexo.source_dir.replace(&quot;\\source&quot;, hexo.config.static_dir) + &quot;photos&quot;; var files = fs.listDirSync(poolDir); var metaFiles = files.filter(file =&gt; file.match(/.*[\\\\]meta.txt/g)); var metaFile = metaFiles[Math.floor(Math.random() * metaFiles.length)]; var photoName = metaFile.split(&quot;\\\\&quot;)[0]; var meta = fs.readFileSync(poolDir + &quot;\\\\&quot; + metaFile); var metas = meta.split(&quot;\\n&quot;); post.photograph.file = photoName + &quot;.jpg&quot;; post.photograph.name = metas[0]; post.photograph.link = metas[1]; postStr = front.stringify(post); postStr = &#x27;---\\n&#x27; + postStr; fs.writeFile(data.path, postStr, &#x27;utf-8&#x27;); //copy normal image fs.copyFile( poolDir + &quot;\\\\&quot; + photoName + &quot;\\\\normal.jpg&quot;, photosDir + &quot;\\\\normal\\\\&quot; + photoName + &quot;.jpg&quot;, function() &#123; //copy tablet image fs.copyFile( poolDir + &quot;\\\\&quot; + photoName + &quot;\\\\tablet.jpg&quot;, photosDir + &quot;\\\\tablet\\\\&quot; + photoName + &quot;.jpg&quot;, function() &#123; //copy mobile image fs.copyFile( poolDir + &quot;\\\\&quot; + photoName + &quot;\\\\mobile.jpg&quot;, photosDir + &quot;\\\\mobile\\\\&quot; + photoName + &quot;.jpg&quot;, function() &#123; //remove processed pool folder fs.rmdirSync(poolDir + &quot;\\\\&quot; + photoName); &#125;); &#125;); &#125;);&#125;); Now it so easy to write a new post, because almost everything is set and I can concentrate on the article. Also, it is a nice surprise to see, which photo the script has chosen. The only thing I have to do from time to time, is to refill the pool folder with new images.","categories":[{"name":"Tools","slug":"Tools","permalink":"https://kiko.io/categories/Tools/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://kiko.io/tags/Hexo/"},{"name":"Blogging","slug":"Blogging","permalink":"https://kiko.io/tags/Blogging/"}]},{"title":"Localization with resource files in JavaScript web apps","subtitle":"How to work with Visual Studio resource files for localization in Single Page Applications","date":"2020-06-13","updated":"2021-05-17","path":"post/Localization-with-resource-files-in-JavaScript-web-apps/","permalink":"https://kiko.io/post/Localization-with-resource-files-in-JavaScript-web-apps/","excerpt":"There are plenty of editors out there to help you writing JavaScript web applications. As I’m working in my daily life with Visual Studio, it is a obvious choice for me. One of the most time saving tools in VS is the plugin ResXManager, which is an awesome assistant on managing the translations for a Desktop- or ASP.NET-App, which uses XML-based RESX files.","keywords":"plenty editors writing javascript web applications im working daily life visual studio obvious choice time saving tools plugin resxmanager awesome assistant managing translations desktop- aspnet-app xml-based resx files","text":"There are plenty of editors out there to help you writing JavaScript web applications. As I’m working in my daily life with Visual Studio, it is a obvious choice for me. One of the most time saving tools in VS is the plugin ResXManager, which is an awesome assistant on managing the translations for a Desktop- or ASP.NET-App, which uses XML-based RESX files. Mostly very localization is based on key/value pairs, defined in separate files for every language provided. Implementing several languages in pure JavaScript apps is a little more difficult, because it makes no sense to deal with big XML files in JS. All localization libraries in the market uses JSON for storing the translations and it is a little bit of work to find the right one for your requirements. Localization in JavaScriptFor a current project I use jquery-lang, because it provides the switch of the apps UI language without reloading and it is easy to implement. Thanks Rob Evans for your work… The definition of “tokens” in one JSON file for each language is quite easy: ../languages/en.json12345&#123; &quot;token&quot;: &#123; &quot;my-test&quot;: &quot;My Test in English&quot; &#125;&#125; ../languages/de.json12345&#123; &quot;token&quot;: &#123; &quot;my-test&quot;: &quot;Mein Test in Deutsch&quot; &#125;&#125; The usage also: 1&lt;div lang=&quot;en&quot; data-lang-token=&quot;my-test&quot;&gt; Using RESX and convert to JSON on buildHaving this, the most time consuming work is to enter the translations to the localization files. If you have hundreds of them, it is hard to keep the 2, 3 or more language files in sync. You need a helper… And here comes ResXManager to the rescue, if you work with VS … but it needs a conversation from RESX to the JSON format jquery-lang uses and this a task, which can be done on building the JS app, by using a task runner like Grunt. As there was no Grunt plugin/task out there to fit my needs, I have created grunt-resource2json (GitHub, NPM). The configuration in the gruntfile.js is like: gruntfile.js12345678910111213141516171819202122grunt.initConfig(&#123; resource2json: &#123; convert: &#123; options: &#123; format: &quot;jquery-lang&quot; &#125;, files: [ &#123; input: &quot;resources/Resource.resx&quot;, output: &quot;build/langpacks/en.json&quot; &#125;, &#123; input: &quot;resources/Resource.de-DE.resx&quot;, output: &quot;build/langpacks/de.json&quot; &#125;, &#123; input: &quot;resources/Resource.es-ES.resx&quot;, output: &quot;build/langpacks/es.json&quot; &#125; ] &#125; &#125;); It takes one RESX file (input) and converts it to a JSON file (output) in an array of files. The heavy work in the plugin is done by the library xml2js, which transforms the complete XML of the RESX file into a JSON object in one call. All I had to do, was to write all DATA nodes in a loop into the jquery-lang given structure and save it as JSON. Currently supported is the format for jquery-lang only, but it would be awesome, if you fork the code on GitHub and send me a Pull Request with the implementation of your needed format.","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://kiko.io/categories/JavaScript/"}],"tags":[{"name":"GitHub","slug":"GitHub","permalink":"https://kiko.io/tags/GitHub/"},{"name":"Visual Studio","slug":"Visual-Studio","permalink":"https://kiko.io/tags/Visual-Studio/"},{"name":"Resource","slug":"Resource","permalink":"https://kiko.io/tags/Resource/"},{"name":"Localization","slug":"Localization","permalink":"https://kiko.io/tags/Localization/"}]},{"title":"TFS/DevOps: Delete Remote Workspace","subtitle":null,"date":"2020-02-28","updated":"2021-05-17","path":"post/TFS-DevOps-Delete-Remote-Workspace/","permalink":"https://kiko.io/post/TFS-DevOps-Delete-Remote-Workspace/","excerpt":"If you are working with freelance developers and Azure DevOps/TFS with TFVC (Team Foundation Version Control) in your company, maybe this will look familiar to you: You hire a new freelancer and you want to reuse the hardware, including the complete software setup, to bring him/her to work as fast and straightforward as possible. You set up a new Azure Devops account with all necessary permissions and you think you’re done. No you are not…","keywords":"working freelance developers azure devops/tfs tfvc team foundation version control company familiar hire freelancer reuse hardware including complete software setup bring him/her work fast straightforward set devops account permissions youre not…","text":"If you are working with freelance developers and Azure DevOps/TFS with TFVC (Team Foundation Version Control) in your company, maybe this will look familiar to you: You hire a new freelancer and you want to reuse the hardware, including the complete software setup, to bring him/her to work as fast and straightforward as possible. You set up a new Azure Devops account with all necessary permissions and you think you’re done. No you are not… Everytime a user connects to a Team Project on Azure DevOps via Visual Studio and gets the code, VS is creating a remote workspace on the server, with the machine name as default, therefor it is not enough to wipe the profile and any other legacies of the last user from the machine. You also have to remove the remote workspace. Otherwise you will get an error message like that, if you are using a unique file structure on the developers hard disc: 1The working folder c://xxx is already in use by the workspace yyy;zzz on computer yyy The variable xxx stands for the blocked folder, yyy for the workspace/machine name and zzz for the users id on Azure DevOps. Unfortunately, there is no visual management console on Azure DevOps to manage your server workspaces, but there is a command line tool called tf.exe. The easiest way to get rid of the unused server workspace in 3 steps: Step 1Run Developer Command Prompt with Administrator privileges from Visual Studio 2019 and login with your Azure DevOps credentials. If the Login dialog doesn’t show up, force it by executing: 1tf.exe workspace Step 2Get a list of all remote workspaces available in your DevOps Collection by running the command: 1tf.exe workspaces /computer:* /owner:* /format:xml &gt; c:\\temp\\workspaces.xml You can get a list of all your workspaces by running tf workspaces, but the list only shows you the owner, but not the necessary ownerid and … it is nicer to have a file to search in. Step 3Find the abandoned workspace in the list and note its name and ownerid for running the command: 1tf workspace /delete &#123;WORKSPACE.name&#125;;&#123;WORKSPACE.ownerid&#125; Now your new colleague can create his own workspace on the same machine. UpdateIn case you want to switch your own DevOps account to another and use the same folder as before, you can certainly delete the local workspace, but this wont help, because you are still logged in at TeamExplorer and the folder knows to whom it belongs. Solution is easy: Quit Visual Studio Rename folder in ***_OLD or something Create new folder with the same name Enter C:\\Users\\YOUR-NAME\\appdata\\Local\\Microsoft\\Team Foundation\\VS-VERSION\\Cache and emtpy the folder to let Visual Studio forget who you are Remove all your Remote Workspaces as described above Start Visual Studio, connect in TeamExplorer to your TFS server and map the code to your folder More Info Microsoft Docs: Use Team Foundation version control commandsStackoverflow: How to remove TFS workspace mapping for another user","categories":[{"name":"Tools","slug":"Tools","permalink":"https://kiko.io/categories/Tools/"}],"tags":[{"name":"Visual Studio","slug":"Visual-Studio","permalink":"https://kiko.io/tags/Visual-Studio/"},{"name":"TFS/DevOps","slug":"TFS-DevOps","permalink":"https://kiko.io/tags/TFS-DevOps/"}]},{"title":"Better Input Change Event","subtitle":null,"date":"2019-11-26","updated":"2021-05-17","path":"post/Better-Input-Change-Event/","permalink":"https://kiko.io/post/Better-Input-Change-Event/","excerpt":"Often it is important to trigger an event, after the user of your website/web app has filled out an text input. You have to do something with the given value in JavaScript. The intended event for this is change, which will be triggered, when the user has ended changing by leaving the input with his cursor, mostly by using the TAB key. This works at some degree, if there is a physical keyboard, but not really on mobile devices … and for me is leaving the field often too late to start the upcoming event.","keywords":"important trigger event user website/web app filled text input javascript intended change triggered ended changing leaving cursor tab key works degree physical keyboard mobile devices … field late start upcoming","text":"Often it is important to trigger an event, after the user of your website/web app has filled out an text input. You have to do something with the given value in JavaScript. The intended event for this is change, which will be triggered, when the user has ended changing by leaving the input with his cursor, mostly by using the TAB key. This works at some degree, if there is a physical keyboard, but not really on mobile devices … and for me is leaving the field often too late to start the upcoming event. A better way to show the user the result of his entered value, could be the event input which fires on every key stroke, but could be way to often, if the triggered event is for example an AJAX call. Best solution is, to observe the users key strokes and trigger the event, when he stops typing. Then there is no extra action needed by the user and the event isn’t triggered multiple times. Here’s an implementation with jQuery: 12345678910$(&quot;#my-text-input&quot;).keyup(function () &#123; var $this = $(this); clearTimeout($.data(this, &#x27;timer&#x27;)); var wait = setTimeout(function () &#123; //do something with the value... &#125;, 1000); $(this).data(&#x27;timer&#x27;, wait);&#125;); Important is to wipe and set the timer on every key up, to achive that the event will be executed after 1 second after the last key stroke only.","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://kiko.io/categories/JavaScript/"}],"tags":[{"name":"jQuery","slug":"jQuery","permalink":"https://kiko.io/tags/jQuery/"}]},{"title":"Hexo and the Dark Mode ... revised","subtitle":"Second approach to implement 'prefers-color-scheme'","series":"A New Blog","date":"2019-10-26","updated":"2021-05-17","path":"post/Hexo-and-the-Dark-Mode-revised/","permalink":"https://kiko.io/post/Hexo-and-the-Dark-Mode-revised/","excerpt":"While writing my post Hexo and the Dark Mode a few days ago, I thought it would be nice, if I could switch between the normal (light) and the dark theme, I’ve created for the support of the OS-related Dark Mode, even manually. The only thing I needed was a toggle element and a little bit of JavaScript. Of course, I couldn’t manipulate the media query prefers-color-scheme itself, but introduce a different way by blog uses it. Instead of implementing the media query directly into my CSS (or Stylus) code, I used a root selector, which can be manipulated by JavaScript … something like this: 12345678910body &#123; background-color: white; color: black;&#125;[data-theme=&quot;dark&quot;] body &#123; background-color: black; color: white; &#125;&#125;","keywords":"writing post hexo dark mode days ago thought nice switch normal light theme ive created support os-related manually thing needed toggle element bit javascript couldnt manipulate media query prefers-color-scheme introduce blog implementing directly css stylus code root selector manipulated … 12345678910body &#123 background-color white color black&#125[data-theme=&quotdark&quot] body black &#125&#125","text":"While writing my post Hexo and the Dark Mode a few days ago, I thought it would be nice, if I could switch between the normal (light) and the dark theme, I’ve created for the support of the OS-related Dark Mode, even manually. The only thing I needed was a toggle element and a little bit of JavaScript. Of course, I couldn’t manipulate the media query prefers-color-scheme itself, but introduce a different way by blog uses it. Instead of implementing the media query directly into my CSS (or Stylus) code, I used a root selector, which can be manipulated by JavaScript … something like this: 12345678910body &#123; background-color: white; color: black;&#125;[data-theme=&quot;dark&quot;] body &#123; background-color: black; color: white; &#125;&#125; In every Stylus file, where I used @media prefers-dark to achieve the automatic switch by the OS, I changed this line into /[data-theme=&quot;dark&quot;] &amp; : 12345678#mobile-nav-header background-color: color-background /[data-theme=&quot;dark&quot;] &amp; background-color: dark-color-background img.avatar ... /[data-theme=&quot;dark&quot;] &amp; filter: brightness(85%) Some explanations on the Stylus syntax: / means the root of the DOM and &amp; points to the parent selector. Therefore the example will be rendered into this: 12345678910111213#mobile-nav-header &#123; background-color: #f1f1f1;&#125;[data-theme=&quot;dark&quot;] #mobile-nav-header &#123; background-color: #111;&#125;#mobile-nav-header img.avatar &#123;...&#125;[data-theme=&quot;dark&quot;] #mobile-nav-header img.avatar filter: brightness(85%);&#125; Only problem was: the “Root + Parent” Stylus selector doesn’t work in the block variables in the _extend.styl. So I had to copy all theme relevant styles directly to the elements, where such a block was used: @extend &lt;block-name&gt;. The Toggle SwitchIn the footer.ejs I added a toggle checkbox, where I could bind my JavaScript… 1234&lt;div id=&quot;footer-theme&quot;&gt; &lt;input type=&quot;checkbox&quot; id=&quot;theme-switch&quot;&gt; &lt;label for=&quot;theme-switch&quot;&gt;&lt;/label&gt;&lt;/div&gt; … and some CSS in the footer.styl, to style it: 12345678910111213141516171819202122input#theme-switch[type=checkbox] &#123; display:none;&#125;input#theme-switch[type=checkbox] + label height: 16px width: 16px display: inline-block padding: 12px font-size: 22px cursor: pointer &amp;:before display: inline-block font-size: inherit text-rendering: auto -webkit-font-smoothing: antialiased font-family: fa-icon-solid content: icon-mooninput#theme-switch[type=checkbox]:checked + label &amp;:before content: icon-sun The icon variables are defined in the _variables.styl like this: 12icon-moon = &quot;\\f186&quot;icon-sun = &quot;\\f185&quot; The JavaScriptEverything was now prepared to implement the switching code in JavaScript, which should support a manual switch by clicking the toggle element as well as the automatic switch by the OS. I wrapped all necessary code into a seperate JS file and placed a reference in the after-footer.ejs, which places it at the bottom of the HTML: 1&lt;%- js(&#39;js&#x2F;dark-mode-toggle.js&#39;) %&gt; 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758function detectColorScheme() &#123; var theme = &quot;light&quot;; //default // get last used theme from local cache if(localStorage.getItem(&quot;theme&quot;))&#123; if(localStorage.getItem(&quot;theme&quot;) === &quot;dark&quot;)&#123; theme = &quot;dark&quot;; &#125; &#125; else if(!window.matchMedia) &#123; // matchMedia not supported return false; &#125; else if(window.matchMedia(&quot;(prefers-color-scheme: dark)&quot;).matches) &#123; // OS has set Dark Mode theme = &quot;dark&quot;; &#125; // set detected theme if (theme === &quot;dark&quot;) &#123; setThemeDark(); &#125; else &#123; setThemeLight(); &#125;&#125;const toggleTheme = document.querySelector(&#x27;input#theme-switch[type=&quot;checkbox&quot;]&#x27;);function setThemeDark() &#123; localStorage.setItem(&#x27;theme&#x27;, &#x27;dark&#x27;); document.documentElement.setAttribute(&#x27;data-theme&#x27;, &#x27;dark&#x27;); toggleTheme.checked = true;&#125;function setThemeLight() &#123; localStorage.setItem(&#x27;theme&#x27;, &#x27;light&#x27;); document.documentElement.setAttribute(&#x27;data-theme&#x27;, &#x27;light&#x27;); toggleTheme.checked = false;&#125;// Listener for theme change by toggletoggleTheme.addEventListener(&#x27;change&#x27;, function(e) &#123; if (e.target.checked) &#123; setThemeDark(); &#125; else &#123; setThemeLight(); &#125;&#125;, false);// Listener for theme change by OSvar toggleOS = window.matchMedia(&#x27;(prefers-color-scheme: dark)&#x27;);toggleOS.addEventListener(&#x27;change&#x27;, function (e) &#123; if (e.matches) &#123; setThemeDark(); &#125; else &#123; setThemeLight(); &#125;&#125;);// call theme detectiondetectColorScheme(); By using the both addEventListener‘s, each switch will be recognized and this approach is capable to support even more themes, just by using different values in the data-theme attribute.","categories":[{"name":"Tools","slug":"Tools","permalink":"https://kiko.io/categories/Tools/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://kiko.io/tags/Hexo/"},{"name":"CSS","slug":"CSS","permalink":"https://kiko.io/tags/CSS/"},{"name":"Stylus","slug":"Stylus","permalink":"https://kiko.io/tags/Stylus/"},{"name":"Dark Mode","slug":"Dark-Mode","permalink":"https://kiko.io/tags/Dark-Mode/"}]},{"title":"Hexo and the Dark Mode","subtitle":"First approach to implement 'prefers-color-scheme'","series":"A New Blog","date":"2019-10-23","updated":"2021-05-17","path":"post/Hexo-and-the-Dark-Mode/","permalink":"https://kiko.io/post/Hexo-and-the-Dark-Mode/","excerpt":"Due to the fact, that nowadays everybody is talking about Dark Modes for Browsers and Operating Systems, in order to save battery or for easier reading (uhh, really?), I decided my blog should support that.","keywords":"due fact nowadays talking dark modes browsers operating systems order save battery easier reading uhh decided blog support","text":"Due to the fact, that nowadays everybody is talking about Dark Modes for Browsers and Operating Systems, in order to save battery or for easier reading (uhh, really?), I decided my blog should support that. Starting point is the new media query prefers-color-scheme, which is actually supported by all modern browsers. TechniqueMy first read was Tom Brow’s Dark mode in a website with CSS, where he shows how to use the media query. Simplified, this is it, assuming the light version is the default: 1234567891011body &#123; background-color: white; color: black;&#125;@media (prefers-color-scheme: dark) &#123; body &#123; background-color: black; color: white; &#125;&#125; Pimping CSS for automatic switchingTo support the automatic browser/OS-based automatic switch in Hexo, where Stylus is used, I had to change some template files. First the _variables.styl: 1234567891011121314// existing color variablescolor-background = #f1f1f1color-foreground = #111color-border = #ddd...// new dark color variablesdark-color-background = #111dark-color-foreground = #eeedark-color-border = #000...// new media query variableprefers-dark = &quot;(prefers-color-scheme: dark)&quot; Next step was to change the _extend.styl, where some Stylus variables are defining complete blocks to extend. Here I had to supplement all lines, where something mode-dependend was defined, by adding the new prefers-dark media query and beneath the new ‘dark’ equivalence of the style: 12345678910111213141516171819$base-style hr ... border: 1px dashed color-border-article @media prefers-dark border: 1px dashed dark-color-border-article ...$block ... background: color-block box-shadow: 1px 2px 3px color-border border: 1px solid color-border @media prefers-dark background: dark-color-block box-shadow: 1px 2px 3px dark-color-border border-color: dark-color-border... The same changes I had to do in every template styl file, where one of the colors or other mode dependent style was used. For example: 12345678#mobile-nav-header background-color: color-background @media prefers-dark background-color: dark-color-background img.avatar ... @media prefers-dark filter: brightness(85%) This will be rendered as: 123456789101112131415#mobile-nav-header &#123; background-color: #f1f1f1;&#125;@media (prefers-color-scheme: dark) &#123; #mobile-nav-header &#123; background-color: #111; &#125;&#125;#mobile-nav-header img.avatar &#123; ...&#125;@media (prefers-color-scheme: dark) &#123; filter: brightness(85%);&#125; Please note the use of filter:brightness() in the example. It is always advisable to darken the images too, because they can really pop out on dark backgrounds.","categories":[{"name":"Tools","slug":"Tools","permalink":"https://kiko.io/categories/Tools/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://kiko.io/tags/Hexo/"},{"name":"CSS","slug":"CSS","permalink":"https://kiko.io/tags/CSS/"},{"name":"Stylus","slug":"Stylus","permalink":"https://kiko.io/tags/Stylus/"},{"name":"Dark Mode","slug":"Dark-Mode","permalink":"https://kiko.io/tags/Dark-Mode/"}]},{"title":"A New Blog: Blogging and Synching en route","subtitle":"Part Three of having fun with Hexo and GitHub Pages","series":"A New Blog","date":"2019-10-01","updated":"2021-05-17","path":"post/A-New-Blog-Blogging-and-Synching-en-route/","permalink":"https://kiko.io/post/A-New-Blog-Blogging-and-Synching-en-route/","excerpt":"I work with several devices, some Windows, some Android, and sometimes I have time to write on my articles at home (Notebook, Tablet), in my spare time in the office (Desktop, Laptop) or on my way to somewhere (Smartphone). Right now I’m am in a barber shop, waiting for my haircut and write these lines. So, wherever I am, I need the Hexo project locally, but in sync on a digital device. The blog is synced via Dropbox, but hosted on GitHub Pages, so on every device I need the publishing functions of Git too.","keywords":"work devices windows android time write articles home notebook tablet spare office desktop laptop smartphone im barber shop waiting haircut lines hexo project locally sync digital device blog synced dropbox hosted github pages publishing functions git","text":"I work with several devices, some Windows, some Android, and sometimes I have time to write on my articles at home (Notebook, Tablet), in my spare time in the office (Desktop, Laptop) or on my way to somewhere (Smartphone). Right now I’m am in a barber shop, waiting for my haircut and write these lines. So, wherever I am, I need the Hexo project locally, but in sync on a digital device. The blog is synced via Dropbox, but hosted on GitHub Pages, so on every device I need the publishing functions of Git too. Sync Hexo ProjectBest option for me to achieve this was Dropbox. Another benefit on that is: I can work on the structure of the blog wherever I am and commit when the new feature or improvement is done, because all Git related files are always in sync too. Writing, Editing and Publishing on WindowsMy preferred editor is Visual Studio Code. Good file handling, easy writing, full Git integration and tons of other plugins and helpers. Chapeau Microsoft, well done. Some of the following VS Code plugins makes working with Hexo on GitHub pages a breeze: Adds Hexo commands like init, new, generate, server and clean to the VS Code command palette. Keyboard shortcuts for basic formatting, automatic list editing, autocomlete for images, table formatter and much more for an easier handling of Markdown. Markdown linting and style checking Adds syntax highlighting and code completion to Stylus files Complete visual management of your repositories in VS Code View a Git Graph of your repository with all changes and manage commits. With this editor and its helpers, I’m just two clicks away from publishing a new article or even a new version of the Hexo blog itself. Writing on AndroidThere are a lot of Markdown editors available on Google Play, but one is outstanding: iA Writer for Android. I can open my posts or drafts directly from Dropbox, without the need of any sychronization. Open, write, close, done. Publishing on AndroidThere are some Git related Android apps out there, but no solution was satisfying. Furthermore, I didn’t really need Git here, because I didn’t want to have all source files on my smartphone. I’m working directly on the Dropbox stored MD files via iA Writer. Finally and most important, Git won’t be enough, because before publishing, I have to run hexo generate! Therefore some sort of automatic transfer from Dropbox to GitHub is also out of the game. What I needed, was to tell a server at a certain point of time ‘Hey, please publish for me’, using the only connection I have: Dropbox. Introducing a DemonI have a little media server, running on Windows, and he is synchronizing some folders with Dropbox. He could do the job! After I installed all necessary packages, like NodeJS, Hexo and Git, I included the project folder into the sync. Next step was to design a so called Hexo Command File, a simple TXT file, which holds commands in single lines, extended with execution times, when they were successfully running. 12345postdraft: A-New-Blog-Blogging-and-Synching-en-routepublishnewdraft: &quot;A New Blog: Blogging and Synching en route&quot; @ 2019-09-30 21:15regenerate @ 2019-09-29 16:40:01publish @ 2019-09-29 16:40:10 These commands are predefined, because they bundle several real commands and I didn’t want to deal with real commands, due to security reasons. The unprocessed commands are standing at the top of the file (in execution order!) and parameters are separated from the command by a colon and delimited by commas. &lt;command&gt;: [&lt;param1&gt;, ...] @ &lt;execution time&gt; Next step was to create a program to work as an executing demon, who monitors the Hexo Command File (synced by Dropbox) on my server and executes commands without execution dates. I decided to create a simple Console Application in C# and use the built-in Windows Task Scheduler for running it every 2 minutes. The application is called HexoCommander and is available at GitHub. It expects the Hexo Command File to be named hexo-commands.txt, located in the same folder, and provides the following commands: newdraft: “&lt;title&gt;” … runs hexo new draft &quot;&lt;title&gt;&quot; Creates a new draft. postdraft: “&lt;filename without extension&gt;” … runs hexo publish &quot;&lt;filename without extension&gt;&quot; Makes a post out of a draft. regenerate … runs hexo clean hexo generate Wipes all Hexo static pages and generates them new. publish … runs hexo generate git add &quot;source/*&quot; &quot;docs/*&quot; git commit -m &quot;Remote publication via HexoCommander&quot; git push origin master Generates Hexo static pages, stage changes on drafts, posts and static pages, commits the changes with a generic message and pushes them to the server. Running the demonI would have never expected, that the trickiest part was to get HexoCommander running via Windows Task Scheduler. What a mess! I finally find the solution here: Compile HexoCommander in a x86 configuration Create a new task in Task Scheduler with Trigger Dialy Recur every 1 days Repeat task every 2 minutes for a duration of 1 day Action Program/Script: %systemroot%\\Syswow64\\cmd.exe Add Arguments: /C “C:\\MyPath\\HexoCommander.exe /workdir=C:\\MyPath” Start In: **%systemroot%\\Syswow64\\** Because some executing commands in the chain are NOT 64-bit, I had to force Task Scheduler to run the 32-bit Command Shell in its own path (see ‘Start In’ and don’t forget the closing backslash) and take the 32-bit compiled HexoCommander as argument after the parameter /C (forcing command to terminate), including its own argument for defining the real working directory. Mind bending, but works…","categories":[{"name":"Tools","slug":"Tools","permalink":"https://kiko.io/categories/Tools/"}],"tags":[{"name":"VS Code","slug":"VS-Code","permalink":"https://kiko.io/tags/VS-Code/"},{"name":"Hexo","slug":"Hexo","permalink":"https://kiko.io/tags/Hexo/"},{"name":"GitHub","slug":"GitHub","permalink":"https://kiko.io/tags/GitHub/"},{"name":"Blogging","slug":"Blogging","permalink":"https://kiko.io/tags/Blogging/"}]},{"title":"A New Blog: Customizing Hexo","subtitle":"Part Two of having fun with Hexo and GitHub Pages","series":"A New Blog","date":"2019-09-25","updated":"2021-05-17","path":"post/A-New-Blog-Customizing-Hexo/","permalink":"https://kiko.io/post/A-New-Blog-Customizing-Hexo/","excerpt":"Hexo is a great tool to get quick results (see Part One of this series), when you decide to have a blog and its defaults are practical, but it’s power lies in the possiblities of customization via plugins. On the official plugin page, there are actually 302 plugins listed, but there are many more and no wish will be unsatisfied. I will show you which of these I found worth to work with…","keywords":"hexo great tool quick results part series decide blog defaults practical power lies possiblities customization plugins official plugin page listed unsatisfied show found worth work with…","text":"Hexo is a great tool to get quick results (see Part One of this series), when you decide to have a blog and its defaults are practical, but it’s power lies in the possiblities of customization via plugins. On the official plugin page, there are actually 302 plugins listed, but there are many more and no wish will be unsatisfied. I will show you which of these I found worth to work with… Relative Image PathThe build-in way to include images in your posts works fine, but it is a little aside the normal way to declare images in Markdown. The plugin [Hexo Asset Link] corrects that. After installing via npm install hexo-asset-link --save you can write this: ![Test Image](hello-world/image-1.png) The best is, that VS Code’s Markdown can now show the image. UPDATE:Actually the plugin destroys external links, so don’t use it until this is fixed … or go to node_modules &gt; hexo-asset-link &gt; index.js in your project and change in line 22 protocal to protocol. UPDATE from Update:liolok, the author of the plugin has merged my pull request and published a new new version without the typo. It works now as expected. Hide PostsA new Hexo project comes with a sample post called Hello World. This is fine to play around with, but you don’t want to publish it. Here comes a Hexo plugin to the rescue called Hexo Hide Posts. After installing, you just have to write hidden: true to the Front Matter of you post and it won’t be shown on the blog, but it is still available by URL. Static FilesHexo has the concept of Assets Folders, but for static files, beside article based files, I find it more useful to have a STATIC folder and copy the contents on every build into the publish folder. A good helper for this approach is the plugin Hexo Generator Copy. Install it by running npm install hexo-generator-copy --save and add static_dir: static to your _config.yml and you are done. ![Hexo Static Files](/post/A-New-Blog-Customizing-Hexo/vscode-1.png) FeedThe default Hexo layout has an Atom Feed icon in the upper right corner, but strangely no feed file is generated on build. You need to install the plugin Hexo Feed Generator to fix this, by running npm install hexo-generator-feed --save and copy following section into the _config.yml: 123456789feed: type: atom path: atom.xml limit: 20 hub: content: content_limit: 140 content_limit_delim: &#x27; &#x27; order_by: -date Manifest for PWAIn these modern times it’s always a good idea, that your blog feels like an App. For this you need a manifest file (JSON) an several icons (PNG). You can generate these files very fast with the Web App Manifest Generator and store it in your static folder. To bind this file into your blog, you can use the plugin Hexo PWA. Run npm install --save hexo-pwa and copy following section to your _config.yml, where you take the settings from your generated manifest file: 1234567891011121314151617pwa: manifest: path: /manifest.json body: name: myblog.de short_name: My Blog icons: - src: /images/icon-192x192.png sizes: 192x192 type: image/png - src: /images/icon-512x512.png sizes: 512x512 type: image/png start_url: /index.html theme_color: &#x27;#025ab1&#x27; background_color: &#x27;#dddddd&#x27; display: standalone Sitemap FileTo help Google and others a bit to index your blog, it is advisable to provide a sitemap file. Here comes Hexo Generator Sitemap to the rescue. Install it by running the command npm install hexo-generator-sitemap --save. You can configure it via _config.yml: 123sitemap: path: sitemap.xml template: ./sitemap-template.xml The plugin installation doesn’t create the needed sitemap-template file, so be sure you grab a copy from the plugins repository: https://github.com/hexojs/hexo-generator-sitemap/blob/master/sitemap.xml CommentingHexo doesn’t have a commenting system, but it’s prepared to stick Disqus comments under each article. Just create a new Disqus account for your blog and note the given short name. By adding following section to the _config.yml Hexo shows the commenting section: 12disqus_enabled: truedisqus_shortname: my-blog Inifinite ScrollHexo shows as much articles at the start page as configured in _config.yml under index_generator.per_page, but it’s nicer to load more articles as you scroll by using the Hexo script Inifinite Scroll. Install by adding following little script in themes &amp; gt; layout &gt; _partial &gt; after-footer.ejs 12345678&lt;script src=&quot;//cdn.jsdelivr.net/gh/frontendsophie/hexo-infinite-scroll@2.0.0/dist/main.js&quot;&gt;&lt;/script&gt; &lt;script&gt; infiniteScroll(&#123; showNum: 5, style: &#x27;line-scale&#x27;, color: &#x27;#025ab1&#x27; &#125;)&lt;/script&gt; Back To TopIts nice to support the reader on scolling by providing a Scroll-To-Top button. The easiest way to get this, is the script Vanilla Back To Top. Just add follwing to themes &gt;layout &gt; _partial &gt; after-footer.ejs: 123456789101112131415&lt;script&gt;addBackToTop(&#123; diameter: 30, backgroundColor: &#x27;rgb(0, 90, 180)&#x27;, textColor: &#x27;#fff&#x27;&#125;)&lt;/script&gt;&lt;style&gt;#back-to-top &#123; border-radius: 0; opacity: 0.6;&#125;#back-to-top:hover &#123; opacity: 1;&#125;&lt;/style&gt;","categories":[{"name":"Tools","slug":"Tools","permalink":"https://kiko.io/categories/Tools/"}],"tags":[{"name":"VS Code","slug":"VS-Code","permalink":"https://kiko.io/tags/VS-Code/"},{"name":"Hexo","slug":"Hexo","permalink":"https://kiko.io/tags/Hexo/"},{"name":"Blogging","slug":"Blogging","permalink":"https://kiko.io/tags/Blogging/"}]},{"title":"A New Blog: VS Code, Hexo and GitHub Pages","subtitle":"Part One of having fun with Hexo and GitHub Pages","series":"A New Blog","date":"2019-09-24","updated":"2021-05-17","path":"post/A-New-Blog-VS-Code-Hexo-and-GitHub-Pages/","permalink":"https://kiko.io/post/A-New-Blog-VS-Code-Hexo-and-GitHub-Pages/","excerpt":"A few days ago I puzzled over a technical problem regarding SQL Server, Active Directory and Visual Studio Database Projects. With tips, hints and snippets from several websites I got it running and the solution was absolutely memorable. For myself and for others. Nothing is harder than to know ‘you did this before…’, but not to remember how. Because of this strong leaning towards oblivion, I started over 20 years ago my very first website zerbit.de, manually crafted with Classic ASP and a SQL Server database as backend, with an editor, tagging, categories and so on. It was really exciting to build this blog from scratch and writing articles for it, but it was so time consuming to expand the features of the website and keep it running, that some day I quit it silently. So, to document the solution mentioned above, I could use tools like OneNote or others, like in the past years, but this would be just for me and not for all developers, who have a similar problem. I felt it would be unfair to participate from the knowledge of others to get my solution and dont give something back. I decided to write an article just in HTML and publish it on my personal GitHub Page that I didn’t used so far. Ok, just Text … ugly. Just a little CSS and a little more structure and maybe I should do something with Vue JS … STOP … It would be better to pick one of the cool new static website generators based on Node.js, to detain myself from inventing the wheel again and save my time to write articles. So I did a little research and found HEXO … Bingo! I can work with my favorite editor Visual Studio Code, its all HTML, JavaScript and CSS, I can write my articles in Markdown and Hexo has a lot of helpers for stuff Markdown doesn’t provide, it produces static files and works only with files, therefore no need for a database … and it is well documented.","keywords":"days ago puzzled technical problem sql server active directory visual studio database projects tips hints snippets websites running solution absolutely memorable harder before… remember strong leaning oblivion started years website zerbitde manually crafted classic asp backend editor tagging categories exciting build blog scratch writing articles time consuming expand features day quit silently document mentioned tools onenote past developers similar felt unfair participate knowledge dont give back decided write article html publish personal github page didnt text … ugly css structure vue js stop pick cool static generators based nodejs detain inventing wheel save research found hexo bingo work favorite code javascript markdown lot helpers stuff doesnt provide produces files works documented","text":"A few days ago I puzzled over a technical problem regarding SQL Server, Active Directory and Visual Studio Database Projects. With tips, hints and snippets from several websites I got it running and the solution was absolutely memorable. For myself and for others. Nothing is harder than to know ‘you did this before…’, but not to remember how. Because of this strong leaning towards oblivion, I started over 20 years ago my very first website zerbit.de, manually crafted with Classic ASP and a SQL Server database as backend, with an editor, tagging, categories and so on. It was really exciting to build this blog from scratch and writing articles for it, but it was so time consuming to expand the features of the website and keep it running, that some day I quit it silently. So, to document the solution mentioned above, I could use tools like OneNote or others, like in the past years, but this would be just for me and not for all developers, who have a similar problem. I felt it would be unfair to participate from the knowledge of others to get my solution and dont give something back. I decided to write an article just in HTML and publish it on my personal GitHub Page that I didn’t used so far. Ok, just Text … ugly. Just a little CSS and a little more structure and maybe I should do something with Vue JS … STOP … It would be better to pick one of the cool new static website generators based on Node.js, to detain myself from inventing the wheel again and save my time to write articles. So I did a little research and found HEXO … Bingo! I can work with my favorite editor Visual Studio Code, its all HTML, JavaScript and CSS, I can write my articles in Markdown and Hexo has a lot of helpers for stuff Markdown doesn’t provide, it produces static files and works only with files, therefore no need for a database … and it is well documented. Installation.. is quite easy, as described here: https://hexo.io/docs/setup Create folder and open in VS Code Open VS Code Terminal window Install Hexo with $ npm install -g hexo-cli Init Hexo project with $ hexo init Install dependencies with npm install Done WritingCreate new post/draftHexo has posts and drafts, whereat drafts has to published via a Hexo command to become a post. To create an article use the command hexo new post|draft &quot;My Title&quot;. The title will be converted in a URL-encoded string and will be used as file name and url. Meta dataEvery post/draft starts with its header (so called Front Matter) to store some meta data, which describes the post, like title, date, tags or categories. This is used by Hexo to classify and arrange your post during the build. MarkdownHexo posts/drafts are written in Markdown. Good syntax reference are the Markdown Guide and the more detailed Markdown Syntax Guide. ExcerptIs is usual to show a short excerpt an the start page of a blog, to keep it compact and teasering the user to click on a READ MORE button. To achieve this, you just have to add following comment to your article. Everything above is the excerpt and everything below is only shown, when you enter the article: &lt;!-- more --&gt; ImagesSome articles will contain images to illustrate something and the question is, where should they be stored? Answer: In a folder beside the post/draft, which has the same name as the article MD file. To get this, you have to activate the setting post_asset_folder in your _config.yml. Now this folder will be created automatically, when you add a new post/draft. In your Markdown you reference your image with: &#123;% asset_img image-1.png \"Test Image\" %&#125; BuildHexo is a website generator, so a build will generate the whole website in a special folder, which has to be published. This output folder can be configured in the _config.yml: public_dir: public To wipe the output folder, run the command: hexo clean To start the build, run: hexo generate To view the website via the build-in local Hexo server, run: hexo server PublishingMost “complex” task was to publish the new blog on GitHub Pages. My first approach was to use my personal page, as I did with my single HTML file, but this didn’t work, because I wanted to store the whole project on GitHub and it is not possible to point a personal page to the subdirectory docs or use a different branch as master. The simple solution was to create a new repository, named after my my blog kiko.io, to store teh whole project and point the GitHub Page to the subdirectory docs in the settings of the repository. By overriding the default publish folder of Hexo in _config.yml … public_dir: docs … everything was set up. Commit and Push via git and done. Hexo has its own deploying mechanism and it is advisable to disable it, by commenting out the Deployment section _config.yml. Next step was to use my own custom domain for the blog. To achieve this, the most easiest way is to create a text file named CNAME (without extension!) with the content of the domain in a single line and publish this file in the root of the docs folder. Github will recognize this file and do the setup automatically. To point the domain to GitHub, I had to create following A records in my domain providers DNS settings: 185.199.108.153 185.199.109.153 185.199.110.153 185.199.111.153 Last step was to enable Enforce HTTPS in the repositories settings.","categories":[{"name":"Tools","slug":"Tools","permalink":"https://kiko.io/categories/Tools/"}],"tags":[{"name":"VS Code","slug":"VS-Code","permalink":"https://kiko.io/tags/VS-Code/"},{"name":"Hexo","slug":"Hexo","permalink":"https://kiko.io/tags/Hexo/"},{"name":"GitHub","slug":"GitHub","permalink":"https://kiko.io/tags/GitHub/"},{"name":"Blogging","slug":"Blogging","permalink":"https://kiko.io/tags/Blogging/"}]},{"title":"How-To: Visual Studio Database Project and ADSI","subtitle":null,"date":"2019-09-17","updated":"2021-05-17","path":"post/How-To-Visual-Studio-Database-Project-and-ADSI/","permalink":"https://kiko.io/post/How-To-Visual-Studio-Database-Project-and-ADSI/","excerpt":"If you are working with a Visual Studio Database Project and have to deal with data from the Active Directory via a Linked Server, you have to announce the data structure of the AD data in order to get the project compiled.","keywords":"working visual studio database project deal data active directory linked server announce structure ad order compiled","text":"If you are working with a Visual Studio Database Project and have to deal with data from the Active Directory via a Linked Server, you have to announce the data structure of the AD data in order to get the project compiled. Step 1 - Linking to the Active DirectoryFirst of all you have to connect your SQL Server to the AD permanently, by running following SQL script once on your SQL Server: USE [master] GO EXEC master.dbo.sp_addlinkedserver @server = N&#39;ADSI&#39;, @srvproduct=N&#39;Active Directory Service Interfaces&#39;, @provider=N&#39;ADSDSOObject&#39;, @datasrc=N&#39;adsdatasource&#39; EXEC master.dbo.sp_addlinkedsrvlogin @rmtsrvname=N&#39;ADSI&#39;, @useself=N&#39;False&#39;, @locallogin=NULL, @rmtuser=N&#39;mydomain\\myadminuser&#39;, @rmtpassword=&#39;mypassword&#39; GO EXEC master.dbo.sp_serveroption @server=N&#39;ADSI&#39;, @optname=N&#39;collation compatible&#39;, @optvalue=N&#39;false&#39; GO EXEC master.dbo.sp_serveroption @server=N&#39;ADSI&#39;, @optname=N&#39;data access&#39;, @optvalue=N&#39;true&#39; GO EXEC master.dbo.sp_serveroption @server=N&#39;ADSI&#39;, @optname=N&#39;dist&#39;, @optvalue=N&#39;false&#39; GO EXEC master.dbo.sp_serveroption @server=N&#39;ADSI&#39;, @optname=N&#39;pub&#39;, @optvalue=N&#39;false&#39; GO EXEC master.dbo.sp_serveroption @server=N&#39;ADSI&#39;, @optname=N&#39;rpc&#39;, @optvalue=N&#39;false&#39; GO EXEC master.dbo.sp_serveroption @server=N&#39;ADSI&#39;, @optname=N&#39;rpc out&#39;, @optvalue=N&#39;false&#39; GO EXEC master.dbo.sp_serveroption @server=N&#39;ADSI&#39;, @optname=N&#39;sub&#39;, @optvalue=N&#39;false&#39; GO EXEC master.dbo.sp_serveroption @server=N&#39;ADSI&#39;, @optname=N&#39;connect timeout&#39;, @optvalue=N&#39;0&#39; GO EXEC master.dbo.sp_serveroption @server=N&#39;ADSI&#39;, @optname=N&#39;collation name&#39;, @optvalue=null GO EXEC master.dbo.sp_serveroption @server=N&#39;ADSI&#39;, @optname=N&#39;lazy schema validation&#39;, @optvalue=N&#39;false&#39; GO EXEC master.dbo.sp_serveroption @server=N&#39;ADSI&#39;, @optname=N&#39;query timeout&#39;, @optvalue=N&#39;0&#39; GO EXEC master.dbo.sp_serveroption @server=N&#39;ADSI&#39;, @optname=N&#39;use remote collation&#39;, @optvalue=N&#39;true&#39; GO EXEC master.dbo.sp_serveroption @server=N&#39;ADSI&#39;, @optname=N&#39;remote proc transaction promotion&#39;, @optvalue=N&#39;true&#39; GO Step 2 - Fetching ADSI dataTo get data, use OpenQuery against the Linked Server. In order to get only persons and no system accounts, you should filter out all users, which has no firstname (givenName) or lastname (sn): SELECT UserPrincipalName, DisplayName, sAMAccountName AS [SamAccountName], sn AS [LastName], givenName AS [FirstName], title AS [Title], Mail as [MailAddress], department AS [Department], l AS [Location], postalCode AS [PostCode], streetAddress AS [Street], st AS [State] FROM OpenQuery(ADSI, &#39; SELECT UserPrincipalName, DisplayName, sAMAccountName, sn, givenName, department, title, Mail, l, postalCode, streetAddress, st FROM &#39;&#39;LDAP://mydomain.de/DC=mydomain,DC=de&#39;&#39; WHERE objectClass = &#39;&#39;User&#39;&#39; AND objectCategory = &#39;&#39;Person&#39;&#39; AND sn=&#39;&#39;*&#39;&#39; AND givenName = &#39;&#39;*&#39;&#39; &#39;) In most cases you’re done with that … except your organisation has more the 900 users! Then you have to split the fetch in several requests, because SQL Server quits with an error, when trying to read more than 900 records via ADSI. Best option is, to filter the ADSI statement by something like ‘get all user starting with a to j’, when you are sure, that in this case less than 900 records will be given back and repeat the statement several times and glue the data together via a UNION statement: SELECT UserPrincipalName, DisplayName, sAMAccountName AS [SamAccountName], sn AS [LastName], givenName AS [FirstName], title AS [Title], Mail as [MailAddress], department AS [Department], l AS [Location], postalCode AS [PostCode], streetAddress AS [Street], st AS [State] FROM ( SELECT * FROM OpenQuery(ADSI, ' SELECT UserPrincipalName, DisplayName, sAMAccountName, sn, givenName, department, title, Mail, l, postalCode, streetAddress, st FROM ''LDAP://mydomain.de/DC=mydomain,DC=de'' WHERE objectClass = ''User'' AND objectCategory = ''Person'' AND sn=''*'' AND givenName = ''*'' AND sAMAccountName &lt;= ''j'' ') UNION ALL SELECT * FROM OpenQuery(ADSI, ' SELECT [...same as above] FROM ''LDAP://mydomain.de/DC=mydomain,DC=de'' WHERE objectClass = ''User'' AND objectCategory = ''Person'' AND sn=''*'' AND givenName = ''*'' AND sAMAccountName &gt; ''j'' AND sAMAccountName &lt; ''p'' ') UNION ALL SELECT * FROM OpenQuery(ADSI, ' SELECT [...same as above] FROM ''LDAP://mydomain.de/DC=mydomain,DC=de'' WHERE objectClass = ''User'' AND objectCategory = ''Person'' AND sn=''*'' AND givenName = ''*'' AND sAMAccountName &gt;= ''p'' ') ) AD When you store this as a VIEW, you can join it wherever you want on SQL Server: CREATE VIEW [dbo].[vADUsers] AS [...SQL code from above] GO Step 3 - SQL Server Database ProjectIf you work with a SQL Server Database Project, to have the complete structure of your database available in a version control system, you will get some reference errors on compiling and publishing your newly added SQL View vADUsers and on some objects, which rely on this View, because of following problems: Project doesn’t know the Linked Server ADSI The structure (fields) of the data source is unknown Declare the Linked ServerTo show the Project that there is a Linked Server called ADSI, just add following lines at the start of your view: sp_addlinkedserver 'ADSI' GO CREATE VIEW [dbo].[vADUsers] AS [...SQL code from above] This mimics the adding of a Linked Server, but will be ignored by SQL Server on publish, because you already have a Linked Server with this name. The project is happy with it. Declare the data structureWhen you use the SQL-View vADUsers in a Stored Procedure for example, this object won’t compile, because the project knows nothing about the fields of the ADSI data source. The SELECT in the view is not enough. You have to add an empty SELECT to the View vADUsers, just for the declaration of the fields and without returning any records and join this via UNION with the other statements: sp_addlinkedserver 'ADSI' GO CREATE VIEW [dbo].[vtADAllUsers] AS SELECT UserPrincipalName, DisplayName, sAMAccountName AS [SamAccountName], sn AS [LastName], givenName AS [FirstName], title AS [Title], Mail as [MailAddress], department AS [Department], l AS [Location], postalCode AS [PostCode], streetAddress AS [Street], st AS [State] FROM ( -- Fake SELECT to declare the structure of the view SELECT TOP 0 '' UserPrincipalName, '' DisplayName, '' sAMAccountName, '' sn, '' givenName, '' department, '' title, '' Mail, '' l, '' postalCode, '' streetAddress, '' st UNION ALL SELECT * FROM OpenQuery(ADSI, ' SELECT UserPrincipalName, DisplayName, sAMAccountName, sn, givenName, department, title, Mail, l, postalCode, streetAddress, st FROM ''LDAP://mydomain.de/DC=mydomain,DC=de'' WHERE objectClass = ''User'' AND objectCategory = ''Person'' AND sn=''*'' AND givenName = ''*'' AND sAMAccountName &gt;= ''j'' ') UNION ALL SELECT * FROM OpenQuery(ADSI, ' SELECT [...same as above] FROM ''LDAP://mydomain.de/DC=mydomain,DC=de'' WHERE objectClass = ''User'' AND objectCategory = ''Person'' AND sn=''*'' AND givenName = ''*'' AND sAMAccountName &lt; ''j'' AND sAMAccountName &gt; ''p'' ') UNION ALL SELECT * FROM OpenQuery(ADSI, ' SELECT [...same as above] FROM ''LDAP://mydomain.de/DC=mydomain,DC=de'' WHERE objectClass = ''User'' AND objectCategory = ''Person'' AND sn=''*'' AND givenName = ''*'' AND sAMAccountName &lt;= ''p'' ') ) AD Now, you can fetch data from Active Directory and store the code in a Database Project properly. HAPPY CODING :)","categories":[{"name":"SQL","slug":"SQL","permalink":"https://kiko.io/categories/SQL/"}],"tags":[{"name":"ADSI","slug":"ADSI","permalink":"https://kiko.io/tags/ADSI/"},{"name":"Visual Studio","slug":"Visual-Studio","permalink":"https://kiko.io/tags/Visual-Studio/"},{"name":"Database Project","slug":"Database-Project","permalink":"https://kiko.io/tags/Database-Project/"}]}],"categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://kiko.io/categories/JavaScript/"},{"name":"Discoveries","slug":"Discoveries","permalink":"https://kiko.io/categories/Discoveries/"},{"name":"Tools","slug":"Tools","permalink":"https://kiko.io/categories/Tools/"},{"name":"Photo-Editing","slug":"Photo-Editing","permalink":"https://kiko.io/categories/Photo-Editing/"},{"name":"Misc","slug":"Misc","permalink":"https://kiko.io/categories/Misc/"},{"name":"UI-Design","slug":"UI-Design","permalink":"https://kiko.io/categories/UI-Design/"},{"name":"C#","slug":"C","permalink":"https://kiko.io/categories/C/"},{"name":"SQL","slug":"SQL","permalink":"https://kiko.io/categories/SQL/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://kiko.io/tags/Hexo/"},{"name":"Blogging","slug":"Blogging","permalink":"https://kiko.io/tags/Blogging/"},{"name":"Imaging","slug":"Imaging","permalink":"https://kiko.io/tags/Imaging/"},{"name":"ES6","slug":"ES6","permalink":"https://kiko.io/tags/ES6/"},{"name":"Github","slug":"Github","permalink":"https://kiko.io/tags/Github/"},{"name":"Great Finds","slug":"Great-Finds","permalink":"https://kiko.io/tags/Great-Finds/"},{"name":"Publishing","slug":"Publishing","permalink":"https://kiko.io/tags/Publishing/"},{"name":"Share","slug":"Share","permalink":"https://kiko.io/tags/Share/"},{"name":"SVG","slug":"SVG","permalink":"https://kiko.io/tags/SVG/"},{"name":"GitHub","slug":"GitHub","permalink":"https://kiko.io/tags/GitHub/"},{"name":"Plugin","slug":"Plugin","permalink":"https://kiko.io/tags/Plugin/"},{"name":"Lightroom","slug":"Lightroom","permalink":"https://kiko.io/tags/Lightroom/"},{"name":"Presets","slug":"Presets","permalink":"https://kiko.io/tags/Presets/"},{"name":"Windows","slug":"Windows","permalink":"https://kiko.io/tags/Windows/"},{"name":"Theming","slug":"Theming","permalink":"https://kiko.io/tags/Theming/"},{"name":"PowerShell","slug":"PowerShell","permalink":"https://kiko.io/tags/PowerShell/"},{"name":"Trello","slug":"Trello","permalink":"https://kiko.io/tags/Trello/"},{"name":"Android","slug":"Android","permalink":"https://kiko.io/tags/Android/"},{"name":"Visual Studio","slug":"Visual-Studio","permalink":"https://kiko.io/tags/Visual-Studio/"},{"name":"WebAPI","slug":"WebAPI","permalink":"https://kiko.io/tags/WebAPI/"},{"name":"Authentication","slug":"Authentication","permalink":"https://kiko.io/tags/Authentication/"},{"name":"Localization","slug":"Localization","permalink":"https://kiko.io/tags/Localization/"},{"name":"Templating","slug":"Templating","permalink":"https://kiko.io/tags/Templating/"},{"name":"VS Code","slug":"VS-Code","permalink":"https://kiko.io/tags/VS-Code/"},{"name":"Browser","slug":"Browser","permalink":"https://kiko.io/tags/Browser/"},{"name":"Debugging","slug":"Debugging","permalink":"https://kiko.io/tags/Debugging/"},{"name":"CSS","slug":"CSS","permalink":"https://kiko.io/tags/CSS/"},{"name":"DOM","slug":"DOM","permalink":"https://kiko.io/tags/DOM/"},{"name":"Node.js","slug":"Node-js","permalink":"https://kiko.io/tags/Node-js/"},{"name":"Events","slug":"Events","permalink":"https://kiko.io/tags/Events/"},{"name":"SPA","slug":"SPA","permalink":"https://kiko.io/tags/SPA/"},{"name":"Bundling","slug":"Bundling","permalink":"https://kiko.io/tags/Bundling/"},{"name":"MediaQuery","slug":"MediaQuery","permalink":"https://kiko.io/tags/MediaQuery/"},{"name":"Error","slug":"Error","permalink":"https://kiko.io/tags/Error/"},{"name":"Stylus","slug":"Stylus","permalink":"https://kiko.io/tags/Stylus/"},{"name":"jQuery","slug":"jQuery","permalink":"https://kiko.io/tags/jQuery/"},{"name":"Versioning","slug":"Versioning","permalink":"https://kiko.io/tags/Versioning/"},{"name":"T4","slug":"T4","permalink":"https://kiko.io/tags/T4/"},{"name":"Resource","slug":"Resource","permalink":"https://kiko.io/tags/Resource/"},{"name":"TFS/DevOps","slug":"TFS-DevOps","permalink":"https://kiko.io/tags/TFS-DevOps/"},{"name":"Dark Mode","slug":"Dark-Mode","permalink":"https://kiko.io/tags/Dark-Mode/"},{"name":"ADSI","slug":"ADSI","permalink":"https://kiko.io/tags/ADSI/"},{"name":"Database Project","slug":"Database-Project","permalink":"https://kiko.io/tags/Database-Project/"}]}