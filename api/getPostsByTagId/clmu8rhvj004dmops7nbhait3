{"type":"getPostsByTagId","data":[{"title":"Better Input Change Event","date":"2019-11-26T15:51:17.000Z","description":"<p>Often it is important to trigger an event, after the user of your website&#x2F;web app has filled out an text input. You have to do something with the given value in JavaScript.</p>\n<p>The intended event for this is <code>change</code>, which will be triggered, when the user has ended changing by leaving the input with his cursor, mostly by using the TAB key. This works at some degree, if there is a physical keyboard, but not really on mobile devices … and for me is leaving the field often too late to start the upcoming event.</p>","categories":[{"name":"JavaScript","_id":"clmu8rhv9003smopscm0b9hpe"}],"tags":[{"name":"jQuery","_id":"clmu8rhvj004dmops7nbhait3"}],"_path":"post/Better-Input-Change-Event/","_link":"https://kiko.io/post/Better-Input-Change-Event/","_id":"clmu8rhrw000bmopsd5xt7g09"},{"title":"Change CSS class when element scrolls into viewport","date":"2020-07-13T16:24:39.000Z","description":"<p>I had a neat visual gimmick on the start page of this blog, that the gray-scaled header image of a post in the list scaled up to 100% and became colored, when the user hovered over it:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.article-inner</span> <span class=\"selector-class\">.article-photo</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">150px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">object-fit</span>: cover;</span><br><span class=\"line\">  <span class=\"attribute\">transform</span>: <span class=\"built_in\">scale</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"attribute\">transform-style</span>: preserve-<span class=\"number\">3</span>d;</span><br><span class=\"line\">  <span class=\"attribute\">transition</span>: all ease-out <span class=\"number\">0.6s</span>;</span><br><span class=\"line\">  <span class=\"attribute\">opacity</span>: <span class=\"number\">0.3</span>;</span><br><span class=\"line\">  <span class=\"attribute\">filter</span>: <span class=\"built_in\">grayscale</span>(<span class=\"number\">1</span>) <span class=\"built_in\">contrast</span>(<span class=\"number\">0.5</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.article-inner</span><span class=\"selector-pseudo\">:hover</span> <span class=\"selector-class\">.article-photo</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">transform</span>: <span class=\"built_in\">scale</span>(<span class=\"number\">1.1</span>);</span><br><span class=\"line\">  <span class=\"attribute\">opacity</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"attribute\">filter</span>: <span class=\"built_in\">grayscale</span>(<span class=\"number\">0</span>) <span class=\"built_in\">contrast</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Nice, but a little bit useless on smartphones or tablets, where HOVER  doesn’t really work.</p>","categories":[{"name":"JavaScript","_id":"clmu8rhv9003smopscm0b9hpe"}],"tags":[{"name":"CSS","_id":"clmu8rhv6003nmopshp6ndaiq"},{"name":"jQuery","_id":"clmu8rhvj004dmops7nbhait3"}],"_path":"post/Change-CSS-class-when-element-scrolls-into-viewport/","_link":"https://kiko.io/post/Change-CSS-class-when-element-scrolls-into-viewport/","_id":"clmu8rhs1000imopsccn99295"},{"title":"Extension of downupPopup: Back Button, Escape Key & More","date":"2023-07-04T11:07:38.000Z","description":"<p>I recently introduced a Bottom Sheet dialog on this blog to display a page’s metadata (<a href=\"javascript:dialog.pageMeta()\">like this</a>), using Ali Dincer’s work: <a href=\"https://downuppopupjs.dincerali.com/\"><strong>downupPopup</strong></a>. I described the way to do this in <a href=\"/post/Show-pages-meta-data-JSON-LD-in-Bottom-Sheet/\">a post</a> a couple three weeks ago.</p>\n<p>Shortly after that <a href=\"https://octodon.social/@koos\">Koos Looijensteijn</a> triggered me with his post <a href=\"https://www.kooslooijesteijn.net/blog/digital-business-cards-vcard-qr-code-website\">How to make digital business cards and share them via QR codes</a> and I felt like using my newly introduced dialog manager based on downupPopup for my own contact card.<br><strong>But more about that at a later time, respectively blog post…</strong></p>\n<p>Important for this post is that Ali’s bottom sheet solution did not offer everything I wanted for my implementation:</p>\n<h2 id=\"1-Make-Dialog-Reusable\"><a href=\"#1-Make-Dialog-Reusable\" class=\"headerlink\" title=\"1. Make Dialog Reusable\"></a>1. Make Dialog Reusable</h2><p>As I have already described in the above mentioned article: Ali’s approach to calling the dialog was to create and initialize the necessary HTML elements if it didn’t already exist in the DOM. I pulled out the initialization to make the component reusable. There is now a preparation part and an initialization part and the latter is always called, no matter if another bottom sheet dialog was already created before.</p>\n<p><a href=\"https://github.com/ali-dincer/downupPopup.js/pull/2/commits/f3751ca56c4809decc1ec3845e5c301a13292773\">My GitHub commit on this part</a>…</p>","categories":[{"name":"UI/UX","_id":"clmu8rhui003imopsgtbwgsy8"}],"tags":[{"name":"UI","_id":"clmu8rhv4003jmopsh15v284y"},{"name":"GitHub","_id":"clmu8rhvb003vmops5j5eby52"},{"name":"jQuery","_id":"clmu8rhvj004dmops7nbhait3"},{"name":"Contributing","_id":"clmu8rhze00dgmops8lof9a36"}],"_path":"post/Extension-of-downupPopup-Back-Button-Escape-Key-More/","_link":"https://kiko.io/post/Extension-of-downupPopup-Back-Button-Escape-Key-More/","_id":"clmu8rhtq0033mopsge5493mk"}]}