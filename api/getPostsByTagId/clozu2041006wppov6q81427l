{"type":"getPostsByTagId","data":[{"title":"Implement source switch for SPA","date":"2020-10-04T15:01:02.000Z","description":"<p>A while ago I wrote a Single Page Application (SPA) with jQuery and and decided to use some useful plugins to avoid reinventing the wheel. To keep the delivered sources small, I used the bundler <a href=\"https://gulpjs.com/\">Gulp</a>, to pack all JS plugins in a single file and another one for my custom JS code. I used the same procedure with the CSS files.</p>\n<p>The SPA contained only a single HTML file in which all bundeled sources and needed HTML template blocks were included, in order to load most of the stuff while starting the app, when the users sees a GMail-like  loading screen.</p>\n<p>But the whole thing had one disadvantage: Debugging for example in Chrome Dev Tool is not a joy, if the code is packed with <a href=\"https://www.npmjs.com/package/gulp-concat\">Gulp Concat</a> and <a href=\"https://www.npmjs.com/package/gulp-concat\">Gulp Uglify</a>. It would be much more convenient, if the source loading can be done depending on the environment.</p>","categories":[{"name":"JavaScript","_id":"clozu203b0045ppovdhde7nod"}],"tags":[{"name":"SPA","_id":"clozu2041006wppov6q81427l"},{"name":"Bundling","_id":"clozu2042006yppov57ys32bu"}],"_path":"post/Implement-source-switch-for-SPA/","_link":"https://kiko.io/post/Implement-source-switch-for-SPA/","_id":"clozu2013000tppov3vd1hhwx"},{"title":"Anatomy of Service Worker Communication","date":"2022-11-12T11:26:34.000Z","description":"<p>I have a SPA that works as a PWA, which means that in the background a service worker makes sure that the required files for the offline mode end up in the cache.</p>\n<p>From time to time I also update the Service Worker, which defines which files it should keep offline and which not. Unfortunately, the app itself didn’t get any of this because there was no communication channel for them to talk.</p>\n<p>If you research this topic on the web, you have to dig through many architecture pages and documentations that have one thing in common: sometimes they just don’t get to the point. So here are my 50 cents on the subject and my sample implementation.</p>","categories":[{"name":"JavaScript","_id":"clozu203b0045ppovdhde7nod"}],"tags":[{"name":"SPA","_id":"clozu2041006wppov6q81427l"},{"name":"PWA","_id":"clozu204b0083ppov5a4t35sq"}],"_path":"post/Anatomy-of-Service-Worker-Communication/","_link":"https://kiko.io/post/Anatomy-of-Service-Worker-Communication/","_id":"clozu20170011ppov4jare1j2"},{"title":"Running Rollup with Gulp","date":"2021-07-29T13:34:03.000Z","description":"<p>Writing an SPA (Single Page Application) in JavaScript&#x2F;CSS always means to keep an eye on small files to deliver. Especially when utilizing a bunch of libraries and frameworks, bundling is some sort of a must. The offer on bundlers and task runners is large on the web: <a href=\"https://webpack.js.org/\">WebPack</a>, <a href=\"https://www.snowpack.dev/\">Snowpack</a>, <a href=\"https://browserify.org/\">Browserify</a>, <a href=\"https://parceljs.org/\">Parcel</a>, <a href=\"https://gruntjs.com/\">Grunt</a>, <a href=\"https://gulpjs.com/\">Gulp</a> and “DingDong” (just replace with the hotest new shit available).</p>\n<p>But, it is not always necessary to replace your complete building pipeline, when the new “DingDong” is hyped in the media. Brave old tools like <a href=\"https://gulpjs.com/\">Gulp</a> are doing their job pretty well … and you are able to integrate some more modern approaches on bundling JS, for example.</p>\n<p>I couple of months ago, while working on a private project, I became attentive to <a href=\"https://www.rollupjs.org/\">Rollup.js</a>, a next-generation JavaScript module bundler from Rich Harris, the author of Svelte. Rollup uses the new standardized format for code modules included in the ES6 revision of JavaScript and supports Tree-Shaking, which means that it analyzes all your ES6 <code>imports</code> statements and bundles only the code which is used. Pretty cool … but … it is a JavaScript bundler only and there are no plugins for Gulp, my favourite task runner.</p>\n<p>In this article I will show you, how to integrate Rollup in your Gulp bundling pipeline.</p>","categories":[{"name":"JavaScript","_id":"clozu203b0045ppovdhde7nod"}],"tags":[{"name":"SPA","_id":"clozu2041006wppov6q81427l"},{"name":"Bundling","_id":"clozu2042006yppov57ys32bu"}],"_path":"post/Running-Rollup-with-Gulp/","_link":"https://kiko.io/post/Running-Rollup-with-Gulp/","_id":"clozu201s002gppovavdxgnf6"}]}