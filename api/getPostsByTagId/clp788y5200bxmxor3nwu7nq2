{"type":"getPostsByTagId","data":[{"title":"Generate Social Media Images Automatically","date":"2021-07-10T09:07:31.000Z","description":"<p>From day one of this blog I wanted to combine two of my passions: tech stuff and photography. All these photos I have shot myself in recent years and now they are representing my thoughts &amp; findings about digital technology. I wrote about my approach to provide these images in my post <a href=\"/post/Automatic-Header-Images-in-Hexo/\" title=\"Automatic Header Images in Hexo\">Automatic Header Images in Hexo</a>.</p>\n<p>When I share one of my posts on social media I provide the appropriate image as a visual anchor to my writing. The technique behind this are the <code>meta</code> tags in the HTML of my posts:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- Schema.org for Google --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">itemprop</span>=<span class=\"string\">&quot;image&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;https://kiko.io/photos/normal/DSC_6776.jpg&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- Open Graph --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;og:image&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;https://kiko.io/photos/normal/DSC_6776.jpg&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- Twitter --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;twitter:card&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;summary_large_image&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;twitter:image&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;https://kiko.io/photos/normal/DSC_6776.jpg&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>There are several meta tags for different purposes regarding images. For more information see the links at the end of this post. To make a long story short: The sum of these approaches ensures that when an article is posted, the corresponding image is also displayed in the social media post.</p>\n<p>But … it’s only the image, without a visual reference to the post itself. In this article I want to show you how to combine the photo with some meta information of the post automatically, to get a <strong>Social Media Image</strong>.</p>\n<p><img src=\"/post/Generate-Social-Media-Images-Automatically/generation-flow.png\" alt=\"Generation Flow\"></p>","categories":[{"name":"JavaScript","_id":"clp788y350049mxordortfkzq"}],"tags":[{"name":"Hexo","_id":"clp788y32003ymxor8rql4fb9"},{"name":"Blogging","_id":"clp788y36004cmxora837h8kk"},{"name":"GitHub","_id":"clp788y37004imxor626dc1jd"},{"name":"Imaging","_id":"clp788y4w00b5mxor6nkh26a0"},{"name":"ES6","_id":"clp788y5200bxmxor3nwu7nq2"}],"_path":"post/Generate-Social-Media-Images-Automatically/","_link":"https://kiko.io/post/Generate-Social-Media-Images-Automatically/","_id":"clp788y1i0023mxor5jj66hdb"},{"title":"Native JavaScript Multilanguage Templating","date":"2021-02-24T12:31:58.000Z","description":"<p>In the project I’m currently working on, I faced the “problem” to integrate multilanguage support, but due to the fact that the new app should be written in vanilla JS, without any plugins, libraries or other dependencies, I had to develop my own localization layer. In this article I want to show you my approach on this…</p>","categories":[{"name":"JavaScript","_id":"clp788y350049mxordortfkzq"}],"tags":[{"name":"Localization","_id":"clp788y40007emxor7ojgclmb"},{"name":"ES6","_id":"clp788y5200bxmxor3nwu7nq2"},{"name":"Templating","_id":"clp788y5900comxor993r8qp4"}],"_path":"post/Native-JavaScript-Multilanguage-Templating/","_link":"https://kiko.io/post/Native-JavaScript-Multilanguage-Templating/","_id":"clp788y1l002bmxordwhfeocs"},{"title":"Utilize a repository of reusable ES6 template literals","date":"2021-01-03T12:29:01.000Z","description":"<p>The <a href=\"http://es6-features.org/#StringInterpolation\"><strong>Template Literals</strong></a> introduced with ES6 are very useful to deal with multiline strings, because they support <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#Expression_interpolation\">embedded expressions</a>. Gone are the days of endless string concatination or replacing variables in a string by using RegEx.</p>\n<p>Instead of… </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> url = ...</span><br><span class=\"line\"><span class=\"keyword\">var</span> file = ...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> template = </span><br><span class=\"line\">  <span class=\"string\">&#x27;&lt;div class=&quot;photo&quot;&gt;&#x27;</span> + </span><br><span class=\"line\">     <span class=\"string\">&#x27;&lt;a href=&quot;&#x27;</span> + url + <span class=\"string\">&quot;&#x27; + </span></span><br><span class=\"line\"><span class=\"string\">        &#x27;style=&quot;</span>background-<span class=\"attr\">image</span>: <span class=\"title function_\">url</span>(<span class=\"string\">&#x27; + file + &#x27;</span>)<span class=\"string\">&quot;&lt;/a&gt;&#x27; + </span></span><br><span class=\"line\"><span class=\"string\">  &#x27;&lt;/div&gt;&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>… you can write:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> url = ...</span><br><span class=\"line\"><span class=\"keyword\">var</span> file = ...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> template = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">  &lt;div class=&quot;photo&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;a href=&quot;<span class=\"subst\">$&#123;url&#125;</span>/&quot;</span></span><br><span class=\"line\"><span class=\"string\">    style=&quot;background-image: url(<span class=\"subst\">$&#123;file&#125;</span>);&quot;&gt;&lt;/a&gt;</span></span><br><span class=\"line\"><span class=\"string\">  &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">`</span>,</span><br></pre></td></tr></table></figure>\n\n<p>It’s much cleaner and easier to handle, as you can copy your needed HTML right into your code and surround it by <strong>backtick</strong> (!) characters. Insert your variable placeholders (expressions), indicated by a dollar sign and curly braces, and you are done.</p>\n<p>But there is one “restriction”, you have to be aware of: the interpolation (substitution of the expressions) is done at declaration time and not at runtime. You can’t define your literals seperatly, take one and make your substitution as you need it, like you would do with <a href=\"https://handlebarsjs.com/\">Handlebars</a> or other templating engines. Therefore the name <em>template</em> literals is a bit misleading. But … there is a way to achieve this anyway…</p>","categories":[{"name":"JavaScript","_id":"clp788y350049mxordortfkzq"}],"tags":[{"name":"ES6","_id":"clp788y5200bxmxor3nwu7nq2"},{"name":"Templating","_id":"clp788y5900comxor993r8qp4"}],"_path":"post/Utilize-a-repository-of-reusable-ES6-template-literals/","_link":"https://kiko.io/post/Utilize-a-repository-of-reusable-ES6-template-literals/","_id":"clp788y1q002qmxor7dsk7hib"}]}