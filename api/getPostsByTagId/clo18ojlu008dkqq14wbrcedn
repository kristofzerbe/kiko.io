{"type":"getPostsByTagId","data":[{"title":"Application-Specific Links on Windows 10","date":"2021-09-03T07:31:08.000Z","description":"<p>While reading the Chris Coyier’s post <a href=\"https://css-tricks.com/application-specific-links/\">Application-Specific Links</a> the other day, I realized what has been bugging me for a long time now: a proper solution for openening a certain URL in a modern Web App.</p>\n<p>Since the beginning of the digital age (feels like that), we have files associated to a certain application, installed on our machine, regardless if its running Windows, iOS, OS&#x2F;2 or whatever. We have learned that well and no one questions it … but … the IT world keeps on turning and today we are not only talking about files, but about links.</p>\n<p>Many modern applications are written with Web technologies, thanks to cross platform frameworks like <a href=\"https://www.electronjs.org/\">Electron</a>. Some of them are real apps for working on things, like the famous editor <a href=\"https://code.visualstudio.com/\">Visual Studio Code</a>, and some are mirroring their online services in a desktop app only, like <a href=\"https://slack.com/intl/en-de/downloads/windows\">Slack</a> or <a href=\"https://www.notion.so/desktop\">Notion</a>. However, the latter have the problem how to deal with links to their online services. When a user is sent a link and has become accustomed to using the desktop app, it won’t open in the app as he clicks on it, but in his default browser. The question is, how to associate not only files, but links with certain desktop apps?</p>","categories":[{"name":"Misc","_id":"clo18ojjw003rkqq17agt9qci"}],"tags":[{"name":"Browser","_id":"clo18ojjz003wkqq19q8hg1oi"},{"name":"Windows","_id":"clo18ojkz006bkqq12mfs1l0d"},{"name":"PWA","_id":"clo18ojlu008dkqq14wbrcedn"}],"_path":"post/Application-Specific-Links-on-Windows-10/","_link":"https://kiko.io/post/Application-Specific-Links-on-Windows-10/","_id":"clo18ojhb0013kqq12e0xdvax"},{"title":"Anatomy of Service Worker Communication","date":"2022-11-12T11:26:34.000Z","description":"<p>I have a SPA that works as a PWA, which means that in the background a service worker makes sure that the required files for the offline mode end up in the cache.</p>\n<p>From time to time I also update the Service Worker, which defines which files it should keep offline and which not. Unfortunately, the app itself didn’t get any of this because there was no communication channel for them to talk.</p>\n<p>If you research this topic on the web, you have to dig through many architecture pages and documentations that have one thing in common: sometimes they just don’t get to the point. So here are my 50 cents on the subject and my sample implementation.</p>","categories":[{"name":"JavaScript","_id":"clo18ojk10041kqq13nwm34gk"}],"tags":[{"name":"SPA","_id":"clo18ojl6006qkqq1a3sfdbdr"},{"name":"PWA","_id":"clo18ojlu008dkqq14wbrcedn"}],"_path":"post/Anatomy-of-Service-Worker-Communication/","_link":"https://kiko.io/post/Anatomy-of-Service-Worker-Communication/","_id":"clo18ojhz002akqq1dqa07hcg"}]}