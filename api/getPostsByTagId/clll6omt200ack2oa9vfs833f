{"type":"getPostsByTagId","data":[{"title":"Open Source Insights - Seeing the big picture","date":"2021-06-06T07:36:49.000Z","description":"<p>A while ago I needed some functionality regarding database access in one of my spare time projects and I decided to use a library from NPM. Typed <code>npm install</code> and the hell was breaking loose … 186 direct dependencies and nearly 200K of files were flooding my harddrive!</p>\n<p>The mental basis of IT is lazyness, which means that we produce software to make our and others life easier. This also applies to the building process. Don’t reinvent the wheel, but reuse the work of other developers. But … we have to recognize the limits and prevent to fall into the dependency hell.</p>\n<p>To get a better overview over dependencies, regarding NPM and other repositories, some Google engineers have published a project called <strong><a href=\"https://deps.dev/\">Open Source Insights</a></strong> a couple of days ago.</p>","categories":[{"name":"Tools","_id":"clll6ompg003jk2oa4lj2focp"}],"tags":[{"name":"Node.js","_id":"clll6omt200ack2oa9vfs833f"}],"_path":"post/Open-Source-Insights-Seeing-the-big-picture/","_link":"https://kiko.io/post/Open-Source-Insights-Seeing-the-big-picture/","_id":"clll6ommv001rk2oahyexb1ey"},{"title":"Use and manage multiple Node.js versions on Windows 10","date":"2021-01-08T12:47:22.000Z","description":"<p>For a new project I needed to have Node 14 running on my Windows 10 machine, so installation was done quickly via downloading and running the setup file.</p>\n<p>A short time later I wanted to write a new blog post here on kiko.io, which depends on the Node.js based static site generator <a href=\"https://hexo.io/\">Hexo</a> … and ran into several problems.</p>\n<p>First of all my hero image processing script (see <a href=\"/post/Automatic-Header-Images-in-Hexo/\" title=\"Automatic Header Images in Hexo\">Automatic Header Images in Hexo</a>) returned an exception. The script uses <a href=\"https://github.com/hexojs/hexo-fs\">hexo-fs</a> and the problem is known quite some time, according to this <a href=\"https://github.com/hexojs/hexo/issues/4263\">Github issue</a>. The guys recommend to downgrade to an older version of Node.js … :(</p>\n<p>Ok … I needed a solution to install multiple Node.js versions and switch between them, depending on which project I want to work on … and there is one: <strong><a href=\"https://github.com/coreybutler/nvm-windows\">nvm-windows</a></strong> by Corey Butler!</p>","categories":[{"name":"Tools","_id":"clll6ompg003jk2oa4lj2focp"}],"tags":[{"name":"Hexo","_id":"clll6ompf003gk2oad7a46r5x"},{"name":"Windows","_id":"clll6omqm005zk2oa637f99b5"},{"name":"Node.js","_id":"clll6omt200ack2oa9vfs833f"}],"_path":"post/Use-and-manage-multiple-Node-js-versions-on-Windows-10/","_link":"https://kiko.io/post/Use-and-manage-multiple-Node-js-versions-on-Windows-10/","_id":"clll6omn40024k2oab93perr0"},{"title":"Pool Photo Generator","date":"2023-08-20T22:00:00.000Z","description":"<p>Since the existence of this blog, the posts all have a custom header image that I generate from my own photos. Already three years ago (omg … really?) I described in an article how to do this with Hexo: <a href=\"/post/Automatic-Header-Images-in-Hexo/\" title=\"Automatic Header Images in Hexo\">Automatic Header Images in Hexo</a>.</p>\n<p>To keep it short, I use a pool folder for this, in which I keep in subfolders next to a <code>meta.txt</code>, for the title of the image and an external url on 500px for interactions to the image, three variants that I need for a new post:</p>\n<ul>\n<li>mobile.jpg (width 480px)</li>\n<li>tablet.jpg (width 768px)</li>\n<li>normal.jpg (width 1280px)</li>\n</ul>\n<p>The only piece of the puzzle that was still missing was the automatic generation of these three image variants and the meta file based on a selected photo that I want to add to the pool of available header images. So far it was fun to generate the header images manually either on the desktop or on the smartphone, but it really doesn’t have to be. My goal now was to write a script where I just throw a selected photo into a folder and the NodeJS script does the rest.</p>\n<p>My photo workflow is based on Adobe Lightroom Classic and one of the steps is to give a title to the good ones I use here as well. So the script had to include four steps when iterating over the inbound folder’s JPG files:</p>\n<ol>\n<li>create new pool folder</li>\n<li>read meta data (IPTC -&gt; title) and write it to meta.txt</li>\n<li>create the three image variants</li>\n<li>delete the processed image from the inbound folder</li>\n</ol>","categories":[{"name":"JavaScript","_id":"clll6ompk003pk2oa3anh105t"}],"tags":[{"name":"Imaging","_id":"clll6omrr007vk2oa3o129bhw"},{"name":"Node.js","_id":"clll6omt200ack2oa9vfs833f"}],"_path":"post/Pool-Photo-Generator/","_link":"https://kiko.io/post/Pool-Photo-Generator/","_id":"clll6omnw0037k2oa3jxm8egj"}]}