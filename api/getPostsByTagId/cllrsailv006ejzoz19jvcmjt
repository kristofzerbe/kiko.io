{"type":"getPostsByTagId","data":[{"title":"Implement source switch for SPA","date":"2020-10-04T15:01:02.000Z","description":"<p>A while ago I wrote a Single Page Application (SPA) with jQuery and and decided to use some useful plugins to avoid reinventing the wheel. To keep the delivered sources small, I used the bundler <a href=\"https://gulpjs.com/\">Gulp</a>, to pack all JS plugins in a single file and another one for my custom JS code. I used the same procedure with the CSS files.</p>\n<p>The SPA contained only a single HTML file in which all bundeled sources and needed HTML template blocks were included, in order to load most of the stuff while starting the app, when the users sees a GMail-like  loading screen.</p>\n<p>But the whole thing had one disadvantage: Debugging for example in Chrome Dev Tool is not a joy, if the code is packed with <a href=\"https://www.npmjs.com/package/gulp-concat\">Gulp Concat</a> and <a href=\"https://www.npmjs.com/package/gulp-concat\">Gulp Uglify</a>. It would be much more convenient, if the source loading can be done depending on the environment.</p>","categories":[{"name":"JavaScript","_id":"cllrsaikh003njzozfoir77ew"}],"tags":[{"name":"SPA","_id":"cllrsailu006cjzoz79gkbg87"},{"name":"Bundling","_id":"cllrsailv006ejzoz19jvcmjt"}],"_path":"post/Implement-source-switch-for-SPA/","_link":"https://kiko.io/post/Implement-source-switch-for-SPA/","_id":"cllrsaih4000tjzoz12ap0x1r"},{"title":"Running Rollup with Gulp","date":"2021-07-29T13:34:03.000Z","description":"<p>Writing an SPA (Single Page Application) in JavaScript&#x2F;CSS always means to keep an eye on small files to deliver. Especially when utilizing a bunch of libraries and frameworks, bundling is some sort of a must. The offer on bundlers and task runners is large on the web: <a href=\"https://webpack.js.org/\">WebPack</a>, <a href=\"https://www.snowpack.dev/\">Snowpack</a>, <a href=\"https://browserify.org/\">Browserify</a>, <a href=\"https://parceljs.org/\">Parcel</a>, <a href=\"https://gruntjs.com/\">Grunt</a>, <a href=\"https://gulpjs.com/\">Gulp</a> and “DingDong” (just replace with the hotest new shit available).</p>\n<p>But, it is not always necessary to replace your complete building pipeline, when the new “DingDong” is hyped in the media. Brave old tools like <a href=\"https://gulpjs.com/\">Gulp</a> are doing their job pretty well … and you are able to integrate some more modern approaches on bundling JS, for example.</p>\n<p>I couple of months ago, while working on a private project, I became attentive to <a href=\"https://www.rollupjs.org/\">Rollup.js</a>, a next-generation JavaScript module bundler from Rich Harris, the author of Svelte. Rollup uses the new standardized format for code modules included in the ES6 revision of JavaScript and supports Tree-Shaking, which means that it analyzes all your ES6 <code>imports</code> statements and bundles only the code which is used. Pretty cool … but … it is a JavaScript bundler only and there are no plugins for Gulp, my favourite task runner.</p>\n<p>In this article I will show you, how to integrate Rollup in your Gulp bundling pipeline.</p>","categories":[{"name":"JavaScript","_id":"cllrsaikh003njzozfoir77ew"}],"tags":[{"name":"SPA","_id":"cllrsailu006cjzoz79gkbg87"},{"name":"Bundling","_id":"cllrsailv006ejzoz19jvcmjt"}],"_path":"post/Running-Rollup-with-Gulp/","_link":"https://kiko.io/post/Running-Rollup-with-Gulp/","_id":"cllrsaihy001vjzoz8cpffdz0"},{"title":"Creating Icon Font from SVG Files","date":"2022-09-17T13:08:34.000Z","description":"<p>A several years ago I started building a little PWA and chose <a href=\"https://bootswatch.com/3/\">Bootswatch 3.3.5.</a> for theming. As it depends on Bootstrap I was able to use the <a href=\"https://icons.getbootstrap.com/\">icons from Bootstrap</a>. At the beginning I needed only a handful of these icons, but with the time it became more and more difficult to find the right one, because the Bootstrap Glyphicons in version 3 included only around 250 icons and there was not always the right one. Also, the app was always lugging around well over 100 KB of extra files, of which I actually only needed a few kilobytes.</p>\n<p>In another project I had used <a href=\"https://fontello.com/\">Fontello</a>, where you can build and download your own icon font from a selection of available icons. Very nice, but I didn’t feel like fiddling with project-specific configuration files on the Fontello website. But since you could upload your own SVG files in Fontello, which were then taken over into the font, the same had to work somehow with a Node.JS plugin!?</p>\n<p>And yes <a href=\"https://www.npmjs.com/package/gulp-iconfont\">gulp-iconfont</a> from <a href=\"https://github.com/nfroidure\">Nicolas Froidure</a> was exactly what I needed.</p>\n<p><img src=\"/post/Creating-Icon-Font-from-SVG-Files/gulp-iconfont.png\" alt=\"gulp-iconfont on GitHub\"></p>\n<hr>\n<h2 id=\"First-Solution\"><a href=\"#First-Solution\" class=\"headerlink\" title=\"First Solution\"></a>First Solution</h2><p>Just copy a bunch of SVG files in a folder, run gulp and there was my own customized icon font with a tolerable size of around 20 kilobytes. At that time, <a href=\"https://github.com/backflip\">Thomas Jaggi</a> had taken care of the creation of a CSS file with the correct code points that matched the font with his tool <a href=\"https://www.npmjs.com/package/gulp-iconfont-css\">gulp-iconfont-css</a>.</p>","categories":[{"name":"JavaScript","_id":"cllrsaikh003njzozfoir77ew"}],"tags":[{"name":"Bundling","_id":"cllrsailv006ejzoz19jvcmjt"},{"name":"SVG","_id":"cllrsainy00amjzoz3cu1buju"},{"name":"Font","_id":"cllrsaioh00bljzozedf0aaug"}],"_path":"post/Creating-Icon-Font-from-SVG-Files/","_link":"https://kiko.io/post/Creating-Icon-Font-from-SVG-Files/","_id":"cllrsaiia002djzozfu1vfiz9"}]}