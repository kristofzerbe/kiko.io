{"type":"getPostById","data":{"title":"Localization with resource files in JavaScript web apps","date":"2020-06-13T13:49:10.000Z","description":"<p>There are plenty of editors out there to help you writing JavaScript web applications. As I’m working in my daily life with Visual Studio, it is a obvious choice for me.</p>\n<p>One of the most time saving tools in VS is the plugin <a href=\"https://marketplace.visualstudio.com/items?itemName=TomEnglert.ResXManager\">ResXManager</a>, which is an awesome assistant on managing the translations for a Desktop- or ASP.NET-App, which uses XML-based RESX files.</p>","categories":[{"name":"JavaScript","_id":"clmc7m3cu003qjloq5oxq7nz4"}],"tags":[{"name":"GitHub","_id":"clmc7m3cv003tjloq0lmxbcw5"},{"name":"Visual Studio","_id":"clmc7m3da004vjloq4m6dhd7r"},{"name":"Resource","_id":"clmc7m3e1006tjloqbw4x1mu3"},{"name":"Localization","_id":"clmc7m3eb006vjloq0zl22jhe"}],"content":"<p>There are plenty of editors out there to help you writing JavaScript web applications. As I’m working in my daily life with Visual Studio, it is a obvious choice for me.</p>\n<p>One of the most time saving tools in VS is the plugin <a href=\"https://marketplace.visualstudio.com/items?itemName=TomEnglert.ResXManager\">ResXManager</a>, which is an awesome assistant on managing the translations for a Desktop- or ASP.NET-App, which uses XML-based RESX files.</p>\n<span id=\"more\"></span>\n\n<p>Mostly very localization is based on key&#x2F;value pairs, defined in separate files for every language provided.</p>\n<p>Implementing several languages in pure JavaScript apps is a little more difficult, because it makes no sense to deal with big XML files in JS. All localization libraries in the market uses JSON for storing the translations and it is a little bit of work to find the right one for your requirements.</p>\n<!-- more -->\n\n<h2 id=\"Localization-in-JavaScript\"><a href=\"#Localization-in-JavaScript\" class=\"headerlink\" title=\"Localization in JavaScript\"></a>Localization in JavaScript</h2><p>For a current project I use  <a href=\"https://github.com/Irrelon/jquery-lang-js\">jquery-lang</a>, because it provides the switch of the apps UI language without reloading and it is easy to implement. Thanks Rob Evans for your work…</p>\n<p>The definition of “tokens” in one JSON file for each language is quite easy:</p>\n<figure class=\"highlight js\"><figcaption><span>../languages/en.json</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;token&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;my-test&quot;</span>: <span class=\"string\">&quot;My Test in English&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><figcaption><span>../languages/de.json</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;token&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;my-test&quot;</span>: <span class=\"string\">&quot;Mein Test in Deutsch&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>The usage also:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span> <span class=\"attr\">data-lang-token</span>=<span class=\"string\">&quot;my-test&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Using-RESX-and-convert-to-JSON-on-build\"><a href=\"#Using-RESX-and-convert-to-JSON-on-build\" class=\"headerlink\" title=\"Using RESX and convert to JSON on build\"></a>Using RESX and convert to JSON on build</h2><p>Having this, the most time consuming work is to enter the translations to the localization files. If you have hundreds of them, it is hard to keep the 2, 3 or more language files in sync. You need a helper…</p>\n<p>And here comes ResXManager to the rescue, if you work with VS … but it needs a conversation from RESX to the JSON format jquery-lang uses and this a task, which can be done on building the JS app, by using a task runner like <a href=\"https://gruntjs.com/\">Grunt</a>.</p>\n<p>As there was no Grunt plugin&#x2F;task out there to fit my needs, I have created  <strong>grunt-resource2json</strong> (<a href=\"https://github.com/kristofzerbe/grunt-resource2json\">GitHub</a>, <a href=\"https://www.npmjs.com/package/grunt-resource2json\">NPM</a>). The configuration in the <strong>gruntfile.js</strong> is like: </p>\n<figure class=\"highlight json\"><figcaption><span>gruntfile.js</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grunt.initConfig(<span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    resource2json<span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      convert<span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        options<span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">          format<span class=\"punctuation\">:</span> <span class=\"string\">&quot;jquery-lang&quot;</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        files<span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">          <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            input<span class=\"punctuation\">:</span> <span class=\"string\">&quot;resources/Resource.resx&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            output<span class=\"punctuation\">:</span> <span class=\"string\">&quot;build/langpacks/en.json&quot;</span></span><br><span class=\"line\">          <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            input<span class=\"punctuation\">:</span> <span class=\"string\">&quot;resources/Resource.de-DE.resx&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            output<span class=\"punctuation\">:</span> <span class=\"string\">&quot;build/langpacks/de.json&quot;</span></span><br><span class=\"line\">          <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            input<span class=\"punctuation\">:</span> <span class=\"string\">&quot;resources/Resource.es-ES.resx&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            output<span class=\"punctuation\">:</span> <span class=\"string\">&quot;build/langpacks/es.json&quot;</span></span><br><span class=\"line\">          <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">        <span class=\"punctuation\">]</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>It takes one RESX file (input) and converts it to a JSON file (output) in an array of files.</p>\n<p>The heavy work in the plugin is done by the library <a href=\"https://www.npmjs.com/package/xml2js\">xml2js</a>, which transforms the complete XML of the RESX file into a JSON object in one call. All I had to do, was to write all DATA nodes in a loop into the jquery-lang given structure and save it as JSON.</p>\n<p>Currently supported is the format for jquery-lang only, but it would be awesome, if you fork the code on <a href=\"https://github.com/kristofzerbe/grunt-resource2json\">GitHub</a> and send me a Pull Request with the implementation of your needed format.</p>\n","_path":"post/Localization-with-resource-files-in-JavaScript-web-apps/","_link":"https://kiko.io/post/Localization-with-resource-files-in-JavaScript-web-apps/","_id":"clmc7m39u000wjloq0it82mm6"}}