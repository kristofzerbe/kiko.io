{"type":"getPostById","data":{"title":"Pool Photo Generator","date":"2023-08-20T22:00:00.000Z","description":"<p>Since the existence of this blog, the posts all have a custom header image that I generate from my own photos. Already three years ago (omg … really?) I described in an article how to do this with Hexo: <a href=\"/post/Automatic-Header-Images-in-Hexo/\" title=\"Automatic Header Images in Hexo\">Automatic Header Images in Hexo</a>.</p>\n<p>To keep it short, I use a pool folder for this, in which I keep in subfolders next to a <code>meta.txt</code>, for the title of the image and an external url on 500px for interactions to the image, three variants that I need for a new post:</p>\n<ul>\n<li>mobile.jpg (width 480px)</li>\n<li>tablet.jpg (width 768px)</li>\n<li>normal.jpg (width 1280px)</li>\n</ul>\n<p>The only piece of the puzzle that was still missing was the automatic generation of these three image variants and the meta file based on a selected photo that I want to add to the pool of available header images. So far it was fun to generate the header images manually either on the desktop or on the smartphone, but it really doesn’t have to be. My goal now was to write a script where I just throw a selected photo into a folder and the NodeJS script does the rest.</p>\n<p>My photo workflow is based on Adobe Lightroom Classic and one of the steps is to give a title to the good ones I use here as well. So the script had to include four steps when iterating over the inbound folder’s JPG files:</p>\n<ol>\n<li>create new pool folder</li>\n<li>read meta data (IPTC -&gt; title) and write it to meta.txt</li>\n<li>create the three image variants</li>\n<li>delete the processed image from the inbound folder</li>\n</ol>","categories":[{"name":"JavaScript","_id":"clmk9k6vo003rjoop3b7hc0wi"}],"tags":[{"name":"Imaging","_id":"clmk9k6xs007xjoopag1z64uy"},{"name":"Node.js","_id":"clmk9k6z200ajjoop2r5ehnm7"}],"content":"<p>Since the existence of this blog, the posts all have a custom header image that I generate from my own photos. Already three years ago (omg … really?) I described in an article how to do this with Hexo: <a href=\"/post/Automatic-Header-Images-in-Hexo/\" title=\"Automatic Header Images in Hexo\">Automatic Header Images in Hexo</a>.</p>\n<p>To keep it short, I use a pool folder for this, in which I keep in subfolders next to a <code>meta.txt</code>, for the title of the image and an external url on 500px for interactions to the image, three variants that I need for a new post:</p>\n<ul>\n<li>mobile.jpg (width 480px)</li>\n<li>tablet.jpg (width 768px)</li>\n<li>normal.jpg (width 1280px)</li>\n</ul>\n<p>The only piece of the puzzle that was still missing was the automatic generation of these three image variants and the meta file based on a selected photo that I want to add to the pool of available header images. So far it was fun to generate the header images manually either on the desktop or on the smartphone, but it really doesn’t have to be. My goal now was to write a script where I just throw a selected photo into a folder and the NodeJS script does the rest.</p>\n<p>My photo workflow is based on Adobe Lightroom Classic and one of the steps is to give a title to the good ones I use here as well. So the script had to include four steps when iterating over the inbound folder’s JPG files:</p>\n<ol>\n<li>create new pool folder</li>\n<li>read meta data (IPTC -&gt; title) and write it to meta.txt</li>\n<li>create the three image variants</li>\n<li>delete the processed image from the inbound folder</li>\n</ol>\n<span id=\"more\"></span>\n\n<hr>\n<h2 id=\"The-Script\"><a href=\"#The-Script\" class=\"headerlink\" title=\"The Script\"></a>The Script</h2><p>I implemented the script as a class with the following skeleton:</p>\n<figure class=\"highlight js\"><figcaption><span>pool-photo-generator.cjs</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&#x27;use strict&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">[requirements ...]</span><br><span class=\"line\"></span><br><span class=\"line\">[vars ...]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">PoolPhotoGenerator</span> &#123; </span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * Contructor of PoolPhotoGenerator</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">String</span>&#125; inboundFolder </span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">String</span>&#125; poolFolder </span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">inboundFolder, poolFolder</span>) &#123; ... &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * Runs the generation of inbound photos to pool photos</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">generate</span>(<span class=\"params\"></span>) &#123; ... &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * Helper function to create image variant</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">String</span>&#125; imgSource </span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">String</span>&#125; imgTarget </span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">Number</span>&#125; sizeWidth </span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"keyword\">async</span> <span class=\"title function_\">createImageVariant</span>(<span class=\"params\">imgSource, imgTarget, sizeWidth</span>) &#123; ... &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span>.<span class=\"property\">PoolPhotoGenerator</span> = <span class=\"title class_\">PoolPhotoGenerator</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Requirements\"><a href=\"#Requirements\" class=\"headerlink\" title=\"Requirements\"></a>Requirements</h3><p>To handle files and folders in NodeJS you need at least <code>fs</code> and <code>path</code>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;fs&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;path&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>For image processing there’s no better solution as <a href=\"https://sharp.pixelplumbing.com/\">Sharp</a>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> sharp = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;sharp&#x27;</span>);</span><br><span class=\"line\">sharp.<span class=\"title function_\">cache</span>(<span class=\"literal\">false</span>); <span class=\"comment\">//prevents keeping source file open</span></span><br></pre></td></tr></table></figure>\n\n<p>Similarly powerful, but intended for reading image metadata is <a href=\"https://mutiny.cz/exifr/\">EXIFR</a>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> exifr = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;exifr&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Vars\"><a href=\"#Vars\" class=\"headerlink\" title=\"Vars\"></a>Vars</h3><p>I just needed three vars for holding the full qualified path of the current execution folder and the names of the two incoming parameters:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> _currentPath = __dirname;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> _inboundFolder;</span><br><span class=\"line\"><span class=\"keyword\">let</span> _poolFolder;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Constructor\"><a href=\"#Constructor\" class=\"headerlink\" title=\"Constructor\"></a>Constructor</h3><p>In this case, the constructor only serves to provide and check the necessary parameters of the class:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">constructor</span>(<span class=\"params\">inboundFolder, poolFolder</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  _inboundFolder = path.<span class=\"title function_\">join</span>(_currentPath, inboundFolder);</span><br><span class=\"line\">  _poolFolder = path.<span class=\"title function_\">join</span>(_currentPath, poolFolder);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!fs.<span class=\"title function_\">existsSync</span>(_inboundFolder)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"string\">&quot;Inbound folder not found&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!fs.<span class=\"title function_\">existsSync</span>(_poolFolder)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"string\">&quot;Pool folder not found&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Function-‘generate’\"><a href=\"#Function-‘generate’\" class=\"headerlink\" title=\"Function ‘generate’\"></a>Function ‘generate’</h3><p>This is the main function to call, and it first reads the input folder for JPG and cycles through all the hits. Then for each file the above four steps are executed:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">generate</span>(<span class=\"params\"></span>) &#123; </span><br><span class=\"line\">    <span class=\"keyword\">let</span> self = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> inboundFiles = fs.<span class=\"title function_\">readdirSync</span>(_inboundFolder);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> jpgFiles = inboundFiles.<span class=\"title function_\">filter</span>(<span class=\"function\"><span class=\"params\">file</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> path.<span class=\"title function_\">extname</span>(file).<span class=\"title function_\">toLowerCase</span>() === <span class=\"string\">&quot;.jpg&quot;</span>;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    jpgFiles.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">file</span>) =&gt;</span> &#123; </span><br><span class=\"line\">      <span class=\"keyword\">const</span> imgFile = path.<span class=\"title function_\">join</span>(_inboundFolder, file);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Step 1: Create new pool folder</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> newPhotoFolder = path.<span class=\"title function_\">join</span>(_poolFolder, file.<span class=\"title function_\">replace</span>(path.<span class=\"title function_\">extname</span>(file), <span class=\"string\">&#x27;&#x27;</span>));</span><br><span class=\"line\">        fs.<span class=\"title function_\">mkdirSync</span>(newPhotoFolder);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Step 2: Read TITLE from IPTC and write to meta.txt</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> iptcMeta = exifr.<span class=\"title function_\">parse</span>(imgFile, &#123; <span class=\"attr\">iptc</span>: <span class=\"literal\">true</span> &#125;).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">output</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> title = output.<span class=\"property\">ObjectName</span> || <span class=\"string\">&quot;No Title&quot;</span>;</span><br><span class=\"line\">        fs.<span class=\"title function_\">writeFile</span>(path.<span class=\"title function_\">join</span>(newPhotoFolder, <span class=\"string\">&quot;meta.txt&quot;</span>), title);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Step 3: Create image variants</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> createMobile = self.<span class=\"title function_\">createImageVariant</span>(imgFile, path.<span class=\"title function_\">join</span>(newPhotoFolder, <span class=\"string\">&quot;mobile.jpg&quot;</span>), <span class=\"number\">480</span>);</span><br><span class=\"line\">      <span class=\"keyword\">const</span> createTablet = self.<span class=\"title function_\">createImageVariant</span>(imgFile, path.<span class=\"title function_\">join</span>(newPhotoFolder, <span class=\"string\">&quot;tablet.jpg&quot;</span>), <span class=\"number\">768</span>);</span><br><span class=\"line\">      <span class=\"keyword\">const</span> createNormal = self.<span class=\"title function_\">createImageVariant</span>(imgFile, path.<span class=\"title function_\">join</span>(newPhotoFolder, <span class=\"string\">&quot;normal.jpg&quot;</span>), <span class=\"number\">1280</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Step 4: Delete processed JPG in inbound folder, when everything is done</span></span><br><span class=\"line\">      <span class=\"title class_\">Promise</span>.<span class=\"title function_\">all</span>([</span><br><span class=\"line\">          iptcMeta, </span><br><span class=\"line\">          createMobile, </span><br><span class=\"line\">          createTablet, </span><br><span class=\"line\">          createNormal</span><br><span class=\"line\">        ]).<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">          fs.<span class=\"title function_\">unlinkSync</span>(imgFile);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Function-‘createImageVariant’\"><a href=\"#Function-‘createImageVariant’\" class=\"headerlink\" title=\"Function ‘createImageVariant’\"></a>Function ‘createImageVariant’</h3><p>This helper function reduces the original image to the desired size and saves it in the destination (pool) folder as a JPG:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"title function_\">createImageVariant</span>(<span class=\"params\">imgSource, imgTarget, sizeWidth</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">await</span> <span class=\"title function_\">sharp</span>(imgSource)</span><br><span class=\"line\">    .<span class=\"title function_\">resize</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">fit</span>: sharp.<span class=\"property\">fit</span>.<span class=\"property\">contain</span>,</span><br><span class=\"line\">      <span class=\"attr\">width</span>: sizeWidth</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .<span class=\"title function_\">jpeg</span>(&#123; <span class=\"attr\">quality</span>: <span class=\"number\">90</span>, <span class=\"attr\">mozjpeg</span>: <span class=\"literal\">true</span> &#125;)</span><br><span class=\"line\">    .<span class=\"title function_\">toFile</span>(imgTarget);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>In the above code I have omitted some syntactical sugar. You can find the complete script here: <a href=\"https://github.com/kristofzerbe/kiko.io/blob/master/lib/pool-photo-generator.cjs\">https://github.com/kristofzerbe/kiko.io/blob/master/lib/pool-photo-generator.cjs</a></p>\n<hr>\n<h2 id=\"The-Runner\"><a href=\"#The-Runner\" class=\"headerlink\" title=\"The Runner\"></a>The Runner</h2><p>I integrated the call to the generator into my Hexo workflow, but also wrote a small runner to run it independently:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * This is only for executing the selector manually. </span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * Execution:</span></span><br><span class=\"line\"><span class=\"comment\"> * node &quot;./lib/_run_pool-photo-generator.cjs&quot;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">PoolPhotoGenerator</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;../lib/pool-photo-generator.cjs&quot;</span>).<span class=\"property\">PoolPhotoGenerator</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> inboundFolder = <span class=\"string\">&quot;../new_photos&quot;</span>; <span class=\"comment\">//my inbound folder</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> poolFolder = <span class=\"string\">&quot;../static/pool&quot;</span>; <span class=\"comment\">//my pool folder</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> generator = <span class=\"keyword\">new</span> <span class=\"title class_\">PoolPhotoGenerator</span>(inboundFolder, poolFolder);</span><br><span class=\"line\">generator.<span class=\"title function_\">generate</span>();</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>Last but not least, in my existing Lightroom workflow, I configured the wonderful <a href=\"http://regex.info/blog/lightroom-goodies/collection-publisher\">plugin Jeffrey’s “Collection Publisher”</a> to create the new pool photos directly through it into the Inbound folder. Once the changes are committed to Github, where the blog is hosted and the deployment action happens, the new header images are created and displayed at <a href=\"https://kiko.io/photos\">https:\\kiko.io\\photos</a> and are available for a new post.</p>\n","_path":"post/Pool-Photo-Generator/","_link":"https://kiko.io/post/Pool-Photo-Generator/","_id":"clmk9k6tw0039joopc5mi0oxf"}}