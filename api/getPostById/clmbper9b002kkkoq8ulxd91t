{"type":"getPostById","data":{"title":"Utilize a repository of reusable ES6 template literals","date":"2021-01-03T12:29:01.000Z","description":"<p>The <a href=\"http://es6-features.org/#StringInterpolation\"><strong>Template Literals</strong></a> introduced with ES6 are very useful to deal with multiline strings, because they support <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#Expression_interpolation\">embedded expressions</a>. Gone are the days of endless string concatination or replacing variables in a string by using RegEx.</p>\n<p>Instead of… </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> url = ...</span><br><span class=\"line\"><span class=\"keyword\">var</span> file = ...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> template = </span><br><span class=\"line\">  <span class=\"string\">&#x27;&lt;div class=&quot;photo&quot;&gt;&#x27;</span> + </span><br><span class=\"line\">     <span class=\"string\">&#x27;&lt;a href=&quot;&#x27;</span> + url + <span class=\"string\">&quot;&#x27; + </span></span><br><span class=\"line\"><span class=\"string\">        &#x27;style=&quot;</span>background-<span class=\"attr\">image</span>: <span class=\"title function_\">url</span>(<span class=\"string\">&#x27; + file + &#x27;</span>)<span class=\"string\">&quot;&lt;/a&gt;&#x27; + </span></span><br><span class=\"line\"><span class=\"string\">  &#x27;&lt;/div&gt;&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>… you can write:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> url = ...</span><br><span class=\"line\"><span class=\"keyword\">var</span> file = ...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> template = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">  &lt;div class=&quot;photo&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;a href=&quot;<span class=\"subst\">$&#123;url&#125;</span>/&quot;</span></span><br><span class=\"line\"><span class=\"string\">    style=&quot;background-image: url(<span class=\"subst\">$&#123;file&#125;</span>);&quot;&gt;&lt;/a&gt;</span></span><br><span class=\"line\"><span class=\"string\">  &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">`</span>,</span><br></pre></td></tr></table></figure>\n\n<p>It’s much cleaner and easier to handle, as you can copy your needed HTML right into your code and surround it by <strong>backtick</strong> (!) characters. Insert your variable placeholders (expressions), indicated by a dollar sign and curly braces, and you are done.</p>\n<p>But there is one “restriction”, you have to be aware of: the interpolation (substitution of the expressions) is done at declaration time and not at runtime. You can’t define your literals seperatly, take one and make your substitution as you need it, like you would do with <a href=\"https://handlebarsjs.com/\">Handlebars</a> or other templating engines. Therefore the name <em>template</em> literals is a bit misleading. But … there is a way to achieve this anyway…</p>","categories":[{"name":"JavaScript","_id":"clmbperan003wkkoqckty7lfo"}],"tags":[{"name":"ES6","_id":"clmbperc0009vkkoqewsb127v"},{"name":"Templating","_id":"clmbperc400a6kkoqbhmh1f5h"}],"content":"<p>The <a href=\"http://es6-features.org/#StringInterpolation\"><strong>Template Literals</strong></a> introduced with ES6 are very useful to deal with multiline strings, because they support <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#Expression_interpolation\">embedded expressions</a>. Gone are the days of endless string concatination or replacing variables in a string by using RegEx.</p>\n<p>Instead of… </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> url = ...</span><br><span class=\"line\"><span class=\"keyword\">var</span> file = ...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> template = </span><br><span class=\"line\">  <span class=\"string\">&#x27;&lt;div class=&quot;photo&quot;&gt;&#x27;</span> + </span><br><span class=\"line\">     <span class=\"string\">&#x27;&lt;a href=&quot;&#x27;</span> + url + <span class=\"string\">&quot;&#x27; + </span></span><br><span class=\"line\"><span class=\"string\">        &#x27;style=&quot;</span>background-<span class=\"attr\">image</span>: <span class=\"title function_\">url</span>(<span class=\"string\">&#x27; + file + &#x27;</span>)<span class=\"string\">&quot;&lt;/a&gt;&#x27; + </span></span><br><span class=\"line\"><span class=\"string\">  &#x27;&lt;/div&gt;&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>… you can write:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> url = ...</span><br><span class=\"line\"><span class=\"keyword\">var</span> file = ...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> template = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">  &lt;div class=&quot;photo&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;a href=&quot;<span class=\"subst\">$&#123;url&#125;</span>/&quot;</span></span><br><span class=\"line\"><span class=\"string\">    style=&quot;background-image: url(<span class=\"subst\">$&#123;file&#125;</span>);&quot;&gt;&lt;/a&gt;</span></span><br><span class=\"line\"><span class=\"string\">  &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">`</span>,</span><br></pre></td></tr></table></figure>\n\n<p>It’s much cleaner and easier to handle, as you can copy your needed HTML right into your code and surround it by <strong>backtick</strong> (!) characters. Insert your variable placeholders (expressions), indicated by a dollar sign and curly braces, and you are done.</p>\n<p>But there is one “restriction”, you have to be aware of: the interpolation (substitution of the expressions) is done at declaration time and not at runtime. You can’t define your literals seperatly, take one and make your substitution as you need it, like you would do with <a href=\"https://handlebarsjs.com/\">Handlebars</a> or other templating engines. Therefore the name <em>template</em> literals is a bit misleading. But … there is a way to achieve this anyway…</p>\n<span id=\"more\"></span>\n\n<h2 id=\"Tagged-Templates\"><a href=\"#Tagged-Templates\" class=\"headerlink\" title=\"Tagged Templates\"></a>Tagged Templates</h2><p>Beside Template Literals, ES6 introduced <strong>Tagged Templates</strong> (exact: Tagged Template Literals). These tags are functions, which allows you to parse a Template Literal. Definition is like this:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">myTag</span>(<span class=\"params\">literals, ...expressions</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">//do the substitution and return a string</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>You can use these tags by prefixing you literal:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myTag<span class=\"string\">`Hello <span class=\"subst\">$&#123;firstName&#125;</span> <span class=\"subst\">$&#123;lastName&#125;</span>!`</span></span><br></pre></td></tr></table></figure>\n\n<p>Using Tagged Templates to build a template repository would mean, you have to write one tag function for every template … doable, but time consuming.</p>\n<h2 id=\"Dynamic-Tag-Function\"><a href=\"#Dynamic-Tag-Function\" class=\"headerlink\" title=\"Dynamic Tag Function\"></a>Dynamic Tag Function</h2><p>To avoid this, we can write a universal tag function, which utilizes the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/Function\">Function constructor</a>, to create the tag function dynamically:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fillTemplate</span>(<span class=\"params\">templateString, templateVars</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> func = <span class=\"keyword\">new</span> <span class=\"title class_\">Function</span>(</span><br><span class=\"line\">    ...<span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(templateVars),  </span><br><span class=\"line\">    <span class=\"string\">&quot;return `&quot;</span> + templateString + <span class=\"string\">&quot;`;&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">func</span>(...<span class=\"title class_\">Object</span>.<span class=\"title function_\">values</span>(templateVars));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n    <div class=\"alertbox alertbox-warning\">\n      <p>Don’t use this approach on user inputs as expressions, to avoid XSS!</p>\n\n    </div>\n  \n\n<h2 id=\"Let’s-see-an-example…\"><a href=\"#Let’s-see-an-example…\" class=\"headerlink\" title=\"Let’s see an example…\"></a>Let’s see an example…</h2><p>Given is a tiny web app with the following structure:</p>\n<figure class=\"highlight html\"><figcaption><span>index.html</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Reusable ES6 template literals<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;/src/style.css&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">main</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;main&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">main</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;src/index.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><figcaption><span>index.js</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">App</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./app.js&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> <span class=\"title class_\">App</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">init</span>();</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><figcaption><span>app.js</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">App</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">init</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//do something</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; <span class=\"title class_\">App</span> &#125;;</span><br></pre></td></tr></table></figure>\n\n<p>What we want to do now, is to load some images into the <code>main</code> element, by using a more or less complex element structure:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;photo&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&lt;!-- Url to view the photo --&gt;&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">     <span class=\"attr\">style</span>=<span class=\"string\">&quot;background-image: url(&lt;!-- Url of the photo file --&gt;);&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>To separate our templates from the main code, we create a template module, which contains the dynamic tag function from above and a <code>photo</code> template we want to use in our app</p>\n<figure class=\"highlight js\"><figcaption><span>template.js</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Templates</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//Template</span></span><br><span class=\"line\">  <span class=\"title function_\">photo</span>(<span class=\"params\">data</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">fillTemplate</span>(</span><br><span class=\"line\">      <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">      &lt;div class=&quot;photo&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;a href=&quot;<span class=\"subst\">$&#123;data.url&#125;</span>/&quot;</span></span><br><span class=\"line\"><span class=\"string\">        style=&quot;background-image: url(<span class=\"subst\">$&#123;data.file&#125;</span>);&quot;&gt;&lt;/a&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">      `</span>,</span><br><span class=\"line\">      data</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//Dynamic Tag Function</span></span><br><span class=\"line\">  <span class=\"title function_\">fillTemplate</span>(<span class=\"params\">templateString, templateVars</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> func = <span class=\"keyword\">new</span> <span class=\"title class_\">Function</span>(...<span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(templateVars),</span><br><span class=\"line\">                           <span class=\"string\">&quot;return `&quot;</span> + templateString + <span class=\"string\">&quot;`;&quot;</span></span><br><span class=\"line\">    );</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">func</span>(...<span class=\"title class_\">Object</span>.<span class=\"title function_\">values</span>(templateVars));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; <span class=\"title class_\">Templates</span> &#125;;</span><br></pre></td></tr></table></figure>\n\n<p>The template retrieves a <code>data</code> object, with the values of the defined expressions, and calls the dynamic tag function on the literal template.</p>\n<p>This we can use now in our app code:</p>\n<figure class=\"highlight js\"><figcaption><span>app.js</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Import Template module</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Templates</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./templates.js&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">App</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">init</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//Initialize Templates</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">_templates</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Templates</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//Insert photo into MAIN element</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> main = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;main&quot;</span>);</span><br><span class=\"line\">    main.<span class=\"title function_\">insertAdjacentHTML</span>(</span><br><span class=\"line\">      <span class=\"string\">&quot;beforeend&quot;</span>,</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">_templates</span>.<span class=\"title function_\">photo</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">file</span>: <span class=\"string\">&quot;my-photo.jpg&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">url</span>: <span class=\"string\">&quot;https://link-to-my.photo.com&quot;</span></span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    );</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; <span class=\"title class_\">App</span> &#125;;</span><br></pre></td></tr></table></figure>\n\n<p>See it live at <a href=\"https://codesandbox.io/s/reusable-es6-template-literals-4iyor?file=/src/templates.js\">codesandbox.io</a>.</p>\n<hr>\n<h2 id=\"More-Info\"><a href=\"#More-Info\" class=\"headerlink\" title=\"More Info\"></a>More Info</h2>\n        <ul class=\"moreinfo-list\">\n            <li>Stackoverflow: <a href=\"https://stackoverflow.com/questions/30003353/can-es6-template-literals-be-substituted-at-runtime-or-reused\">Can ES6 template literals be substituted at runtime (or reused)?</a></li><li>Github/Adelphos: <a href=\"https://github.com/Adelphos/ES6-Reuseable-Template\">ES6-Reuseable-Template</a></li>\n        </ul>\n    \n","_path":"post/Utilize-a-repository-of-reusable-ES6-template-literals/","_link":"https://kiko.io/post/Utilize-a-repository-of-reusable-ES6-template-literals/","_id":"clmbper9b002kkkoq8ulxd91t"}}