{"type":"getPostById","data":{"title":"Running Rollup with Gulp","date":"2021-07-29T13:34:03.000Z","description":"<p>Writing an SPA (Single Page Application) in JavaScript&#x2F;CSS always means to keep an eye on small files to deliver. Especially when utilizing a bunch of libraries and frameworks, bundling is some sort of a must. The offer on bundlers and task runners is large on the web: <a href=\"https://webpack.js.org/\">WebPack</a>, <a href=\"https://www.snowpack.dev/\">Snowpack</a>, <a href=\"https://browserify.org/\">Browserify</a>, <a href=\"https://parceljs.org/\">Parcel</a>, <a href=\"https://gruntjs.com/\">Grunt</a>, <a href=\"https://gulpjs.com/\">Gulp</a> and “DingDong” (just replace with the hotest new shit available).</p>\n<p>But, it is not always necessary to replace your complete building pipeline, when the new “DingDong” is hyped in the media. Brave old tools like <a href=\"https://gulpjs.com/\">Gulp</a> are doing their job pretty well … and you are able to integrate some more modern approaches on bundling JS, for example.</p>\n<p>I couple of months ago, while working on a private project, I became attentive to <a href=\"https://www.rollupjs.org/\">Rollup.js</a>, a next-generation JavaScript module bundler from Rich Harris, the author of Svelte. Rollup uses the new standardized format for code modules included in the ES6 revision of JavaScript and supports Tree-Shaking, which means that it analyzes all your ES6 <code>imports</code> statements and bundles only the code which is used. Pretty cool … but … it is a JavaScript bundler only and there are no plugins for Gulp, my favourite task runner.</p>\n<p>In this article I will show you, how to integrate Rollup in your Gulp bundling pipeline.</p>","categories":[{"name":"JavaScript","_id":"clldf3lnp003hnmov609f5vec"}],"tags":[{"name":"SPA","_id":"clldf3loz0061nmovfimdgwx2"},{"name":"Bundling","_id":"clldf3lp00064nmovc5ue9550"}],"content":"<p>Writing an SPA (Single Page Application) in JavaScript&#x2F;CSS always means to keep an eye on small files to deliver. Especially when utilizing a bunch of libraries and frameworks, bundling is some sort of a must. The offer on bundlers and task runners is large on the web: <a href=\"https://webpack.js.org/\">WebPack</a>, <a href=\"https://www.snowpack.dev/\">Snowpack</a>, <a href=\"https://browserify.org/\">Browserify</a>, <a href=\"https://parceljs.org/\">Parcel</a>, <a href=\"https://gruntjs.com/\">Grunt</a>, <a href=\"https://gulpjs.com/\">Gulp</a> and “DingDong” (just replace with the hotest new shit available).</p>\n<p>But, it is not always necessary to replace your complete building pipeline, when the new “DingDong” is hyped in the media. Brave old tools like <a href=\"https://gulpjs.com/\">Gulp</a> are doing their job pretty well … and you are able to integrate some more modern approaches on bundling JS, for example.</p>\n<p>I couple of months ago, while working on a private project, I became attentive to <a href=\"https://www.rollupjs.org/\">Rollup.js</a>, a next-generation JavaScript module bundler from Rich Harris, the author of Svelte. Rollup uses the new standardized format for code modules included in the ES6 revision of JavaScript and supports Tree-Shaking, which means that it analyzes all your ES6 <code>imports</code> statements and bundles only the code which is used. Pretty cool … but … it is a JavaScript bundler only and there are no plugins for Gulp, my favourite task runner.</p>\n<p>In this article I will show you, how to integrate Rollup in your Gulp bundling pipeline.</p>\n<span id=\"more\"></span>\n\n<hr>\n<h2 id=\"Install-Rollup\"><a href=\"#Install-Rollup\" class=\"headerlink\" title=\"Install Rollup\"></a>Install Rollup</h2><p>Best practice is to install Rollup globally:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --<span class=\"variable language_\">global</span> rollup</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"The-Gulp-File\"><a href=\"#The-Gulp-File\" class=\"headerlink\" title=\"The Gulp File\"></a>The Gulp File</h2><p>Starting point was my <code>gulpfile.js</code> as follows:</p>\n<figure class=\"highlight js\"><figcaption><span>gulpfile.js</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; src, dest, watch, series, parallel &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> del = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;del&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> cssimport = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;gulp-cssimport&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> cleancss = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-clean-css&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> sourcemaps = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-sourcemaps&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Clean distribution folder */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">clean</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">del</span>(<span class=\"string\">&#x27;./dist/**&#x27;</span>, &#123; <span class=\"attr\">force</span>: <span class=\"literal\">true</span> &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Bundle CSS with sourcemapping, imports and cleaning */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">css</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">src</span>(<span class=\"string\">&#x27;./styles/app.css&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(sourcemaps.<span class=\"title function_\">init</span>())</span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">cssimport</span>(&#123;&#125;))</span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">cleancss</span>(&#123; <span class=\"attr\">debug</span>: <span class=\"literal\">true</span> &#125;, <span class=\"function\">(<span class=\"params\">details</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`<span class=\"subst\">$&#123;details.name&#125;</span> BEFORE: <span class=\"subst\">$&#123;details.stats.originalSize&#125;</span>`</span>);</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`<span class=\"subst\">$&#123;details.name&#125;</span> AFTER: <span class=\"subst\">$&#123;details.stats.minifiedSize&#125;</span>`</span>);</span><br><span class=\"line\">    &#125;))</span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(sourcemaps.<span class=\"title function_\">write</span>(<span class=\"string\">&#x27;.&#x27;</span>, &#123; <span class=\"attr\">sourceRoot</span>: <span class=\"string\">&#x27;/styles&#x27;</span> &#125;))</span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">dest</span>(<span class=\"string\">&#x27;./dist/&#x27;</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">exports</span>.<span class=\"property\">default</span> = <span class=\"title function_\">series</span>(clean, css);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>This pipeline only bundles CSS yet, when calling <code>gulp</code> in the command line.</p>\n<hr>\n<h2 id=\"Calling-Rollup-for-JS-bundling\"><a href=\"#Calling-Rollup-for-JS-bundling\" class=\"headerlink\" title=\"Calling Rollup for JS bundling\"></a>Calling Rollup for JS bundling</h2><p>Rollup has <a href=\"https://www.rollupjs.org/guide/en/#command-line-reference\">dozens of parameters</a> to define everything you need, but it also supports a config file, which allows you to configure everything there and run <code>rollup -c</code> only. Very useful on this approach.</p>\n<figure class=\"highlight js\"><figcaption><span>rollup.config.js</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">input</span>: <span class=\"string\">&#x27;./js/app.js&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">file</span>: <span class=\"string\">&#x27;./dist/app.js&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">format</span>: <span class=\"string\">&#x27;es&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">sourcemap</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>As there is no Gulp plugin for Rollup, we need to execute Rollup in the Gulp pipeline by command. For this I’ve created a helper in my <code>gulpfile.js</code>, to be able to execute whichever command:</p>\n<figure class=\"highlight js\"><figcaption><span>gulpfile.js</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable constant_\">HELPERS</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">execute</span>: <span class=\"function\">(<span class=\"params\">command</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> process = <span class=\"title function_\">exec</span>(command);</span><br><span class=\"line\">    process.<span class=\"property\">stdout</span>.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;data&#x27;</span>, <span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123; <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data.<span class=\"title function_\">toString</span>()); &#125;)</span><br><span class=\"line\">    process.<span class=\"property\">stderr</span>.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;data&#x27;</span>, <span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123; <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data.<span class=\"title function_\">toString</span>()); &#125;)</span><br><span class=\"line\">    process.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;exit&#x27;</span>, <span class=\"function\">(<span class=\"params\">code</span>) =&gt;</span> &#123; </span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Process exited with code &#x27;</span> + code.<span class=\"title function_\">toString</span>()); </span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> process;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>This helper is used in a Gulp command function to call Rollup:</p>\n<figure class=\"highlight js\"><figcaption><span>gulpfile.js</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">javascript</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable constant_\">HELPERS</span>.<span class=\"title function_\">execute</span>(<span class=\"string\">&#x27;rollup -c&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>The last thing I had to do, is to insert the command in the pipeline to run in parallel to the CSS bundling:</p>\n<figure class=\"highlight js\"><figcaption><span>gulpfile.js</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">exports</span>.<span class=\"property\">default</span> = <span class=\"title function_\">series</span>(clean, <span class=\"title function_\">parallel</span>(css, javascript));</span><br></pre></td></tr></table></figure>\n\n<p>Pretty straightforward, isn’t it? Happy bundling with Rollup and Gulp…</p>\n","_path":"post/Running-Rollup-with-Gulp/","_link":"https://kiko.io/post/Running-Rollup-with-Gulp/","_id":"clldf3ll8001tnmova93u01ib"}}