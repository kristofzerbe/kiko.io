{"type":"getPostById","data":{"title":"Convert HTML into Plain Text in Hexo","date":"2023-08-31T19:58:36.000Z","description":"<p>Hexo, on which this blog is based, is a Static Site Generator (SSG) that generates a whole structure of HTML files from individual Markdown files in which the articles were written. Besides the actual posts, also overview pages like the archives and others. For the latter, however, it only needs an excerpt from the actual article, which Hexo automatically creates from the initially generated HTML content and which is also available as HTML.</p>\n<p>For my <a href=\"/post/Show-pages-meta-data-JSON-LD-in-Bottom-Sheet/\" title=\"Show pages meta data (JSON-LD) in Bottom Sheet\">Page Meta dialog</a>, however, I recently needed the excerpt as plain text to make it easier to transfer it manually to a Mastodon post, for example. My initial attempts to extract the plain text from the original Markdown turned out to be quite difficult, because in Hexo not only Markdown is used, but also special <a href=\"https://hexo.io/docs/tag-plugins\">Tag Plugins</a> in Nunjucks format and of course plain HTML. Long speech, short sense … after the first dozen RegEx-Replace calls, I got doubts to be on the right way and remembered <code>Page.Excerpt</code>, the variant already generated by Hexo in HTML.</p>","categories":[{"name":"JavaScript","_id":"clp3xjcnl0048m3oz9cr8ck91"}],"tags":[{"name":"Hexo","_id":"clp3xjcni003xm3oz59bq4fnr"},{"name":"Node.js","_id":"clp3xjcpt00crm3oz32ia2u0l"},{"name":"Meta","_id":"clp3xjcq900e2m3ozdz9tdjx8"}],"content":"<p>Hexo, on which this blog is based, is a Static Site Generator (SSG) that generates a whole structure of HTML files from individual Markdown files in which the articles were written. Besides the actual posts, also overview pages like the archives and others. For the latter, however, it only needs an excerpt from the actual article, which Hexo automatically creates from the initially generated HTML content and which is also available as HTML.</p>\n<p>For my <a href=\"/post/Show-pages-meta-data-JSON-LD-in-Bottom-Sheet/\" title=\"Show pages meta data (JSON-LD) in Bottom Sheet\">Page Meta dialog</a>, however, I recently needed the excerpt as plain text to make it easier to transfer it manually to a Mastodon post, for example. My initial attempts to extract the plain text from the original Markdown turned out to be quite difficult, because in Hexo not only Markdown is used, but also special <a href=\"https://hexo.io/docs/tag-plugins\">Tag Plugins</a> in Nunjucks format and of course plain HTML. Long speech, short sense … after the first dozen RegEx-Replace calls, I got doubts to be on the right way and remembered <code>Page.Excerpt</code>, the variant already generated by Hexo in HTML.</p>\n<span id=\"more\"></span>\n\n<p>Now you would think that JavaScript has some built-in function to extract the plain text out of a bunch of HTML tags, but this is actually not the case. You have to take a little detour to do this:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">convertHtml2PlainText</span>(<span class=\"params\">excerpt</span>) &#123;  </span><br><span class=\"line\">  <span class=\"keyword\">let</span> e = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;div&quot;</span>);</span><br><span class=\"line\">  e.<span class=\"property\">innerHTML</span> = excerpt;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> e.<span class=\"property\">textContent</span> || e.<span class=\"property\">innerText</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> plainText = <span class=\"title function_\">convertHtml2PlainText</span>(page.<span class=\"property\">excerpt</span>);</span><br></pre></td></tr></table></figure>\n\n<p>Fine, my problem is solved … hmm… NO, because Node.js does not know a <code>document</code>, because a DOM exists only in the browser. But … there are libraries like <a href=\"https://github.com/jsdom/jsdom\"><strong>jsdom</strong></a> that make a DOM available in Node.js:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; <span class=\"variable constant_\">JSDOM</span> &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;jsdom&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">convertHtml2PlainText</span>(<span class=\"params\">excerpt</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> dom = <span class=\"keyword\">new</span> <span class=\"title function_\">JSDOM</span>(<span class=\"string\">&#x27;&lt;!DOCTYPE html&gt;&#x27;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> e = dom.<span class=\"property\">window</span>.<span class=\"property\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;div&quot;</span>);</span><br><span class=\"line\">  e.<span class=\"property\">innerHTML</span> = excerpt;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> e.<span class=\"property\">textContent</span> || e.<span class=\"property\">innerText</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> plainText = <span class=\"title function_\">convertHtml2PlainText</span>(page.<span class=\"property\">excerpt</span>);</span><br></pre></td></tr></table></figure>\n\n<p>Nice … but also doesn’t work, because I need the piece of code in an <a href=\"https://ejs.co/\"><strong>EJS</strong></a> template, but when processing the same to HTML, the included JavaScript code is executed, but loading external libraries via <code>require()</code> is not supported.</p>\n<p>And once again Hexo’s <a href=\"https://hexo.io/api/helper.html\">Tag Helpers</a> come to my rescue:</p>\n<figure class=\"highlight js\"><figcaption><span>helper-excerpt-plain.js</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; <span class=\"variable constant_\">JSDOM</span> &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;jsdom&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">hexo.<span class=\"property\">extend</span>.<span class=\"property\">helper</span>.<span class=\"title function_\">register</span>(<span class=\"string\">&#x27;excerpt_plain&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">excerpt</span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> dom = <span class=\"keyword\">new</span> <span class=\"title function_\">JSDOM</span>(<span class=\"string\">&#x27;&lt;!DOCTYPE html&gt;&#x27;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> e = dom.<span class=\"property\">window</span>.<span class=\"property\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;div&quot;</span>);</span><br><span class=\"line\">  e.<span class=\"property\">innerHTML</span> = excerpt;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> e.<span class=\"property\">textContent</span> || e.<span class=\"property\">innerText</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>For the sake of beauty, I also cut out leading and double line breaks after the conversion and put the result in a custom meta tag in the head of the HTML page to have access to it later via JavaScript running in the browser: </p>\n<figure class=\"highlight js\"><figcaption><span>head.ejs</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> excerpt = <span class=\"title function_\">excerpt_plain</span>(page.<span class=\"property\">excerpt</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">replace</span>(<span class=\"regexp\">/^(\\r\\n|\\n|\\r)/</span>, <span class=\"string\">&quot;&quot;</span>) <span class=\"comment\">// Remove leading break</span></span><br><span class=\"line\">  .<span class=\"title function_\">replace</span>(<span class=\"regexp\">/(\\r\\n|\\n|\\r)&#123;2,&#125;/g</span>, <span class=\"string\">&quot; &quot;</span>) <span class=\"comment\">// Remove multiple breaks</span></span><br><span class=\"line\">  .<span class=\"title function_\">trim</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;meta name=<span class=\"string\">&quot;excerpt&quot;</span> content=<span class=\"string\">&quot;&lt;%= excerpt %&gt;&quot;</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>Et voilá … I have my excerpt as plain text to show in my Page Meta dialog.</p>\n","_path":"post/Convert-HTML-into-Plain-Text-in-Hexo/","_link":"https://kiko.io/post/Convert-HTML-into-Plain-Text-in-Hexo/","_id":"clp3xjcmc002zm3oz3ru8agqw"}}