{"type":"getPostsByTag","data":[{"title":"A New Blog: Customizing Hexo","date":"2019-09-25T10:00:00.000Z","description":"<p>Hexo is a great tool to get quick results (see <a href=\"/categories/Tools/A-New-Blog-VS-Code-Hexo-and-GitHub-Pages/\">Part One of this series</a>), when you decide to have a blog and its defaults are practical, but it’s power lies in the possiblities of customization via plugins. On the <a href=\"https://hexo.io/plugins/index.html\">official plugin page</a>, there are actually 302 plugins listed, but there are many more and no wish will be unsatisfied.</p>\n<p>I will show you which of these I found worth to work with…</p>","categories":[{"name":"Tools","_id":"clp78c8wc0043n8q540ye4crs"}],"tags":[{"name":"Hexo","_id":"clp78c8wa003yn8q5c936c8di"},{"name":"VS Code","_id":"clp78c8wd0048n8q5dyx9ckqo"},{"name":"Blogging","_id":"clp78c8we004cn8q5euog76ph"}],"_path":"post/A-New-Blog-Customizing-Hexo/","_link":"https://kiko.io/post/A-New-Blog-Customizing-Hexo/","_id":"clp78c8tw0009n8q531yxdenw"},{"title":"A New Blog: Blogging and Synching en route","date":"2019-09-30T22:00:00.000Z","description":"<p>I work with several devices, some Windows, some Android, and sometimes I have time to write on my articles at home (Notebook, Tablet), in my spare time in the office (Desktop, Laptop) or on my way to somewhere (Smartphone). Right now I’m am in a barber shop, waiting for my haircut and write these lines. So, wherever I am, I need the Hexo project locally, but in sync on a digital device.</p>\n<p>The blog is synced via Dropbox, but hosted on GitHub Pages, so on every device I need the  publishing functions of Git too.</p>","categories":[{"name":"Tools","_id":"clp78c8wc0043n8q540ye4crs"}],"tags":[{"name":"Hexo","_id":"clp78c8wa003yn8q5c936c8di"},{"name":"VS Code","_id":"clp78c8wd0048n8q5dyx9ckqo"},{"name":"Blogging","_id":"clp78c8we004cn8q5euog76ph"},{"name":"GitHub","_id":"clp78c8wg004in8q59hva6gpg"}],"_path":"post/A-New-Blog-Blogging-and-Synching-en-route/","_link":"https://kiko.io/post/A-New-Blog-Blogging-and-Synching-en-route/","_id":"clp78c8tx000an8q59tdid5jb"},{"title":"A New Blog: VS Code, Hexo and GitHub Pages","date":"2019-09-23T22:00:00.000Z","description":"<p>A few days ago I puzzled over a technical problem regarding SQL Server, Active Directory and Visual Studio Database Projects. With tips, hints and snippets from several websites I got it running and the solution was absolutely memorable. For myself and for others. Nothing is harder than to know ‘you did this before…’, but not to remember how.</p>\n<p>Because of this strong leaning towards oblivion, I started over 20 years ago my very first website <strong>zerbit.de</strong>, manually crafted with Classic ASP and a SQL Server database as backend, with an editor, tagging, categories and so on. It was really exciting to build this blog from scratch and writing articles for it, but it was so time consuming to expand the features of the website and keep it running, that some day I quit it silently.</p>\n<p>So, to document the solution mentioned above, I could use tools like OneNote or others, like in the past years, but this would be just for me and not for all developers, who have a similar problem. I felt it would be unfair to participate from the knowledge of others to get my solution and dont give something back.</p>\n<p>I decided to write an article just in HTML and publish it on my personal GitHub Page that I didn’t used so far. Ok, just Text … ugly. Just a little CSS and a little more structure and maybe I should do something with Vue JS … STOP … It would be better to pick one of the cool new static website generators based on Node.js, to detain myself from inventing the wheel again and save my time to write articles. So I did a little research and found <a href=\"https://hexo.io/\">HEXO</a> … Bingo! I can work with my favorite editor <a href=\"https://code.visualstudio.com/\">Visual Studio Code</a>, its all HTML, JavaScript and CSS, I can write my articles in Markdown and Hexo has a lot of helpers for stuff Markdown doesn’t provide, it produces static files and works only with files, therefore no need for a database … and it is well documented.</p>","categories":[{"name":"Tools","_id":"clp78c8wc0043n8q540ye4crs"}],"tags":[{"name":"Hexo","_id":"clp78c8wa003yn8q5c936c8di"},{"name":"VS Code","_id":"clp78c8wd0048n8q5dyx9ckqo"},{"name":"Blogging","_id":"clp78c8we004cn8q5euog76ph"},{"name":"GitHub","_id":"clp78c8wg004in8q59hva6gpg"}],"_path":"post/A-New-Blog-VS-Code-Hexo-and-GitHub-Pages/","_link":"https://kiko.io/post/A-New-Blog-VS-Code-Hexo-and-GitHub-Pages/","_id":"clp78c8ty000bn8q59h757q41"},{"title":"Hexo and the Dark Mode ... revised","date":"2019-10-26T12:08:05.000Z","description":"<p>While writing my post <a href=\"/categories/Tools/Hexo-and-the-Dark-Mode\">Hexo and the Dark Mode</a> a few days ago, I thought it would be nice, if I could switch between the normal (light) and the dark theme, I’ve created for the support of the OS-related Dark Mode, even manually. The only thing I needed was a toggle element and a little bit of JavaScript.</p>\n<p>Of course, I couldn’t manipulate the <a href=\"https://drafts.csswg.org/mediaqueries-5/#descdef-media-prefers-color-scheme\">media query <code>prefers-color-scheme</code></a> itself, but introduce a different way by blog uses it. Instead of implementing the media query directly into my CSS (or Stylus) code, I used a root selector, which can be manipulated by JavaScript … something like this:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: white;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: black;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-attr\">[data-theme=<span class=\"string\">&quot;dark&quot;</span>]</span> <span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: black;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: white;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":[{"name":"Tools","_id":"clp78c8wc0043n8q540ye4crs"}],"tags":[{"name":"Hexo","_id":"clp78c8wa003yn8q5c936c8di"},{"name":"CSS","_id":"clp78c8wb0040n8q570rc57ne"},{"name":"Stylus","_id":"clp78c8wm0050n8q5f1a3ahfz"},{"name":"Dark Mode","_id":"clp78c8wn0052n8q52su9eqq3"}],"_path":"post/Hexo-and-the-Dark-Mode-revised/","_link":"https://kiko.io/post/Hexo-and-the-Dark-Mode-revised/","_id":"clp78c8u0000dn8q5h0nv4e45"},{"title":"Hexo and the Dark Mode","date":"2019-10-23T13:28:04.000Z","description":"<p>Due to the fact, that nowadays everybody is talking about Dark Modes for Browsers and Operating Systems, in order to save battery or for easier reading (uhh, really?), I decided my blog should support that.</p>\n<p><img src=\"/post/Hexo-and-the-Dark-Mode/screen-recording-1.gif\" alt=\"Switching Dark Mode in Windows 10\"></p>","categories":[{"name":"Tools","_id":"clp78c8wc0043n8q540ye4crs"}],"tags":[{"name":"Hexo","_id":"clp78c8wa003yn8q5c936c8di"},{"name":"CSS","_id":"clp78c8wb0040n8q570rc57ne"},{"name":"Stylus","_id":"clp78c8wm0050n8q5f1a3ahfz"},{"name":"Dark Mode","_id":"clp78c8wn0052n8q52su9eqq3"}],"_path":"post/Hexo-and-the-Dark-Mode/","_link":"https://kiko.io/post/Hexo-and-the-Dark-Mode/","_id":"clp78c8u1000fn8q50ef491dm"},{"title":"404 Page in Hexo for GitHub Pages","date":"2020-09-23T12:28:50.000Z","description":"<p>As this blog is a static one, generated by <a href=\"https://hexo.io/\">Hexo</a> and hostet at <a href=\"https://pages.github.com/\">GitHub</a>, the page which was shown, when a user enters an Url which points to nowhere, was the default GitHub 404 page.</p>\n<p><img src=\"/post/404-Page-in-Hexo-for-GitHub-Pages/github-404-page.png\" alt=\"GitHub 404 Page\"></p>","categories":[{"name":"Tools","_id":"clp78c8wc0043n8q540ye4crs"}],"tags":[{"name":"Hexo","_id":"clp78c8wa003yn8q5c936c8di"},{"name":"GitHub","_id":"clp78c8wg004in8q59hva6gpg"},{"name":"Error","_id":"clp78c8wv005mn8q5fzr8ct0i"}],"_path":"post/404-Page-in-Hexo-for-GitHub-Pages/","_link":"https://kiko.io/post/404-Page-in-Hexo-for-GitHub-Pages/","_id":"clp78c8u2000gn8q5ebr9btla"},{"title":"Automatic Header Images in Hexo","date":"2020-06-22T15:49:16.000Z","description":"<p>Every article in this blog has an individual header image, to bring a little bit color into it. In this post I will show you how I deal with the images in using and automatic provisioning.</p>\n<p>For serving these pictures I use a static folder, as described in <a href=\"/categories/Tools/A-New-Blog-Customizing-Hexo/\">A New Blog: Customizing Hexo</a>. The hard work is done by the plugin <a href=\"https://github.com/niahoo/hexo-generator-copy\">Hexo Generator Copy</a>, which copies the static files into the <code>public_dir</code> while generating.</p>","categories":[{"name":"Tools","_id":"clp78c8wc0043n8q540ye4crs"}],"tags":[{"name":"Hexo","_id":"clp78c8wa003yn8q5c936c8di"},{"name":"Blogging","_id":"clp78c8we004cn8q5euog76ph"}],"_path":"post/Automatic-Header-Images-in-Hexo/","_link":"https://kiko.io/post/Automatic-Header-Images-in-Hexo/","_id":"clp78c8u3000in8q5dpiz773v"},{"title":"Pimping the Permalink","date":"2020-09-20T14:30:37.000Z","description":"<p>Until now I did not show the permalink under my posts in this blog, but in the past I had sometimes the need to pass one of the links and it was not very user-friendly, on desktop as well as on mobile. Not the One-Click experience I prefer.</p>\n<p>My goal was to show the permalink and, even more important, provide a simple way to copy and to share. JavaScript to the rescue…</p>","categories":[{"name":"JavaScript","_id":"clp78c8we0049n8q53qkscxma"}],"tags":[{"name":"Hexo","_id":"clp78c8wa003yn8q5c936c8di"},{"name":"CSS","_id":"clp78c8wb0040n8q570rc57ne"},{"name":"Stylus","_id":"clp78c8wm0050n8q5f1a3ahfz"},{"name":"Share","_id":"clp78c8xn007un8q593sv5ohi"}],"_path":"post/Pimping-the-Permalink/","_link":"https://kiko.io/post/Pimping-the-Permalink/","_id":"clp78c8u8000yn8q598dybupd"},{"title":"Show related posts in Hexo","date":"2020-10-03T11:17:03.000Z","description":"<p>It is always nice to point the readers of your blog’s articles to related posts, they might be interested in. They stay a little longer to understand what you have to offer and increases the likelihood that they become loyal readers, followers or subscribers. Related posts has become a standard on delivering news and posts.</p>\n<p>In the default Hexo theme <strong>Landscape</strong>, on which this blog is based, there is no such function built in, but as the Hexo community is very busy, there are some plugins you can use.</p>","categories":[{"name":"Tools","_id":"clp78c8wc0043n8q540ye4crs"}],"tags":[{"name":"Hexo","_id":"clp78c8wa003yn8q5c936c8di"},{"name":"Blogging","_id":"clp78c8we004cn8q5euog76ph"}],"_path":"post/Show-related-posts-in-Hexo/","_link":"https://kiko.io/post/Show-related-posts-in-Hexo/","_id":"clp78c8u9000zn8q582wdgi50"},{"title":"Using GitHub as Commenting Platform","date":"2020-07-05T12:55:16.000Z","description":"<p>If you run a blog, it is always advisable to integrate a commenting system, in order to get feedback on your posts from your readers.</p>\n<p>So did I, when I start this blog and I decided to use the <a href=\"https://disqus.com/\">Disqus platform</a>, as it was very easy to integrate … but I always had a bad feeling about a third-party platform collecting data from my readers. Disqus is probably not without reason under criticism by many people in the community.</p>\n<p>As I host this blog at GitHub (see <a href=\"/categories/Tools/A-New-Blog-VS-Code-Hexo-and-GitHub-Pages/\">A New Blog (Part One): VS Code, Hexo and GitHub Pages</a>) I was looking for a solution to host the comments also on my prefered platform. There were some solutions, which uses GitHub Issues for this and wanted to implement something like that someday.</p>","categories":[{"name":"Tools","_id":"clp78c8wc0043n8q540ye4crs"}],"tags":[{"name":"Hexo","_id":"clp78c8wa003yn8q5c936c8di"},{"name":"Blogging","_id":"clp78c8we004cn8q5euog76ph"},{"name":"GitHub","_id":"clp78c8wg004in8q59hva6gpg"}],"_path":"post/Using-GitHub-as-Commenting-Platform/","_link":"https://kiko.io/post/Using-GitHub-as-Commenting-Platform/","_id":"clp78c8ub0011n8q596v07xmi"},{"title":"Generate Content from Trello","date":"2022-12-29T11:08:00.000Z","description":"<p>I’m collecting&#x2F;bookmarking links to interesting website post on a public Trello board and aggregating them from time to time in a special post series called <em>Discoveries</em>, where I present 10 of them in one post on a specific topic.</p>\n<p>Writing these summaries is currently still a bit time-consuming, because in addition to the link, the name of the author and a small description, I would also like to display a screenshot of the page in each case … and it is still a completely manual process.</p>\n<p>After selecting the 10 links I want to talk about, I first create a new post for my Hexo blog and then process the links as follows:</p>\n<ol>\n<li>Creating, resizing and saving the screenshot</li>\n<li>Creating a new section in the post</li>\n<li>Setting a key for the post based on the title</li>\n<li>Setting the title</li>\n<li>Setting the author</li>\n<li>Setting the screenshot file</li>\n</ol>\n<p>I do use two tag plugins (<a href=\"https://github.com/kristofzerbe/kiko.io/blob/2c80a548e188c05879039a15e67419b548bfbfcd/themes/landscape/scripts/tag-anchorlist.js\">tag-anchorlist</a> and <a href=\"https://github.com/kristofzerbe/kiko.io/blob/2c80a548e188c05879039a15e67419b548bfbfcd/themes/landscape/scripts/tag-discovery.js\">tag-discovery</a>) for this in the post draft, but despite that, it’s quite time-consuming and always the same procedure that can be wonderfully automated… and here I’d like to write about how I approached this task, while I’m working on it.</p>","categories":[{"name":"JavaScript","_id":"clp78c8we0049n8q53qkscxma"}],"tags":[{"name":"Hexo","_id":"clp78c8wa003yn8q5c936c8di"},{"name":"Trello","_id":"clp78c8ww005on8q5ek0x0070"},{"name":"Publishing","_id":"clp78c8xa006pn8q5g85y21uz"}],"_path":"post/Generate-Content-from-Trello/","_link":"https://kiko.io/post/Generate-Content-from-Trello/","_id":"clp78c8ug001dn8q5e4839xqj"},{"title":"The State of the Blog","date":"2022-12-23T21:40:00.000Z","description":"<p>I’ve started this blog in 2019 with <a href=\"/post/How-To-Visual-Studio-Database-Project-and-ADSI/\" title=\"How-To: Visual Studio Database Project and ADSI\">this article</a> primarily because I needed an area to record things learned for myself, with the side effect that others can benefit from it if they want.</p>\n<p>Why my choice fell on the static site generator <a href=\"https://hexo.io/\">Hexo</a>, I no longer know, but I have now become accustomed (even to the shortcomings) and so far I have been able to implement all my ideas in it … and I had a few of them.</p>\n<p>In this post I would like to share a few experiences I have had with Hexo, regarding the main functionality and the things I’ve customized and describe my workflow behind the individual features of my blog. The latter is not as straightforward as I would like it to be, especially because I have different devices in use that require different approaches. The main purpose of this post is to simply write down for me, how things currently work on kiko.io and to have one or the other idea how to do it better while writing. Doing this publicly is in the hope that you might read this and have a terrific idea that I haven’t come up with yet and leave a comment or webmention … :)</p>","categories":[{"name":"Tools","_id":"clp78c8wc0043n8q540ye4crs"}],"tags":[{"name":"Hexo","_id":"clp78c8wa003yn8q5c936c8di"},{"name":"Blogging","_id":"clp78c8we004cn8q5euog76ph"}],"_path":"post/The-State-of-the-Blog/","_link":"https://kiko.io/post/The-State-of-the-Blog/","_id":"clp78c8uj001mn8q51akh2yh4"},{"title":"Forking Hexo plugin 'hexo-index-anything'","date":"2021-04-25T11:41:46.000Z","description":"<p>As I started with this blog 2 years ago, I wanted to document the customization of Hexo to my needs in a series of articles. To group these articles I considered using the build-in <code>categories</code>, but I already used them to group articles by the underlying tech stack or area, like ´JavaScript´, ´C#´ or ´Tools´ and I didn’t want to mix it, as the category was also used in the Url of a post.</p>\n<p>I was researching another grouping solution for Hexo and stumbled upon <a href=\"https://github.com/leviwheatcroft/hexo-index-anything\">hexo-index-anything</a>, a very clever Hexo plugin to generate index pages for almost every <a href=\"https://hexo.io/docs/front-matter.html\">FrontMatter</a> variable in a post.</p>\n<p>As it was freely available under a MIT license on Github, I forked it in July 2020 and made some bug fixes and drop a pull request to Levi … but he  unfortunately never answered my pull or issue requests and has set the status of the project to DEPRECATED.</p>\n<p>Ok then … make a successor on your own, fella…</p>","categories":[{"name":"JavaScript","_id":"clp78c8we0049n8q53qkscxma"}],"tags":[{"name":"Hexo","_id":"clp78c8wa003yn8q5c936c8di"},{"name":"GitHub","_id":"clp78c8wg004in8q59hva6gpg"},{"name":"Plugin","_id":"clp78c8xd006rn8q5cwcj7smh"}],"_path":"post/Forking-Hexo-plugin-hexo-index-anything/","_link":"https://kiko.io/post/Forking-Hexo-plugin-hexo-index-anything/","_id":"clp78c8uq0022n8q56esthiiq"},{"title":"Generate Social Media Images Automatically","date":"2021-07-10T09:07:31.000Z","description":"<p>From day one of this blog I wanted to combine two of my passions: tech stuff and photography. All these photos I have shot myself in recent years and now they are representing my thoughts &amp; findings about digital technology. I wrote about my approach to provide these images in my post <a href=\"/post/Automatic-Header-Images-in-Hexo/\" title=\"Automatic Header Images in Hexo\">Automatic Header Images in Hexo</a>.</p>\n<p>When I share one of my posts on social media I provide the appropriate image as a visual anchor to my writing. The technique behind this are the <code>meta</code> tags in the HTML of my posts:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- Schema.org for Google --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">itemprop</span>=<span class=\"string\">&quot;image&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;https://kiko.io/photos/normal/DSC_6776.jpg&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- Open Graph --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;og:image&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;https://kiko.io/photos/normal/DSC_6776.jpg&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- Twitter --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;twitter:card&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;summary_large_image&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;twitter:image&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;https://kiko.io/photos/normal/DSC_6776.jpg&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>There are several meta tags for different purposes regarding images. For more information see the links at the end of this post. To make a long story short: The sum of these approaches ensures that when an article is posted, the corresponding image is also displayed in the social media post.</p>\n<p>But … it’s only the image, without a visual reference to the post itself. In this article I want to show you how to combine the photo with some meta information of the post automatically, to get a <strong>Social Media Image</strong>.</p>\n<p><img src=\"/post/Generate-Social-Media-Images-Automatically/generation-flow.png\" alt=\"Generation Flow\"></p>","categories":[{"name":"JavaScript","_id":"clp78c8we0049n8q53qkscxma"}],"tags":[{"name":"Hexo","_id":"clp78c8wa003yn8q5c936c8di"},{"name":"Blogging","_id":"clp78c8we004cn8q5euog76ph"},{"name":"GitHub","_id":"clp78c8wg004in8q59hva6gpg"},{"name":"Imaging","_id":"clp78c8yn00b4n8q5106p4z4j"},{"name":"ES6","_id":"clp78c8yw00bwn8q5canu2fyc"}],"_path":"post/Generate-Social-Media-Images-Automatically/","_link":"https://kiko.io/post/Generate-Social-Media-Images-Automatically/","_id":"clp78c8ur0023n8q5hzybhtn2"},{"title":"GitHub Tag Plugins for Hexo","date":"2021-12-29T11:20:34.000Z","description":"<p>Currently I’m working on improving my projects section by linking to some of my projects hosted on Github. One idea is to display the Github README there. Playing around with the GitHub API is fun and so I created two new Hexo Tag Plugins that I don’t want to deprive you of and that extend the <a href=\"https://github.com/kristofzerbe/hexo-tag-plugins\">Hexo Tag Plugin Collection</a>.</p>\n\n        <ul class=\"anchorlist\">\n            <li data-anchor=\"#readme\">GitHub README</li><li data-anchor=\"#user-and-repo-card\">GitHub User & Repo Card</li>\n        </ul>","categories":[{"name":"Tools","_id":"clp78c8wc0043n8q540ye4crs"}],"tags":[{"name":"Hexo","_id":"clp78c8wa003yn8q5c936c8di"},{"name":"GitHub","_id":"clp78c8wg004in8q59hva6gpg"},{"name":"Plugin","_id":"clp78c8xd006rn8q5cwcj7smh"}],"_path":"post/GitHub-Tag-Plugins-for-Hexo/","_link":"https://kiko.io/post/GitHub-Tag-Plugins-for-Hexo/","_id":"clp78c8ur0024n8q5azn11eyn"},{"title":"Hexo Tag Plugin Collection","date":"2021-12-12T13:07:36.000Z","description":"<p>Since day one of this blog I use <strong>Tag Plugins</strong>, sometimes as NPM packages from other developers, sometimes developed by myself.</p>\n<p>The latter have grown significantly over time and I want to share them with you by publishing them in a Github project called <strong>hexo-tag-plugins</strong>, where you can download and use those you need on extending your own Hexo based blog.</p>\n<p>On the Github page you can find all the info on how to use the plugins. In this article I will only briefly introduce them:</p>\n\n        <ul class=\"anchorlist\">\n            <li data-anchor=\"#anchor\">Anchor</li><li data-anchor=\"#anchorlist\">Anchorlist</li><li data-anchor=\"#alertbox\">Alertbox</li><li data-anchor=\"#blockquote_alt\">Alternative Blockqoute</li><li data-anchor=\"#blockquote_details\">Blockquote Details</li><li data-anchor=\"#codepen\">Codepen</li><li data-anchor=\"#codesandbox\">CodeSandbox</li><li data-anchor=\"#download-link\">Download Link</li><li data-anchor=\"#image-compare\">Image Compare</li><li data-anchor=\"#image-link\">Image Link</li><li data-anchor=\"#image-slide\">Image Slide</li><li data-anchor=\"#indiepen\">Indiepen</li><li data-anchor=\"#more-info\">More Info</li>\n        </ul>","categories":[{"name":"Tools","_id":"clp78c8wc0043n8q540ye4crs"}],"tags":[{"name":"Hexo","_id":"clp78c8wa003yn8q5c936c8di"},{"name":"VS Code","_id":"clp78c8wd0048n8q5dyx9ckqo"},{"name":"GitHub","_id":"clp78c8wg004in8q59hva6gpg"},{"name":"Collection","_id":"clp78c8x30067n8q52iizc9er"},{"name":"Plugin","_id":"clp78c8xd006rn8q5cwcj7smh"}],"_path":"post/Hexo-Tag-Plugin-Collection/","_link":"https://kiko.io/post/Hexo-Tag-Plugin-Collection/","_id":"clp78c8us0026n8q5fi99fjls"},{"title":"Hexo and the IndieWeb (Receiving Webmentions)","date":"2021-05-13T12:16:00.000Z","description":"<div class=\"alertbox alertbox-info\">\n      <p>This is part three of the splitted original post <a href=\"/post/Hexo-and-the-IndieWeb/\" title=\"Hexo and the IndieWeb\">Hexo and the IndieWeb</a>. Don’t miss Part 2 <a href=\"/post/Hexo-and-the-IndieWeb-Sending-Webmentions/\" title=\"Hexo and the IndieWeb (Sending Webmentions)\">Hexo and the IndieWeb (Sending Webmentions)</a> either.</p>\n\n    </div>\n  \n\n<hr>\n<p>A meaningful interaction has always two directions: sending and receiving. In this part of the post I want to show you how to receive Webmentions from other blogs participating in the IndieWeb.</p>\n<p>As Hexo is a SSG it generates static HTML pages. This has the advantage that the pages can be hosted just about anywhere (in my case <a href=\"https://pages.github.com/\">Github Pages</a>, but also the disadvantage of not having a real backend. Therefore, we need an external service that acts as an Webmention endpoint, where other people can send their webmentions.</p>\n<p><a href=\"https://aaronparecki.com/\">Aaron Parecki</a>, co-founder of the IndieWeb, has made a service called <a href=\"https://webmention.io/\"><strong>webmention.io</strong></a> we can use for free. It is able to convert old-fashioned Pingbacks to Webmentions, supports deleting of unwanted mentions, has a Blocklist for blocking domains, Webhooks for real-time processing and last but not least an API to get all your Webmentions per page or per site.</p>","categories":[{"name":"Tools","_id":"clp78c8wc0043n8q540ye4crs"}],"tags":[{"name":"Hexo","_id":"clp78c8wa003yn8q5c936c8di"},{"name":"Blogging","_id":"clp78c8we004cn8q5euog76ph"},{"name":"Publishing","_id":"clp78c8xa006pn8q5g85y21uz"},{"name":"Share","_id":"clp78c8xn007un8q593sv5ohi"}],"_path":"post/Hexo-and-the-IndieWeb-Receiving-Webmentions/","_link":"https://kiko.io/post/Hexo-and-the-IndieWeb-Receiving-Webmentions/","_id":"clp78c8us0027n8q52gigb9vn"},{"title":"Hexo and the IndieWeb (Sending Webmentions)","date":"2021-05-08T17:39:43.000Z","description":"<div class=\"alertbox alertbox-info\">\n      <p>This is part two of a blog post that turned out to be a bit too long. Don’t miss Part 1: <a href=\"/post/Hexo-and-the-IndieWeb/\" title=\"Hexo and the IndieWeb\">Hexo and the IndieWeb</a> …</p>\n\n    </div>\n  \n\n<hr>\n<p>After you have created your new Hexo post with <code>hexo new post &quot;My Fancy Post&quot;</code> and spend a couple of minutes&#x2F;hours&#x2F;days on writing meaningful text, you publish it by running <code>hexo generate</code> and copying the generated HTML to your server.</p>\n<p>Next step would be to inform all the blogs you linked to in your now published post, that you have done just that. You want to send <strong>Webmentions</strong>.</p>\n<p>Good news: you don’t have to write your own solution to scan your article for external URL’s and sending Webmentions to their creators: <a href=\"https://remysharp.com/2019/06/18/send-outgoing-webmentions\">Remy Sharp has done that</a> already with his service <a href=\"https://webmention.app/\"><strong>webmention.app</strong></a>. It supports the long existing <a href=\"http://www.hixie.ch/specs/pingback/pingback\">Pingbacks</a> too and offers several ways to achieve your goal:</p>","categories":[{"name":"Tools","_id":"clp78c8wc0043n8q540ye4crs"}],"tags":[{"name":"Hexo","_id":"clp78c8wa003yn8q5c936c8di"},{"name":"Blogging","_id":"clp78c8we004cn8q5euog76ph"},{"name":"Publishing","_id":"clp78c8xa006pn8q5g85y21uz"},{"name":"Share","_id":"clp78c8xn007un8q593sv5ohi"}],"_path":"post/Hexo-and-the-IndieWeb-Sending-Webmentions/","_link":"https://kiko.io/post/Hexo-and-the-IndieWeb-Sending-Webmentions/","_id":"clp78c8us0028n8q57bre3m05"},{"title":"Hexo and the IndieWeb","date":"2021-05-05T17:15:00.000Z","description":"<a href=\"https://news.indieweb.org/en\" class=\"u-syndication\" style=\"display:none;\">Posted on IndieNews</a>\n  \n\n<p>It is cool to publish your thoughts on your own blog under your only domain and not only on big social media platforms, because that way you keep control over your content. But what makes Facebook, Twitter and others “social” is the interaction between the people. Likes, Retweets, Mentions, Replies are the fuel which drives them. But most of the blogging solutions offers only rudimentary interactions, in form of article comments. The comment hurdle is high because interacting on someone else’s site is different from interacting on what is supposed to be your own, such as your Twitter or Facebook feed.</p>\n<p>The project <a href=\"https://indieweb.org/\"><strong>IndieWeb</strong></a> and their approach of <a href=\"https://indieweb.org/Webmention\"><strong>Webmentions</strong></a>, has the goal to fill this gap. As a <a href=\"https://www.w3.org/TR/webmention/\">W3C recommendation</a>, it defines standards how the social interaction of independent blogging solutions can be technically implemented without the need of manual intervention. Let software do the job…</p>\n<p>In this article I will only briefly go into the basics and then show an implementation solution for the SSG <a href=\"https://hexo.io/\"><strong>Hexo</strong></a>.</p>","categories":[{"name":"Tools","_id":"clp78c8wc0043n8q540ye4crs"}],"tags":[{"name":"Hexo","_id":"clp78c8wa003yn8q5c936c8di"},{"name":"Blogging","_id":"clp78c8we004cn8q5euog76ph"},{"name":"Publishing","_id":"clp78c8xa006pn8q5g85y21uz"},{"name":"Share","_id":"clp78c8xn007un8q593sv5ohi"}],"_path":"post/Hexo-and-the-IndieWeb/","_link":"https://kiko.io/post/Hexo-and-the-IndieWeb/","_id":"clp78c8ut0029n8q56t37fn5j"},{"title":"Pattern for dynamic Hexo pages","date":"2021-08-25T07:43:44.000Z","description":"<p><a href=\"https://hexo.io/\">Hexo</a> is a great SSG platform for blogging. Just write your Markdown beneath some Frontmatter meta data, run <code>hexo generate</code> and publish the results to a web server.</p>\n<p>But at some point you may want to process different data from internal or external sources and integrate it into your blog. Hexo doesn’t support this out of the box, but has a powerful feature called <a href=\"https://hexo.io/api/generator.html\">Generator</a>, which helps you to achieve your goal. The following is a sample and pattern of how to implement this.</p>\n<p>The starting point of my example is the requirement to display several elements of the same type on a dynamic page, but you can of course adapt the example according to your needs.</p>","categories":[{"name":"Tools","_id":"clp78c8wc0043n8q540ye4crs"}],"tags":[{"name":"Hexo","_id":"clp78c8wa003yn8q5c936c8di"},{"name":"Blogging","_id":"clp78c8we004cn8q5euog76ph"}],"_path":"post/Pattern-for-dynamic-Hexo-pages/","_link":"https://kiko.io/post/Pattern-for-dynamic-Hexo-pages/","_id":"clp78c8uu002dn8q5gmuy9jni"},{"title":"Use and manage multiple Node.js versions on Windows 10","date":"2021-01-08T12:47:22.000Z","description":"<p>For a new project I needed to have Node 14 running on my Windows 10 machine, so installation was done quickly via downloading and running the setup file.</p>\n<p>A short time later I wanted to write a new blog post here on kiko.io, which depends on the Node.js based static site generator <a href=\"https://hexo.io/\">Hexo</a> … and ran into several problems.</p>\n<p>First of all my hero image processing script (see <a href=\"/post/Automatic-Header-Images-in-Hexo/\" title=\"Automatic Header Images in Hexo\">Automatic Header Images in Hexo</a>) returned an exception. The script uses <a href=\"https://github.com/hexojs/hexo-fs\">hexo-fs</a> and the problem is known quite some time, according to this <a href=\"https://github.com/hexojs/hexo/issues/4263\">Github issue</a>. The guys recommend to downgrade to an older version of Node.js … :(</p>\n<p>Ok … I needed a solution to install multiple Node.js versions and switch between them, depending on which project I want to work on … and there is one: <strong><a href=\"https://github.com/coreybutler/nvm-windows\">nvm-windows</a></strong> by Corey Butler!</p>","categories":[{"name":"Tools","_id":"clp78c8wc0043n8q540ye4crs"}],"tags":[{"name":"Hexo","_id":"clp78c8wa003yn8q5c936c8di"},{"name":"Windows","_id":"clp78c8x8006jn8q59pqj33cm"},{"name":"Node.js","_id":"clp78c8z600cqn8q51ea34geq"}],"_path":"post/Use-and-manage-multiple-Node-js-versions-on-Windows-10/","_link":"https://kiko.io/post/Use-and-manage-multiple-Node-js-versions-on-Windows-10/","_id":"clp78c8ux002on8q5eit1g5kl"},{"title":"Uups ... empty posts","date":"2021-09-21T11:40:25.000Z","description":"<p>A while ago I wrote about <a href=\"/post/Automatic-Duplicate-Image-Shadow/\" title=\"Automatic Duplicate Image Shadow\">Automatic Duplicate Image Shadow</a> and used <a href=\"https://indiepen.tech/\">indiepen</a> for showing the result of my efforts.</p>\n\n    <div class=\"alertbox alertbox-note\">\n      <p><strong><a href=\"https://indiepen.tech/\">indiepen</a></strong> is a solution for showing code samples without the need of a code sharing platform, like <a href=\"https://codepen.io/\">codepen</a>. Just reference a <code>index.html</code>, <code>main.js</code> and <code>styles.css</code> from wherever you want and indiepen is wrapping it with a neat viewer inside an IFrame.</p>\n\n    </div>\n  \n\n<p>I did it quick and dirty first (sample files in a static folder) and now it was the time to do it right: place the sample files in a subfolder of the post in my Hexo-driven blog solution, in order to reference it from there AND have the possibility to call it directly via <code>./post/my-post/sample</code>.</p>\n<p>The key to achive that in Hexo is the configuration option <code>post_asset_folder: true</code>, which generates a subfolder for all assets with the same name as the post.</p>\n<figure class=\"highlight txt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|- _posts</span><br><span class=\"line\">   |- my-blog-post</span><br><span class=\"line\">      |- my-first-asset.jpg</span><br><span class=\"line\">      |- my-second-asset.jpg</span><br><span class=\"line\">   |- my-blog-post.md</span><br></pre></td></tr></table></figure>\n\n<p>My idea regarding the indiepen files was having a subfolder for each indiepen in the post asset folder:</p>\n<figure class=\"highlight txt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|- _posts</span><br><span class=\"line\">   |- my-blog-post</span><br><span class=\"line\">      |- my-first-asset.jpg</span><br><span class=\"line\">      |- my-second-asset.jpg</span><br><span class=\"line\">NEW   |- sample</span><br><span class=\"line\">NEW      |- index.html</span><br><span class=\"line\">NEW      |- main.js</span><br><span class=\"line\">NEW      |- styles.css</span><br><span class=\"line\">   |- my-blog-post.md</span><br></pre></td></tr></table></figure>\n\n<p>Run <code>hexo generate</code>, check that the indiepen was showing up properly and I thought I was done. Wrong … after commiting my changes to Github, where my blog is living, and checking my RSS feed a while after, I saw this:</p>\n<p><img src=\"/post/Uups-empty-posts/feed-empty-posts.png\" alt=\"Empty posts in feedly\"></p>\n<p>Three empty posts…!?</p>","categories":[{"name":"Tools","_id":"clp78c8wc0043n8q540ye4crs"}],"tags":[{"name":"Hexo","_id":"clp78c8wa003yn8q5c936c8di"},{"name":"Blogging","_id":"clp78c8we004cn8q5euog76ph"}],"_path":"post/Uups-empty-posts/","_link":"https://kiko.io/post/Uups-empty-posts/","_id":"clp78c8uy002qn8q5ar88c2xe"},{"title":"Convert HTML into Plain Text in Hexo","date":"2023-08-31T19:58:36.000Z","description":"<p>Hexo, on which this blog is based, is a Static Site Generator (SSG) that generates a whole structure of HTML files from individual Markdown files in which the articles were written. Besides the actual posts, also overview pages like the archives and others. For the latter, however, it only needs an excerpt from the actual article, which Hexo automatically creates from the initially generated HTML content and which is also available as HTML.</p>\n<p>For my <a href=\"/post/Show-pages-meta-data-JSON-LD-in-Bottom-Sheet/\" title=\"Show pages meta data (JSON-LD) in Bottom Sheet\">Page Meta dialog</a>, however, I recently needed the excerpt as plain text to make it easier to transfer it manually to a Mastodon post, for example. My initial attempts to extract the plain text from the original Markdown turned out to be quite difficult, because in Hexo not only Markdown is used, but also special <a href=\"https://hexo.io/docs/tag-plugins\">Tag Plugins</a> in Nunjucks format and of course plain HTML. Long speech, short sense … after the first dozen RegEx-Replace calls, I got doubts to be on the right way and remembered <code>Page.Excerpt</code>, the variant already generated by Hexo in HTML.</p>","categories":[{"name":"JavaScript","_id":"clp78c8we0049n8q53qkscxma"}],"tags":[{"name":"Hexo","_id":"clp78c8wa003yn8q5c936c8di"},{"name":"Node.js","_id":"clp78c8z600cqn8q51ea34geq"},{"name":"Meta","_id":"clp78c8zt00e3n8q548kjgymp"}],"_path":"post/Convert-HTML-into-Plain-Text-in-Hexo/","_link":"https://kiko.io/post/Convert-HTML-into-Plain-Text-in-Hexo/","_id":"clp78c8v1002zn8q5777w7gss"},{"title":"Image Masonry Tag Plugin for Hexo","date":"2023-09-01T14:07:37.000Z","description":"<p>Displaying a few more images than usual in a post is always a bit tricky, because you have to make sure they don’t get too big and drown out the text. But they should not be too small either and the arrangement is also important to consider.</p>\n<p>For this purpose I have so far used my <a href=\"/post/Hexo-Tag-Plugin-Collection/#image-slide\">Image Slider Tag Plugin</a>, but with this you only ever see one of the images and have to scroll through the rest horizontally. A medium sized overview, best in the so called masonry format, where images are automatically assembled based on their size on a limited area, would be much better for some cases. There are a variety of CSS or JavaScript solutions out there on the net, but the most suitable for me was <a href=\"http://macyjs.com/\"><strong>Macy.js</strong></a> … and how I integrated it into my Hexo environment is what I want to describe here.</p>","categories":[{"name":"Tools","_id":"clp78c8wc0043n8q540ye4crs"}],"tags":[{"name":"Hexo","_id":"clp78c8wa003yn8q5c936c8di"},{"name":"GitHub","_id":"clp78c8wg004in8q59hva6gpg"},{"name":"Plugin","_id":"clp78c8xd006rn8q5cwcj7smh"}],"_path":"post/Image-Masonry-Tag-Plugin-for-Hexo/","_link":"https://kiko.io/post/Image-Masonry-Tag-Plugin-for-Hexo/","_id":"clp78c8v4003bn8q58me2acw1"},{"title":"Include and provide JSON data in Hexo EJS Templates","date":"2023-06-27T05:26:21.000Z","description":"<p>The three main components of a standard installation of the Static Site Generator <a href=\"https://hexo.io/\">Hexo</a> are the template system <a href=\"https://ejs.co/\">EJS (Embedded JavaScript Templating)</a>, <a href=\"https://en.wikipedia.org/wiki/Markdown\">Markdown</a> for the content and <a href=\"https://stylus-lang.com/\">Stylus</a> for the styles.</p>\n<p>In the template files are the three main tags for driving content:</p>\n<p><strong>Scriptlet tag for control flow (no output)</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%</span><br><span class=\"line\">  ... my JavaScript code to process data into the template</span><br><span class=\"line\">%&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Output a value as escaped HTML</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%= myVariable %&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Output of a raw value, usually in the form of a JavaScript function</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%- myFunction() %&gt;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://hexo.io/docs/helpers\">Hexo’s helper system</a> is based on the latter. So you can include a JavaScript file in your template that makes use of the <a href=\"https://hexo.io/docs/helpers#js\"><strong>JS Helper</strong></a> in <code>node_modules\\hexo\\lib\\plugins\\helper\\js.js</code> as follows …</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%- <span class=\"title function_\">js</span>(<span class=\"string\">&#x27;/js/dist/myFancyFunctions.js&#x27;</span>) %&gt;</span><br></pre></td></tr></table></figure>\n\n<p>… which will be rendered to:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;/js/dist//js/dist/qr-code-styling.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"The-Problem\"><a href=\"#The-Problem\" class=\"headerlink\" title=\"The Problem\"></a>The Problem</h2><p>So far and short, so good … but I recently tried to use this way to include a JSON file whose data one of my scripts needed as startup options and I noticed that the above mentioned JS helper unfortunately takes care of the possibly missing file extension <code>js</code>. It doesn’t matter if you only pass the path to the file as a string or if all necessary attributes as an object.</p>","categories":[{"name":"JavaScript","_id":"clp78c8we0049n8q53qkscxma"}],"tags":[{"name":"Hexo","_id":"clp78c8wa003yn8q5c936c8di"},{"name":"Templating","_id":"clp78c8z500cnn8q5h658c7yh"}],"_path":"post/Include-and-provide-JSON-data-in-Hexo-EJS-Templates/","_link":"https://kiko.io/post/Include-and-provide-JSON-data-in-Hexo-EJS-Templates/","_id":"clp78c8v5003cn8q50ilo5elj"},{"title":"Integration of Pagefind in Hexo","date":"2023-01-19T12:24:00.000Z","description":"<p>From the beginning of this blog I wanted to provide some kind of full text search in order to give my users the ability to find stuff by keyword.</p>\n<p>There are a few Hexo plugins that have approached the subject, but it was not really satisfactory and performant. So I relied on the worlds biggest search engine: Google. A search button, which drives out a small input field and with the pressing of the ENTER key the form was sent via GET to <code>//google.com/search</code>.</p>\n<p><img src=\"/post/Integration-of-Pagefind-in-Hexo/google-site-search.png\" alt=\"Google Site Search on kiko.io\"></p>\n<p>The procedure was simple, but also burdened with the fact that I always expose my users to Google. At least until now … :)</p>\n<p><a href=\"https://mstdn.social/@BryceWrayTX\">Bryce Wray</a> set me on a new path with his post <a href=\"https://www.brycewray.com/posts/2022/12/sweeter-searches-pagefind/\">Sweeter searches with Pagefind</a>, in which he talks about his experience with the still fairly fresh tool <a href=\"https://pagefind.app/\"><strong>Pagefind</strong></a>…</p>\n\n    <div>\n        <blockquote><p>Pagefind is a fully static search library that aims to perform well on large sites, while using as little of your users’ bandwidth as possible, and without hosting any infrastructure …</p>\n</blockquote>\n        <cite><a href=\"https://pagefind.app/\">--- Liam Bigelow @ pagefind.app</a></cite>\n    </div>\n  \n\n<p>Pardon me? A full text search for SSG’s running completely in the browser? It sounded so great that I had to try it right away. And what can I say … it not only works fantastically well, but is also extremely easy to implement. Of course, you have to consider a few things, especially with regard to the SSG Hexo I use, but I didn’t find any big hurdles, also because the tool is so <a href=\"https://pageind.app/\">well documented</a>. Let’s see what my implementation looks like…</p>","categories":[{"name":"Tools","_id":"clp78c8wc0043n8q540ye4crs"}],"tags":[{"name":"Hexo","_id":"clp78c8wa003yn8q5c936c8di"},{"name":"Blogging","_id":"clp78c8we004cn8q5euog76ph"},{"name":"Search","_id":"clp78c90000exn8q5c55ghz6r"}],"_path":"post/Integration-of-Pagefind-in-Hexo/","_link":"https://kiko.io/post/Integration-of-Pagefind-in-Hexo/","_id":"clp78c8v5003dn8q5163x7gsk"},{"title":"Pagefind UI and URL Parameters","date":"2023-01-31T10:04:00.000Z","description":"<div class=\"alertbox alertbox-exclamation\">\n      <p><strong>UPDATE</strong>: Parts of the original post are outdated, as Pagefind <strong>DOES</strong> offer a way to preset a search string, which just hasn’t been documented yet … \\o&#x2F; … see below.</p>\n\n    </div>\n  \n\n<hr>\n<p>A couple of days ago I wrote about my attempt to <a href=\"/post/Integration-of-Pagefind-in-Hexo/\" title=\"Integration of Pagefind in Hexo\">integrate Pagefind in my blog</a>. In the meantime, I further refined the indexing by excluding more content areas and adding more for the metadata to make the search results even better.</p>\n<p>But one thing was still missing: controlling the search via url parameters, so that you can actually consider the page as a search page. I came across this in a post about the sense and nonsense of Open Graph attributes and other search engine related metadata nowadays. Google, for example, <a href=\"https://developers.google.com/search/docs/appearance/structured-data/intro-structured-data\">likes to use JSON-LD</a> and when describing the site you can define a search page which then makes it easier to search the site directly via Google … see <a href=\"https://developers.google.com/search/docs/appearance/structured-data/sitelinks-searchbox\">Sitelinks search box (WebSite) structured data</a></p>\n<p>In my implementation, I decided to adapt the <a href=\"https://pagefind.app/docs/ui/\">Pagefind UI</a> for myself instead of developing everything from scratch via JavaScript. There are always some limitations with pre-built solutions, but I want to show here that they are actually none for the inclusion of a url parameter.</p>","categories":[{"name":"Tools","_id":"clp78c8wc0043n8q540ye4crs"}],"tags":[{"name":"Hexo","_id":"clp78c8wa003yn8q5c936c8di"},{"name":"Blogging","_id":"clp78c8we004cn8q5euog76ph"},{"name":"Search","_id":"clp78c90000exn8q5c55ghz6r"}],"_path":"post/Pagefind-UI-and-URL-Parameters/","_link":"https://kiko.io/post/Pagefind-UI-and-URL-Parameters/","_id":"clp78c8v6003hn8q58qi6hydl"},{"title":"Provide Blog Metadata via JSON-LD","date":"2023-02-09T23:00:00.000Z","description":"<p>Chris Coyier’s post “<a href=\"https://chriscoyier.net/2023/01/28/open-graph-blues/\">Open Graph Blues</a>“ got me thinking that my blog’s metadata, which are used by Google among others to index my pages, aren’t really at the cutting edge anymore. I took the markup of the individual elements of the pages via <a href=\"https://schema.org/\">schema.org</a> Microdata attributes from the standard Hexo template years ago and always adjusted it by value, but never questioned that there are more modern variants to provide the metadata.</p>\n<p>It’s Ok for Google to use Microdata attributes, but the HTML code of my templates is getting more and more opaque, because next to these stick to the tags also those for the Indieweb, classes for CSS and last but not least those for the own indexing via Pagefind. There becomes from a simple</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">article</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Title of my latest blog post<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span> ... <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">article</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>quickly becomes a …</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">article</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;article-type-post h-entry&quot;</span> </span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">data-pagefind-body</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">data-pagefind-meta</span>=<span class=\"string\">&quot;type:Article&quot;</span> <span class=\"attr\">itemscope</span> <span class=\"attr\">itemprop</span>=<span class=\"string\">&quot;blogPost&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;article-title p-name&quot;</span> </span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">itemprop</span>=<span class=\"string\">&quot;name&quot;</span>&gt;</span>Title of my latest blog post<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span> ... <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">article</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Lots of textual overhead and the hardest part is maintaining it over the long term. Better would be a complete search engine description in the header of a page, where also the other meta information is available. In one place and not spread all over the HTML code. <strong>JSON-LD to the rescue</strong>…</p>","categories":[{"name":"Tools","_id":"clp78c8wc0043n8q540ye4crs"}],"tags":[{"name":"Hexo","_id":"clp78c8wa003yn8q5c936c8di"},{"name":"Search","_id":"clp78c90000exn8q5c55ghz6r"},{"name":"JSON-LD","_id":"clp78c90700fdn8q5gtki10of"}],"_path":"post/Provide-Blog-Metadata-via-JSON-LD/","_link":"https://kiko.io/post/Provide-Blog-Metadata-via-JSON-LD/","_id":"clp78c8v7003jn8q556u7afgb"}]}