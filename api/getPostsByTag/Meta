{"type":"getPostsByTag","data":[{"title":"Convert HTML into Plain Text in Hexo","date":"2023-08-31T19:58:36.000Z","description":"<p>Hexo, on which this blog is based, is a Static Site Generator (SSG) that generates a whole structure of HTML files from individual Markdown files in which the articles were written. Besides the actual posts, also overview pages like the archives and others. For the latter, however, it only needs an excerpt from the actual article, which Hexo automatically creates from the initially generated HTML content and which is also available as HTML.</p>\n<p>For my <a href=\"/post/Show-pages-meta-data-JSON-LD-in-Bottom-Sheet/\" title=\"Show pages meta data (JSON-LD) in Bottom Sheet\">Page Meta dialog</a>, however, I recently needed the excerpt as plain text to make it easier to transfer it manually to a Mastodon post, for example. My initial attempts to extract the plain text from the original Markdown turned out to be quite difficult, because in Hexo not only Markdown is used, but also special <a href=\"https://hexo.io/docs/tag-plugins\">Tag Plugins</a> in Nunjucks format and of course plain HTML. Long speech, short sense … after the first dozen RegEx-Replace calls, I got doubts to be on the right way and remembered <code>Page.Excerpt</code>, the variant already generated by Hexo in HTML.</p>","categories":[{"name":"JavaScript","_id":"clm2d2b9a003qk4oq7tte2cq2"}],"tags":[{"name":"Hexo","_id":"clm2d2b96003jk4oqbcnadgte"},{"name":"Node.js","_id":"clm2d2bc400agk4oq2zvgc56i"},{"name":"Meta","_id":"clm2d2bd300czk4oq0raqevbq"}],"_path":"post/Convert-HTML-into-Plain-Text-in-Hexo/","_link":"https://kiko.io/post/Convert-HTML-into-Plain-Text-in-Hexo/","_id":"clm2d2b7l002xk4oq5h8t8acq"},{"title":"Show pages meta data (JSON-LD) in Bottom Sheet","date":"2023-06-11T12:11:45.000Z","description":"<p>A few months ago I introduced new meta data (JSON-LD) for the pages of this blog and also <a href=\"/post/Provide-Blog-Metadata-via-JSON-LD/\" title=\"Provide Blog Metadata via JSON-LD\">wrote about my implementation</a>. Works also everything quite well … only the verification of the generated data was a bit cumbersome:</p>\n<ol>\n<li>Open DevTools for a page in Chrome.</li>\n<li>Search in the HEAD of the source code for the included script (“application&#x2F;ld+json”)</li>\n<li>Copy out JSON-LD code</li>\n<li>Format JSON into VS code … and check</li>\n</ol>\n<p>Nothing for now and simply impossible on the smartphone, even if there would be a reasonable Chrome extension for displaying JSON-LD data, but it does not exist (yet). Another problem was that I use automatically generated Socal Media images for my articles, which are included in the JSON-LD, but do not appear anywhere in the page and thus were beyond my control. I simply wanted to display all the generated stuff.</p>\n<p>Since I’ve been a fan of the so-called bottom sheets since the first version of Google’s Material Design, I imagined a script that grabs the code embedded in the page and pushes a panel with all the data visualized there into the page from the bottom … and the whole act was easier than I thought.</p>","categories":[{"name":"UI/UX","_id":"clm2d2b8h003gk4oqab2249i8"}],"tags":[{"name":"Publishing","_id":"clm2d2bab0066k4oqgocgfccz"},{"name":"Meta","_id":"clm2d2bd300czk4oq0raqevbq"},{"name":"JSON-LD","_id":"clm2d2bdf00dsk4oqckkr5uj9"}],"_path":"post/Show-pages-meta-data-JSON-LD-in-Bottom-Sheet/","_link":"https://kiko.io/post/Show-pages-meta-data-JSON-LD-in-Bottom-Sheet/","_id":"clm2d2b7v003ek4oq74xc4zsn"}]}