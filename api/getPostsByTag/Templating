{"type":"getPostsByTag","data":[{"title":"Native JavaScript Multilanguage Templating","date":"2021-02-24T12:31:58.000Z","description":"<p>In the project I’m currently working on, I faced the “problem” to integrate multilanguage support, but due to the fact that the new app should be written in vanilla JS, without any plugins, libraries or other dependencies, I had to develop my own localization layer. In this article I want to show you my approach on this…</p>","categories":[{"name":"JavaScript","_id":"clit5gh0j003clsor7uyp1dmr"}],"tags":[{"name":"Localization","_id":"clit5gh1x006dlsore21jg9mn"},{"name":"ES6","_id":"clit5gh2x008vlsor6q4nf2c8"},{"name":"Templating","_id":"clit5gh39009mlsora7bkb2cy"}],"_path":"post/Native-JavaScript-Multilanguage-Templating/","_link":"https://kiko.io/post/Native-JavaScript-Multilanguage-Templating/","_id":"clit5ggy0001olsor8pey6fca"},{"title":"Utilize a repository of reusable ES6 template literals","date":"2021-01-03T12:29:01.000Z","description":"<p>The <a href=\"http://es6-features.org/#StringInterpolation\"><strong>Template Literals</strong></a> introduced with ES6 are very useful to deal with multiline strings, because they support <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#Expression_interpolation\">embedded expressions</a>. Gone are the days of endless string concatination or replacing variables in a string by using RegEx.</p>\n<p>Instead of… </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> url = ...</span><br><span class=\"line\"><span class=\"keyword\">var</span> file = ...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> template = </span><br><span class=\"line\">  <span class=\"string\">&#x27;&lt;div class=&quot;photo&quot;&gt;&#x27;</span> + </span><br><span class=\"line\">     <span class=\"string\">&#x27;&lt;a href=&quot;&#x27;</span> + url + <span class=\"string\">&quot;&#x27; + </span></span><br><span class=\"line\"><span class=\"string\">        &#x27;style=&quot;</span>background-<span class=\"attr\">image</span>: <span class=\"title function_\">url</span>(<span class=\"string\">&#x27; + file + &#x27;</span>)<span class=\"string\">&quot;&lt;/a&gt;&#x27; + </span></span><br><span class=\"line\"><span class=\"string\">  &#x27;&lt;/div&gt;&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>… you can write:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> url = ...</span><br><span class=\"line\"><span class=\"keyword\">var</span> file = ...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> template = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">  &lt;div class=&quot;photo&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;a href=&quot;<span class=\"subst\">$&#123;url&#125;</span>/&quot;</span></span><br><span class=\"line\"><span class=\"string\">    style=&quot;background-image: url(<span class=\"subst\">$&#123;file&#125;</span>);&quot;&gt;&lt;/a&gt;</span></span><br><span class=\"line\"><span class=\"string\">  &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">`</span>,</span><br></pre></td></tr></table></figure>\n\n<p>It’s much cleaner and easier to handle, as you can copy your needed HTML right into your code and surround it by <strong>backtick</strong> (!) characters. Insert your variable placeholders (expressions), indicated by a dollar sign and curly braces, and you are done.</p>\n<p>But there is one “restriction”, you have to be aware of: the interpolation (substitution of the expressions) is done at declaration time and not at runtime. You can’t define your literals seperatly, take one and make your substitution as you need it, like you would do with <a href=\"https://handlebarsjs.com/\">Handlebars</a> or other templating engines. Therefore the name <em>template</em> literals is a bit misleading. But … there is a way to achieve this anyway…</p>","categories":[{"name":"JavaScript","_id":"clit5gh0j003clsor7uyp1dmr"}],"tags":[{"name":"ES6","_id":"clit5gh2x008vlsor6q4nf2c8"},{"name":"Templating","_id":"clit5gh39009mlsora7bkb2cy"}],"_path":"post/Utilize-a-repository-of-reusable-ES6-template-literals/","_link":"https://kiko.io/post/Utilize-a-repository-of-reusable-ES6-template-literals/","_id":"clit5ggy90023lsorg9vod9nu"}]}