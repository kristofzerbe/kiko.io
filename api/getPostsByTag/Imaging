{"type":"getPostsByTag","data":[{"title":"Adding Screenshots to Trello Cards on Android","date":"2021-04-11T14:11:10.000Z","description":"<p>I’m collecting interesting One-Page-Tools on the web on a Trello board. To add a new card, I use a simple little script on my Android smartphone, I wrote about here: <a href=\"/post/Add-website-to-Trello-card-the-better-way/\" title=\"Add website to Trello card the better way\">Add website to Trello card the better way</a>.</p>\n<p>On processing the page to store on a card, Trello scrapes the page and takes the <code>&lt;meta&gt;</code> tag <code>og:image</code> out of the HTML to generate an image attachment and take it as cover for the card. This sometimes works, but most of the time it doesn’t, because website owners often don’t pay attention to reasonable <code>&lt;meta&gt;</code> tags.</p>\n<p>Because it is easier to find a card with visual support, I create my own screenshots for the cards in a manual, but streamlined, process, I want to show you here.</p>","categories":[{"name":"Misc","_id":"clluqg68n003fk1oneelx2oav"}],"tags":[{"name":"Trello","_id":"clluqg69c004wk1on9flecuu0"},{"name":"Android","_id":"clluqg6ao007ik1on8un66ha6"},{"name":"Imaging","_id":"clluqg6ap007nk1on62qd5cyu"}],"_path":"post/Adding-Screenshots-to-Trello-Cards-on-Android/","_link":"https://kiko.io/post/Adding-Screenshots-to-Trello-Cards-on-Android/","_id":"clluqg65w0011k1on6ckggc2a"},{"title":"Automatic Duplicate Image Shadow","date":"2021-07-16T15:45:30.000Z","description":"<p>At the beginning of the year I wrote a <a href=\"/post/Use-a-duplicate-image-to-drop-a-shadow/\" title=\"Use a duplicate image to drop a shadow\">post</a> about showing a shadow on an image with the image itself instead of using <code>box-shadow</code>, to make the image appear glass-like.</p>\n<p><img src=\"/post/Automatic-Duplicate-Image-Shadow/image-shadow.jpg\" alt=\"Image Shadow\"></p>\n<p>Nice trick, but it would be much easier to have a little script, that does this automatically for all images on a page. In this post I will show you how to achieve this.</p>","categories":[{"name":"JavaScript","_id":"clluqg68r003nk1onc0nwfvfa"}],"tags":[{"name":"CSS","_id":"clluqg68o003ik1ona4eq7c15"},{"name":"Imaging","_id":"clluqg6ap007nk1on62qd5cyu"},{"name":"DOM","_id":"clluqg6au007xk1on613nci99"}],"_path":"post/Automatic-Duplicate-Image-Shadow/","_link":"https://kiko.io/post/Automatic-Duplicate-Image-Shadow/","_id":"clluqg65x0013k1on9by8ctpv"},{"title":"Generate Social Media Images Automatically","date":"2021-07-10T09:07:31.000Z","description":"<p>From day one of this blog I wanted to combine two of my passions: tech stuff and photography. All these photos I have shot myself in recent years and now they are representing my thoughts &amp; findings about digital technology. I wrote about my approach to provide these images in my post <a href=\"/post/Automatic-Header-Images-in-Hexo/\" title=\"Automatic Header Images in Hexo\">Automatic Header Images in Hexo</a>.</p>\n<p>When I share one of my posts on social media I provide the appropriate image as a visual anchor to my writing. The technique behind this are the <code>meta</code> tags in the HTML of my posts:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- Schema.org for Google --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">itemprop</span>=<span class=\"string\">&quot;image&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;https://kiko.io/photos/normal/DSC_6776.jpg&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- Open Graph --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;og:image&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;https://kiko.io/photos/normal/DSC_6776.jpg&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- Twitter --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;twitter:card&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;summary_large_image&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;twitter:image&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;https://kiko.io/photos/normal/DSC_6776.jpg&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>There are several meta tags for different purposes regarding images. For more information see the links at the end of this post. To make a long story short: The sum of these approaches ensures that when an article is posted, the corresponding image is also displayed in the social media post.</p>\n<p>But … it’s only the image, without a visual reference to the post itself. In this article I want to show you how to combine the photo with some meta information of the post automatically, to get a <strong>Social Media Image</strong>.</p>\n<p><img src=\"/post/Generate-Social-Media-Images-Automatically/generation-flow.png\" alt=\"Generation Flow\"></p>","categories":[{"name":"JavaScript","_id":"clluqg68r003nk1onc0nwfvfa"}],"tags":[{"name":"Hexo","_id":"clluqg68o003gk1on2ugf0oae"},{"name":"GitHub","_id":"clluqg68t003qk1on6e751izv"},{"name":"Blogging","_id":"clluqg68u003sk1on3x0hd8z3"},{"name":"Imaging","_id":"clluqg6ap007nk1on62qd5cyu"},{"name":"ES6","_id":"clluqg6bh0097k1onhw9tdbun"}],"_path":"post/Generate-Social-Media-Images-Automatically/","_link":"https://kiko.io/post/Generate-Social-Media-Images-Automatically/","_id":"clluqg667001hk1ongs6t0nh5"},{"title":"Photo Workflow Re-Thought","date":"2021-09-12T16:16:48.000Z","description":"<p>To be honest: many of my posts here on kiko.io are written just for me. To internalize things by writing them down and to give my future me the chance to look up something I did in the past. So is this post. Future me: Don’t forget the following!</p>\n<p>I while ago I was on a trip, shooting a lot of photographs and on my way back home I had three 32GB SD cards full with great photos. I was working with my old Nikon D7000, which has 2 card slots and I just took them out, when one of the cards was full. Worked fine for several years … but after this trip, one of the cards, full with RAW files and wonderful photos, <strong>w-a-s&nbsp;&nbsp;&nbsp;N-O-T&nbsp;&nbsp;&nbsp;r-e-a-d-a-b-l-e&nbsp;&nbsp;&nbsp;a-n-y-m-o-r-e</strong> … f***! I saved myself the backup and now had to suffer over my carelessness.</p>\n<p>I thought about some fancy and expensive backup solutions for professional photographers, but realized after a while, that I already had the equipment to achieve everything I needed and I could even use it to improve my general workflow.</p>\n<p>In this post, I want to show you, what my workflow looks like today and how yours might benefit from my mistake.</p>","categories":[{"name":"Photo-Editing","_id":"clluqg695004fk1on5iqrb98m"}],"tags":[{"name":"Lightroom","_id":"clluqg69t005vk1on7lxp6r9p"},{"name":"Imaging","_id":"clluqg6ap007nk1on62qd5cyu"},{"name":"Workflow","_id":"clluqg6bx00ack1ongztfhn7w"}],"_path":"post/Photo-Workflow-Re-Thought/","_link":"https://kiko.io/post/Photo-Workflow-Re-Thought/","_id":"clluqg66g001sk1onc19jeuul"},{"title":"SVG Resources","date":"2021-04-09T12:07:53.000Z","description":"<style>\n  #post-SVG-Resources button {\n    background-color: #f1f1f1;\n    border: none;\n    padding: 1rem;\n    margin-bottom: 1rem;\n    margin-right: 1rem;\n    cursor: pointer;\n  }\n  #post-SVG-Resources em {\n    opacity: 0.33;\n  }\n  #post-SVG-Resources #info {\n    color: silver;\n    display: block;\n    height: 24px;\n  }\n  #post-SVG-Resources #info.result {\n    color: green;\n    font-weight: bold;\n  }\n</style>\n<script>\n  var timeoutID;\n  function setInfo(e,m) {\n    let info = document.getElementById(e);\n    info.textContent = m;\n    info.classList.add(\"result\");\n    window.clearTimeout(timeoutID);\n    timeoutID = setTimeout(function() {\n      info.textContent = \"Guess and click...\";\n      info.classList.remove(\"result\");\n      window.clearTimeout(timeoutID);\n    }, 2000);\n  }\n</script>\n\n<p>Since beginning beginning of time, people are using symbols to make things clear quickly and easily. So do we when developing websites and web apps by using icons. Everybody knows what’s behind a loupe symbol or a hamburger icon.</p>\n<button onClick=\"setInfo('info', 'Yes, it\\'s a SEARCH button ;)');\">\n<svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n  <path fill=\"currentColor\" fill-rule=\"evenodd\" clip-rule=\"evenodd\"\n    d=\"M18.319 14.4326C20.7628 11.2941 20.542 6.75347 17.6569 3.86829C14.5327 0.744098 9.46734 0.744098 6.34315 3.86829C3.21895 6.99249 3.21895 12.0578 6.34315 15.182C9.22833 18.0672 13.769 18.2879 16.9075 15.8442C16.921 15.8595 16.9351 15.8745 16.9497 15.8891L21.1924 20.1317C21.5829 20.5223 22.2161 20.5223 22.6066 20.1317C22.9971 19.7412 22.9971 19.1081 22.6066 18.7175L18.364 14.4749C18.3493 14.4603 18.3343 14.4462 18.319 14.4326ZM16.2426 5.28251C18.5858 7.62565 18.5858 11.4246 16.2426 13.7678C13.8995 16.1109 10.1005 16.1109 7.75736 13.7678C5.41421 11.4246 5.41421 7.62565 7.75736 5.28251C10.1005 2.93936 13.8995 2.93936 16.2426 5.28251Z\" />\n</svg>\n</button>\n<button onClick=\"setInfo('info', 'Yeah ... an OPEN MENU button ;)');\">\n<svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n  <path fill=\"currentColor\"\n    d=\"M2 6C2 5.44772 2.44772 5 3 5H21C21.5523 5 22 5.44772 22 6C22 6.55228 21.5523 7 21 7H3C2.44772 7 2 6.55228 2 6Z\" />\n  <path fill=\"currentColor\"\n    d=\"M2 12.0322C2 11.4799 2.44772 11.0322 3 11.0322H21C21.5523 11.0322 22 11.4799 22 12.0322C22 12.5845 21.5523 13.0322 21 13.0322H3C2.44772 13.0322 2 12.5845 2 12.0322Z\" />\n  <path fill=\"currentColor\"\n    d=\"M3 17.0645C2.44772 17.0645 2 17.5122 2 18.0645C2 18.6167 2.44772 19.0645 3 19.0645H21C21.5523 19.0645 22 18.6167 22 18.0645C22 17.5122 21.5523 17.0645 21 17.0645H3Z\" />\n</svg>\n</button><br><span id=\"info\">Guess and click...</span>\n\n<p>The way we implement icons have changed in the past. From BMP files to GIF and JPG files, PNG files, to complete or customizable symbol fonts like <a href=\"https://fontello.com/\">fontello.com</a>, to Scalable Vector Graphics (SVG).</p>\n<p>SVG’s in particular are becoming increasingly popular, because they are nothing more than XML-like code, that can be manipulated via CSS or JS, their digital footprint is unbeatable small and they scale seemlessly.</p>\n<p>Dealing with SVG’s is a little bit more difficult than placing a PNG in HTML, because of its complexity, but it is worth learning as much as possible about it. So did I in the last couple of month and I want to share my finds on the web with you in this post.</p>","categories":[{"name":"UI/UX","_id":"clluqg67t003dk1onho0o1mp0"}],"tags":[{"name":"Collection","_id":"clluqg69l005ek1on81b8cqf7"},{"name":"Imaging","_id":"clluqg6ap007nk1on62qd5cyu"},{"name":"SVG","_id":"clluqg6c100amk1on66bz4e6b"}],"_path":"post/SVG-Resources/","_link":"https://kiko.io/post/SVG-Resources/","_id":"clluqg66i001wk1on5w800j08"},{"title":"The Last Image Gallery...","date":"2021-10-10T10:28:09.000Z","description":"<p>In the last decade(s) I have seen and tried many image galleries and lightboxes for showing images or groups of images. Depending on your needs, you can choose out of trillions of solutions, for every JS framework or vanilla JS, in every flavour, size and color. With many of them, however, you reach the limits quite quickly. Be it in terms of visual adaptability, extensibility or implementation. Customization cost time and nerves, especially if the respective library has structural weaknesses.</p>\n<p>However, from today on, I don’t need to look for a suitable solution for my next project, because I found one that leaves absolutely none of my wishes unfulfillede: <a href=\"https://nextapps-de.github.io/spotlight/\"><strong>Spotlight</strong></a> by Nextapps from Berlin, Germany.</p>\n<p><img src=\"/post/The-Last-Image-Gallery/spotlight.jpg\" alt=\"Spotlight\"></p>\n<p>To make it clear: this is not a paid advertising text or something like that. That wouldn’t make sense either, because Spotlight is Open Source (<a href=\"https://en.wikipedia.org/wiki/Apache_License\">Apache 2.0 License</a>) and its code is availabel at GitHub. I’m just thrilled with the work of the developers.</p>","categories":[{"name":"JavaScript","_id":"clluqg68r003nk1onc0nwfvfa"}],"tags":[{"name":"GitHub","_id":"clluqg68t003qk1on6e751izv"},{"name":"Plugin","_id":"clluqg69v005zk1ongvn2cme1"},{"name":"Imaging","_id":"clluqg6ap007nk1on62qd5cyu"}],"_path":"post/The-Last-Image-Gallery/","_link":"https://kiko.io/post/The-Last-Image-Gallery/","_id":"clluqg66k0020k1on9ma70dkc"},{"title":"Triangulate your images with Triangula","date":"2021-04-30T12:56:13.000Z","description":"<p>As I am a photo enthusiast I’m always excited to find new tools, to give images a unique look. Today I stumbled over <a href=\"https://github.com/RH12503/triangula\"><strong>Triangula</strong></a>. Ever seen one of those cool backgrounds, where a picture has been broken up into lots of little triangles?</p>\n<blockquote>\n<p>In trigonometry and elementary geometry, the division of a surface into triangles is called a triangular grid, triangular mesh or triangulation.<br><em>Wikipedia</em></p>\n</blockquote>\n<p>Whoever <a href=\"https://github.com/RH12503\">RH12503 (Ryan H??)</a> is, he did an amazing job on creating this little Go program, including a pleasing UI, do convert images into those equivalents.</p>","categories":[{"name":"Tools","_id":"clluqg68o003hk1onacws6tmx"}],"tags":[{"name":"Imaging","_id":"clluqg6ap007nk1on62qd5cyu"},{"name":"SVG","_id":"clluqg6c100amk1on66bz4e6b"}],"_path":"post/Triangulate-your-images-with-Triangula/","_link":"https://kiko.io/post/Triangulate-your-images-with-Triangula/","_id":"clluqg66l0021k1on358x3f28"},{"title":"Tringula And The Beauty Of Mathematics","date":"2021-12-07T13:45:00.000Z","description":"<div class=\"alertbox alertbox-note\">\n      <p>This post is a new version of <a href=\"/post/Triangulate-your-images-with-Triangula/\" title=\"Triangulate your images with Triangula\">Triangulate your images with Triangula</a> and the first in a series of articles published on the German news site <a href=\"https://golem.de/\">golem.de</a>.</p>\n\n    </div>\n  \n\n<p>When talking about triangulation, non-mathematicians generally understand it as a geometric method for measuring distances. Roughly speaking, two known points in space can be used to calculate a third via the angles to it. In one or the other Hollywood flick of the genres war or spy movie you have surely come across this.</p>\n<p>However, triangulation also refers to the division of a surface into triangles or, more generally, the description of an object by means of polygons. It is used in topology and land surveying, but also in imaging methods of modeling.</p>\n<p>How wonderfully this field of mathematics can be applied to photos is shown by the GitHub user <a href=\"https://github.com/RH12503\"><strong>RyanH</strong></a> with his program <a href=\"https://github.com/RH12503/triangula\"><strong>Triangula</strong></a> written in Go, which first roughly splits a given JPG or PNG image into triangles and then refines it further and further via mutations. Among other things, you can specify how many points you want to start with and how many mutations the program should perform. It is also possible to calculate the new image using hexagons instead of classic triangles.</p>","categories":[{"name":"Tools","_id":"clluqg68o003hk1onacws6tmx"}],"tags":[{"name":"Imaging","_id":"clluqg6ap007nk1on62qd5cyu"},{"name":"SVG","_id":"clluqg6c100amk1on66bz4e6b"}],"_path":"post/Tringula-And-The-Beauty-Of-Mathematics/","_link":"https://kiko.io/post/Tringula-And-The-Beauty-Of-Mathematics/","_id":"clluqg66l0022k1on209v6p2c"},{"title":"Visualize the codebase of your GitHub repo","date":"2021-08-21T05:55:00.000Z","description":"<p>Beginning of the month, <a href=\"https://twitter.com/Wattenberger\">Amelia Wattenberger</a> of <a href=\"https://next.github.com/\">GitHub Next</a> has published a project to create a SVG visualization of a GitHub repository’s codebase.</p>\n<p>On the project page <strong><a href=\"https://next.github.com/projects/repo-visualization\">Visualizing a codebase</a></strong>, she talks about the advantages of code vizualization in terms of a better overview and comparability of code …  and I loved it at first sight, because I’m an absolute visual person.</p>\n<p><img src=\"/post/Visualize-the-codebase-of-your-GitHub-repo/screenshot-repo-visualization.png\" alt=\"Screenshot from the project page\"></p>\n<p>But her attempt was not only to show us what’s possible (static SVG files and even interactive apps for code browsing, filtering and comparing), but give us the possibility to create our own codebase diagrams as SVG automatically, whenever we commit our code, by running a <a href=\"https://docs.github.com/en/actions\">GitHub Action</a>, she and her team has developed … the <a href=\"https://github.com/githubocto/repo-visualizer\"><strong>Repo Vizualizer</strong></a></p>","categories":[{"name":"Tools","_id":"clluqg68o003hk1onacws6tmx"}],"tags":[{"name":"GitHub","_id":"clluqg68t003qk1on6e751izv"},{"name":"Windows","_id":"clluqg69q005rk1on8nls0cou"},{"name":"Imaging","_id":"clluqg6ap007nk1on62qd5cyu"}],"_path":"post/Visualize-the-codebase-of-your-GitHub-repo/","_link":"https://kiko.io/post/Visualize-the-codebase-of-your-GitHub-repo/","_id":"clluqg66o0028k1on0z502hrh"},{"title":"Pool Photo Generator","date":"2023-08-20T22:00:00.000Z","description":"<p>Since the existence of this blog, the posts all have a custom header image that I generate from my own photos. Already three years ago (omg … really?) I described in an article how to do this with Hexo: <a href=\"/post/Automatic-Header-Images-in-Hexo/\" title=\"Automatic Header Images in Hexo\">Automatic Header Images in Hexo</a>.</p>\n<p>To keep it short, I use a pool folder for this, in which I keep in subfolders next to a <code>meta.txt</code>, for the title of the image and an external url on 500px for interactions to the image, three variants that I need for a new post:</p>\n<ul>\n<li>mobile.jpg (width 480px)</li>\n<li>tablet.jpg (width 768px)</li>\n<li>normal.jpg (width 1280px)</li>\n</ul>\n<p>The only piece of the puzzle that was still missing was the automatic generation of these three image variants and the meta file based on a selected photo that I want to add to the pool of available header images. So far it was fun to generate the header images manually either on the desktop or on the smartphone, but it really doesn’t have to be. My goal now was to write a script where I just throw a selected photo into a folder and the NodeJS script does the rest.</p>\n<p>My photo workflow is based on Adobe Lightroom Classic and one of the steps is to give a title to the good ones I use here as well. So the script had to include four steps when iterating over the inbound folder’s JPG files:</p>\n<ol>\n<li>create new pool folder</li>\n<li>read meta data (IPTC -&gt; title) and write it to meta.txt</li>\n<li>create the three image variants</li>\n<li>delete the processed image from the inbound folder</li>\n</ol>","categories":[{"name":"JavaScript","_id":"clluqg68r003nk1onc0nwfvfa"}],"tags":[{"name":"Imaging","_id":"clluqg6ap007nk1on62qd5cyu"},{"name":"Node.js","_id":"clluqg6bv00a7k1on0ogj8vyl"}],"_path":"post/Pool-Photo-Generator/","_link":"https://kiko.io/post/Pool-Photo-Generator/","_id":"clluqg6770037k1oncvh07rlw"}]}