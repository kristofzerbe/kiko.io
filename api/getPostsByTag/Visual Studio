{"type":"getPostsByTag","data":[{"title":"How-To: Visual Studio Database Project and ADSI","date":"2019-09-17T10:00:01.000Z","description":"<p>If you are working with a Visual Studio Database Project and have to deal with data from the Active Directory via a Linked Server, you have to announce the data structure of the AD data in order to get the project compiled.</p>","categories":[{"name":"SQL","_id":"cln1zqc2m003xkzokggkkg6kh"}],"tags":[{"name":"ADSI","_id":"cln1zqc3b004ukzok4p431pz3"},{"name":"Visual Studio","_id":"cln1zqc3c004wkzok4g9s05su"},{"name":"Database Project","_id":"cln1zqc3d004ykzok6m8u98v3"}],"_path":"post/How-To-Visual-Studio-Database-Project-and-ADSI/","_link":"https://kiko.io/post/How-To-Visual-Studio-Database-Project-and-ADSI/","_id":"cln1zqbx7000dkzoke840fqo9"},{"title":"Localization with resource files in JavaScript web apps","date":"2020-06-13T13:49:10.000Z","description":"<p>There are plenty of editors out there to help you writing JavaScript web applications. As I’m working in my daily life with Visual Studio, it is a obvious choice for me.</p>\n<p>One of the most time saving tools in VS is the plugin <a href=\"https://marketplace.visualstudio.com/items?itemName=TomEnglert.ResXManager\">ResXManager</a>, which is an awesome assistant on managing the translations for a Desktop- or ASP.NET-App, which uses XML-based RESX files.</p>","categories":[{"name":"JavaScript","_id":"cln1zqc2j003rkzokcl0jaj75"}],"tags":[{"name":"GitHub","_id":"cln1zqc2l003ukzok50uge4so"},{"name":"Visual Studio","_id":"cln1zqc3c004wkzok4g9s05su"},{"name":"Resource","_id":"cln1zqc4x006ukzok0ixfa8vb"},{"name":"Localization","_id":"cln1zqc4x006wkzokbv85gk0u"}],"_path":"post/Localization-with-resource-files-in-JavaScript-web-apps/","_link":"https://kiko.io/post/Localization-with-resource-files-in-JavaScript-web-apps/","_id":"cln1zqbxl000ukzokhpvu5nlw"},{"title":"Meaningful automatic versioning with T4","date":"2020-06-27T15:57:18.000Z","description":"<p>Every developer has to have an idea of versioning his products. If you work with Visual Studio you have the <code>Assembly Information</code> in the project properties dialog, to enter it manually everytime you want to release a new version:</p>\n<p><img src=\"/post/Meaningful-automatic-versioning-with-T4/AssemblyInformationDialog.png\" alt=\"Assembly Information Dialog\"></p>\n<p>The four fields are: MAJOR, MINOR, BUILD, REVISION.</p>\n<p>But seriously … who does that? I guess 99% of all C# developers are entering the <code>AssemblyInfo.cs</code> and enter the famous 2 asterisks into the version declaration of BUILD and REVISION, to let Visual Studio do the incrementation job:</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">assembly: AssemblyVersion(<span class=\"string\">&quot;1.0.*.*&quot;</span>)</span>]</span><br><span class=\"line\">[<span class=\"meta\">assembly: AssemblyFileVersion(<span class=\"string\">&quot;1.0.*.*&quot;</span>)</span>]</span><br></pre></td></tr></table></figure>\n\n<p>But this is not the end of the possibilities … Let’s do it more meaningful, with some goodies and still automatic…</p>","categories":[{"name":".NET","_id":"cln1zqc3d004xkzok3bvzcm4f"}],"tags":[{"name":"Visual Studio","_id":"cln1zqc3c004wkzok4g9s05su"},{"name":"Versioning","_id":"cln1zqc510070kzok66xydlo1"},{"name":"T4","_id":"cln1zqc520072kzok5ezjbr1c"}],"_path":"post/Meaningful-automatic-versioning-with-T4/","_link":"https://kiko.io/post/Meaningful-automatic-versioning-with-T4/","_id":"cln1zqbxl000vkzok4ldwdwwa"},{"title":"TFS/DevOps: Delete Remote Workspace","date":"2020-02-27T23:00:00.000Z","description":"<p>If you are working with freelance developers and Azure DevOps&#x2F;TFS with TFVC (Team Foundation Version Control) in your company, maybe this will look familiar to you: You hire a new freelancer and you want to reuse the hardware, including the complete software setup, to bring him&#x2F;her to work as fast and straightforward as possible. You set up a new Azure Devops account with all necessary permissions and you think you’re done. No you are not…</p>","categories":[{"name":"Tools","_id":"cln1zqc2g003lkzok4kdc2mwp"}],"tags":[{"name":"Visual Studio","_id":"cln1zqc3c004wkzok4g9s05su"},{"name":"TFS/DevOps","_id":"cln1zqc59007jkzokax0381xk"}],"_path":"post/TFS-DevOps-Delete-Remote-Workspace/","_link":"https://kiko.io/post/TFS-DevOps-Delete-Remote-Workspace/","_id":"cln1zqbxn000ykzokcfvjf1j7"},{"title":"Custom Caller Authentication with ASP.NET Core 5.0 Web API","date":"2021-02-28T16:05:00.000Z","description":"<p>Developing micro services with Microsoft ASP.NET Core 5.0 Web API is powerful and fun, but the fun stops, if your data are accesses unauthorized. It is absolutely fundamental to have a protection layer, which filters out unwanted data requests.  </p>\n<p>A common way is to limit the service access by providing API Keys to well known clients. In this post I will show you how to implement such a filter in terms of API keys and IP addresses. </p>","categories":[{"name":".NET","_id":"cln1zqc3d004xkzok3bvzcm4f"}],"tags":[{"name":"Visual Studio","_id":"cln1zqc3c004wkzok4g9s05su"},{"name":"WebAPI","_id":"cln1zqc5o008fkzokdq4928l1"},{"name":"Authentication","_id":"cln1zqc5p008hkzok7tuw60yy"}],"_path":"post/Custom-Caller-Authentication-with-ASP-NET-Core-5-0-WebApi/","_link":"https://kiko.io/post/Custom-Caller-Authentication-with-ASP-NET-Core-5-0-WebApi/","_id":"cln1zqbxu0014kzok5kzh11ns"},{"title":"Simplest Console File Logger","date":"2022-06-19T11:31:25.000Z","description":"<p>When you need to do a task in IT and don’t need a fancy user interface, you usually turn to a console application or develop one. But no UI means not, that you don’t want to get some information about the status of the running program. The means of choice in C#&#x2F;.NET is then the output of certain values in the console via <code>console.WriteLine()</code>.</p>\n<p>But often these applications are supposed to run in the background or hidden, so that crashes or errors are not immediately noticeable if you don’t have at least a rudimentary logging built in. Such logging is also useful for the later evaluation of program runs. For this reason pretty much all programs log in some way. Currently there an incredible number of logging frameworks available, that make it to the news every now and then, like <a href=\"https://en.wikipedia.org/wiki/Log4Shell\">Log4Shell</a> for Java.</p>\n<p>The best known in the .NET area is Microsoft’s own <a href=\"https://docs.microsoft.com/en-us/dotnet/core/extensions/logging\">ILogger (Microsoft.Extensions.Logging)</a>, <a href=\"https://logging.apache.org/log4net/\">log4net</a>, <a href=\"https://nlog-project.org/\">NLog</a> and <a href=\"https://serilog.net/\">Serilog</a>. What they all have in common is, that they are highly flexible in terms of configuration, usage and storage of the logs. On the other hand, they are fat beasts, you have to learn to handle first and you have to deliver with the program always. The latter does not apply to the ILogger, but Microsoft has been known to complicate things so unnecessarily that it is almost no fun anymore.</p>\n<p>Many times this overload is simply not necessary, when you just need a log file for each run of your console application. Let me show you, how to achieve this with a dead simple <code>StringBuilder</code>…</p>","categories":[{"name":".NET","_id":"cln1zqc3d004xkzok3bvzcm4f"}],"tags":[{"name":"Visual Studio","_id":"cln1zqc3c004wkzok4g9s05su"},{"name":"Logging","_id":"cln1zqc8k00cpkzokb8qt8658"},{"name":"C#","_id":"cln1zqc8k00cqkzok5f0k6idr"}],"_path":"post/Simplest-Console-File-Logger/","_link":"https://kiko.io/post/Simplest-Console-File-Logger/","_id":"cln1zqbzd002pkzokh4ddeft4"}]}