{"type":"getPostsByCategoryId","data":[{"title":"Better Input Change Event","date":"2019-11-26T15:51:17.000Z","description":"<p>Often it is important to trigger an event, after the user of your website&#x2F;web app has filled out an text input. You have to do something with the given value in JavaScript.</p>\n<p>The intended event for this is <code>change</code>, which will be triggered, when the user has ended changing by leaving the input with his cursor, mostly by using the TAB key. This works at some degree, if there is a physical keyboard, but not really on mobile devices … and for me is leaving the field often too late to start the upcoming event.</p>","categories":[{"name":"JavaScript","_id":"cljom91wa003ejeor6tts99j7"}],"tags":[{"name":"jQuery","_id":"cljom91wg003vjeor5mf97q1s"}],"_path":"post/Better-Input-Change-Event/","_link":"https://kiko.io/post/Better-Input-Change-Event/","_id":"cljom91th0009jeor4ooj2euo"},{"title":"Change CSS class when element scrolls into viewport","date":"2020-07-13T16:24:39.000Z","description":"<p>I had a neat visual gimmick on the start page of this blog, that the gray-scaled header image of a post in the list scaled up to 100% and became colored, when the user hovered over it:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.article-inner</span> <span class=\"selector-class\">.article-photo</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">150px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">object-fit</span>: cover;</span><br><span class=\"line\">  <span class=\"attribute\">transform</span>: <span class=\"built_in\">scale</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"attribute\">transform-style</span>: preserve-<span class=\"number\">3</span>d;</span><br><span class=\"line\">  <span class=\"attribute\">transition</span>: all ease-out <span class=\"number\">0.6s</span>;</span><br><span class=\"line\">  <span class=\"attribute\">opacity</span>: <span class=\"number\">0.3</span>;</span><br><span class=\"line\">  <span class=\"attribute\">filter</span>: <span class=\"built_in\">grayscale</span>(<span class=\"number\">1</span>) <span class=\"built_in\">contrast</span>(<span class=\"number\">0.5</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.article-inner</span><span class=\"selector-pseudo\">:hover</span> <span class=\"selector-class\">.article-photo</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">transform</span>: <span class=\"built_in\">scale</span>(<span class=\"number\">1.1</span>);</span><br><span class=\"line\">  <span class=\"attribute\">opacity</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"attribute\">filter</span>: <span class=\"built_in\">grayscale</span>(<span class=\"number\">0</span>) <span class=\"built_in\">contrast</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Nice, but a little bit useless on smartphones or tablets, where HOVER  doesn’t really work.</p>","categories":[{"name":"JavaScript","_id":"cljom91wa003ejeor6tts99j7"}],"tags":[{"name":"jQuery","_id":"cljom91wg003vjeor5mf97q1s"},{"name":"CSS","_id":"cljom91wi003zjeorg1ho2uno"}],"_path":"post/Change-CSS-class-when-element-scrolls-into-viewport/","_link":"https://kiko.io/post/Change-CSS-class-when-element-scrolls-into-viewport/","_id":"cljom91tm000gjeor3g3ubp7d"},{"title":"Device Class Detection in JavaScript","date":"2020-09-28T13:27:17.000Z","description":"<p>In some occasions it is necessary to know which device a user is using while writing JavaScript Web Apps. Should be nothing regarding layout, because for this we have <a href=\"https://developer.mozilla.org/de/docs/Web/CSS/Media_Queries/Using_media_queries\"><code>CSS Media Queries</code></a>. </p>\n<p>Somewhere around 2011 W3C introduced <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia\"><code>matchMedia()</code></a>, which <em>returns a MediaQueryList object that can be used to detemnine if the document matches the media query string.</em> The using is pretty straightforward and feels a bit like RegEx matching in JS:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> mediaQuery = <span class=\"variable language_\">window</span>.<span class=\"title function_\">matchMedia</span>(<span class=\"string\">&#x27;(min-width: 1025px)&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> (mediaQuery.<span class=\"property\">matches</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// do something...  </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>If you are interested in this API, you will find good introductions to the topic <a href=\"https://css-tricks.com/working-with-javascript-media-queries/\">here</a>, <a href=\"https://hacks.mozilla.org/2012/06/using-window-matchmedia-to-do-media-queries-in-javascript/\">here</a> and <a href=\"https://www.mediaevent.de/javascript/window-matchMedia.html\">here (German)</a>.</p>\n<p>One point of criticism on this pure JS approach can be, that you have to maintain the breakpoints in addition to CSS … <strong>but why not use these existing breakpoints in JS</strong>?</p>","categories":[{"name":"JavaScript","_id":"cljom91wa003ejeor6tts99j7"}],"tags":[{"name":"Browser","_id":"cljom91w60037jeor6je9exwj"},{"name":"CSS","_id":"cljom91wi003zjeorg1ho2uno"},{"name":"MediaQuery","_id":"cljom91ww0051jeor0jgtg0u9"}],"_path":"post/Device-Class-Detection-in-JavaScript/","_link":"https://kiko.io/post/Device-Class-Detection-in-JavaScript/","_id":"cljom91tn000hjeordc7pb1vg"},{"title":"Implement source switch for SPA","date":"2020-10-04T15:01:02.000Z","description":"<p>A while ago I wrote a Single Page Application (SPA) with jQuery and and decided to use some useful plugins to avoid reinventing the wheel. To keep the delivered sources small, I used the bundler <a href=\"https://gulpjs.com/\">Gulp</a>, to pack all JS plugins in a single file and another one for my custom JS code. I used the same procedure with the CSS files.</p>\n<p>The SPA contained only a single HTML file in which all bundeled sources and needed HTML template blocks were included, in order to load most of the stuff while starting the app, when the users sees a GMail-like  loading screen.</p>\n<p>But the whole thing had one disadvantage: Debugging for example in Chrome Dev Tool is not a joy, if the code is packed with <a href=\"https://www.npmjs.com/package/gulp-concat\">Gulp Concat</a> and <a href=\"https://www.npmjs.com/package/gulp-concat\">Gulp Uglify</a>. It would be much more convenient, if the source loading can be done depending on the environment.</p>","categories":[{"name":"JavaScript","_id":"cljom91wa003ejeor6tts99j7"}],"tags":[{"name":"SPA","_id":"cljom91x7005yjeor4hpb90lq"},{"name":"Bundling","_id":"cljom91x80061jeorbbbr5k03"}],"_path":"post/Implement-source-switch-for-SPA/","_link":"https://kiko.io/post/Implement-source-switch-for-SPA/","_id":"cljom91ts000qjeor4mhb31hi"},{"title":"Localization with resource files in JavaScript web apps","date":"2020-06-13T13:49:10.000Z","description":"<p>There are plenty of editors out there to help you writing JavaScript web applications. As I’m working in my daily life with Visual Studio, it is a obvious choice for me.</p>\n<p>One of the most time saving tools in VS is the plugin <a href=\"https://marketplace.visualstudio.com/items?itemName=TomEnglert.ResXManager\">ResXManager</a>, which is an awesome assistant on managing the translations for a Desktop- or ASP.NET-App, which uses XML-based RESX files.</p>","categories":[{"name":"JavaScript","_id":"cljom91wa003ejeor6tts99j7"}],"tags":[{"name":"GitHub","_id":"cljom91wa003djeorfopj8j9y"},{"name":"Visual Studio","_id":"cljom91wo004fjeor079e2j1y"},{"name":"Resource","_id":"cljom91xd006djeor8yrx0qav"},{"name":"Localization","_id":"cljom91xd006fjeorhugtc0vs"}],"_path":"post/Localization-with-resource-files-in-JavaScript-web-apps/","_link":"https://kiko.io/post/Localization-with-resource-files-in-JavaScript-web-apps/","_id":"cljom91tt000tjeor20qq4ccs"},{"title":"Pimping the Permalink","date":"2020-09-20T14:30:37.000Z","description":"<p>Until now I did not show the permalink under my posts in this blog, but in the past I had sometimes the need to pass one of the links and it was not very user-friendly, on desktop as well as on mobile. Not the One-Click experience I prefer.</p>\n<p>My goal was to show the permalink and, even more important, provide a simple way to copy and to share. JavaScript to the rescue…</p>","categories":[{"name":"JavaScript","_id":"cljom91wa003ejeor6tts99j7"}],"tags":[{"name":"Hexo","_id":"cljom91w8003bjeorbw5gfytd"},{"name":"CSS","_id":"cljom91wi003zjeorg1ho2uno"},{"name":"Stylus","_id":"cljom91wj0041jeor2xgk3h7m"},{"name":"Share","_id":"cljom91xk006vjeor3y5c82k9"}],"_path":"post/Pimping-the-Permalink/","_link":"https://kiko.io/post/Pimping-the-Permalink/","_id":"cljom91tu000vjeoran407e51"},{"title":"Automatic Duplicate Image Shadow","date":"2021-07-16T15:45:30.000Z","description":"<p>At the beginning of the year I wrote a <a href=\"/post/Use-a-duplicate-image-to-drop-a-shadow/\" title=\"Use a duplicate image to drop a shadow\">post</a> about showing a shadow on an image with the image itself instead of using <code>box-shadow</code>, to make the image appear glass-like.</p>\n<p><img src=\"/post/Automatic-Duplicate-Image-Shadow/image-shadow.jpg\" alt=\"Image Shadow\"></p>\n<p>Nice trick, but it would be much easier to have a little script, that does this automatically for all images on a page. In this post I will show you how to achieve this.</p>","categories":[{"name":"JavaScript","_id":"cljom91wa003ejeor6tts99j7"}],"tags":[{"name":"CSS","_id":"cljom91wi003zjeorg1ho2uno"},{"name":"Imaging","_id":"cljom91xr007gjeorgrna7v1u"},{"name":"DOM","_id":"cljom91xv007qjeorb3fl1vjz"}],"_path":"post/Automatic-Duplicate-Image-Shadow/","_link":"https://kiko.io/post/Automatic-Duplicate-Image-Shadow/","_id":"cljom91u00011jeorarljf8zy"},{"title":"Discoveries #10","date":"2021-05-24T15:04:26.000Z","description":"<p>Todays Discoveries it’s all about my favourite programming language JavaScript. Some tiny tips and tricks alongside with a deep dive into ‘console’ and some helful UI libraries. Have fun…</p>\n\n        <ul class=\"anchorlist\">\n            <li data-anchor=\"#beyond-console-log\">Beyond Console.log()</li><li data-anchor=\"#dom-guard\">DOMGuard - Stop scammers from the manipulating DOM</li><li data-anchor=\"#handling-permissions-in-js\">Handling User Permissions in JavaScript</li><li data-anchor=\"#html-chain\">html-chain - Make html by chaining javascript functions</li><li data-anchor=\"#accessible-autocomplete\">Accessible Autocomplete</li><li data-anchor=\"#js-datatable\">JS DataTable</li><li data-anchor=\"#mk-charts\">MK Charts</li><li data-anchor=\"#snabbt-js\">Snabbt.js - Fast animations with Javascript and CSS transforms</li><li data-anchor=\"#simply-lazy,\">SimplyLazy - Pure JavaScript Image Lazy Loader</li><li data-anchor=\"#blury-loading\">Blury-Loading</li>\n        </ul>","categories":[{"name":"JavaScript","_id":"cljom91wa003ejeor6tts99j7"}],"tags":[{"name":"Collection","_id":"cljom91wy0058jeor666qazso"}],"_path":"post/Discoveries-10/","_link":"https://kiko.io/post/Discoveries-10/","_id":"cljom91u20014jeor2s11f3ga"},{"title":"Discoveries #13","date":"2021-09-29T10:57:51.000Z","description":"<p>This month, Discoveries is all about JavaScript-driven “components” that you can quickly and easily add to your own website to enhance it. Be it with a simple code viewer or an ingenious print function or simply to display or filter photos. Go on a journey of discovery…</p>\n\n        <ul class=\"anchorlist\">\n            <li data-anchor=\"#indiepen\">indiepen</li><li data-anchor=\"#panzoom\">Panzoom</li><li data-anchor=\"#guggenheim\">guggenheim.js</li><li data-anchor=\"#lazy-loading-mosaic-tiling-plugin\">Lazy Loading Mosaic Tiling Plugin</li><li data-anchor=\"#scrolltrigger\">ScrollTrigger</li><li data-anchor=\"#winbox-js\">WinBox.js</li><li data-anchor=\"#print-js\">Print.js</li><li data-anchor=\"#simple-text-annotations\">Simple Text Annotations</li><li data-anchor=\"#click-menus\">Clicky Menus!</li><li data-anchor=\"#vanilla-navbar-menu\">Responsive Dropdown Menu (Vanilla Navbar Menu)</li><li data-anchor=\"#smooth-side-bar\">Smooth-side-bar</li><li data-anchor=\"#podtablejs\">Podtablejs</li>\n        </ul>","categories":[{"name":"JavaScript","_id":"cljom91wa003ejeor6tts99j7"}],"tags":[{"name":"Collection","_id":"cljom91wy0058jeor666qazso"}],"_path":"post/Discoveries-13/","_link":"https://kiko.io/post/Discoveries-13/","_id":"cljom91u30017jeorfcb46roz"},{"title":"Discoveries #9","date":"2021-04-20T09:02:14.000Z","description":"<p>Todays issue is all about extending your Web Developers toolbox with some useful libraries to provide the best UX to your users or visitors. Tables, Dropdowns, Color Pickers, Footnotes and GDPR dialogs on steroids.</p>\n\n        <ul class=\"anchorlist\">\n            <li data-anchor=\"#jstable\">JSTable</li><li data-anchor=\"#luckysheet\">Luckysheet</li><li data-anchor=\"#virtual-select\">Virtual Select</li><li data-anchor=\"#lc-select\">LC Select</li><li data-anchor=\"#vanilla-colorful\">Vanilla Colorful</li><li data-anchor=\"#duet-date-picker\">Duet Date Picker</li><li data-anchor=\"#cookie-though\">Cookie Though</li><li data-anchor=\"#full-screen-touch-slider\">Full-Screen-Touch-Slider</li><li data-anchor=\"#bigfoot\">Bigfoot</li><li data-anchor=\"#number-rollup\">Number Rollup</li>\n        </ul>","categories":[{"name":"JavaScript","_id":"cljom91wa003ejeor6tts99j7"}],"tags":[{"name":"Collection","_id":"cljom91wy0058jeor666qazso"}],"_path":"post/Discoveries-9/","_link":"https://kiko.io/post/Discoveries-9/","_id":"cljom91u7001djeorf9qzcvlm"},{"title":"Forking Hexo plugin 'hexo-index-anything'","date":"2021-04-25T11:41:46.000Z","description":"<p>As I started with this blog 2 years ago, I wanted to document the customization of Hexo to my needs in a series of articles. To group these articles I considered using the build-in <code>categories</code>, but I already used them to group articles by the underlying tech stack or area, like ´JavaScript´, ´C#´ or ´Tools´ and I didn’t want to mix it, as the category was also used in the Url of a post.</p>\n<p>I was researching another grouping solution for Hexo and stumbled upon <a href=\"https://github.com/leviwheatcroft/hexo-index-anything\">hexo-index-anything</a>, a very clever Hexo plugin to generate index pages for almost every <a href=\"https://hexo.io/docs/front-matter.html\">FrontMatter</a> variable in a post.</p>\n<p>As it was freely available under a MIT license on Github, I forked it in July 2020 and made some bug fixes and drop a pull request to Levi … but he  unfortunately never answered my pull or issue requests and has set the status of the project to DEPRECATED.</p>\n<p>Ok then … make a successor on your own, fella…</p>","categories":[{"name":"JavaScript","_id":"cljom91wa003ejeor6tts99j7"}],"tags":[{"name":"Hexo","_id":"cljom91w8003bjeorbw5gfytd"},{"name":"GitHub","_id":"cljom91wa003djeorfopj8j9y"},{"name":"Plugin","_id":"cljom91x5005sjeor780o3bw3"}],"_path":"post/Forking-Hexo-plugin-hexo-index-anything/","_link":"https://kiko.io/post/Forking-Hexo-plugin-hexo-index-anything/","_id":"cljom91u7001ejeordy000dat"},{"title":"Generate Social Media Images Automatically","date":"2021-07-10T09:07:31.000Z","description":"<p>From day one of this blog I wanted to combine two of my passions: tech stuff and photography. All these photos I have shot myself in recent years and now they are representing my thoughts &amp; findings about digital technology. I wrote about my approach to provide these images in my post <a href=\"/post/Automatic-Header-Images-in-Hexo/\" title=\"Automatic Header Images in Hexo\">Automatic Header Images in Hexo</a>.</p>\n<p>When I share one of my posts on social media I provide the appropriate image as a visual anchor to my writing. The technique behind this are the <code>meta</code> tags in the HTML of my posts:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- Schema.org for Google --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">itemprop</span>=<span class=\"string\">&quot;image&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;https://kiko.io/photos/normal/DSC_6776.jpg&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- Open Graph --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;og:image&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;https://kiko.io/photos/normal/DSC_6776.jpg&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- Twitter --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;twitter:card&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;summary_large_image&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;twitter:image&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;https://kiko.io/photos/normal/DSC_6776.jpg&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>There are several meta tags for different purposes regarding images. For more information see the links at the end of this post. To make a long story short: The sum of these approaches ensures that when an article is posted, the corresponding image is also displayed in the social media post.</p>\n<p>But … it’s only the image, without a visual reference to the post itself. In this article I want to show you how to combine the photo with some meta information of the post automatically, to get a <strong>Social Media Image</strong>.</p>\n<p><img src=\"/post/Generate-Social-Media-Images-Automatically/generation-flow.png\" alt=\"Generation Flow\"></p>","categories":[{"name":"JavaScript","_id":"cljom91wa003ejeor6tts99j7"}],"tags":[{"name":"Hexo","_id":"cljom91w8003bjeorbw5gfytd"},{"name":"GitHub","_id":"cljom91wa003djeorfopj8j9y"},{"name":"Blogging","_id":"cljom91wa003fjeor5ho5hvr7"},{"name":"Imaging","_id":"cljom91xr007gjeorgrna7v1u"},{"name":"ES6","_id":"cljom91yf0090jeord6k11gou"}],"_path":"post/Generate-Social-Media-Images-Automatically/","_link":"https://kiko.io/post/Generate-Social-Media-Images-Automatically/","_id":"cljom91u8001fjeor6zf35b31"},{"title":"How to prevent duplicate events","date":"2021-01-07T16:22:25.000Z","description":"<p>I’m working on a new web app that contains a sliding out panel with some additional information on the selected element. This panel can be closed by the user via the ESC key. The implementation on initializing the panel seems very straight forward:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Panel</span>() &#123;</span><br><span class=\"line\">  <span class=\"title function_\">init</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">document</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;keydown&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">event</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(event.<span class=\"property\">key</span> === <span class=\"string\">&quot;Escape&quot;</span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//close the panel</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Problem is: the panel, which is part of the basic HTML, will be initialized with its content and functionality in a ES6 class. So … on every init, another event listener is added.</p>\n<p>You can easily figure that out, by calling <code>getEventListeners(document)</code> in the Chrome DevTools:</p>\n<p><img src=\"/post/How-to-prevent-duplicate-events/chromedevtools-multiple-listeners.png\" alt=\"Chrome DevTools: Multiple Event Listeners\"></p>","categories":[{"name":"JavaScript","_id":"cljom91wa003ejeor6tts99j7"}],"tags":[{"name":"Events","_id":"cljom91yp009rjeor4k5m68tg"}],"_path":"post/How-to-prevent-duplicate-events/","_link":"https://kiko.io/post/How-to-prevent-duplicate-events/","_id":"cljom91ub001mjeor6tv9g1bw"},{"title":"Native JavaScript Multilanguage Templating","date":"2021-02-24T12:31:58.000Z","description":"<p>In the project I’m currently working on, I faced the “problem” to integrate multilanguage support, but due to the fact that the new app should be written in vanilla JS, without any plugins, libraries or other dependencies, I had to develop my own localization layer. In this article I want to show you my approach on this…</p>","categories":[{"name":"JavaScript","_id":"cljom91wa003ejeor6tts99j7"}],"tags":[{"name":"Localization","_id":"cljom91xd006fjeorhugtc0vs"},{"name":"ES6","_id":"cljom91yf0090jeord6k11gou"},{"name":"Templating","_id":"cljom91yp009sjeorab9m4wvp"}],"_path":"post/Native-JavaScript-Multilanguage-Templating/","_link":"https://kiko.io/post/Native-JavaScript-Multilanguage-Templating/","_id":"cljom91uc001njeor64bd6xpx"},{"title":"Running Rollup with Gulp","date":"2021-07-29T13:34:03.000Z","description":"<p>Writing an SPA (Single Page Application) in JavaScript&#x2F;CSS always means to keep an eye on small files to deliver. Especially when utilizing a bunch of libraries and frameworks, bundling is some sort of a must. The offer on bundlers and task runners is large on the web: <a href=\"https://webpack.js.org/\">WebPack</a>, <a href=\"https://www.snowpack.dev/\">Snowpack</a>, <a href=\"https://browserify.org/\">Browserify</a>, <a href=\"https://parceljs.org/\">Parcel</a>, <a href=\"https://gruntjs.com/\">Grunt</a>, <a href=\"https://gulpjs.com/\">Gulp</a> and “DingDong” (just replace with the hotest new shit available).</p>\n<p>But, it is not always necessary to replace your complete building pipeline, when the new “DingDong” is hyped in the media. Brave old tools like <a href=\"https://gulpjs.com/\">Gulp</a> are doing their job pretty well … and you are able to integrate some more modern approaches on bundling JS, for example.</p>\n<p>I couple of months ago, while working on a private project, I became attentive to <a href=\"https://www.rollupjs.org/\">Rollup.js</a>, a next-generation JavaScript module bundler from Rich Harris, the author of Svelte. Rollup uses the new standardized format for code modules included in the ES6 revision of JavaScript and supports Tree-Shaking, which means that it analyzes all your ES6 <code>imports</code> statements and bundles only the code which is used. Pretty cool … but … it is a JavaScript bundler only and there are no plugins for Gulp, my favourite task runner.</p>\n<p>In this article I will show you, how to integrate Rollup in your Gulp bundling pipeline.</p>","categories":[{"name":"JavaScript","_id":"cljom91wa003ejeor6tts99j7"}],"tags":[{"name":"SPA","_id":"cljom91x7005yjeor4hpb90lq"},{"name":"Bundling","_id":"cljom91x80061jeorbbbr5k03"}],"_path":"post/Running-Rollup-with-Gulp/","_link":"https://kiko.io/post/Running-Rollup-with-Gulp/","_id":"cljom91ue001sjeor60oo2z3g"},{"title":"Safely remove multiple classes using a prefix","date":"2021-01-18T10:17:46.000Z","description":"<p>Writing a Web App with HTML and JavaScript means you deal with several classes on your DOM elements in order to visualize state changes. And there are some pitfalls to be aware of with regard to removal.</p>\n<p>Assuming you want to open some kind of sidebar above a container. In this sidebar you have several buttons to show different content via JavaScript and a close button, which closes the sidebar again. You HTML code maybe looks like this:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span>... Main Content ...<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">nav</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;open-sidebar&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">nav</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">aside</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sidebar&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;content&quot;</span>&gt;</span>... Sidebar Content ...<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;close&quot;</span>&gt;</span>Close Sidebar<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;content1&quot;</span>&gt;</span>Show Content 1<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;content2&quot;</span>&gt;</span>Show Content 2<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;content3&quot;</span>&gt;</span>Show Content 3<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">aside</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>By clicking on the <code>open-sidebar</code> button, the sidebar is opened and the action, respectively the new state, is vizualized by adding an appropriate class to the parent sidebar element. In order to make it easy for the user, the default content (Content 1) will be loaded also and its state will be marked with another class.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">aside</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;sidebar open open-content1&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>A click on of the other content buttons (let’s say Content 2), will replace the current content and the <code>aside</code> classes will change into:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">aside</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;sidebar open open-content2&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Now we want to close the sidebar again, assuming that we don’t have stored the currently opened content in the JavaScript code…</p>","categories":[{"name":"JavaScript","_id":"cljom91wa003ejeor6tts99j7"}],"tags":[{"name":"DOM","_id":"cljom91xv007qjeorb3fl1vjz"}],"_path":"post/Safely-remove-multiple-classes-using-a-prefix/","_link":"https://kiko.io/post/Safely-remove-multiple-classes-using-a-prefix/","_id":"cljom91uf001ujeord5eqbnds"},{"title":"The Last Image Gallery...","date":"2021-10-10T10:28:09.000Z","description":"<p>In the last decade(s) I have seen and tried many image galleries and lightboxes for showing images or groups of images. Depending on your needs, you can choose out of trillions of solutions, for every JS framework or vanilla JS, in every flavour, size and color. With many of them, however, you reach the limits quite quickly. Be it in terms of visual adaptability, extensibility or implementation. Customization cost time and nerves, especially if the respective library has structural weaknesses.</p>\n<p>However, from today on, I don’t need to look for a suitable solution for my next project, because I found one that leaves absolutely none of my wishes unfulfillede: <a href=\"https://nextapps-de.github.io/spotlight/\"><strong>Spotlight</strong></a> by Nextapps from Berlin, Germany.</p>\n<p><img src=\"/post/The-Last-Image-Gallery/spotlight.jpg\" alt=\"Spotlight\"></p>\n<p>To make it clear: this is not a paid advertising text or something like that. That wouldn’t make sense either, because Spotlight is Open Source (<a href=\"https://en.wikipedia.org/wiki/Apache_License\">Apache 2.0 License</a>) and its code is availabel at GitHub. I’m just thrilled with the work of the developers.</p>","categories":[{"name":"JavaScript","_id":"cljom91wa003ejeor6tts99j7"}],"tags":[{"name":"GitHub","_id":"cljom91wa003djeorfopj8j9y"},{"name":"Plugin","_id":"cljom91x5005sjeor780o3bw3"},{"name":"Imaging","_id":"cljom91xr007gjeorgrna7v1u"}],"_path":"post/The-Last-Image-Gallery/","_link":"https://kiko.io/post/The-Last-Image-Gallery/","_id":"cljom91uh001xjeor82053k6t"},{"title":"Utilize a repository of reusable ES6 template literals","date":"2021-01-03T12:29:01.000Z","description":"<p>The <a href=\"http://es6-features.org/#StringInterpolation\"><strong>Template Literals</strong></a> introduced with ES6 are very useful to deal with multiline strings, because they support <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#Expression_interpolation\">embedded expressions</a>. Gone are the days of endless string concatination or replacing variables in a string by using RegEx.</p>\n<p>Instead of… </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> url = ...</span><br><span class=\"line\"><span class=\"keyword\">var</span> file = ...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> template = </span><br><span class=\"line\">  <span class=\"string\">&#x27;&lt;div class=&quot;photo&quot;&gt;&#x27;</span> + </span><br><span class=\"line\">     <span class=\"string\">&#x27;&lt;a href=&quot;&#x27;</span> + url + <span class=\"string\">&quot;&#x27; + </span></span><br><span class=\"line\"><span class=\"string\">        &#x27;style=&quot;</span>background-<span class=\"attr\">image</span>: <span class=\"title function_\">url</span>(<span class=\"string\">&#x27; + file + &#x27;</span>)<span class=\"string\">&quot;&lt;/a&gt;&#x27; + </span></span><br><span class=\"line\"><span class=\"string\">  &#x27;&lt;/div&gt;&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>… you can write:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> url = ...</span><br><span class=\"line\"><span class=\"keyword\">var</span> file = ...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> template = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">  &lt;div class=&quot;photo&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;a href=&quot;<span class=\"subst\">$&#123;url&#125;</span>/&quot;</span></span><br><span class=\"line\"><span class=\"string\">    style=&quot;background-image: url(<span class=\"subst\">$&#123;file&#125;</span>);&quot;&gt;&lt;/a&gt;</span></span><br><span class=\"line\"><span class=\"string\">  &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">`</span>,</span><br></pre></td></tr></table></figure>\n\n<p>It’s much cleaner and easier to handle, as you can copy your needed HTML right into your code and surround it by <strong>backtick</strong> (!) characters. Insert your variable placeholders (expressions), indicated by a dollar sign and curly braces, and you are done.</p>\n<p>But there is one “restriction”, you have to be aware of: the interpolation (substitution of the expressions) is done at declaration time and not at runtime. You can’t define your literals seperatly, take one and make your substitution as you need it, like you would do with <a href=\"https://handlebarsjs.com/\">Handlebars</a> or other templating engines. Therefore the name <em>template</em> literals is a bit misleading. But … there is a way to achieve this anyway…</p>","categories":[{"name":"JavaScript","_id":"cljom91wa003ejeor6tts99j7"}],"tags":[{"name":"ES6","_id":"cljom91yf0090jeord6k11gou"},{"name":"Templating","_id":"cljom91yp009sjeorab9m4wvp"}],"_path":"post/Utilize-a-repository-of-reusable-ES6-template-literals/","_link":"https://kiko.io/post/Utilize-a-repository-of-reusable-ES6-template-literals/","_id":"cljom91uk0022jeor9rhp64u0"},{"title":"Anatomy of Service Worker Communication","date":"2022-11-12T11:26:34.000Z","description":"<p>I have a SPA that works as a PWA, which means that in the background a service worker makes sure that the required files for the offline mode end up in the cache.</p>\n<p>From time to time I also update the Service Worker, which defines which files it should keep offline and which not. Unfortunately, the app itself didn’t get any of this because there was no communication channel for them to talk.</p>\n<p>If you research this topic on the web, you have to dig through many architecture pages and documentations that have one thing in common: sometimes they just don’t get to the point. So here are my 50 cents on the subject and my sample implementation.</p>","categories":[{"name":"JavaScript","_id":"cljom91wa003ejeor6tts99j7"}],"tags":[{"name":"SPA","_id":"cljom91x7005yjeor4hpb90lq"},{"name":"PWA","_id":"cljom91xt007mjeor5lgv4vr6"}],"_path":"post/Anatomy-of-Service-Worker-Communication/","_link":"https://kiko.io/post/Anatomy-of-Service-Worker-Communication/","_id":"cljom91uo0027jeoraxke6rmj"},{"title":"Creating Icon Font from SVG Files","date":"2022-09-17T13:08:34.000Z","description":"<p>A several years ago I started building a little PWA and chose <a href=\"https://bootswatch.com/3/\">Bootswatch 3.3.5.</a> for theming. As it depends on Bootstrap I was able to use the <a href=\"https://icons.getbootstrap.com/\">icons from Bootstrap</a>. At the beginning I needed only a handful of these icons, but with the time it became more and more difficult to find the right one, because the Bootstrap Glyphicons in version 3 included only around 250 icons and there was not always the right one. Also, the app was always lugging around well over 100 KB of extra files, of which I actually only needed a few kilobytes.</p>\n<p>In another project I had used <a href=\"https://fontello.com/\">Fontello</a>, where you can build and download your own icon font from a selection of available icons. Very nice, but I didn’t feel like fiddling with project-specific configuration files on the Fontello website. But since you could upload your own SVG files in Fontello, which were then taken over into the font, the same had to work somehow with a Node.JS plugin!?</p>\n<p>And yes <a href=\"https://www.npmjs.com/package/gulp-iconfont\">gulp-iconfont</a> from <a href=\"https://github.com/nfroidure\">Nicolas Froidure</a> was exactly what I needed.</p>\n<p><img src=\"/post/Creating-Icon-Font-from-SVG-Files/gulp-iconfont.png\" alt=\"gulp-iconfont on GitHub\"></p>\n<hr>\n<h2 id=\"First-Solution\"><a href=\"#First-Solution\" class=\"headerlink\" title=\"First Solution\"></a>First Solution</h2><p>Just copy a bunch of SVG files in a folder, run gulp and there was my own customized icon font with a tolerable size of around 20 kilobytes. At that time, <a href=\"https://github.com/backflip\">Thomas Jaggi</a> had taken care of the creation of a CSS file with the correct code points that matched the font with his tool <a href=\"https://www.npmjs.com/package/gulp-iconfont-css\">gulp-iconfont-css</a>.</p>","categories":[{"name":"JavaScript","_id":"cljom91wa003ejeor6tts99j7"}],"tags":[{"name":"Bundling","_id":"cljom91x80061jeorbbbr5k03"},{"name":"SVG","_id":"cljom91yu00a7jeor4twvdq71"},{"name":"Font","_id":"cljom91z600b6jeorg69ba32j"}],"_path":"post/Creating-Icon-Font-from-SVG-Files/","_link":"https://kiko.io/post/Creating-Icon-Font-from-SVG-Files/","_id":"cljom91up002ajeor5hvbe55l"},{"title":"Generate Content from Trello","date":"2022-12-29T11:08:00.000Z","description":"<p>I’m collecting&#x2F;bookmarking links to interesting website post on a public Trello board and aggregating them from time to time in a special post series called <em>Discoveries</em>, where I present 10 of them in one post on a specific topic.</p>\n<p>Writing these summaries is currently still a bit time-consuming, because in addition to the link, the name of the author and a small description, I would also like to display a screenshot of the page in each case … and it is still a completely manual process.</p>\n<p>After selecting the 10 links I want to talk about, I first create a new post for my Hexo blog and then process the links as follows:</p>\n<ol>\n<li>Creating, resizing and saving the screenshot</li>\n<li>Creating a new section in the post</li>\n<li>Setting a key for the post based on the title</li>\n<li>Setting the title</li>\n<li>Setting the author</li>\n<li>Setting the screenshot file</li>\n</ol>\n<p>I do use two tag plugins (<a href=\"https://github.com/kristofzerbe/kiko.io/blob/2c80a548e188c05879039a15e67419b548bfbfcd/themes/landscape/scripts/tag-anchorlist.js\">tag-anchorlist</a> and <a href=\"https://github.com/kristofzerbe/kiko.io/blob/2c80a548e188c05879039a15e67419b548bfbfcd/themes/landscape/scripts/tag-discovery.js\">tag-discovery</a>) for this in the post draft, but despite that, it’s quite time-consuming and always the same procedure that can be wonderfully automated… and here I’d like to write about how I approached this task, while I’m working on it.</p>","categories":[{"name":"JavaScript","_id":"cljom91wa003ejeor6tts99j7"}],"tags":[{"name":"Hexo","_id":"cljom91w8003bjeorbw5gfytd"},{"name":"Trello","_id":"cljom91ws004pjeor0ln13hlf"},{"name":"Publishing","_id":"cljom91x4005qjeor16ysawga"}],"_path":"post/Generate-Content-from-Trello/","_link":"https://kiko.io/post/Generate-Content-from-Trello/","_id":"cljom91uu002ijeordvjsf2iw"},{"title":"Include and provide JSON data in Hexo EJS Templates","date":"2023-06-27T05:26:21.000Z","description":"<p>The three main components of a standard installation of the Static Site Generator <a href=\"https://hexo.io/\">Hexo</a> are the template system <a href=\"https://ejs.co/\">EJS (Embedded JavaScript Templating)</a>, <a href=\"https://en.wikipedia.org/wiki/Markdown\">Markdown</a> for the content and <a href=\"https://stylus-lang.com/\">Stylus</a> for the styles.</p>\n<p>In the template files are the three main tags for driving content:</p>\n<p><strong>Scriptlet tag for control flow (no output)</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%</span><br><span class=\"line\">  ... my JavaScript code to process data into the template</span><br><span class=\"line\">%&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Output a value as escaped HTML</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%= myVariable %&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Output of a raw value, usually in the form of a JavaScript function</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%- myFunction() %&gt;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://hexo.io/docs/helpers\">Hexo’s helper system</a> is based on the latter. So you can include a JavaScript file in your template that makes use of the <a href=\"https://hexo.io/docs/helpers#js\"><strong>JS Helper</strong></a> in <code>node_modules\\hexo\\lib\\plugins\\helper\\js.js</code> as follows …</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%- <span class=\"title function_\">js</span>(<span class=\"string\">&#x27;/js/dist/myFancyFunctions.js&#x27;</span>) %&gt;</span><br></pre></td></tr></table></figure>\n\n<p>… which will be rendered to:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;/js/dist//js/dist/qr-code-styling.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"The-Problem\"><a href=\"#The-Problem\" class=\"headerlink\" title=\"The Problem\"></a>The Problem</h2><p>So far and short, so good … but I recently tried to use this way to include a JSON file whose data one of my scripts needed as startup options and I noticed that the above mentioned JS helper unfortunately takes care of the possibly missing file extension <code>js</code>. It doesn’t matter if you only pass the path to the file as a string or if all necessary attributes as an object.</p>","categories":[{"name":"JavaScript","_id":"cljom91wa003ejeor6tts99j7"}],"tags":[{"name":"Hexo","_id":"cljom91w8003bjeorbw5gfytd"},{"name":"Templating","_id":"cljom91yp009sjeorab9m4wvp"}],"_path":"post/Include-and-provide-JSON-data-in-Hexo-EJS-Templates/","_link":"https://kiko.io/post/Include-and-provide-JSON-data-in-Hexo-EJS-Templates/","_id":"cljom91v2002zjeorbeg9f3me"}]}