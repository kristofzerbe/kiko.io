{"type":"getLatest5Posts","data":[{"title":"Convert HTML into Plain Text in Hexo","date":"2023-08-31T19:58:36.000Z","description":"<p>Hexo, on which this blog is based, is a Static Site Generator (SSG) that generates a whole structure of HTML files from individual Markdown files in which the articles were written. Besides the actual posts, also overview pages like the archives and others. For the latter, however, it only needs an excerpt from the actual article, which Hexo automatically creates from the initially generated HTML content and which is also available as HTML.</p>\n<p>For my <a href=\"/post/Show-pages-meta-data-JSON-LD-in-Bottom-Sheet/\" title=\"Show pages meta data (JSON-LD) in Bottom Sheet\">Page Meta dialog</a>, however, I recently needed the excerpt as plain text to make it easier to transfer it manually to a Mastodon post, for example. My initial attempts to extract the plain text from the original Markdown turned out to be quite difficult, because in Hexo not only Markdown is used, but also special <a href=\"https://hexo.io/docs/tag-plugins\">Tag Plugins</a> in Nunjucks format and of course plain HTML. Long speech, short sense … after the first dozen RegEx-Replace calls, I got doubts to be on the right way and remembered <code>Page.Excerpt</code>, the variant already generated by Hexo in HTML.</p>","categories":[{"name":"JavaScript","_id":"cllzp048c003ok0npbcux0zgn"}],"tags":[{"name":"Hexo","_id":"cllzp0488003hk0np4fpv9b8b"},{"name":"Node.js","_id":"cllzp04b500ack0npc4j70sa1"},{"name":"Meta","_id":"cllzp04c800cvk0np0gmh13ye"}],"_path":"post/Convert-HTML-into-Plain-Text-in-Hexo/","_link":"https://kiko.io/post/Convert-HTML-into-Plain-Text-in-Hexo/","_id":"cllzp046s002xk0npda0w6wam"},{"title":"Pool Photo Generator","date":"2023-08-20T22:00:00.000Z","description":"<p>Since the existence of this blog, the posts all have a custom header image that I generate from my own photos. Already three years ago (omg … really?) I described in an article how to do this with Hexo: <a href=\"/post/Automatic-Header-Images-in-Hexo/\" title=\"Automatic Header Images in Hexo\">Automatic Header Images in Hexo</a>.</p>\n<p>To keep it short, I use a pool folder for this, in which I keep in subfolders next to a <code>meta.txt</code>, for the title of the image and an external url on 500px for interactions to the image, three variants that I need for a new post:</p>\n<ul>\n<li>mobile.jpg (width 480px)</li>\n<li>tablet.jpg (width 768px)</li>\n<li>normal.jpg (width 1280px)</li>\n</ul>\n<p>The only piece of the puzzle that was still missing was the automatic generation of these three image variants and the meta file based on a selected photo that I want to add to the pool of available header images. So far it was fun to generate the header images manually either on the desktop or on the smartphone, but it really doesn’t have to be. My goal now was to write a script where I just throw a selected photo into a folder and the NodeJS script does the rest.</p>\n<p>My photo workflow is based on Adobe Lightroom Classic and one of the steps is to give a title to the good ones I use here as well. So the script had to include four steps when iterating over the inbound folder’s JPG files:</p>\n<ol>\n<li>create new pool folder</li>\n<li>read meta data (IPTC -&gt; title) and write it to meta.txt</li>\n<li>create the three image variants</li>\n<li>delete the processed image from the inbound folder</li>\n</ol>","categories":[{"name":"JavaScript","_id":"cllzp048c003ok0npbcux0zgn"}],"tags":[{"name":"Imaging","_id":"cllzp04a5007uk0npfhd6eo7o"},{"name":"Node.js","_id":"cllzp04b500ack0npc4j70sa1"}],"_path":"post/Pool-Photo-Generator/","_link":"https://kiko.io/post/Pool-Photo-Generator/","_id":"cllzp046x0038k0np2a1af43p"},{"title":"SVWW vs. Karlsruhe @ 2023-08-18","date":"2023-08-19T16:33:00.000Z","description":"<p>I already had my season ticket on the first matchday of the 2023&#x2F;2024 season, but was unable to get into the stadium for the team’s first home game and thus missed the 1:1 draw against <strong>Magdeburg</strong>.</p>\n<h2 id=\"First-Impressions\"><a href=\"#First-Impressions\" class=\"headerlink\" title=\"First Impressions\"></a>First Impressions</h2><p>So, Friday was my premiere on my season seat West 3, Row 1, Seat 1. That this seat was free when I booked it was a coincidence, but being so close to the pitch appealed to me. In front of me, the concrete railing of the spectator block, where I can put my beer, and directly below it, the SVWW coach’s bench under a plexiglass roof. You can hardly get any closer to the team.</p>","categories":[{"name":"Football","_id":"cllzp04ap0097k0np59hl6nmf"}],"tags":[{"name":"SVWW","_id":"cllzp04cf00ddk0npgnegdk5n"},{"name":"Karlsruher FC","_id":"cllzp04ci00dok0nparr16nax"},{"name":"2. Bundesliga","_id":"cllzp04cj00dpk0npfz8f2mm6"}],"_path":"post/SVWW-vs-Karlsruhe-2023-08-18/","_link":"https://kiko.io/post/SVWW-vs-Karlsruhe-2023-08-18/","_id":"cllzp046z003bk0npgy9n8mn6"},{"title":"My Hometown, My Club","date":"2023-08-19T13:59:18.000Z","description":"<img src=\"/images/SV-Wehen-Wiesbaden.svg\" class=\"float-element\" style=\"width:8rem;\" />\n\n<p>I was born in Wiesbaden (Hesse, Germany) and I consider this city my home, even though my father built a house in a small suburb called Taunusstein-Wehen in the 70s and I practically grew up there. In this small town, where practically everybody knows everybody, there is a small football club called SV Wehen since 1926 and some of my schoolmates played there in their youth.</p>\n<p>This small club played only a regional role at all until 1979, when a local business man put money into the club and it worked its way up one league after the other over the years:</p>","categories":[{"name":"Football","_id":"cllzp04ap0097k0np59hl6nmf"}],"tags":[{"name":"SVWW","_id":"cllzp04cf00ddk0npgnegdk5n"}],"_path":"post/My-Hometown-My-Club/","_link":"https://kiko.io/post/My-Hometown-My-Club/","_id":"cllzp046w0036k0np6e2v3nde"},{"title":"CONTINUE READING Link & Auto Scrolling on the called page","date":"2023-07-29T14:14:35.000Z","description":"<p>On the home page of a blog or other text-heavy site with regular new articles, it is often advisable not to display the entire text of the article, but a more or less large excerpt and a READ MORE or CONTINUE READING link that leads to the rest of the article, usually a stand-alone article page. This allows the user to quickly get a picture of, say, the last dozen posts when he comes here to browse your texts.</p>\n<p>However, it is somewhat unpleasant if you as the author decide to display a larger excerpt after all, and the user lands at the top of the called page after clicking on the MORE link and first has to scroll&#x2F;navigate to the right place until he can resume reading. This destroys his reading flow. It is better to take the user directly to the page where the MORE link interrupted the text on the home page.</p>\n<p>With a hash and some JavaScript this is done so quickly, that I wonder why I haven’t implemented this on my own blog already :)</p>","categories":[{"name":"JavaScript","_id":"cllzp048c003ok0npbcux0zgn"}],"tags":[{"name":"UI","_id":"cllzp0487003fk0np5a5tgt03"},{"name":"Usability","_id":"cllzp04c700ctk0np2ubm14nb"}],"_path":"post/CONTINUE-READING-Link-Auto-Scrolling-on-the-called-page/","_link":"https://kiko.io/post/CONTINUE-READING-Link-Auto-Scrolling-on-the-called-page/","_id":"cllzp046q002wk0npcdmagh4q"}]}