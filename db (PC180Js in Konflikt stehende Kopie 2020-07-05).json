{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/fade-in-page/How To Fade Web Pages On Load And Unload (CSS + JS).url","path":"fade-in-page/How To Fade Web Pages On Load And Unload (CSS + JS).url","modified":0,"renderable":1},{"_id":"themes/landscape/source/fade-in-page/fade-in-page.css","path":"fade-in-page/fade-in-page.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fade-in-page/fade-in-page.js","path":"fade-in-page/fade-in-page.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/hammer/hammer.min.js","path":"hammer/hammer.min.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/hammer/jquery.hammer.js","path":"hammer/jquery.hammer.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/barba-nextprev.js","path":"js/barba-nextprev.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/dark-mode-toggle.js","path":"js/dark-mode-toggle.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/hammer/hammer.js","path":"hammer/hammer.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/hammer/jquery.hammer.js-master.zip","path":"hammer/jquery.hammer.js-master.zip","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fa-regular-400.eot","path":"css/fonts/fa-regular-400.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fa-regular-400.ttf","path":"css/fonts/fa-regular-400.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fa-regular-400.woff","path":"css/fonts/fa-regular-400.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fa-regular-400.woff2","path":"css/fonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fa-brands-400.eot","path":"css/fonts/fa-brands-400.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fa-brands-400.ttf","path":"css/fonts/fa-brands-400.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fa-brands-400.woff","path":"css/fonts/fa-brands-400.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fa-brands-400.woff2","path":"css/fonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fa-solid-900.woff2","path":"css/fonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fa-solid-900.woff","path":"css/fonts/fa-solid-900.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fa-regular-400.svg","path":"css/fonts/fa-regular-400.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fa-solid-900.eot","path":"css/fonts/fa-solid-900.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fa-solid-900.ttf","path":"css/fonts/fa-solid-900.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fa-brands-400.svg","path":"css/fonts/fa-brands-400.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fa-solid-900.svg","path":"css/fonts/fa-solid-900.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/landscape/.gitignore","hash":"ea2b285a29690f1eabbad0f3a158e34e9ccd1d86","modified":1569079870954},{"_id":"themes/landscape/Gruntfile.js","hash":"412e30530784993c8997aa8b1319c669b83b91c2","modified":1569610323447},{"_id":"themes/landscape/LICENSE","hash":"82ce1e15ddeabeaaca60e2186b5a3ce42b1a9c49","modified":1569079870957},{"_id":"themes/landscape/README.md","hash":"67fedfb66304f103c412f6be110bf3c40c75d4ac","modified":1569079870959},{"_id":"themes/landscape/_config.yml","hash":"40c6e20142a4f21074b195464f9cdb85ed0f93ae","modified":1570106605830},{"_id":"themes/landscape/package.json","hash":"6e567a9654e61eb3f548c75edef380c2e135c433","modified":1569079871030},{"_id":"source/_posts/A-New-Blog-Blogging-and-Synching-en-route.md","hash":"848c2008ec23b7064790d662dbcb486da3ed0c2f","modified":1592828599197},{"_id":"source/_posts/A-New-Blog-Customizing-Hexo.md","hash":"5df74abf961acaa7ef194f4e610cd421e6eb0382","modified":1573110886125},{"_id":"source/_posts/A-New-Blog-VS-Code-Hexo-and-GitHub-Pages.md","hash":"8ee35884a190ee2afcf3a7de270f569a5262634a","modified":1572788330142},{"_id":"source/_posts/Automatic-Header-Images-in-Hexo.md","hash":"23d47b753af13c6fb4333d71f2618196a405df47","modified":1593069932000},{"_id":"source/_posts/Better-Input-Change-Event.md","hash":"f6cbb02d22bd46a7db489366091a008f05dc3370","modified":1592828696667},{"_id":"source/_posts/Hexo-and-the-Dark-Mode-revised.md","hash":"44545817f517739f92946cf287378d2dd4f999ef","modified":1592828599198},{"_id":"source/_posts/Hexo-and-the-Dark-Mode.md","hash":"258c8758c463eb4461d601199ec3aedbd479c5a0","modified":1592828599199},{"_id":"source/_posts/How-To-Visual-Studio-Database-Project-and-ADSI.md","hash":"26c2d0151dd8b5861e8334c0b640f7397d997471","modified":1592988300000},{"_id":"source/_posts/Localization-with-resource-files-in-JavaScript-web-apps.md","hash":"98c293ae27008fe9043ef4de608c6c59f2006d6b","modified":1592983366000},{"_id":"source/_posts/Meaningful-automatic-versioning-with-T4.md","hash":"f54df4d753c4a562028e68f654051b1322d80e25","modified":1593387889164},{"_id":"source/_posts/TFS-DevOps-Delete-Remote-Workspace.md","hash":"a91b81bd27e0c85c3722e6be32a4d041b5330df8","modified":1592748921613},{"_id":"source/_posts/hello-world.md","hash":"f495b84bde3c222a3443b8cee578c0425fd5dd3c","modified":1592988292000},{"_id":"source/_posts/hexo-new-title.md","hash":"f8eea73d416ba52b4e00d914ef4fa39dc0c30125","modified":1593273441262},{"_id":"source/_drafts/hexo-new-draft-title.md","hash":"b461f705fc95239692ca4496c377b7e2d1702b34","modified":1593273445502},{"_id":"themes/landscape/languages/de.yml","hash":"895583750bf518dd9a406006ecc66d078fdd749a","modified":1570101625580},{"_id":"themes/landscape/languages/default.yml","hash":"f8d49bd8e57a5c1fd3cfacf3a4db7e0b6a5ae19c","modified":1572100612927},{"_id":"themes/landscape/layout/archive.ejs","hash":"6facd2dfa63a049b626c8e9b88b29a469fcf982b","modified":1572795427842},{"_id":"themes/landscape/layout/category.ejs","hash":"f2f47b08b1131fcfc5e57a21e81726e239fec72e","modified":1572795419387},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1569079871023},{"_id":"themes/landscape/layout/layout.ejs","hash":"27fd7a3c1e55ec3f8154fcdf02707ba7b22ba5b2","modified":1573055832000},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1569079871027},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1569079871027},{"_id":"themes/landscape/layout/tag.ejs","hash":"c4d04837f832428dc27c811e16baa69653ed19bb","modified":1572795423752},{"_id":"themes/landscape/scripts/fancybox.js","hash":"4c130fc242cf9b59b5df6ca5eae3b14302311e8c","modified":1569079871031},{"_id":"source/_posts/A-New-Blog-Blogging-and-Synching-en-route/ia-writer-1.png","hash":"927b4a925b800de8f74d8ba55058cf5228d064da","modified":1569923094000},{"_id":"source/_posts/A-New-Blog-Blogging-and-Synching-en-route/icon-gitgraph.png","hash":"3d5709824fbb079cda392ce0d3d7f7e3de300d6c","modified":1569677997000},{"_id":"source/_posts/A-New-Blog-Blogging-and-Synching-en-route/icon-gitlens.png","hash":"f32e95a715b6e6925d7da3d8d44947a826031ff9","modified":1569677997000},{"_id":"source/_posts/A-New-Blog-Blogging-and-Synching-en-route/icon-markdownlint.png","hash":"bc56a54fc9699f81accd0ed48abb73748b736740","modified":1569678000000},{"_id":"source/_posts/A-New-Blog-Blogging-and-Synching-en-route/icon-markdown-all-in-one.png","hash":"04c4928624608d792725a597d73ca185342bd2de","modified":1569677997000},{"_id":"source/_posts/A-New-Blog-Blogging-and-Synching-en-route/icon-stylus.png","hash":"c6b07b0a3c899e0edd492e7fcc02daabb2ac9677","modified":1569678000000},{"_id":"source/_posts/A-New-Blog-Blogging-and-Synching-en-route/icon-vscode-hexo.png","hash":"38940d56ab83d1e89a8830c4cf2e0b4f10117dbc","modified":1569678000000},{"_id":"source/_posts/A-New-Blog-VS-Code-Hexo-and-GitHub-Pages/github-1.png","hash":"0d7205cd5d4cc68648370e44c0f3c7142c8856fc","modified":1569418167000},{"_id":"source/_posts/Meaningful-automatic-versioning-with-T4/AssemblyInformationDialog.png","hash":"acdf61fc09a1038ea00cc539a02e36f382ddf57d","modified":1593278379907},{"_id":"source/_posts/hello-world/kiko.io-icon.png","hash":"73425338777569a755bf5edd1f0181ccb885b0d0","modified":1569259240000},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"5046ce70d206c9edad1a9898ec91a6e2e04afece","modified":1573117796000},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"133f3420ab8716ab0435f56c732e3249a399a9c2","modified":1572792380769},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"4537ce258bbad8f4cb4817da65395459bcbb0a61","modified":1572794886022},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"a6bad832b0463bc8f5bce93c408f8b64adb0da57","modified":1593531814832},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"f0a0242d54436961b15aca617dc3f10baeeafc2d","modified":1572001972000},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"ace3000bd3e01d03041d5be24f7640b6c003a5b5","modified":1569079871001},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1569079871002},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"58747f8a1f544bc756a74eabdff60fb8c24d00f4","modified":1572793531877},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"2125eefc25b39c24c2fa934a5a8b4d666aad7b06","modified":1574843776000},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"b65a55439f3102f69cff43096c7290ba6e2025e1","modified":1572700277848},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"c70869569749a8f48cce202fa57926c06b55fdab","modified":1569079871015},{"_id":"themes/landscape/layout/_widget/about.ejs","hash":"f04527201b1259a9982e4e8948baa4689f04af20","modified":1570018338000},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"0fe1e52c291c9499bd05b966e0b9aac5be351c58","modified":1569079871017},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"866790acc13fed44b7ef74c3e19c300a3d6180d8","modified":1569079871017},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"16800f85ffb036d2644a26e02facd61acb3706e9","modified":1569079871019},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"6017c54a8c3c8ff8db491cfbea3100c139da75d6","modified":1569079871020},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"7259c179aa0c41c02e467ad892292e90430aaabc","modified":1569079871020},{"_id":"themes/landscape/source/css/_extend.styl","hash":"c8510cdb74faf25fdfaeeb8965fc2f148729f99e","modified":1593359398994},{"_id":"themes/landscape/source/css/_variables.styl","hash":"a9072392b80f30fd3ba011ae1825d503bf3f0ac2","modified":1593958050307},{"_id":"themes/landscape/source/css/style.styl","hash":"50a52064b7a689ad17aacc44a605d87d0f81deed","modified":1573055899000},{"_id":"themes/landscape/source/fade-in-page/How To Fade Web Pages On Load And Unload (CSS + JS).url","hash":"73601bbce5a045ee20bbf511b173c1dacc274b7a","modified":1573048534000},{"_id":"themes/landscape/source/fade-in-page/fade-in-page.css","hash":"9fe8e239927c4d391d45453084284e7da387cbbf","modified":1573052830000},{"_id":"themes/landscape/source/fade-in-page/fade-in-page.js","hash":"14ce28543f6cd0dcb7452713ddeec81a6672e492","modified":1573050507000},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1569079871115},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1569079871118},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1569079871120},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1569079871123},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1569079871124},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1569079871128},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"b520a4bfa9605ab5c503fcdb86344de3a86fc12e","modified":1569136173555},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"58193c802f307ec9bc9e586c0e8a13ebef45d2f8","modified":1569079871148},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"2da892a02778236b64076e5e8802ef0566e1d9e8","modified":1569079871151},{"_id":"themes/landscape/source/hammer/hammer.min.js","hash":"f2de8453fccb34baf26d784afa965dbe8c0d1550","modified":1572251132000},{"_id":"themes/landscape/source/hammer/jquery.hammer.js","hash":"656ceb73d6a0049a7319c28d608df4d3a71a9fdc","modified":1572251818000},{"_id":"themes/landscape/source/js/barba-nextprev.js","hash":"a69c0e425b9f1e6729aea94adc11bb0a1da14fee","modified":1573116744000},{"_id":"themes/landscape/source/js/dark-mode-toggle.js","hash":"28d498d5eddeb182592119df950e2e35432e533a","modified":1572098763083},{"_id":"themes/landscape/source/js/script.js","hash":"c3c53fb889c510fb01c8ec4f7a6dc34c71ec29f8","modified":1573116251000},{"_id":"source/_posts/A-New-Blog-Customizing-Hexo/vscode-1.png","hash":"e05c478c4bc9f1a82b7ca0e7779228b4afcc6cb8","modified":1569414381000},{"_id":"source/_posts/A-New-Blog-VS-Code-Hexo-and-GitHub-Pages/vscode-1.png","hash":"7a24d1fd716f23eae5f47f6cce6b054097199729","modified":1569410335000},{"_id":"source/_posts/A-New-Blog-VS-Code-Hexo-and-GitHub-Pages/vscode-2.png","hash":"58d269672ae3458cf69cee58963070a01da95d77","modified":1569414387000},{"_id":"themes/landscape/source/hammer/hammer.js","hash":"6ad501abf050b143982f715d583d869d7bb8ac3b","modified":1572251139000},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c79605e9b3c9cea6db2c82487912268df1664877","modified":1570189825232},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"947f513f7a85fbcf085624e46dc2ae6de8185eec","modified":1569505358000},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"b0bf3f5d923c261ca2b5fabab513f1ec2708c8ca","modified":1569079871011},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"cbb3819ce512bd24db8bad41b8617d46eba82fdc","modified":1569079871012},{"_id":"themes/landscape/layout/_partial/post/photograph.ejs","hash":"f21fe43e917639d591dc2e912cc3feeb711d82e9","modified":1573065710879},{"_id":"themes/landscape/layout/_partial/post/subtitle.ejs","hash":"e7ff29540ff0c8192e0fdb14ac3b4b6d0eb0d2da","modified":1569950616996},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"694b5101bcc44c9f9c1cc62e5ad2fdfb4b7c7a07","modified":1569079871013},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1569079871015},{"_id":"themes/landscape/source/hammer/jquery.hammer.js-master.zip","hash":"7dc454af368cdcdcc1e74eaf56eb10db9e7113f0","modified":1572251792000},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"482597cbc65239c490be868a2e4f3f34e543618c","modified":1572796331000},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"419a680508e6e64c9e190e83abfb1ef344142808","modified":1572020557636},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"8f1d5f69f674f77776405fdc832377e812305b5c","modified":1593359288430},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"c3e3590a9251a2d468cf9975350422dd08d6f2b2","modified":1572865375000},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"5eb2c93dc1d73c5e8595a368b026a1fd06be565f","modified":1593531821995},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"8f350a90b0d1937470f26a3ca3f137b733d3f03c","modified":1593958012234},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"8be6710eedf1e78e48e88ecd5d045e1f261c7207","modified":1572020928612},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"b9068e4b16e1477a621349fd3b9d885995ca8724","modified":1572020557636},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"1ce7e554b62f3cf82bd5a026e77835611ec3aa97","modified":1569500841000},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"8ff6c3eee95e34c9995fb35bef074b09b6e280c2","modified":1572020557636},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1569079871046},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1569079871048},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1569079871053},{"_id":"themes/landscape/source/css/fonts/fa-regular-400.eot","hash":"1115185386ada5846eecc4e2e1f076ca7617e0cd","modified":1569615212586},{"_id":"themes/landscape/source/css/fonts/fa-regular-400.ttf","hash":"5d5375ce3ae5b500df039da009ccdaca29d52fc0","modified":1569615211864},{"_id":"themes/landscape/source/css/fonts/fa-regular-400.woff","hash":"7626840dab0e2ae37b2d16572a6f183a71a0dd73","modified":1569615211926},{"_id":"themes/landscape/source/css/fonts/fa-regular-400.woff2","hash":"be142af0f56062f6e864de121b98054c7b5954fd","modified":1569615211973},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1569079871054},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1569079871061},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1569079871130},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1569079871132},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"4c9c395d705d22af7da06870d18f434e2a2eeaf9","modified":1569079871135},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"e14c32cc6823b81b2f758512f13ed8eb9ef2b454","modified":1569079871137},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1569079871139},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"83cdfea43632b613771691a11f56f99d85fb6dbd","modified":1569079871142},{"_id":"themes/landscape/source/css/fonts/fa-brands-400.eot","hash":"7ed86fe71d4dc31d5edf492f7472d6fb88c3c3c9","modified":1569615212373},{"_id":"themes/landscape/source/css/fonts/fa-brands-400.ttf","hash":"c5a1a93f668d15f55deac38b4728f8d901bd4748","modified":1569615212477},{"_id":"themes/landscape/source/css/fonts/fa-brands-400.woff","hash":"6900998c1d878e73b2f9ac3a9a9746365d49a54f","modified":1569615212508},{"_id":"themes/landscape/source/css/fonts/fa-brands-400.woff2","hash":"5fe986cda635681b4b6bbd6111df2f26d7fca286","modified":1569615212540},{"_id":"themes/landscape/source/css/fonts/fa-solid-900.woff2","hash":"b2879f9e1d0985a96842bf7f55a2b2cc4c636d04","modified":1569615212301},{"_id":"themes/landscape/source/css/fonts/fa-solid-900.woff","hash":"43dae5c2482bfb5d04d896529600eb621181103a","modified":1569615212254},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1569079871060},{"_id":"themes/landscape/source/css/fonts/fa-regular-400.svg","hash":"dd1b42f8776d9b48adda30b0069aa0e5f18989d3","modified":1569615211784},{"_id":"themes/landscape/source/css/fonts/fa-solid-900.eot","hash":"340ee70e87850176047733192ea8109dd6380082","modified":1569615212083},{"_id":"themes/landscape/source/css/fonts/fa-solid-900.ttf","hash":"40d9789010f6137e543e4d97025b867707d2f425","modified":1569615212208},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"a275426daefd3716c53561fad121d258a7f05b47","modified":1569079871058},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"ad0078065d8fcabb53f9a6b3a91b851d5a13eb54","modified":1569510019000},{"_id":"themes/landscape/source/css/fonts/fa-brands-400.svg","hash":"3e9abaae5dc647f4019a4dcdde1b51f14c2054e8","modified":1569615212430},{"_id":"themes/landscape/source/css/fonts/fa-solid-900.svg","hash":"55a9f6dd285c88c6c9847fee0d5ce127c4c61c52","modified":1569615212161},{"_id":"source/_posts/Hexo-and-the-Dark-Mode/screen-recording-1.gif","hash":"6193bb7510265175743011adcfd3301f19b844b9","modified":1571840215000},{"_id":"public/CNAME","hash":"7e20ac167881d9222c2c942048ff23dd8522d676","modified":1593278679129},{"_id":"public/favicon.ico","hash":"0745e049f8e13a06276f52e243bfac7128cb4353","modified":1593278679131},{"_id":"public/images/icon-128x128.png","hash":"202bb39fe156327de7c02a2a69e6c43495017de2","modified":1593278679132},{"_id":"public/images/icon-144x144.png","hash":"21c764182fb79a56fb6a85f3457482eeca106a28","modified":1593278679361},{"_id":"public/images/icon-152x152.png","hash":"fb9b3f1ccd2314e44c61537ad6b1dbe10122033b","modified":1593278679516},{"_id":"public/images/icon-192x192.png","hash":"fe085032cbcf79fc4bd9f99132cd98eef498c56a","modified":1593278679518},{"_id":"public/images/icon-384x384.png","hash":"fe085032cbcf79fc4bd9f99132cd98eef498c56a","modified":1593278679519},{"_id":"public/images/icon-512x512.png","hash":"fe085032cbcf79fc4bd9f99132cd98eef498c56a","modified":1593278679519},{"_id":"public/images/icon-72x72.png","hash":"77578e99b298a96987c84569d77a616e709e42e9","modified":1593278679525},{"_id":"public/images/icon-96x96.png","hash":"dc003965fdc0348df368df225dfe419969561f40","modified":1593278679525},{"_id":"public/images/kristof-zerbe.png","hash":"3760f1de7c46d4163a5b09c6d49ed08b6bb7abf2","modified":1593278679526},{"_id":"public/manifest.json","hash":"a22d506c701480d4869da51b1a9c147b456131bb","modified":1593278679526},{"_id":"public/photos/mobile/18-09 Kroatien-0061.jpg","hash":"ce2a5ef7a25c650a3a32b9a8825350244e7d8b90","modified":1593278679526},{"_id":"public/photos/mobile/19-05 Israel-0161.jpg","hash":"797bf6613ea1e33dc8263835fb4463dfaf7051fa","modified":1593278679526},{"_id":"public/photos/mobile/19-05 Israel-0228.jpg","hash":"35b3866d1a133d289fd33e619544101e2dc9eb9a","modified":1593278679526},{"_id":"public/photos/mobile/19-05 Israel-0516.jpg","hash":"2f6696dbe36d289109649e1d6b962383eada792b","modified":1593278679526},{"_id":"public/photos/mobile/19-05 Israel-0624.jpg","hash":"a7627ec8b66e58770382b14e8f0e2e9d3f0f8ed8","modified":1593278679526},{"_id":"public/photos/mobile/19-07 Schottland-0016_AUR.jpg","hash":"953d89aacbf33f23a474d19b05525eb83b46d4e6","modified":1593278679526},{"_id":"public/photos/mobile/19-07 Schottland-0025.jpg","hash":"1dbc9ced98c6f7b8cc70713d31a49041624120f8","modified":1593278679526},{"_id":"public/photos/mobile/19-07 Schottland-0198.jpg","hash":"76507efb759e01024a7f843d5123f6553970bcd6","modified":1593278679526},{"_id":"public/photos/mobile/19-07 Schottland-0364.jpg","hash":"5e179c153b973b57c7adde78a1d3e033bf604a79","modified":1593278679526},{"_id":"public/photos/mobile/19-07 Schottland-0405.jpg","hash":"752ea7a4ef7de91887f0d1708985c3f65ed83e72","modified":1593278679527},{"_id":"public/photos/mobile/D70_7344.jpg","hash":"5e8caaf73a02e8fa47a281173efdc95ed9a8639a","modified":1593278679527},{"_id":"public/photos/normal/18-09 Kroatien-0061.jpg","hash":"800ad244b226f3d5821bdcffbf4421c7fc7778dc","modified":1593278679527},{"_id":"public/photos/normal/19-05 Israel-0161.jpg","hash":"9624d203366759a31917daf26346a9941658a392","modified":1593278679527},{"_id":"public/photos/normal/19-05 Israel-0228.jpg","hash":"0451dd6e974e11d8a8786e2a8341a55db0e541f3","modified":1593278679527},{"_id":"public/photos/normal/19-05 Israel-0516.jpg","hash":"1b16e1ee8aa3385b58f22d892b6e82f99f79770b","modified":1593278679527},{"_id":"public/photos/normal/19-05 Israel-0624.jpg","hash":"00304e859f47338c2b6fe6ee0fd165c7f8ce1a53","modified":1593278679528},{"_id":"public/photos/normal/19-07 Schottland-0016_AUR.jpg","hash":"1e0732b0f666497d24501c79fbd027a5a7760ecb","modified":1593278679528},{"_id":"public/photos/normal/19-07 Schottland-0025.jpg","hash":"fb2c8d535cd8b4b4a2bea887e2bd223ddf6edc62","modified":1593278679528},{"_id":"public/photos/normal/19-07 Schottland-0198.jpg","hash":"df2c55a9891c537dccf08b15835c7319569b5cbe","modified":1593278679528},{"_id":"public/photos/normal/19-07 Schottland-0364.jpg","hash":"a1fbba29139c92d83e8fdc0638946cb46cf2e880","modified":1593278679528},{"_id":"public/photos/normal/19-07 Schottland-0405.jpg","hash":"15b4493b43e8e0fd8c2a3d28779f15be762df124","modified":1593278679529},{"_id":"public/photos/normal/D70_7344.jpg","hash":"568b4986df822332ac97c9785b85483514899120","modified":1593278679529},{"_id":"public/photos/tablet/18-09 Kroatien-0061.jpg","hash":"5d7c1257a6e44115223899ee69169969f0ae5ac7","modified":1593278679529},{"_id":"public/photos/tablet/19-05 Israel-0161.jpg","hash":"2eecc027cd3bc3ab387e3bf8f11ff8327fcbf13d","modified":1593278679529},{"_id":"public/photos/tablet/19-05 Israel-0228.jpg","hash":"1f778904eb9c47082e53b02e448dee1c06507599","modified":1593278679529},{"_id":"public/photos/tablet/19-05 Israel-0516.jpg","hash":"2229c7b01b8b170c07bfe90617b44ab03f160a7b","modified":1593278679529},{"_id":"public/photos/tablet/19-05 Israel-0624.jpg","hash":"1771796130c7250225e7a36bde2ca5504460a16d","modified":1593278679529},{"_id":"public/photos/tablet/19-07 Schottland-0016_AUR.jpg","hash":"86e575d97433399e8c7cd759f8ca4da2d924943d","modified":1593278679529},{"_id":"public/photos/tablet/19-07 Schottland-0025.jpg","hash":"cf1adbb4751f7fbb293a6ad2b6fea6f879d9da96","modified":1593278679530},{"_id":"public/photos/tablet/19-07 Schottland-0198.jpg","hash":"97340a91b89533c6bd367558ee43ead1f9119103","modified":1593278679530},{"_id":"public/photos/tablet/19-07 Schottland-0364.jpg","hash":"b19875d2cbe1d0c30321bc169690982801dddee3","modified":1593278679530},{"_id":"public/photos/tablet/19-07 Schottland-0405.jpg","hash":"4895f9762f797fd1a357f509647bfb7146a81d26","modified":1593278679530},{"_id":"public/photos/tablet/D70_7344.jpg","hash":"8472d90a756e1e772ca48da46bddc7ba8caceb99","modified":1593278679531},{"_id":"public/pool/18-09 Kroatien-0012/meta.txt","hash":"212fa12753ed983df5d6b2df907e24d389405224","modified":1593278679531},{"_id":"public/pool/18-09 Kroatien-0012/mobile.jpg","hash":"f541a61c6036f9a1b2d32c1a2c6a1720fb69d081","modified":1593278679531},{"_id":"public/pool/18-09 Kroatien-0012/normal.jpg","hash":"2c4289a0e5ae308958ca9dc554cc082bb2b899d6","modified":1593278679531},{"_id":"public/pool/18-09 Kroatien-0012/tablet.jpg","hash":"4eeda56b2ce4fdbe961561493e9c4c1947500fb4","modified":1593278679531},{"_id":"public/pool/18-09 Kroatien-0112/meta.txt","hash":"049e56ebc14951ec83769d8a73b5465ac326ff43","modified":1593278679531},{"_id":"public/pool/18-09 Kroatien-0112/mobile.jpg","hash":"9f836195d9fc33973858ef941e8684bd574f01a7","modified":1593278679531},{"_id":"public/pool/18-09 Kroatien-0112/normal.jpg","hash":"a3bc4b79fb4ff00e02eccf2756e82f42ef806846","modified":1593278679531},{"_id":"public/pool/18-09 Kroatien-0112/tablet.jpg","hash":"ec74880d9a6dd36a3ab3d897ab3066023b85437e","modified":1593278679531},{"_id":"public/pool/18-09 Kroatien-0245/meta.txt","hash":"e9f4214c195a9c7ac1ac0f5597222fea0fa942ff","modified":1593278679531},{"_id":"public/pool/18-09 Kroatien-0245/mobile.jpg","hash":"cdb7742f9c9c272537e6673e5108dc43fb64c02b","modified":1593278679531},{"_id":"public/pool/18-09 Kroatien-0245/normal.jpg","hash":"995803d5ea2dd03703df9b17edd369a1141fe07f","modified":1593278679531},{"_id":"public/pool/18-09 Kroatien-0245/tablet.jpg","hash":"5fa66026d9bf26cea120781e13461968c496c808","modified":1593278679532},{"_id":"public/pool/18-09 Kroatien-0323/meta.txt","hash":"eed6945cdafccea79ed9ca9e6b58737d41511e40","modified":1593278679532},{"_id":"public/pool/18-09 Kroatien-0323/mobile.jpg","hash":"708402a32805d675c69a5040877635a41014e035","modified":1593278679532},{"_id":"public/pool/18-09 Kroatien-0323/normal.jpg","hash":"8c06a8333b1d08e1d28baa1477e2bfff39f9e203","modified":1593278679532},{"_id":"public/pool/18-09 Kroatien-0323/tablet.jpg","hash":"d41b52f1ad04d16be97b2eda8215d0451ea2ef60","modified":1593278679532},{"_id":"public/pool/18-09 Kroatien-0340/meta.txt","hash":"5f07054154162339bb8a8af9794e8d8d7a8bc94e","modified":1593278679532},{"_id":"public/pool/18-09 Kroatien-0340/mobile.jpg","hash":"59207b7ba6602910a4d89b09d934d2f06abbac7d","modified":1593278679532},{"_id":"public/pool/18-09 Kroatien-0340/normal.jpg","hash":"f096e10885a8ab5ec6612b06a982f153ef8d6e12","modified":1593278679532},{"_id":"public/pool/18-09 Kroatien-0340/tablet.jpg","hash":"64f92580cdce831b63cb553814fb26b3cc4c57bd","modified":1593278679533},{"_id":"public/pool/18-09 Kroatien-0349/meta.txt","hash":"0258908d77594dc1c19b38bda6f816569dc658d4","modified":1593278679533},{"_id":"public/pool/18-09 Kroatien-0349/mobile.jpg","hash":"32d1a0659723e7acc270cbd9a4214fc673ea2a9d","modified":1593278679533},{"_id":"public/pool/18-09 Kroatien-0349/normal.jpg","hash":"3d9d08ced75f0aab8b7f55adf4e213541f3164c1","modified":1593278679533},{"_id":"public/pool/18-09 Kroatien-0349/tablet.jpg","hash":"fb10285bd53515fdf3765eee5fa3c59d8eee72db","modified":1593278679533},{"_id":"public/pool/19-05 Israel-0143/meta.txt","hash":"4a4ee17e4f54589df253c8989741a9144d116061","modified":1593278679533},{"_id":"public/pool/19-05 Israel-0143/mobile.jpg","hash":"1fd857e03d85592db919e0139d90a38e9c751e31","modified":1593278679533},{"_id":"public/pool/19-05 Israel-0143/normal.jpg","hash":"12d226726cc0a9910e40b314a858409042bee78e","modified":1593278679533},{"_id":"public/pool/19-05 Israel-0143/tablet.jpg","hash":"8a537810b3d3fad27c08eff6b38ff84306039535","modified":1593278679533},{"_id":"public/pool/19-05 Israel-0145/meta.txt","hash":"d0db97f12c534f0f032963ef32013b17d256e445","modified":1593278679534},{"_id":"public/pool/19-05 Israel-0145/mobile.jpg","hash":"01b8d3f83fa2908602808a0ea1ac00221ad7d0a0","modified":1593278679534},{"_id":"public/pool/19-05 Israel-0145/normal.jpg","hash":"e20ce5a6e7a57414b072456e68f3f69dc16bd291","modified":1593278679534},{"_id":"public/pool/19-05 Israel-0145/tablet.jpg","hash":"b91b31498ed893aa1bf422cd41d2065910cff561","modified":1593278679534},{"_id":"public/pool/19-05 Israel-0221/meta.txt","hash":"a975af8601a436e568f179b9be362834b0b3e41b","modified":1593278679534},{"_id":"public/pool/19-05 Israel-0221/mobile.jpg","hash":"4831e9292972aeb0769337599a5627a0a37e1812","modified":1593278679534},{"_id":"public/pool/19-05 Israel-0221/normal.jpg","hash":"edbf2b026d80e2c61aa7b1774163ccf70db5a3e6","modified":1593278679534},{"_id":"public/pool/19-05 Israel-0221/tablet.jpg","hash":"191fe66bb067094ab9b7bb3ecf52df0f44e1833c","modified":1593278679534},{"_id":"public/pool/19-05 Israel-0321/meta.txt","hash":"86d4fe18d5a369eab0d71fa064f193b5d045618c","modified":1593278679535},{"_id":"public/pool/19-05 Israel-0321/mobile.jpg","hash":"9b69884358664037c5a1276ea6de65ccd1518387","modified":1593278679535},{"_id":"public/pool/19-05 Israel-0321/normal.jpg","hash":"1e34a4a542f628d92d4aa6f0fe146462177109a5","modified":1593278679535},{"_id":"public/pool/19-05 Israel-0321/tablet.jpg","hash":"6caa08ee6a3cd5c14945a56d3ba1a66470837168","modified":1593278679535},{"_id":"public/pool/19-05 Israel-0498/meta.txt","hash":"b299ece3d612d611039227ff6ce0296acc3dece7","modified":1593278679535},{"_id":"public/pool/19-05 Israel-0498/mobile.jpg","hash":"6b1bda1281f4e76b887640da932609fd973cd4eb","modified":1593278679535},{"_id":"public/pool/19-05 Israel-0498/normal.jpg","hash":"e346719280cf7abd5ed892b9221b17603a0ef4ce","modified":1593278679535},{"_id":"public/pool/19-05 Israel-0498/tablet.jpg","hash":"5cad52cd20abe8f7b6b370833203db4d4e3ca679","modified":1593278679535},{"_id":"public/pool/19-05 Israel-0724/meta.txt","hash":"a8ee72df7e6aa6a019c4c94f4268acf402d705cb","modified":1593278679536},{"_id":"public/pool/19-05 Israel-0724/mobile.jpg","hash":"f5e815d531679d224ba3588df77bf2c790deb825","modified":1593278679536},{"_id":"public/pool/19-05 Israel-0724/normal.jpg","hash":"ada35db275c0e6291b0d3828a6b006a5273c483c","modified":1593278679536},{"_id":"public/pool/19-05 Israel-0724/tablet.jpg","hash":"bb6c9603ea727dcd2bd89a4bcd80a325e79e6074","modified":1593278679536},{"_id":"public/pool/19-07 Schottland-0372/meta.txt","hash":"fd746b9f3726e81f8ca617c10e513d57b2c5effd","modified":1593278679536},{"_id":"public/pool/19-07 Schottland-0372/mobile.jpg","hash":"fb9f28335426fd10aba10e82a4034ac2afaa84ad","modified":1593278679536},{"_id":"public/pool/19-07 Schottland-0372/normal.jpg","hash":"53b76cc869d704668ecfc1e00a60935fcdc8280d","modified":1593278679536},{"_id":"public/pool/19-07 Schottland-0372/tablet.jpg","hash":"f24bfcd5072140c84d1d5abb801f70302d00e501","modified":1593278679536},{"_id":"public/pool/19-07 Schottland-0512/meta.txt","hash":"d4bed2342d3a0134ec239d7166b94dc718586047","modified":1593278679537},{"_id":"public/pool/19-07 Schottland-0512/mobile.jpg","hash":"f23e408890ea1b51eba6426892c8291502690988","modified":1593278679537},{"_id":"public/pool/19-07 Schottland-0512/normal.jpg","hash":"bb64936f2329533a951ce566e240051c85b99723","modified":1593278679537},{"_id":"public/pool/19-07 Schottland-0512/tablet.jpg","hash":"7678e35ee11487b787ac7211b0ffbfc2ae3ea2bc","modified":1593278679537},{"_id":"public/pool/D70_0759/meta.txt","hash":"1527f5b3ef528949641cb989e16650c3b83984a6","modified":1593278679537},{"_id":"public/pool/D70_0759/mobile.jpg","hash":"ceac863d7eb98749716732a5c92865ed090b183b","modified":1593278679537},{"_id":"public/pool/D70_0759/normal.jpg","hash":"e7c93fb54fae92fde79d5a577c971cd2b9c3fd99","modified":1593278679537},{"_id":"public/pool/D70_0759/tablet.jpg","hash":"96f4c42d21eee0fb5562ed12bf048fcc073d9a34","modified":1593278679537},{"_id":"public/pool/D70_0789/D70_0789.jpg","hash":"fb758ac955295730ca38177ec27c72eb1753c5f2","modified":1593278679537},{"_id":"public/pool/D70_0789/meta.txt","hash":"b617629df8f5e80d66263f97aae05c9753e59997","modified":1593278679538},{"_id":"public/pool/D70_0789/normal.jpg","hash":"eb4c0dd2e508ef4a751af7118ac3d38f19d445a9","modified":1593278679538},{"_id":"public/pool/D70_0789/tablet.jpg","hash":"40c80176cc352a861041f1212feccfacfa11b149","modified":1593278679538},{"_id":"public/pool/D70_1408/meta.txt","hash":"426a2e2341543881e0c90f2b9ab1741ae6d6198f","modified":1593278679538},{"_id":"public/pool/D70_1408/mobile.jpg","hash":"2a244058c7ba4fc2888f440016499b8134a96404","modified":1593278679538},{"_id":"public/pool/D70_1408/normal.jpg","hash":"01fdb2aaf00c01bb6485895268eee8e38a21cc87","modified":1593278679538},{"_id":"public/pool/D70_1408/tablet.jpg","hash":"5530ea426ac67308c2b0fc9f7d903af5bd031563","modified":1593278679538},{"_id":"public/pool/D70_7530/meta.txt","hash":"3a2c126f12ac7185950328c91eb580cc4b65f9ce","modified":1593278679538},{"_id":"public/pool/D70_7530/mobile.jpg","hash":"2d5af3d4881586e3850514d0eb71373d6e5a49dc","modified":1593278679538},{"_id":"public/pool/D70_7530/normal.jpg","hash":"321303f6ef60d13b4568b32f4268bdf89d21901c","modified":1593278679539},{"_id":"public/pool/D70_7530/tablet.jpg","hash":"8164eaf8f0e6a93bcf47cc21060470d81b62dcd7","modified":1593278679539},{"_id":"public/pool/D70_7695/meta.txt","hash":"006b5cd87e9f47bea8cc228d0380bb2d33c7841f","modified":1593278679539},{"_id":"public/pool/D70_7695/mobile.jpg","hash":"b88bf3bd041240b84ff2a1634ee3a1bedd2cddb1","modified":1593278679539},{"_id":"public/pool/D70_7695/normal.jpg","hash":"36af6dffef8e01ef41fb5ff57f9ea9b3b57c0912","modified":1593278679539},{"_id":"public/pool/D70_7695/tablet.jpg","hash":"38116effe583b37ab86d0695eda0fd35d44ba563","modified":1593278679539},{"_id":"public/pool/DSC_0181/meta.txt","hash":"a7a98a0441dc548b509fde5ba7c83feeaad39901","modified":1593278679539},{"_id":"public/pool/DSC_0181/mobile.jpg","hash":"2cc94559d85153ff338798eb6931d4aa75da5d10","modified":1593278679539},{"_id":"public/pool/DSC_0181/normal.jpg","hash":"62188676a2bb0cdeef9335d81df662ec3d903148","modified":1593278679539},{"_id":"public/pool/DSC_0181/tablet.jpg","hash":"311a5553e0d31b4e7b5531924b4dfbacf719b316","modified":1593278679539},{"_id":"public/pool/DSC_0190/meta.txt","hash":"14d6c70f293f8ffc46ab3c69149248dac36c3614","modified":1593278679540},{"_id":"public/pool/DSC_0190/mobile.jpg","hash":"091d9252585d49e2f31347894927b988f49d7197","modified":1593278679540},{"_id":"public/pool/DSC_0190/normal.jpg","hash":"1bf05a758559f0936dfeb91670a190d6257fa9fd","modified":1593278679540},{"_id":"public/pool/DSC_0190/tablet.jpg","hash":"74677a52b763fcda03f47344136cb03f8dc1a656","modified":1593278679540},{"_id":"public/pool/DSC_7898/meta.txt","hash":"d271b19a29337b3e9643f233a14579e234599e46","modified":1593278679540},{"_id":"public/pool/DSC_7898/mobile.jpg","hash":"51d798589d4b3340ce1ab0ee00663dc1e7e543fc","modified":1593278679540},{"_id":"public/pool/DSC_7898/normal.jpg","hash":"bd226edf7270c349fdc72dd1c5b228430c062493","modified":1593278679540},{"_id":"public/pool/DSC_7898/tablet.jpg","hash":"90811111df587749655303950cc21ee036613f69","modified":1593278679540},{"_id":"public/pool/mobile -- 40% auf ca. 480","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1593278679541},{"_id":"public/pool/normal -- von 1920 -- 66% auf ca. 1280","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1593278679541},{"_id":"public/pool/tablet -- 65% auf ca. 768","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1593278679541},{"_id":"public/pool/tel-aviv-sunset/meta.txt","hash":"7fc27fbabbc959d1fc47b2caf8e014dcd349a540","modified":1593278679541},{"_id":"public/pool/tel-aviv-sunset/mobile.jpg","hash":"f2ee9b4ab76396685698a2b6dabaac97c4f92df7","modified":1593278679541},{"_id":"public/pool/tel-aviv-sunset/normal.jpg","hash":"f53546ff27e1dd2625003e880c3a889ea15c98a5","modified":1593278679541},{"_id":"public/pool/tel-aviv-sunset/tablet.jpg","hash":"0539f1872cd387178a443c49c5580f44adf82ffc","modified":1593278679541},{"_id":"public/pool/_D702440/meta.txt","hash":"c7c5dfdb5ea7166ae46781a72118a89cebf9a8db","modified":1593278679541},{"_id":"public/pool/_D702440/mobile.jpg","hash":"497080af1ed17dd053c40b75c0a5459835df5962","modified":1593278679541},{"_id":"public/pool/_D702440/normal.jpg","hash":"ebc367bacf05f6bf6b7d93c239dfbe24f0dae4e3","modified":1593278679541},{"_id":"public/pool/_D702440/tablet.jpg","hash":"a901d9bda4e150399d2dfae77abd203a8c58f906","modified":1593278679541},{"_id":"public/robots.txt","hash":"2f37879a319e341e9436c496ab97aa0334560587","modified":1593278679542},{"_id":"public/search.json","hash":"a6bceda26d6790f07ea4d4d5064b384624ece33f","modified":1593388060337},{"_id":"public/sitemap.xml","hash":"de99d683dbc076c3cb18dcf5978f6bda0a151984","modified":1593388060341},{"_id":"public/atom.xml","hash":"e62516545f68261857ed0eeecc188942960706bb","modified":1593388060343},{"_id":"public/categories/JavaScript/index.html","hash":"bc2d0f054b924ed12f6f1c8d0d6f5ba39046f3fe","modified":1593278830747},{"_id":"public/categories/SQL/index.html","hash":"5d7f90545c68428dc0002727022e3cadc268ab3e","modified":1593278830747},{"_id":"public/archives/2019/09/index.html","hash":"eb94725d4b12b5296028d81a3cde6290ed138ebe","modified":1593278830746},{"_id":"public/archives/2019/10/index.html","hash":"36dd7bb4c54c13b0bd2c5a3139dc50d6584efbc9","modified":1593278830746},{"_id":"public/archives/2019/11/index.html","hash":"00983b810374c12fdf409f102de00228fd132719","modified":1593278830746},{"_id":"public/archives/2020/02/index.html","hash":"44a82b5e14b202f1d2bc39636bd2cd05c03ea825","modified":1593278830746},{"_id":"public/tags/VS-Code/index.html","hash":"5895873f02cee026c48374a4090a25c86b3db9e0","modified":1593278830748},{"_id":"public/tags/GitHub/index.html","hash":"7d3267a5f3b7b39ec86c0427ab7042f3e9a9fd74","modified":1593278830748},{"_id":"public/tags/jQuery/index.html","hash":"9b0d0f089e9b517395c6aa145c9df4b979750992","modified":1593278830749},{"_id":"public/tags/CSS/index.html","hash":"92fbec1595df64f2ceb57303aa741ef8cd1605ee","modified":1593278830749},{"_id":"public/tags/Stylus/index.html","hash":"19e7905fd687ea5a99e78e5bfe76915915cde01d","modified":1593278830750},{"_id":"public/tags/Dark-Mode/index.html","hash":"0f49dfd5681f8559956017f162b5310759e4d462","modified":1593278830750},{"_id":"public/tags/ADSI/index.html","hash":"0082db968094914a011aff5c6c6b46cb49c2a4bf","modified":1593278830750},{"_id":"public/tags/Database-Project/index.html","hash":"f6c48e0b390b6ccbcf80d1f711d41c00d98dee6e","modified":1593278830750},{"_id":"public/tags/Resource/index.html","hash":"2f897d50d0a4014e1a9967e9c736d61a7ec03969","modified":1593278830751},{"_id":"public/tags/Localization/index.html","hash":"df6b7a835bc0adf92fcce4a49f12a6009db7d8e9","modified":1593278830751},{"_id":"public/tags/TFS-DevOps/index.html","hash":"4761ff5b145b026b244d7b8759cf560360d70a93","modified":1593278830752},{"_id":"public/photos/mobile/19-05 Israel-0661.jpg","hash":"7a36f568c8e4ce3d8fa734d13fc156681eafa91b","modified":1593278679668},{"_id":"public/photos/mobile/D70_7184.jpg","hash":"c434b8eaa9d7e81f384206f61a78c8718cbbff4b","modified":1593278679668},{"_id":"public/photos/normal/19-05 Israel-0661.jpg","hash":"461f1a121277b7329b587d58c9055fb465d82388","modified":1593278679668},{"_id":"public/photos/normal/D70_7184.jpg","hash":"a729a51fb6dac411699ac6dc2afccf602e378523","modified":1593278679668},{"_id":"public/photos/tablet/19-05 Israel-0661.jpg","hash":"9674e7a670d1df263ecde13450c865b1c316a7e0","modified":1593278679668},{"_id":"public/photos/tablet/D70_7184.jpg","hash":"d24fbc065aa5c7cb7561023dc086333c8d83ebfc","modified":1593278679668},{"_id":"public/categories/Tools/Automatic-Header-Images-in-Hexo/index.html","hash":"57f5248ad4b71dbb43d177ae8e6ec173eaa9c6e2","modified":1593958072505},{"_id":"public/categories/JavaScript/Localization-with-resource-files-in-JavaScript-web-apps/index.html","hash":"eae9a77abab437806a40bb6c0dfc69f4e9241b65","modified":1593958072506},{"_id":"public/categories/Tools/TFS-DevOps-Delete-Remote-Workspace/index.html","hash":"12da3a753afbc101376ab0ca0ea737d16297d754","modified":1593958072506},{"_id":"public/categories/JavaScript/Better-Input-Change-Event/index.html","hash":"7c7d7104b60c6df3eb4deaafbeef0a81270d4017","modified":1593958072506},{"_id":"public/categories/Tools/Hexo-and-the-Dark-Mode-revised/index.html","hash":"31cb30510b486ed96a2f37996956405958b51ede","modified":1593958072506},{"_id":"public/categories/Tools/Hexo-and-the-Dark-Mode/index.html","hash":"3ce828067232b372a1adf0e3560e75a7e645af61","modified":1593958072506},{"_id":"public/categories/Tools/A-New-Blog-Blogging-and-Synching-en-route/index.html","hash":"793050289db89212c1fb50d35da47b4b44a41545","modified":1593958072506},{"_id":"public/categories/Tools/A-New-Blog-Customizing-Hexo/index.html","hash":"f220ab8564f34c382d785145d5ffd77c4e413a57","modified":1593958072506},{"_id":"public/categories/Tools/A-New-Blog-VS-Code-Hexo-and-GitHub-Pages/index.html","hash":"1eba23c57777902546bc13306e72b7bb000fc104","modified":1593958072506},{"_id":"public/categories/SQL/How-To-Visual-Studio-Database-Project-and-ADSI/index.html","hash":"fb9f644f7a7913ea3c9bbda3774a3c06b225f7f5","modified":1593958072506},{"_id":"public/categories/Test/hello-world/index.html","hash":"8996e7961f49ac4eca3d8fa86c7b318bdb45469e","modified":1593278830753},{"_id":"public/categories/Tools/index.html","hash":"d0a8be0381e0ad6a909bae930319fd97d2c31de8","modified":1593278830754},{"_id":"public/index.html","hash":"b45a9630699897e482a410b2484bb9791d1a37bc","modified":1593340878497},{"_id":"public/page/2/index.html","hash":"d69a1c7b7ebb202e172b3f6d0f2bdf7aa89b55c8","modified":1593278830754},{"_id":"public/archives/index.html","hash":"de22d7d168914765ecf2f2e2378452d2363c9fa3","modified":1593278830753},{"_id":"public/archives/2019/index.html","hash":"1530c37f6652813e0f45d4da3709f4aa7e0dae4e","modified":1593278830753},{"_id":"public/archives/2020/index.html","hash":"ff50cb0e60b15ce5870689ada6353642c9a7091b","modified":1593278830753},{"_id":"public/archives/2020/06/index.html","hash":"8d8b2e74dde9acf6dd319bbe0634c488eba1a203","modified":1593278830746},{"_id":"public/tags/Hexo/index.html","hash":"c1a585358131b7a184ead48999ae8f97221bc2bd","modified":1593278830754},{"_id":"public/tags/Blogging/index.html","hash":"002e0ee46d39b76d84da65230253666457368708","modified":1593278830754},{"_id":"public/tags/Visual-Studio/index.html","hash":"dcc24672a7a07c690a83035cec6d93196387f23d","modified":1593278830754},{"_id":"public/categories/uncategorized/hexo-new-title/index.html","hash":"ae63208721b3dc5e99eb5ef773706f65acd16c0d","modified":1593278679674},{"_id":"public/categories/C/index.html","hash":"d1d981060fd1801c50a9c26acb5759bb9912be36","modified":1593278830747},{"_id":"public/archives/page/2/index.html","hash":"1b8fd3a5c7048007bd9b0c3bb979d98f729e64af","modified":1593278830745},{"_id":"public/tags/Versioning/index.html","hash":"2edf5ea4ddc524588c986f2e5fc5a590cad2b724","modified":1593278830751},{"_id":"public/tags/T4/index.html","hash":"0564a37fe066dee255641fb9f319c165d437186f","modified":1593278830752},{"_id":"public/categories/C/Meaningful-automatic-versioning-with-T4/index.html","hash":"c7f8467ea9d8d8b961b6855eaf23835b8e361880","modified":1593958072505},{"_id":"public/page/3/index.html","hash":"e27795bef3deb3d611dba8f3da10d17d2b1339de","modified":1593278830747},{"_id":"public/fade-in-page/How To Fade Web Pages On Load And Unload (CSS + JS).url","hash":"73601bbce5a045ee20bbf511b173c1dacc274b7a","modified":1593278680026},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1593278680026},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1593278680026},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1593278680027},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1593278680027},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1593278680027},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1593278680027},{"_id":"public/hammer/jquery.hammer.js-master.zip","hash":"7dc454af368cdcdcc1e74eaf56eb10db9e7113f0","modified":1593278680027},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1593278680027},{"_id":"public/css/fonts/fa-regular-400.eot","hash":"1115185386ada5846eecc4e2e1f076ca7617e0cd","modified":1593278680027},{"_id":"public/css/fonts/fa-regular-400.ttf","hash":"5d5375ce3ae5b500df039da009ccdaca29d52fc0","modified":1593278680027},{"_id":"public/css/fonts/fa-regular-400.woff","hash":"7626840dab0e2ae37b2d16572a6f183a71a0dd73","modified":1593278680028},{"_id":"public/css/fonts/fa-regular-400.woff2","hash":"be142af0f56062f6e864de121b98054c7b5954fd","modified":1593278680028},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1593278680028},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1593278680028},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1593278680028},{"_id":"public/categories/Test/hello-world/kiko.io-icon.png","hash":"73425338777569a755bf5edd1f0181ccb885b0d0","modified":1593278680029},{"_id":"public/categories/Tools/A-New-Blog-VS-Code-Hexo-and-GitHub-Pages/github-1.png","hash":"0d7205cd5d4cc68648370e44c0f3c7142c8856fc","modified":1593278680029},{"_id":"public/categories/Tools/A-New-Blog-Blogging-and-Synching-en-route/ia-writer-1.png","hash":"927b4a925b800de8f74d8ba55058cf5228d064da","modified":1593278680029},{"_id":"public/categories/Tools/A-New-Blog-Blogging-and-Synching-en-route/icon-gitgraph.png","hash":"3d5709824fbb079cda392ce0d3d7f7e3de300d6c","modified":1593278680029},{"_id":"public/categories/Tools/A-New-Blog-Blogging-and-Synching-en-route/icon-gitlens.png","hash":"f32e95a715b6e6925d7da3d8d44947a826031ff9","modified":1593278680029},{"_id":"public/categories/Tools/A-New-Blog-Blogging-and-Synching-en-route/icon-markdown-all-in-one.png","hash":"04c4928624608d792725a597d73ca185342bd2de","modified":1593278680029},{"_id":"public/categories/Tools/A-New-Blog-Blogging-and-Synching-en-route/icon-markdownlint.png","hash":"bc56a54fc9699f81accd0ed48abb73748b736740","modified":1593278680030},{"_id":"public/categories/Tools/A-New-Blog-Blogging-and-Synching-en-route/icon-stylus.png","hash":"c6b07b0a3c899e0edd492e7fcc02daabb2ac9677","modified":1593278680030},{"_id":"public/categories/Tools/A-New-Blog-Blogging-and-Synching-en-route/icon-vscode-hexo.png","hash":"38940d56ab83d1e89a8830c4cf2e0b4f10117dbc","modified":1593278680030},{"_id":"public/categories/C/Meaningful-automatic-versioning-with-T4/AssemblyInformationDialog.png","hash":"acdf61fc09a1038ea00cc539a02e36f382ddf57d","modified":1593278680031},{"_id":"public/css/fonts/fa-brands-400.eot","hash":"7ed86fe71d4dc31d5edf492f7472d6fb88c3c3c9","modified":1593278689069},{"_id":"public/css/fonts/fa-brands-400.ttf","hash":"c5a1a93f668d15f55deac38b4728f8d901bd4748","modified":1593278689072},{"_id":"public/css/fonts/fa-brands-400.woff","hash":"6900998c1d878e73b2f9ac3a9a9746365d49a54f","modified":1593278689072},{"_id":"public/css/fonts/fa-brands-400.woff2","hash":"5fe986cda635681b4b6bbd6111df2f26d7fca286","modified":1593278689073},{"_id":"public/css/fonts/fa-solid-900.woff2","hash":"b2879f9e1d0985a96842bf7f55a2b2cc4c636d04","modified":1593278689073},{"_id":"public/css/fonts/fa-solid-900.woff","hash":"43dae5c2482bfb5d04d896529600eb621181103a","modified":1593278689073},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1593278689074},{"_id":"public/categories/Tools/A-New-Blog-Customizing-Hexo/vscode-1.png","hash":"e05c478c4bc9f1a82b7ca0e7779228b4afcc6cb8","modified":1593278689074},{"_id":"public/categories/Tools/A-New-Blog-VS-Code-Hexo-and-GitHub-Pages/vscode-1.png","hash":"7a24d1fd716f23eae5f47f6cce6b054097199729","modified":1593278689074},{"_id":"public/categories/Tools/A-New-Blog-VS-Code-Hexo-and-GitHub-Pages/vscode-2.png","hash":"58d269672ae3458cf69cee58963070a01da95d77","modified":1593278689074},{"_id":"public/fade-in-page/fade-in-page.css","hash":"63ac9915ca9c9af9c393339e9d186e34135bf813","modified":1593278689358},{"_id":"public/fade-in-page/fade-in-page.js","hash":"166ab3e39725811093c3ece119eddd53de759d7f","modified":1593278689358},{"_id":"public/fancybox/jquery.fancybox.css","hash":"a6033a1b77f51802caf63c92a281fb2cd33488a5","modified":1593278689359},{"_id":"public/hammer/jquery.hammer.js","hash":"656ceb73d6a0049a7319c28d608df4d3a71a9fdc","modified":1593278689359},{"_id":"public/js/barba-nextprev.js","hash":"a69c0e425b9f1e6729aea94adc11bb0a1da14fee","modified":1593278689359},{"_id":"public/js/dark-mode-toggle.js","hash":"767b16833fb248edfc67ca75cbd27e871e6705fc","modified":1593278689359},{"_id":"public/js/script.js","hash":"678ec80e30cff6648cd828afdf60d22cd3b62450","modified":1593278689360},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1593278689360},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1593278689360},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1593278689360},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1593278689360},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1593278689361},{"_id":"public/css/style.css","hash":"77b03ae0ef62bf1b65722f52273cb25ce4f8eed7","modified":1593278689361},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1593278689361},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1593278689362},{"_id":"public/hammer/hammer.min.js","hash":"f2de8453fccb34baf26d784afa965dbe8c0d1550","modified":1593278689362},{"_id":"public/hammer/hammer.js","hash":"6ad501abf050b143982f715d583d869d7bb8ac3b","modified":1593278689362},{"_id":"public/css/fonts/fa-regular-400.svg","hash":"dd1b42f8776d9b48adda30b0069aa0e5f18989d3","modified":1593278689362},{"_id":"public/css/fonts/fa-solid-900.ttf","hash":"40d9789010f6137e543e4d97025b867707d2f425","modified":1593278689363},{"_id":"public/css/fonts/fa-solid-900.eot","hash":"340ee70e87850176047733192ea8109dd6380082","modified":1593278689363},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"a275426daefd3716c53561fad121d258a7f05b47","modified":1593278689615},{"_id":"public/css/images/banner.jpg","hash":"ad0078065d8fcabb53f9a6b3a91b851d5a13eb54","modified":1593278689644},{"_id":"public/css/fonts/fa-brands-400.svg","hash":"3e9abaae5dc647f4019a4dcdde1b51f14c2054e8","modified":1593278690085},{"_id":"public/css/fonts/fa-solid-900.svg","hash":"55a9f6dd285c88c6c9847fee0d5ce127c4c61c52","modified":1593278690088},{"_id":"public/categories/Tools/Hexo-and-the-Dark-Mode/screen-recording-1.gif","hash":"6193bb7510265175743011adcfd3301f19b844b9","modified":1593278690092},{"_id":"public/pool/19-05 Israel-0661/meta.txt","hash":"e5638796658221e88806dfab4ecc75da022258e5","modified":1593278830050},{"_id":"public/pool/19-05 Israel-0661/mobile.jpg","hash":"7a36f568c8e4ce3d8fa734d13fc156681eafa91b","modified":1593278830053},{"_id":"public/pool/19-05 Israel-0661/normal.jpg","hash":"461f1a121277b7329b587d58c9055fb465d82388","modified":1593278830057},{"_id":"public/pool/19-05 Israel-0661/tablet.jpg","hash":"9674e7a670d1df263ecde13450c865b1c316a7e0","modified":1593278830485},{"_id":"source/_posts/Meaningful-automatic-versioning-with-T4/screencast-build.gif","hash":"4970fd69d840b63a7f5c966a13b1753a8fd00d37","modified":1593340464636},{"_id":"public/categories/C/Meaningful-automatic-versioning-with-T4/screencast-build.gif","hash":"4970fd69d840b63a7f5c966a13b1753a8fd00d37","modified":1593340878764},{"_id":"source/_posts/Meaningful-automatic-versioning-with-T4/BuildLog.png","hash":"c679ca31bcedd3b41ae0c1c5adbd07c14d14b57a","modified":1593353308024},{"_id":"source/_posts/Meaningful-automatic-versioning-with-T4/PostBuildEvent.png","hash":"0a96b1a2af99444308cc62437e2db34b36b15983","modified":1593357845105},{"_id":"source/_posts/Meaningful-automatic-versioning-with-T4/ChangeAssemblyInfo.png","hash":"a5a698dcfd89187f857ae3d516a2c45191d706c3","modified":1593347566537},{"_id":"source/_posts/Meaningful-automatic-versioning-with-T4/DuplicateAttributes.png","hash":"2e13cc633bf1a0facd43645e5057fc62df588940","modified":1593345322730},{"_id":"source/_posts/Meaningful-automatic-versioning-with-T4/screencast-build-hexocommander.gif","hash":"52534e67d51b75fdccdd9aea2e9b4072517489dd","modified":1593341725313},{"_id":"source/_posts/Meaningful-automatic-versioning-with-T4/screencast-build-hexocommander-ORIGINAL.gif","hash":"973b860593163492cd391295862421fa5b5036b6","modified":1593341269228},{"_id":"public/categories/C/Meaningful-automatic-versioning-with-T4/BuildLog.png","hash":"c679ca31bcedd3b41ae0c1c5adbd07c14d14b57a","modified":1593388061606},{"_id":"public/categories/C/Meaningful-automatic-versioning-with-T4/PostBuildEvent.png","hash":"0a96b1a2af99444308cc62437e2db34b36b15983","modified":1593388061606},{"_id":"public/categories/C/Meaningful-automatic-versioning-with-T4/DuplicateAttributes.png","hash":"2e13cc633bf1a0facd43645e5057fc62df588940","modified":1593388061612},{"_id":"public/categories/C/Meaningful-automatic-versioning-with-T4/ChangeAssemblyInfo.png","hash":"a5a698dcfd89187f857ae3d516a2c45191d706c3","modified":1593388061612},{"_id":"public/categories/C/Meaningful-automatic-versioning-with-T4/screencast-build-hexocommander.gif","hash":"52534e67d51b75fdccdd9aea2e9b4072517489dd","modified":1593388061724},{"_id":"public/categories/C/Meaningful-automatic-versioning-with-T4/screencast-build-hexocommander-ORIGINAL.gif","hash":"973b860593163492cd391295862421fa5b5036b6","modified":1593388062069}],"Category":[{"name":"Tools","_id":"ckbxwzill00028cl9tfjgxaah"},{"name":"JavaScript","_id":"ckbxwzim5000h8cl9q0qaws4i"},{"name":"SQL","_id":"ckbxwzimb000o8cl9jprbelp9"},{"name":"C#","_id":"ckbxwzimj00118cl9kyli0rct"},{"name":"Test","_id":"ckbxwziml00168cl9uol0553s"}],"Data":[],"Page":[],"Post":[{"title":"A New Blog: Blogging and Synching en route","subtitle":"Part Three of having fun with Hexo and GitHub Pages","photograph":{"file":"19-07 Schottland-0364.jpg","name":"Tiny Scots 5","link":"https://500px.com/photo/1002617359/Tiny-Scots-5-by-Kristof-Zerbe"},"series":"A New Blog","part":3,"date":"2019-09-30T22:00:00.000Z","_content":"\nI work with several devices, some Windows, some Android, and sometimes I have time to write on my articles at home (Notebook, Tablet), in my spare time in the office (Desktop, Laptop) or on my way to somewhere (Smartphone). Right now I'm am in a barber shop, waiting for my haircut and write these lines. So, wherever I am, I need the Hexo project locally, but in sync on a digital device.\n\nThe blog is synced via Dropbox, but hosted on GitHub Pages, so on every device I need the  publishing functions of Git too.\n\n<!-- more -->\n\n## Sync Hexo Project\n\nBest option for me to achieve this was  [Dropbox](https://dropbox.com). Another benefit on that is: I can work on the structure of the blog wherever I am and commit when the new feature or improvement is done, because all Git related files are always in sync too.\n\n## Writing, Editing and Publishing on Windows\n\nMy preferred editor is [Visual Studio Code](https://code.visualstudio.com/). Good file handling, easy writing, full Git integration and tons of other plugins and helpers. Chapeau Microsoft, well done.\n\nSome of the following VS Code plugins makes working with Hexo on GitHub pages a breeze:\n\n---\n\n[![vscode-hexo](A-New-Blog-Blogging-and-Synching-en-route/icon-vscode-hexo.png)]((https://marketplace.visualstudio.com/items?itemName=codeyu.vscode-hexo){.lefty})  \nAdds Hexo commands like ``init``, ``new``, ``generate``, ``server`` and ``clean`` to the VS Code command palette.\n\n---\n\n[![Markdown All in One](A-New-Blog-Blogging-and-Synching-en-route/icon-markdown-all-in-one.png)](https://marketplace.visualstudio.com/items?itemName=yzhang.markdown-all-in-one)  \nKeyboard shortcuts for basic formatting, automatic list editing, autocomlete for images,  table formatter and much more for an easier handling of Markdown.\n\n---\n\n[![markdownlint](A-New-Blog-Blogging-and-Synching-en-route/icon-markdownlint.png)](https://marketplace.visualstudio.com/items?itemName=DavidAnson.vscode-markdownlint)  \nMarkdown linting and style checking\n\n---\n\n[![Language Stylus](A-New-Blog-Blogging-and-Synching-en-route/icon-stylus.png)](https://marketplace.visualstudio.com/items?itemName=sysoev.language-stylus)  \nAdds syntax highlighting and code completion to Stylus files\n\n---\n\n[![GitLens](A-New-Blog-Blogging-and-Synching-en-route/icon-gitlens.png)](https://marketplace.visualstudio.com/items?itemName=sysoev.language-stylus)  \nComplete visual management of your repositories in VS Code\n\n---\n\n[![Git Graph](A-New-Blog-Blogging-and-Synching-en-route/icon-gitgraph.png)](https://marketplace.visualstudio.com/items?itemName=mhutchie.git-graph)  \nView a Git Graph of your repository with all changes and manage commits.\n\n---\n\nWith this editor and its helpers, I'm just two clicks away from publishing a new article or even a new version of the Hexo blog itself.\n\n## Writing on Android\n\nThere are a lot of Markdown editors available on Google Play, but one is outstanding: [iA Writer for Android](https://ia.net/writer/support/android). I can open my posts or drafts directly from Dropbox, without the need of any sychronization. Open, write, close, done.\n\n![iA Writer Android](A-New-Blog-Blogging-and-Synching-en-route/ia-writer-1.png)\n\n## Publishing on Android\n\nThere are some Git related Android apps out there, but no solution was satisfying. Furthermore, I didn't really need Git here, because I didn't want to have all source files on my smartphone. I'm working directly on the Dropbox stored MD files via iA Writer. Finally and most important, Git won't be enough, because before publishing, I have to run ``hexo generate``! Therefore some sort of automatic transfer from Dropbox to GitHub is also out of the game.\n\nWhat I needed, was to tell a server at a certain point of time 'Hey, please publish for me', using the only connection I have: Dropbox.\n\n### Introducing a Demon\n\nI have a little media server, running on Windows, and he is synchronizing some folders with Dropbox. He could do the job! After I installed all necessary packages, like NodeJS, Hexo and Git, I included the project folder into the sync. \n\nNext step was to design a so called **Hexo Command File**, a simple TXT file, which holds commands in single lines, extended with execution times, when they were successfully running.\n\n```properties\npostdraft: A-New-Blog-Blogging-and-Synching-en-route\npublish\nnewdraft: \"A New Blog: Blogging and Synching en route\" @ 2019-09-30 21:15\nregenerate @ 2019-09-29 16:40:01\npublish @ 2019-09-29 16:40:10\n```\n\nThese commands are predefined, because they bundle several real commands and I didn't want to deal with real commands, due to security reasons.\n\nThe unprocessed commands are standing at the top of the file (in execution order!) and parameters are separated from the command by a colon and delimited by commas.\n\n    <command>: [<param1>, ...] @ <execution time>\n\nNext step was to create a program to work as an executing demon, who monitors the Hexo Command File (synced by Dropbox) on my server and executes commands without execution dates.\n\nI decided to create a simple Console Application in C# and use the built-in [Windows Task Scheduler](https://en.wikipedia.org/wiki/Windows_Task_Scheduler) for running it every 2 minutes. The application is called **HexoCommander** and is [available at GitHub](https://github.com/kristofzerbe/HexoCommander).\n\nIt expects the Hexo Command File to be named ``hexo-commands.txt``, located in the same folder, and provides the following commands:\n\n**newdraft: \"&lt;title&gt;\"** ... runs\n\n1. ``hexo new draft \"<title>\"``\n\nCreates a new draft.\n\n**postdraft: \"&lt;filename without extension&gt;\"** ... runs\n\n1. ``hexo publish \"<filename without extension>\"``\n\nMakes a post out of a draft.\n\n**regenerate** ... runs\n\n1. ``hexo clean``\n2. ``hexo generate``\n\nWipes all Hexo static pages and generates them new.\n\n**publish** ... runs\n\n1. ``hexo generate``\n2. ``git add \"source/*\" \"docs/*\"``\n3. ``git commit -m \"Remote publication via HexoCommander\"``\n4. ``git push origin master``\n\nGenerates Hexo static pages, stage changes on drafts, posts and static pages, commits the changes with a generic message and pushes them to the server.\n\n### Running the demon\n\nI would have never expected, that the trickiest part was to get HexoCommander running via Windows Task Scheduler. What a mess! I finally find the solution [here](https://social.msdn.microsoft.com/Forums/SqlServer/en-US/29446adf-8304-4b9f-bbc4-95daf2941d53/program-runs-fine-but-task-scheduler-wont-run-it?forum=winserver2008appcompatabilityandcertification):\n\n1. Compile HexoCommander in a **x86** configuration\n\n2. Create a new task in Task Scheduler with\n   * **Trigger**\n     * Dialy\n     * Recur every 1 days\n     * Repeat task every 2 minutes for a duration of 1 day\n   * **Action**\n     * Program/Script: **%systemroot%\\Syswow64\\cmd.exe**\n     * Add Arguments: **/C \"C:\\MyPath\\HexoCommander.exe /workdir=C:\\MyPath\"**\n     * Start In: **%systemroot%\\Syswow64\\\\**\n\nBecause some executing commands in the chain are NOT 64-bit, I had to force Task Scheduler to run the 32-bit Command Shell in its own path (see 'Start In' and don't forget the closing backslash) and take the 32-bit compiled HexoCommander as argument after the parameter ```/C``` (forcing command to terminate), including its own argument for defining the real working directory. Mind bending, but works...\n\n---\n\n## Related\n\n* [A New Blog (Part One): VS Code, Hexo and GitHub Pages](/categories/Tools/A-New-Blog-VS-Code-Hexo-and-GitHub-Pages/)\n* [A New Blog (Part Two): Customizing Hexo](/categories/Tools/A-New-Blog-Customizing-Hexo/)","source":"_posts/A-New-Blog-Blogging-and-Synching-en-route.md","raw":"---\ntitle: 'A New Blog: Blogging and Synching en route'\nsubtitle: 'Part Three of having fun with Hexo and GitHub Pages'\nphotograph: \n  file: '19-07 Schottland-0364.jpg'\n  name: 'Tiny Scots 5'\n  link: 'https://500px.com/photo/1002617359/Tiny-Scots-5-by-Kristof-Zerbe'\nseries: 'A New Blog'\npart: 3\ndate: 2019-10-01\ntags:\n  - VS Code\n  - Hexo\n  - GitHub\n  - Blogging\ncategories:\n  - Tools\n---\n\nI work with several devices, some Windows, some Android, and sometimes I have time to write on my articles at home (Notebook, Tablet), in my spare time in the office (Desktop, Laptop) or on my way to somewhere (Smartphone). Right now I'm am in a barber shop, waiting for my haircut and write these lines. So, wherever I am, I need the Hexo project locally, but in sync on a digital device.\n\nThe blog is synced via Dropbox, but hosted on GitHub Pages, so on every device I need the  publishing functions of Git too.\n\n<!-- more -->\n\n## Sync Hexo Project\n\nBest option for me to achieve this was  [Dropbox](https://dropbox.com). Another benefit on that is: I can work on the structure of the blog wherever I am and commit when the new feature or improvement is done, because all Git related files are always in sync too.\n\n## Writing, Editing and Publishing on Windows\n\nMy preferred editor is [Visual Studio Code](https://code.visualstudio.com/). Good file handling, easy writing, full Git integration and tons of other plugins and helpers. Chapeau Microsoft, well done.\n\nSome of the following VS Code plugins makes working with Hexo on GitHub pages a breeze:\n\n---\n\n[![vscode-hexo](A-New-Blog-Blogging-and-Synching-en-route/icon-vscode-hexo.png)]((https://marketplace.visualstudio.com/items?itemName=codeyu.vscode-hexo){.lefty})  \nAdds Hexo commands like ``init``, ``new``, ``generate``, ``server`` and ``clean`` to the VS Code command palette.\n\n---\n\n[![Markdown All in One](A-New-Blog-Blogging-and-Synching-en-route/icon-markdown-all-in-one.png)](https://marketplace.visualstudio.com/items?itemName=yzhang.markdown-all-in-one)  \nKeyboard shortcuts for basic formatting, automatic list editing, autocomlete for images,  table formatter and much more for an easier handling of Markdown.\n\n---\n\n[![markdownlint](A-New-Blog-Blogging-and-Synching-en-route/icon-markdownlint.png)](https://marketplace.visualstudio.com/items?itemName=DavidAnson.vscode-markdownlint)  \nMarkdown linting and style checking\n\n---\n\n[![Language Stylus](A-New-Blog-Blogging-and-Synching-en-route/icon-stylus.png)](https://marketplace.visualstudio.com/items?itemName=sysoev.language-stylus)  \nAdds syntax highlighting and code completion to Stylus files\n\n---\n\n[![GitLens](A-New-Blog-Blogging-and-Synching-en-route/icon-gitlens.png)](https://marketplace.visualstudio.com/items?itemName=sysoev.language-stylus)  \nComplete visual management of your repositories in VS Code\n\n---\n\n[![Git Graph](A-New-Blog-Blogging-and-Synching-en-route/icon-gitgraph.png)](https://marketplace.visualstudio.com/items?itemName=mhutchie.git-graph)  \nView a Git Graph of your repository with all changes and manage commits.\n\n---\n\nWith this editor and its helpers, I'm just two clicks away from publishing a new article or even a new version of the Hexo blog itself.\n\n## Writing on Android\n\nThere are a lot of Markdown editors available on Google Play, but one is outstanding: [iA Writer for Android](https://ia.net/writer/support/android). I can open my posts or drafts directly from Dropbox, without the need of any sychronization. Open, write, close, done.\n\n![iA Writer Android](A-New-Blog-Blogging-and-Synching-en-route/ia-writer-1.png)\n\n## Publishing on Android\n\nThere are some Git related Android apps out there, but no solution was satisfying. Furthermore, I didn't really need Git here, because I didn't want to have all source files on my smartphone. I'm working directly on the Dropbox stored MD files via iA Writer. Finally and most important, Git won't be enough, because before publishing, I have to run ``hexo generate``! Therefore some sort of automatic transfer from Dropbox to GitHub is also out of the game.\n\nWhat I needed, was to tell a server at a certain point of time 'Hey, please publish for me', using the only connection I have: Dropbox.\n\n### Introducing a Demon\n\nI have a little media server, running on Windows, and he is synchronizing some folders with Dropbox. He could do the job! After I installed all necessary packages, like NodeJS, Hexo and Git, I included the project folder into the sync. \n\nNext step was to design a so called **Hexo Command File**, a simple TXT file, which holds commands in single lines, extended with execution times, when they were successfully running.\n\n```properties\npostdraft: A-New-Blog-Blogging-and-Synching-en-route\npublish\nnewdraft: \"A New Blog: Blogging and Synching en route\" @ 2019-09-30 21:15\nregenerate @ 2019-09-29 16:40:01\npublish @ 2019-09-29 16:40:10\n```\n\nThese commands are predefined, because they bundle several real commands and I didn't want to deal with real commands, due to security reasons.\n\nThe unprocessed commands are standing at the top of the file (in execution order!) and parameters are separated from the command by a colon and delimited by commas.\n\n    <command>: [<param1>, ...] @ <execution time>\n\nNext step was to create a program to work as an executing demon, who monitors the Hexo Command File (synced by Dropbox) on my server and executes commands without execution dates.\n\nI decided to create a simple Console Application in C# and use the built-in [Windows Task Scheduler](https://en.wikipedia.org/wiki/Windows_Task_Scheduler) for running it every 2 minutes. The application is called **HexoCommander** and is [available at GitHub](https://github.com/kristofzerbe/HexoCommander).\n\nIt expects the Hexo Command File to be named ``hexo-commands.txt``, located in the same folder, and provides the following commands:\n\n**newdraft: \"&lt;title&gt;\"** ... runs\n\n1. ``hexo new draft \"<title>\"``\n\nCreates a new draft.\n\n**postdraft: \"&lt;filename without extension&gt;\"** ... runs\n\n1. ``hexo publish \"<filename without extension>\"``\n\nMakes a post out of a draft.\n\n**regenerate** ... runs\n\n1. ``hexo clean``\n2. ``hexo generate``\n\nWipes all Hexo static pages and generates them new.\n\n**publish** ... runs\n\n1. ``hexo generate``\n2. ``git add \"source/*\" \"docs/*\"``\n3. ``git commit -m \"Remote publication via HexoCommander\"``\n4. ``git push origin master``\n\nGenerates Hexo static pages, stage changes on drafts, posts and static pages, commits the changes with a generic message and pushes them to the server.\n\n### Running the demon\n\nI would have never expected, that the trickiest part was to get HexoCommander running via Windows Task Scheduler. What a mess! I finally find the solution [here](https://social.msdn.microsoft.com/Forums/SqlServer/en-US/29446adf-8304-4b9f-bbc4-95daf2941d53/program-runs-fine-but-task-scheduler-wont-run-it?forum=winserver2008appcompatabilityandcertification):\n\n1. Compile HexoCommander in a **x86** configuration\n\n2. Create a new task in Task Scheduler with\n   * **Trigger**\n     * Dialy\n     * Recur every 1 days\n     * Repeat task every 2 minutes for a duration of 1 day\n   * **Action**\n     * Program/Script: **%systemroot%\\Syswow64\\cmd.exe**\n     * Add Arguments: **/C \"C:\\MyPath\\HexoCommander.exe /workdir=C:\\MyPath\"**\n     * Start In: **%systemroot%\\Syswow64\\\\**\n\nBecause some executing commands in the chain are NOT 64-bit, I had to force Task Scheduler to run the 32-bit Command Shell in its own path (see 'Start In' and don't forget the closing backslash) and take the 32-bit compiled HexoCommander as argument after the parameter ```/C``` (forcing command to terminate), including its own argument for defining the real working directory. Mind bending, but works...\n\n---\n\n## Related\n\n* [A New Blog (Part One): VS Code, Hexo and GitHub Pages](/categories/Tools/A-New-Blog-VS-Code-Hexo-and-GitHub-Pages/)\n* [A New Blog (Part Two): Customizing Hexo](/categories/Tools/A-New-Blog-Customizing-Hexo/)","slug":"A-New-Blog-Blogging-and-Synching-en-route","published":1,"updated":"2020-06-22T12:23:19.197Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckbxwzild00008cl92kde96dz","content":"<p>I work with several devices, some Windows, some Android, and sometimes I have time to write on my articles at home (Notebook, Tablet), in my spare time in the office (Desktop, Laptop) or on my way to somewhere (Smartphone). Right now I’m am in a barber shop, waiting for my haircut and write these lines. So, wherever I am, I need the Hexo project locally, but in sync on a digital device.</p>\n<p>The blog is synced via Dropbox, but hosted on GitHub Pages, so on every device I need the  publishing functions of Git too.</p>\n<a id=\"more\"></a>\n\n<h2 id=\"Sync-Hexo-Project\"><a href=\"#Sync-Hexo-Project\" class=\"headerlink\" title=\"Sync Hexo Project\"></a>Sync Hexo Project</h2><p>Best option for me to achieve this was  <a href=\"https://dropbox.com\" target=\"_blank\" rel=\"noopener\">Dropbox</a>. Another benefit on that is: I can work on the structure of the blog wherever I am and commit when the new feature or improvement is done, because all Git related files are always in sync too.</p>\n<h2 id=\"Writing-Editing-and-Publishing-on-Windows\"><a href=\"#Writing-Editing-and-Publishing-on-Windows\" class=\"headerlink\" title=\"Writing, Editing and Publishing on Windows\"></a>Writing, Editing and Publishing on Windows</h2><p>My preferred editor is <a href=\"https://code.visualstudio.com/\" target=\"_blank\" rel=\"noopener\">Visual Studio Code</a>. Good file handling, easy writing, full Git integration and tons of other plugins and helpers. Chapeau Microsoft, well done.</p>\n<p>Some of the following VS Code plugins makes working with Hexo on GitHub pages a breeze:</p>\n<hr>\n<p><a href=\"/categories/Tools/A-New-Blog-Blogging-and-Synching-en-route//marketplace.visualstudio.com/items?itemName=codeyu.vscode-hexo){.lefty}\"><img src=\"/categories/Tools/A-New-Blog-Blogging-and-Synching-en-route/icon-vscode-hexo.png\" alt=\"vscode-hexo\"></a><br>Adds Hexo commands like <code>init</code>, <code>new</code>, <code>generate</code>, <code>server</code> and <code>clean</code> to the VS Code command palette.</p>\n<hr>\n<p><a href=\"https://marketplace.visualstudio.com/items?itemName=yzhang.markdown-all-in-one\" target=\"_blank\" rel=\"noopener\"><img src=\"/categories/Tools/A-New-Blog-Blogging-and-Synching-en-route/icon-markdown-all-in-one.png\" alt=\"Markdown All in One\"></a><br>Keyboard shortcuts for basic formatting, automatic list editing, autocomlete for images,  table formatter and much more for an easier handling of Markdown.</p>\n<hr>\n<p><a href=\"https://marketplace.visualstudio.com/items?itemName=DavidAnson.vscode-markdownlint\" target=\"_blank\" rel=\"noopener\"><img src=\"/categories/Tools/A-New-Blog-Blogging-and-Synching-en-route/icon-markdownlint.png\" alt=\"markdownlint\"></a><br>Markdown linting and style checking</p>\n<hr>\n<p><a href=\"https://marketplace.visualstudio.com/items?itemName=sysoev.language-stylus\" target=\"_blank\" rel=\"noopener\"><img src=\"/categories/Tools/A-New-Blog-Blogging-and-Synching-en-route/icon-stylus.png\" alt=\"Language Stylus\"></a><br>Adds syntax highlighting and code completion to Stylus files</p>\n<hr>\n<p><a href=\"https://marketplace.visualstudio.com/items?itemName=sysoev.language-stylus\" target=\"_blank\" rel=\"noopener\"><img src=\"/categories/Tools/A-New-Blog-Blogging-and-Synching-en-route/icon-gitlens.png\" alt=\"GitLens\"></a><br>Complete visual management of your repositories in VS Code</p>\n<hr>\n<p><a href=\"https://marketplace.visualstudio.com/items?itemName=mhutchie.git-graph\" target=\"_blank\" rel=\"noopener\"><img src=\"/categories/Tools/A-New-Blog-Blogging-and-Synching-en-route/icon-gitgraph.png\" alt=\"Git Graph\"></a><br>View a Git Graph of your repository with all changes and manage commits.</p>\n<hr>\n<p>With this editor and its helpers, I’m just two clicks away from publishing a new article or even a new version of the Hexo blog itself.</p>\n<h2 id=\"Writing-on-Android\"><a href=\"#Writing-on-Android\" class=\"headerlink\" title=\"Writing on Android\"></a>Writing on Android</h2><p>There are a lot of Markdown editors available on Google Play, but one is outstanding: <a href=\"https://ia.net/writer/support/android\" target=\"_blank\" rel=\"noopener\">iA Writer for Android</a>. I can open my posts or drafts directly from Dropbox, without the need of any sychronization. Open, write, close, done.</p>\n<p><img src=\"/categories/Tools/A-New-Blog-Blogging-and-Synching-en-route/ia-writer-1.png\" alt=\"iA Writer Android\"></p>\n<h2 id=\"Publishing-on-Android\"><a href=\"#Publishing-on-Android\" class=\"headerlink\" title=\"Publishing on Android\"></a>Publishing on Android</h2><p>There are some Git related Android apps out there, but no solution was satisfying. Furthermore, I didn’t really need Git here, because I didn’t want to have all source files on my smartphone. I’m working directly on the Dropbox stored MD files via iA Writer. Finally and most important, Git won’t be enough, because before publishing, I have to run <code>hexo generate</code>! Therefore some sort of automatic transfer from Dropbox to GitHub is also out of the game.</p>\n<p>What I needed, was to tell a server at a certain point of time ‘Hey, please publish for me’, using the only connection I have: Dropbox.</p>\n<h3 id=\"Introducing-a-Demon\"><a href=\"#Introducing-a-Demon\" class=\"headerlink\" title=\"Introducing a Demon\"></a>Introducing a Demon</h3><p>I have a little media server, running on Windows, and he is synchronizing some folders with Dropbox. He could do the job! After I installed all necessary packages, like NodeJS, Hexo and Git, I included the project folder into the sync. </p>\n<p>Next step was to design a so called <strong>Hexo Command File</strong>, a simple TXT file, which holds commands in single lines, extended with execution times, when they were successfully running.</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">postdraft</span>: <span class=\"string\">A-New-Blog-Blogging-and-Synching-en-route</span></span><br><span class=\"line\"><span class=\"attr\">publish</span></span><br><span class=\"line\"><span class=\"attr\">newdraft</span>: <span class=\"string\">\"A New Blog: Blogging and Synching en route\" @ 2019-09-30 21:15</span></span><br><span class=\"line\"><span class=\"attr\">regenerate</span> <span class=\"string\">@ 2019-09-29 16:40:01</span></span><br><span class=\"line\"><span class=\"attr\">publish</span> <span class=\"string\">@ 2019-09-29 16:40:10</span></span><br></pre></td></tr></table></figure>\n\n<p>These commands are predefined, because they bundle several real commands and I didn’t want to deal with real commands, due to security reasons.</p>\n<p>The unprocessed commands are standing at the top of the file (in execution order!) and parameters are separated from the command by a colon and delimited by commas.</p>\n<pre><code>&lt;command&gt;: [&lt;param1&gt;, ...] @ &lt;execution time&gt;</code></pre><p>Next step was to create a program to work as an executing demon, who monitors the Hexo Command File (synced by Dropbox) on my server and executes commands without execution dates.</p>\n<p>I decided to create a simple Console Application in C# and use the built-in <a href=\"https://en.wikipedia.org/wiki/Windows_Task_Scheduler\" target=\"_blank\" rel=\"noopener\">Windows Task Scheduler</a> for running it every 2 minutes. The application is called <strong>HexoCommander</strong> and is <a href=\"https://github.com/kristofzerbe/HexoCommander\" target=\"_blank\" rel=\"noopener\">available at GitHub</a>.</p>\n<p>It expects the Hexo Command File to be named <code>hexo-commands.txt</code>, located in the same folder, and provides the following commands:</p>\n<p><strong>newdraft: “&lt;title&gt;”</strong> … runs</p>\n<ol>\n<li><code>hexo new draft &quot;&lt;title&gt;&quot;</code></li>\n</ol>\n<p>Creates a new draft.</p>\n<p><strong>postdraft: “&lt;filename without extension&gt;”</strong> … runs</p>\n<ol>\n<li><code>hexo publish &quot;&lt;filename without extension&gt;&quot;</code></li>\n</ol>\n<p>Makes a post out of a draft.</p>\n<p><strong>regenerate</strong> … runs</p>\n<ol>\n<li><code>hexo clean</code></li>\n<li><code>hexo generate</code></li>\n</ol>\n<p>Wipes all Hexo static pages and generates them new.</p>\n<p><strong>publish</strong> … runs</p>\n<ol>\n<li><code>hexo generate</code></li>\n<li><code>git add &quot;source/*&quot; &quot;docs/*&quot;</code></li>\n<li><code>git commit -m &quot;Remote publication via HexoCommander&quot;</code></li>\n<li><code>git push origin master</code></li>\n</ol>\n<p>Generates Hexo static pages, stage changes on drafts, posts and static pages, commits the changes with a generic message and pushes them to the server.</p>\n<h3 id=\"Running-the-demon\"><a href=\"#Running-the-demon\" class=\"headerlink\" title=\"Running the demon\"></a>Running the demon</h3><p>I would have never expected, that the trickiest part was to get HexoCommander running via Windows Task Scheduler. What a mess! I finally find the solution <a href=\"https://social.msdn.microsoft.com/Forums/SqlServer/en-US/29446adf-8304-4b9f-bbc4-95daf2941d53/program-runs-fine-but-task-scheduler-wont-run-it?forum=winserver2008appcompatabilityandcertification\" target=\"_blank\" rel=\"noopener\">here</a>:</p>\n<ol>\n<li><p>Compile HexoCommander in a <strong>x86</strong> configuration</p>\n</li>\n<li><p>Create a new task in Task Scheduler with</p>\n<ul>\n<li><strong>Trigger</strong><ul>\n<li>Dialy</li>\n<li>Recur every 1 days</li>\n<li>Repeat task every 2 minutes for a duration of 1 day</li>\n</ul>\n</li>\n<li><strong>Action</strong><ul>\n<li>Program/Script: <strong>%systemroot%\\Syswow64\\cmd.exe</strong></li>\n<li>Add Arguments: <strong>/C “C:\\MyPath\\HexoCommander.exe /workdir=C:\\MyPath”</strong></li>\n<li>Start In: <strong>%systemroot%\\Syswow64\\</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<p>Because some executing commands in the chain are NOT 64-bit, I had to force Task Scheduler to run the 32-bit Command Shell in its own path (see ‘Start In’ and don’t forget the closing backslash) and take the 32-bit compiled HexoCommander as argument after the parameter <code>/C</code> (forcing command to terminate), including its own argument for defining the real working directory. Mind bending, but works…</p>\n<hr>\n<h2 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h2><ul>\n<li><a href=\"/categories/Tools/A-New-Blog-VS-Code-Hexo-and-GitHub-Pages/\">A New Blog (Part One): VS Code, Hexo and GitHub Pages</a></li>\n<li><a href=\"/categories/Tools/A-New-Blog-Customizing-Hexo/\">A New Blog (Part Two): Customizing Hexo</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>I work with several devices, some Windows, some Android, and sometimes I have time to write on my articles at home (Notebook, Tablet), in my spare time in the office (Desktop, Laptop) or on my way to somewhere (Smartphone). Right now I’m am in a barber shop, waiting for my haircut and write these lines. So, wherever I am, I need the Hexo project locally, but in sync on a digital device.</p>\n<p>The blog is synced via Dropbox, but hosted on GitHub Pages, so on every device I need the  publishing functions of Git too.</p>","more":"<h2 id=\"Sync-Hexo-Project\"><a href=\"#Sync-Hexo-Project\" class=\"headerlink\" title=\"Sync Hexo Project\"></a>Sync Hexo Project</h2><p>Best option for me to achieve this was  <a href=\"https://dropbox.com\" target=\"_blank\" rel=\"noopener\">Dropbox</a>. Another benefit on that is: I can work on the structure of the blog wherever I am and commit when the new feature or improvement is done, because all Git related files are always in sync too.</p>\n<h2 id=\"Writing-Editing-and-Publishing-on-Windows\"><a href=\"#Writing-Editing-and-Publishing-on-Windows\" class=\"headerlink\" title=\"Writing, Editing and Publishing on Windows\"></a>Writing, Editing and Publishing on Windows</h2><p>My preferred editor is <a href=\"https://code.visualstudio.com/\" target=\"_blank\" rel=\"noopener\">Visual Studio Code</a>. Good file handling, easy writing, full Git integration and tons of other plugins and helpers. Chapeau Microsoft, well done.</p>\n<p>Some of the following VS Code plugins makes working with Hexo on GitHub pages a breeze:</p>\n<hr>\n<p><a href=\"/categories/Tools/A-New-Blog-Blogging-and-Synching-en-route//marketplace.visualstudio.com/items?itemName=codeyu.vscode-hexo){.lefty}\"><img src=\"/categories/Tools/A-New-Blog-Blogging-and-Synching-en-route/icon-vscode-hexo.png\" alt=\"vscode-hexo\"></a><br>Adds Hexo commands like <code>init</code>, <code>new</code>, <code>generate</code>, <code>server</code> and <code>clean</code> to the VS Code command palette.</p>\n<hr>\n<p><a href=\"https://marketplace.visualstudio.com/items?itemName=yzhang.markdown-all-in-one\" target=\"_blank\" rel=\"noopener\"><img src=\"/categories/Tools/A-New-Blog-Blogging-and-Synching-en-route/icon-markdown-all-in-one.png\" alt=\"Markdown All in One\"></a><br>Keyboard shortcuts for basic formatting, automatic list editing, autocomlete for images,  table formatter and much more for an easier handling of Markdown.</p>\n<hr>\n<p><a href=\"https://marketplace.visualstudio.com/items?itemName=DavidAnson.vscode-markdownlint\" target=\"_blank\" rel=\"noopener\"><img src=\"/categories/Tools/A-New-Blog-Blogging-and-Synching-en-route/icon-markdownlint.png\" alt=\"markdownlint\"></a><br>Markdown linting and style checking</p>\n<hr>\n<p><a href=\"https://marketplace.visualstudio.com/items?itemName=sysoev.language-stylus\" target=\"_blank\" rel=\"noopener\"><img src=\"/categories/Tools/A-New-Blog-Blogging-and-Synching-en-route/icon-stylus.png\" alt=\"Language Stylus\"></a><br>Adds syntax highlighting and code completion to Stylus files</p>\n<hr>\n<p><a href=\"https://marketplace.visualstudio.com/items?itemName=sysoev.language-stylus\" target=\"_blank\" rel=\"noopener\"><img src=\"/categories/Tools/A-New-Blog-Blogging-and-Synching-en-route/icon-gitlens.png\" alt=\"GitLens\"></a><br>Complete visual management of your repositories in VS Code</p>\n<hr>\n<p><a href=\"https://marketplace.visualstudio.com/items?itemName=mhutchie.git-graph\" target=\"_blank\" rel=\"noopener\"><img src=\"/categories/Tools/A-New-Blog-Blogging-and-Synching-en-route/icon-gitgraph.png\" alt=\"Git Graph\"></a><br>View a Git Graph of your repository with all changes and manage commits.</p>\n<hr>\n<p>With this editor and its helpers, I’m just two clicks away from publishing a new article or even a new version of the Hexo blog itself.</p>\n<h2 id=\"Writing-on-Android\"><a href=\"#Writing-on-Android\" class=\"headerlink\" title=\"Writing on Android\"></a>Writing on Android</h2><p>There are a lot of Markdown editors available on Google Play, but one is outstanding: <a href=\"https://ia.net/writer/support/android\" target=\"_blank\" rel=\"noopener\">iA Writer for Android</a>. I can open my posts or drafts directly from Dropbox, without the need of any sychronization. Open, write, close, done.</p>\n<p><img src=\"/categories/Tools/A-New-Blog-Blogging-and-Synching-en-route/ia-writer-1.png\" alt=\"iA Writer Android\"></p>\n<h2 id=\"Publishing-on-Android\"><a href=\"#Publishing-on-Android\" class=\"headerlink\" title=\"Publishing on Android\"></a>Publishing on Android</h2><p>There are some Git related Android apps out there, but no solution was satisfying. Furthermore, I didn’t really need Git here, because I didn’t want to have all source files on my smartphone. I’m working directly on the Dropbox stored MD files via iA Writer. Finally and most important, Git won’t be enough, because before publishing, I have to run <code>hexo generate</code>! Therefore some sort of automatic transfer from Dropbox to GitHub is also out of the game.</p>\n<p>What I needed, was to tell a server at a certain point of time ‘Hey, please publish for me’, using the only connection I have: Dropbox.</p>\n<h3 id=\"Introducing-a-Demon\"><a href=\"#Introducing-a-Demon\" class=\"headerlink\" title=\"Introducing a Demon\"></a>Introducing a Demon</h3><p>I have a little media server, running on Windows, and he is synchronizing some folders with Dropbox. He could do the job! After I installed all necessary packages, like NodeJS, Hexo and Git, I included the project folder into the sync. </p>\n<p>Next step was to design a so called <strong>Hexo Command File</strong>, a simple TXT file, which holds commands in single lines, extended with execution times, when they were successfully running.</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">postdraft</span>: <span class=\"string\">A-New-Blog-Blogging-and-Synching-en-route</span></span><br><span class=\"line\"><span class=\"attr\">publish</span></span><br><span class=\"line\"><span class=\"attr\">newdraft</span>: <span class=\"string\">\"A New Blog: Blogging and Synching en route\" @ 2019-09-30 21:15</span></span><br><span class=\"line\"><span class=\"attr\">regenerate</span> <span class=\"string\">@ 2019-09-29 16:40:01</span></span><br><span class=\"line\"><span class=\"attr\">publish</span> <span class=\"string\">@ 2019-09-29 16:40:10</span></span><br></pre></td></tr></table></figure>\n\n<p>These commands are predefined, because they bundle several real commands and I didn’t want to deal with real commands, due to security reasons.</p>\n<p>The unprocessed commands are standing at the top of the file (in execution order!) and parameters are separated from the command by a colon and delimited by commas.</p>\n<pre><code>&lt;command&gt;: [&lt;param1&gt;, ...] @ &lt;execution time&gt;</code></pre><p>Next step was to create a program to work as an executing demon, who monitors the Hexo Command File (synced by Dropbox) on my server and executes commands without execution dates.</p>\n<p>I decided to create a simple Console Application in C# and use the built-in <a href=\"https://en.wikipedia.org/wiki/Windows_Task_Scheduler\" target=\"_blank\" rel=\"noopener\">Windows Task Scheduler</a> for running it every 2 minutes. The application is called <strong>HexoCommander</strong> and is <a href=\"https://github.com/kristofzerbe/HexoCommander\" target=\"_blank\" rel=\"noopener\">available at GitHub</a>.</p>\n<p>It expects the Hexo Command File to be named <code>hexo-commands.txt</code>, located in the same folder, and provides the following commands:</p>\n<p><strong>newdraft: “&lt;title&gt;”</strong> … runs</p>\n<ol>\n<li><code>hexo new draft &quot;&lt;title&gt;&quot;</code></li>\n</ol>\n<p>Creates a new draft.</p>\n<p><strong>postdraft: “&lt;filename without extension&gt;”</strong> … runs</p>\n<ol>\n<li><code>hexo publish &quot;&lt;filename without extension&gt;&quot;</code></li>\n</ol>\n<p>Makes a post out of a draft.</p>\n<p><strong>regenerate</strong> … runs</p>\n<ol>\n<li><code>hexo clean</code></li>\n<li><code>hexo generate</code></li>\n</ol>\n<p>Wipes all Hexo static pages and generates them new.</p>\n<p><strong>publish</strong> … runs</p>\n<ol>\n<li><code>hexo generate</code></li>\n<li><code>git add &quot;source/*&quot; &quot;docs/*&quot;</code></li>\n<li><code>git commit -m &quot;Remote publication via HexoCommander&quot;</code></li>\n<li><code>git push origin master</code></li>\n</ol>\n<p>Generates Hexo static pages, stage changes on drafts, posts and static pages, commits the changes with a generic message and pushes them to the server.</p>\n<h3 id=\"Running-the-demon\"><a href=\"#Running-the-demon\" class=\"headerlink\" title=\"Running the demon\"></a>Running the demon</h3><p>I would have never expected, that the trickiest part was to get HexoCommander running via Windows Task Scheduler. What a mess! I finally find the solution <a href=\"https://social.msdn.microsoft.com/Forums/SqlServer/en-US/29446adf-8304-4b9f-bbc4-95daf2941d53/program-runs-fine-but-task-scheduler-wont-run-it?forum=winserver2008appcompatabilityandcertification\" target=\"_blank\" rel=\"noopener\">here</a>:</p>\n<ol>\n<li><p>Compile HexoCommander in a <strong>x86</strong> configuration</p>\n</li>\n<li><p>Create a new task in Task Scheduler with</p>\n<ul>\n<li><strong>Trigger</strong><ul>\n<li>Dialy</li>\n<li>Recur every 1 days</li>\n<li>Repeat task every 2 minutes for a duration of 1 day</li>\n</ul>\n</li>\n<li><strong>Action</strong><ul>\n<li>Program/Script: <strong>%systemroot%\\Syswow64\\cmd.exe</strong></li>\n<li>Add Arguments: <strong>/C “C:\\MyPath\\HexoCommander.exe /workdir=C:\\MyPath”</strong></li>\n<li>Start In: <strong>%systemroot%\\Syswow64\\</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<p>Because some executing commands in the chain are NOT 64-bit, I had to force Task Scheduler to run the 32-bit Command Shell in its own path (see ‘Start In’ and don’t forget the closing backslash) and take the 32-bit compiled HexoCommander as argument after the parameter <code>/C</code> (forcing command to terminate), including its own argument for defining the real working directory. Mind bending, but works…</p>\n<hr>\n<h2 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h2><ul>\n<li><a href=\"/categories/Tools/A-New-Blog-VS-Code-Hexo-and-GitHub-Pages/\">A New Blog (Part One): VS Code, Hexo and GitHub Pages</a></li>\n<li><a href=\"/categories/Tools/A-New-Blog-Customizing-Hexo/\">A New Blog (Part Two): Customizing Hexo</a></li>\n</ul>"},{"title":"A New Blog: Customizing Hexo","subtitle":"Part Two of having fun with Hexo and GitHub Pages","photograph":{"file":"19-07 Schottland-0198.jpg","name":"Thistle Fence","link":"https://500px.com/photo/1005489951/Thistle-Fence-by-Kristof-Zerbe"},"series":"A New Blog","part":2,"date":"2019-09-24T22:00:00.000Z","updated":"2019-09-25T22:00:00.000Z","_content":"\nHexo is a great tool to get quick results (see [Part One of this series](/categories/Tools/A-New-Blog-VS-Code-Hexo-and-GitHub-Pages/)), when you decide to have a blog and its defaults are practical, but it's power lies in the possiblities of customization via plugins. On the [official plugin page](https://hexo.io/plugins/index.html), there are actually 302 plugins listed, but there are many more and no wish will be unsatisfied.\n\nI will show you which of these I found worth to work with...\n<!-- more -->\n\n### Relative Image Path\n\nThe build-in way to include images in your posts works fine, but it is a little aside the normal way to declare images in Markdown. The plugin [Hexo Asset Link] corrects that. After installing via ``npm install hexo-asset-link --save`` you can write this:\n\n    ![Test Image](hello-world/image-1.png)\n\nThe best is, that VS Code's Markdown can now show the image.\n\n---\n\n**UPDATE**:  \nActually the plugin [destroys external links](https://github.com/liolok/hexo-asset-link/issues/3), so don't use it until this is fixed ... or go to **node_modules** &gt; **hexo-asset-link** &gt; **index.js** in your project and change in line 22 ``protocal`` to ``protocol``.\n\n**UPDATE from Update**:  \n[liolok](https://github.com/liolok), the author of the plugin has merged my pull request and published a new new version without the typo. It works now as expected.\n\n---\n\n### Hide Posts\n\nA new Hexo project comes with a sample post called ``Hello World``. This is fine to play around with, but you don't want to publish it. Here comes a Hexo plugin to the rescue called [Hexo Hide Posts](https://github.com/printempw/hexo-hide-posts). After installing, you just have to write ``hidden: true`` to the Front Matter of you post and it won't be shown on the blog, but it is still available by URL.\n\n### Static Files\n\nHexo has the concept of [Assets Folders](https://hexo.io/docs/asset-folders), but for static files, beside article based files, I find it more useful to have a STATIC folder and copy the contents on every build into the publish folder. A good helper for this approach is the plugin [Hexo Generator Copy](https://github.com/niahoo/hexo-generator-copy). Install it by running ``npm install hexo-generator-copy --save`` and add ``static_dir: static`` to your ``_config.yml`` and you are done.\n\n    ![Hexo Static Files](A-New-Blog-Customizing-Hexo/vscode-1.png)\n\n### Feed\n\nThe default Hexo layout has an Atom Feed icon in the upper right corner, but strangely no feed file is generated on build. You need to install the plugin [Hexo Feed Generator](https://github.com/hexojs/hexo-generator-feed) to fix this, by running ``npm install hexo-generator-feed --save`` and copy following section into the ``_config.yml``:\n\n```yaml\nfeed:\n    type: atom\n    path: atom.xml\n    limit: 20\n    hub:\n    content:\n    content_limit: 140\n    content_limit_delim: ' '\n    order_by: -date\n```\n\n### Manifest for PWA\n\nIn these modern times it's always a good idea, that your blog feels like an App. For this you need a manifest file (JSON) an several icons (PNG). You can generate these files very fast with the [Web App Manifest Generator](https://app-manifest.firebaseapp.com) and store it in your static folder.\n\nTo bind this file into your blog, you can use the plugin [Hexo PWA](https://github.com/lavas-project/hexo-pwa). Run ``npm install --save hexo-pwa`` and copy following section to your ``_config.yml``, where you take the settings from your generated manifest file:\n\n```yaml\npwa:\n    manifest:\n        path: /manifest.json\n        body:\n        name: myblog.de\n        short_name: My Blog\n        icons:\n            - src: /images/icon-192x192.png\n            sizes: 192x192\n            type: image/png\n            - src: /images/icon-512x512.png\n            sizes: 512x512\n            type: image/png\n        start_url: /index.html\n        theme_color: '#025ab1'\n        background_color: '#dddddd'\n        display: standalone\n```\n\n### Sitemap File\n\nTo help [Google](https://support.google.com/webmasters/answer/183668) and others a bit to index your blog, it is advisable to provide a sitemap file. Here comes [Hexo Generator Sitemap](https://github.com/hexojs/hexo-generator-sitemap) to the rescue. Install it by running the command ``npm install hexo-generator-sitemap --save``. You can configure it via ``_config.yml``:\n\n```yaml\nsitemap:\n    path: sitemap.xml\n    template: ./sitemap-template.xml\n```\n\nThe plugin installation doesn't create the needed ``sitemap-template`` file, so be sure you grab a copy from the plugins repository: [https://github.com/hexojs/hexo-generator-sitemap/blob/master/sitemap.xml](https://github.com/hexojs/hexo-generator-sitemap/blob/master/sitemap.xml)\n\n### Commenting\n\nHexo doesn't have a commenting system, but it's prepared to stick [Disqus](https://disqus.com/) comments under each article. Just create a new Disqus account for your blog and note the given short name. By adding following section to the ``_config.yml`` Hexo shows the commenting section:\n\n```yaml\ndisqus_enabled: true\ndisqus_shortname: my-blog\n```\n\n### Inifinite Scroll\n\nHexo shows as much articles at the start page as configured in ``_config.yml`` under ``index_generator.per_page``, but it's nicer to load more articles as you scroll by using the Hexo script [Inifinite Scroll](https://github.com/FrontendSophie/hexo-infinite-scroll). Install by adding following little script in **themes** & gt; **layout** &gt; **_partial** &gt; **after-footer.ejs**\n\n```html\n<script src=\"//cdn.jsdelivr.net/gh/frontendsophie/hexo-infinite-scroll@2.0.0/dist/main.js\"></script> \n<script>\n    infiniteScroll({\n    showNum: 5,\n    style: 'line-scale',\n    color: '#025ab1'\n    })\n</script>\n```\n\n### Back To Top\n\nIts nice to support the reader on scolling by providing a Scroll-To-Top button. The easiest way to get this, is the script [Vanilla Back To Top](https://github.com/vfeskov/vanilla-back-to-top). Just add follwing to **themes** &gt;**layout** &gt; **_partial** &gt; **after-footer.ejs**:\n\n```html\n<script>addBackToTop({\n    diameter: 30,\n    backgroundColor: 'rgb(0, 90, 180)',\n    textColor: '#fff'\n})\n</script>\n<style>\n#back-to-top {\n    border-radius: 0;\n    opacity: 0.6;\n}\n#back-to-top:hover {\n    opacity: 1;\n}\n</style>\n```\n\n## Related\n\n* [A New Blog (Part One): VS Code, Hexo and GitHub Pages](/categories/Tools/A-New-Blog-VS-Code-Hexo-and-GitHub-Pages/)\n* [A New Blog (Part Three): Blogging and Synching en route](/categories/Tools/A-New-Blog-Blogging-and-Synching-en-route/)\n","source":"_posts/A-New-Blog-Customizing-Hexo.md","raw":"---\ntitle: 'A New Blog: Customizing Hexo'\nsubtitle: 'Part Two of having fun with Hexo and GitHub Pages'\nphotograph: \n    file: '19-07 Schottland-0198.jpg'\n    name: 'Thistle Fence'\n    link: 'https://500px.com/photo/1005489951/Thistle-Fence-by-Kristof-Zerbe'\nseries: 'A New Blog'\npart: 2\ndate: 2019-09-25\nupdated: 2019-09-26\ntags:\n  - VS Code\n  - Hexo\n  - Blogging\ncategories:\n  - Tools\n---\n\nHexo is a great tool to get quick results (see [Part One of this series](/categories/Tools/A-New-Blog-VS-Code-Hexo-and-GitHub-Pages/)), when you decide to have a blog and its defaults are practical, but it's power lies in the possiblities of customization via plugins. On the [official plugin page](https://hexo.io/plugins/index.html), there are actually 302 plugins listed, but there are many more and no wish will be unsatisfied.\n\nI will show you which of these I found worth to work with...\n<!-- more -->\n\n### Relative Image Path\n\nThe build-in way to include images in your posts works fine, but it is a little aside the normal way to declare images in Markdown. The plugin [Hexo Asset Link] corrects that. After installing via ``npm install hexo-asset-link --save`` you can write this:\n\n    ![Test Image](hello-world/image-1.png)\n\nThe best is, that VS Code's Markdown can now show the image.\n\n---\n\n**UPDATE**:  \nActually the plugin [destroys external links](https://github.com/liolok/hexo-asset-link/issues/3), so don't use it until this is fixed ... or go to **node_modules** &gt; **hexo-asset-link** &gt; **index.js** in your project and change in line 22 ``protocal`` to ``protocol``.\n\n**UPDATE from Update**:  \n[liolok](https://github.com/liolok), the author of the plugin has merged my pull request and published a new new version without the typo. It works now as expected.\n\n---\n\n### Hide Posts\n\nA new Hexo project comes with a sample post called ``Hello World``. This is fine to play around with, but you don't want to publish it. Here comes a Hexo plugin to the rescue called [Hexo Hide Posts](https://github.com/printempw/hexo-hide-posts). After installing, you just have to write ``hidden: true`` to the Front Matter of you post and it won't be shown on the blog, but it is still available by URL.\n\n### Static Files\n\nHexo has the concept of [Assets Folders](https://hexo.io/docs/asset-folders), but for static files, beside article based files, I find it more useful to have a STATIC folder and copy the contents on every build into the publish folder. A good helper for this approach is the plugin [Hexo Generator Copy](https://github.com/niahoo/hexo-generator-copy). Install it by running ``npm install hexo-generator-copy --save`` and add ``static_dir: static`` to your ``_config.yml`` and you are done.\n\n    ![Hexo Static Files](A-New-Blog-Customizing-Hexo/vscode-1.png)\n\n### Feed\n\nThe default Hexo layout has an Atom Feed icon in the upper right corner, but strangely no feed file is generated on build. You need to install the plugin [Hexo Feed Generator](https://github.com/hexojs/hexo-generator-feed) to fix this, by running ``npm install hexo-generator-feed --save`` and copy following section into the ``_config.yml``:\n\n```yaml\nfeed:\n    type: atom\n    path: atom.xml\n    limit: 20\n    hub:\n    content:\n    content_limit: 140\n    content_limit_delim: ' '\n    order_by: -date\n```\n\n### Manifest for PWA\n\nIn these modern times it's always a good idea, that your blog feels like an App. For this you need a manifest file (JSON) an several icons (PNG). You can generate these files very fast with the [Web App Manifest Generator](https://app-manifest.firebaseapp.com) and store it in your static folder.\n\nTo bind this file into your blog, you can use the plugin [Hexo PWA](https://github.com/lavas-project/hexo-pwa). Run ``npm install --save hexo-pwa`` and copy following section to your ``_config.yml``, where you take the settings from your generated manifest file:\n\n```yaml\npwa:\n    manifest:\n        path: /manifest.json\n        body:\n        name: myblog.de\n        short_name: My Blog\n        icons:\n            - src: /images/icon-192x192.png\n            sizes: 192x192\n            type: image/png\n            - src: /images/icon-512x512.png\n            sizes: 512x512\n            type: image/png\n        start_url: /index.html\n        theme_color: '#025ab1'\n        background_color: '#dddddd'\n        display: standalone\n```\n\n### Sitemap File\n\nTo help [Google](https://support.google.com/webmasters/answer/183668) and others a bit to index your blog, it is advisable to provide a sitemap file. Here comes [Hexo Generator Sitemap](https://github.com/hexojs/hexo-generator-sitemap) to the rescue. Install it by running the command ``npm install hexo-generator-sitemap --save``. You can configure it via ``_config.yml``:\n\n```yaml\nsitemap:\n    path: sitemap.xml\n    template: ./sitemap-template.xml\n```\n\nThe plugin installation doesn't create the needed ``sitemap-template`` file, so be sure you grab a copy from the plugins repository: [https://github.com/hexojs/hexo-generator-sitemap/blob/master/sitemap.xml](https://github.com/hexojs/hexo-generator-sitemap/blob/master/sitemap.xml)\n\n### Commenting\n\nHexo doesn't have a commenting system, but it's prepared to stick [Disqus](https://disqus.com/) comments under each article. Just create a new Disqus account for your blog and note the given short name. By adding following section to the ``_config.yml`` Hexo shows the commenting section:\n\n```yaml\ndisqus_enabled: true\ndisqus_shortname: my-blog\n```\n\n### Inifinite Scroll\n\nHexo shows as much articles at the start page as configured in ``_config.yml`` under ``index_generator.per_page``, but it's nicer to load more articles as you scroll by using the Hexo script [Inifinite Scroll](https://github.com/FrontendSophie/hexo-infinite-scroll). Install by adding following little script in **themes** & gt; **layout** &gt; **_partial** &gt; **after-footer.ejs**\n\n```html\n<script src=\"//cdn.jsdelivr.net/gh/frontendsophie/hexo-infinite-scroll@2.0.0/dist/main.js\"></script> \n<script>\n    infiniteScroll({\n    showNum: 5,\n    style: 'line-scale',\n    color: '#025ab1'\n    })\n</script>\n```\n\n### Back To Top\n\nIts nice to support the reader on scolling by providing a Scroll-To-Top button. The easiest way to get this, is the script [Vanilla Back To Top](https://github.com/vfeskov/vanilla-back-to-top). Just add follwing to **themes** &gt;**layout** &gt; **_partial** &gt; **after-footer.ejs**:\n\n```html\n<script>addBackToTop({\n    diameter: 30,\n    backgroundColor: 'rgb(0, 90, 180)',\n    textColor: '#fff'\n})\n</script>\n<style>\n#back-to-top {\n    border-radius: 0;\n    opacity: 0.6;\n}\n#back-to-top:hover {\n    opacity: 1;\n}\n</style>\n```\n\n## Related\n\n* [A New Blog (Part One): VS Code, Hexo and GitHub Pages](/categories/Tools/A-New-Blog-VS-Code-Hexo-and-GitHub-Pages/)\n* [A New Blog (Part Three): Blogging and Synching en route](/categories/Tools/A-New-Blog-Blogging-and-Synching-en-route/)\n","slug":"A-New-Blog-Customizing-Hexo","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckbxwzili00018cl97tsvv4cl","content":"<p>Hexo is a great tool to get quick results (see <a href=\"/categories/Tools/A-New-Blog-VS-Code-Hexo-and-GitHub-Pages/\">Part One of this series</a>), when you decide to have a blog and its defaults are practical, but it’s power lies in the possiblities of customization via plugins. On the <a href=\"https://hexo.io/plugins/index.html\" target=\"_blank\" rel=\"noopener\">official plugin page</a>, there are actually 302 plugins listed, but there are many more and no wish will be unsatisfied.</p>\n<p>I will show you which of these I found worth to work with…</p>\n<a id=\"more\"></a>\n\n<h3 id=\"Relative-Image-Path\"><a href=\"#Relative-Image-Path\" class=\"headerlink\" title=\"Relative Image Path\"></a>Relative Image Path</h3><p>The build-in way to include images in your posts works fine, but it is a little aside the normal way to declare images in Markdown. The plugin [Hexo Asset Link] corrects that. After installing via <code>npm install hexo-asset-link --save</code> you can write this:</p>\n<pre><code>![Test Image](hello-world/image-1.png)</code></pre><p>The best is, that VS Code’s Markdown can now show the image.</p>\n<hr>\n<p><strong>UPDATE</strong>:<br>Actually the plugin <a href=\"https://github.com/liolok/hexo-asset-link/issues/3\" target=\"_blank\" rel=\"noopener\">destroys external links</a>, so don’t use it until this is fixed … or go to <strong>node_modules</strong> &gt; <strong>hexo-asset-link</strong> &gt; <strong>index.js</strong> in your project and change in line 22 <code>protocal</code> to <code>protocol</code>.</p>\n<p><strong>UPDATE from Update</strong>:<br><a href=\"https://github.com/liolok\" target=\"_blank\" rel=\"noopener\">liolok</a>, the author of the plugin has merged my pull request and published a new new version without the typo. It works now as expected.</p>\n<hr>\n<h3 id=\"Hide-Posts\"><a href=\"#Hide-Posts\" class=\"headerlink\" title=\"Hide Posts\"></a>Hide Posts</h3><p>A new Hexo project comes with a sample post called <code>Hello World</code>. This is fine to play around with, but you don’t want to publish it. Here comes a Hexo plugin to the rescue called <a href=\"https://github.com/printempw/hexo-hide-posts\" target=\"_blank\" rel=\"noopener\">Hexo Hide Posts</a>. After installing, you just have to write <code>hidden: true</code> to the Front Matter of you post and it won’t be shown on the blog, but it is still available by URL.</p>\n<h3 id=\"Static-Files\"><a href=\"#Static-Files\" class=\"headerlink\" title=\"Static Files\"></a>Static Files</h3><p>Hexo has the concept of <a href=\"https://hexo.io/docs/asset-folders\" target=\"_blank\" rel=\"noopener\">Assets Folders</a>, but for static files, beside article based files, I find it more useful to have a STATIC folder and copy the contents on every build into the publish folder. A good helper for this approach is the plugin <a href=\"https://github.com/niahoo/hexo-generator-copy\" target=\"_blank\" rel=\"noopener\">Hexo Generator Copy</a>. Install it by running <code>npm install hexo-generator-copy --save</code> and add <code>static_dir: static</code> to your <code>_config.yml</code> and you are done.</p>\n<pre><code>![Hexo Static Files](A-New-Blog-Customizing-Hexo/vscode-1.png)</code></pre><h3 id=\"Feed\"><a href=\"#Feed\" class=\"headerlink\" title=\"Feed\"></a>Feed</h3><p>The default Hexo layout has an Atom Feed icon in the upper right corner, but strangely no feed file is generated on build. You need to install the plugin <a href=\"https://github.com/hexojs/hexo-generator-feed\" target=\"_blank\" rel=\"noopener\">Hexo Feed Generator</a> to fix this, by running <code>npm install hexo-generator-feed --save</code> and copy following section into the <code>_config.yml</code>:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">feed:</span></span><br><span class=\"line\"><span class=\"attr\">    type:</span> <span class=\"string\">atom</span></span><br><span class=\"line\"><span class=\"attr\">    path:</span> <span class=\"string\">atom.xml</span></span><br><span class=\"line\"><span class=\"attr\">    limit:</span> <span class=\"number\">20</span></span><br><span class=\"line\"><span class=\"attr\">    hub:</span></span><br><span class=\"line\"><span class=\"attr\">    content:</span></span><br><span class=\"line\"><span class=\"attr\">    content_limit:</span> <span class=\"number\">140</span></span><br><span class=\"line\"><span class=\"attr\">    content_limit_delim:</span> <span class=\"string\">' '</span></span><br><span class=\"line\"><span class=\"attr\">    order_by:</span> <span class=\"bullet\">-date</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Manifest-for-PWA\"><a href=\"#Manifest-for-PWA\" class=\"headerlink\" title=\"Manifest for PWA\"></a>Manifest for PWA</h3><p>In these modern times it’s always a good idea, that your blog feels like an App. For this you need a manifest file (JSON) an several icons (PNG). You can generate these files very fast with the <a href=\"https://app-manifest.firebaseapp.com\" target=\"_blank\" rel=\"noopener\">Web App Manifest Generator</a> and store it in your static folder.</p>\n<p>To bind this file into your blog, you can use the plugin <a href=\"https://github.com/lavas-project/hexo-pwa\" target=\"_blank\" rel=\"noopener\">Hexo PWA</a>. Run <code>npm install --save hexo-pwa</code> and copy following section to your <code>_config.yml</code>, where you take the settings from your generated manifest file:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">pwa:</span></span><br><span class=\"line\"><span class=\"attr\">    manifest:</span></span><br><span class=\"line\"><span class=\"attr\">        path:</span> <span class=\"string\">/manifest.json</span></span><br><span class=\"line\"><span class=\"attr\">        body:</span></span><br><span class=\"line\"><span class=\"attr\">        name:</span> <span class=\"string\">myblog.de</span></span><br><span class=\"line\"><span class=\"attr\">        short_name:</span> <span class=\"string\">My</span> <span class=\"string\">Blog</span></span><br><span class=\"line\"><span class=\"attr\">        icons:</span></span><br><span class=\"line\"><span class=\"attr\">            - src:</span> <span class=\"string\">/images/icon-192x192.png</span></span><br><span class=\"line\"><span class=\"attr\">            sizes:</span> <span class=\"number\">192</span><span class=\"string\">x192</span></span><br><span class=\"line\"><span class=\"attr\">            type:</span> <span class=\"string\">image/png</span></span><br><span class=\"line\"><span class=\"attr\">            - src:</span> <span class=\"string\">/images/icon-512x512.png</span></span><br><span class=\"line\"><span class=\"attr\">            sizes:</span> <span class=\"number\">512</span><span class=\"string\">x512</span></span><br><span class=\"line\"><span class=\"attr\">            type:</span> <span class=\"string\">image/png</span></span><br><span class=\"line\"><span class=\"attr\">        start_url:</span> <span class=\"string\">/index.html</span></span><br><span class=\"line\"><span class=\"attr\">        theme_color:</span> <span class=\"string\">'#025ab1'</span></span><br><span class=\"line\"><span class=\"attr\">        background_color:</span> <span class=\"string\">'#dddddd'</span></span><br><span class=\"line\"><span class=\"attr\">        display:</span> <span class=\"string\">standalone</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Sitemap-File\"><a href=\"#Sitemap-File\" class=\"headerlink\" title=\"Sitemap File\"></a>Sitemap File</h3><p>To help <a href=\"https://support.google.com/webmasters/answer/183668\" target=\"_blank\" rel=\"noopener\">Google</a> and others a bit to index your blog, it is advisable to provide a sitemap file. Here comes <a href=\"https://github.com/hexojs/hexo-generator-sitemap\" target=\"_blank\" rel=\"noopener\">Hexo Generator Sitemap</a> to the rescue. Install it by running the command <code>npm install hexo-generator-sitemap --save</code>. You can configure it via <code>_config.yml</code>:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">sitemap:</span></span><br><span class=\"line\"><span class=\"attr\">    path:</span> <span class=\"string\">sitemap.xml</span></span><br><span class=\"line\"><span class=\"attr\">    template:</span> <span class=\"string\">./sitemap-template.xml</span></span><br></pre></td></tr></table></figure>\n\n<p>The plugin installation doesn’t create the needed <code>sitemap-template</code> file, so be sure you grab a copy from the plugins repository: <a href=\"https://github.com/hexojs/hexo-generator-sitemap/blob/master/sitemap.xml\" target=\"_blank\" rel=\"noopener\">https://github.com/hexojs/hexo-generator-sitemap/blob/master/sitemap.xml</a></p>\n<h3 id=\"Commenting\"><a href=\"#Commenting\" class=\"headerlink\" title=\"Commenting\"></a>Commenting</h3><p>Hexo doesn’t have a commenting system, but it’s prepared to stick <a href=\"https://disqus.com/\" target=\"_blank\" rel=\"noopener\">Disqus</a> comments under each article. Just create a new Disqus account for your blog and note the given short name. By adding following section to the <code>_config.yml</code> Hexo shows the commenting section:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">disqus_enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">disqus_shortname:</span> <span class=\"string\">my-blog</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Inifinite-Scroll\"><a href=\"#Inifinite-Scroll\" class=\"headerlink\" title=\"Inifinite Scroll\"></a>Inifinite Scroll</h3><p>Hexo shows as much articles at the start page as configured in <code>_config.yml</code> under <code>index_generator.per_page</code>, but it’s nicer to load more articles as you scroll by using the Hexo script <a href=\"https://github.com/FrontendSophie/hexo-infinite-scroll\" target=\"_blank\" rel=\"noopener\">Inifinite Scroll</a>. Install by adding following little script in <strong>themes</strong> &amp; gt; <strong>layout</strong> &gt; <strong>_partial</strong> &gt; <strong>after-footer.ejs</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"//cdn.jsdelivr.net/gh/frontendsophie/hexo-infinite-scroll@2.0.0/dist/main.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    infiniteScroll(&#123;</span><br><span class=\"line\">    showNum: 5,</span><br><span class=\"line\"><span class=\"actionscript\">    style: <span class=\"string\">'line-scale'</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">    color: <span class=\"string\">'#025ab1'</span></span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Back-To-Top\"><a href=\"#Back-To-Top\" class=\"headerlink\" title=\"Back To Top\"></a>Back To Top</h3><p>Its nice to support the reader on scolling by providing a Scroll-To-Top button. The easiest way to get this, is the script <a href=\"https://github.com/vfeskov/vanilla-back-to-top\" target=\"_blank\" rel=\"noopener\">Vanilla Back To Top</a>. Just add follwing to <strong>themes</strong> &gt;<strong>layout</strong> &gt; <strong>_partial</strong> &gt; <strong>after-footer.ejs</strong>:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span>addBackToTop(&#123;</span><br><span class=\"line\">    diameter: 30,</span><br><span class=\"line\"><span class=\"actionscript\">    backgroundColor: <span class=\"string\">'rgb(0, 90, 180)'</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">    textColor: <span class=\"string\">'#fff'</span></span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\"><span class=\"selector-id\">#back-to-top</span> &#123;</span></span><br><span class=\"line\">    border-radius: 0;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">opacity</span>: 0<span class=\"selector-class\">.6</span>;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"css\"><span class=\"selector-id\">#back-to-top</span><span class=\"selector-pseudo\">:hover</span> &#123;</span></span><br><span class=\"line\">    opacity: 1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h2><ul>\n<li><a href=\"/categories/Tools/A-New-Blog-VS-Code-Hexo-and-GitHub-Pages/\">A New Blog (Part One): VS Code, Hexo and GitHub Pages</a></li>\n<li><a href=\"/categories/Tools/A-New-Blog-Blogging-and-Synching-en-route/\">A New Blog (Part Three): Blogging and Synching en route</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>Hexo is a great tool to get quick results (see <a href=\"/categories/Tools/A-New-Blog-VS-Code-Hexo-and-GitHub-Pages/\">Part One of this series</a>), when you decide to have a blog and its defaults are practical, but it’s power lies in the possiblities of customization via plugins. On the <a href=\"https://hexo.io/plugins/index.html\" target=\"_blank\" rel=\"noopener\">official plugin page</a>, there are actually 302 plugins listed, but there are many more and no wish will be unsatisfied.</p>\n<p>I will show you which of these I found worth to work with…</p>","more":"<h3 id=\"Relative-Image-Path\"><a href=\"#Relative-Image-Path\" class=\"headerlink\" title=\"Relative Image Path\"></a>Relative Image Path</h3><p>The build-in way to include images in your posts works fine, but it is a little aside the normal way to declare images in Markdown. The plugin [Hexo Asset Link] corrects that. After installing via <code>npm install hexo-asset-link --save</code> you can write this:</p>\n<pre><code>![Test Image](hello-world/image-1.png)</code></pre><p>The best is, that VS Code’s Markdown can now show the image.</p>\n<hr>\n<p><strong>UPDATE</strong>:<br>Actually the plugin <a href=\"https://github.com/liolok/hexo-asset-link/issues/3\" target=\"_blank\" rel=\"noopener\">destroys external links</a>, so don’t use it until this is fixed … or go to <strong>node_modules</strong> &gt; <strong>hexo-asset-link</strong> &gt; <strong>index.js</strong> in your project and change in line 22 <code>protocal</code> to <code>protocol</code>.</p>\n<p><strong>UPDATE from Update</strong>:<br><a href=\"https://github.com/liolok\" target=\"_blank\" rel=\"noopener\">liolok</a>, the author of the plugin has merged my pull request and published a new new version without the typo. It works now as expected.</p>\n<hr>\n<h3 id=\"Hide-Posts\"><a href=\"#Hide-Posts\" class=\"headerlink\" title=\"Hide Posts\"></a>Hide Posts</h3><p>A new Hexo project comes with a sample post called <code>Hello World</code>. This is fine to play around with, but you don’t want to publish it. Here comes a Hexo plugin to the rescue called <a href=\"https://github.com/printempw/hexo-hide-posts\" target=\"_blank\" rel=\"noopener\">Hexo Hide Posts</a>. After installing, you just have to write <code>hidden: true</code> to the Front Matter of you post and it won’t be shown on the blog, but it is still available by URL.</p>\n<h3 id=\"Static-Files\"><a href=\"#Static-Files\" class=\"headerlink\" title=\"Static Files\"></a>Static Files</h3><p>Hexo has the concept of <a href=\"https://hexo.io/docs/asset-folders\" target=\"_blank\" rel=\"noopener\">Assets Folders</a>, but for static files, beside article based files, I find it more useful to have a STATIC folder and copy the contents on every build into the publish folder. A good helper for this approach is the plugin <a href=\"https://github.com/niahoo/hexo-generator-copy\" target=\"_blank\" rel=\"noopener\">Hexo Generator Copy</a>. Install it by running <code>npm install hexo-generator-copy --save</code> and add <code>static_dir: static</code> to your <code>_config.yml</code> and you are done.</p>\n<pre><code>![Hexo Static Files](A-New-Blog-Customizing-Hexo/vscode-1.png)</code></pre><h3 id=\"Feed\"><a href=\"#Feed\" class=\"headerlink\" title=\"Feed\"></a>Feed</h3><p>The default Hexo layout has an Atom Feed icon in the upper right corner, but strangely no feed file is generated on build. You need to install the plugin <a href=\"https://github.com/hexojs/hexo-generator-feed\" target=\"_blank\" rel=\"noopener\">Hexo Feed Generator</a> to fix this, by running <code>npm install hexo-generator-feed --save</code> and copy following section into the <code>_config.yml</code>:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">feed:</span></span><br><span class=\"line\"><span class=\"attr\">    type:</span> <span class=\"string\">atom</span></span><br><span class=\"line\"><span class=\"attr\">    path:</span> <span class=\"string\">atom.xml</span></span><br><span class=\"line\"><span class=\"attr\">    limit:</span> <span class=\"number\">20</span></span><br><span class=\"line\"><span class=\"attr\">    hub:</span></span><br><span class=\"line\"><span class=\"attr\">    content:</span></span><br><span class=\"line\"><span class=\"attr\">    content_limit:</span> <span class=\"number\">140</span></span><br><span class=\"line\"><span class=\"attr\">    content_limit_delim:</span> <span class=\"string\">' '</span></span><br><span class=\"line\"><span class=\"attr\">    order_by:</span> <span class=\"bullet\">-date</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Manifest-for-PWA\"><a href=\"#Manifest-for-PWA\" class=\"headerlink\" title=\"Manifest for PWA\"></a>Manifest for PWA</h3><p>In these modern times it’s always a good idea, that your blog feels like an App. For this you need a manifest file (JSON) an several icons (PNG). You can generate these files very fast with the <a href=\"https://app-manifest.firebaseapp.com\" target=\"_blank\" rel=\"noopener\">Web App Manifest Generator</a> and store it in your static folder.</p>\n<p>To bind this file into your blog, you can use the plugin <a href=\"https://github.com/lavas-project/hexo-pwa\" target=\"_blank\" rel=\"noopener\">Hexo PWA</a>. Run <code>npm install --save hexo-pwa</code> and copy following section to your <code>_config.yml</code>, where you take the settings from your generated manifest file:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">pwa:</span></span><br><span class=\"line\"><span class=\"attr\">    manifest:</span></span><br><span class=\"line\"><span class=\"attr\">        path:</span> <span class=\"string\">/manifest.json</span></span><br><span class=\"line\"><span class=\"attr\">        body:</span></span><br><span class=\"line\"><span class=\"attr\">        name:</span> <span class=\"string\">myblog.de</span></span><br><span class=\"line\"><span class=\"attr\">        short_name:</span> <span class=\"string\">My</span> <span class=\"string\">Blog</span></span><br><span class=\"line\"><span class=\"attr\">        icons:</span></span><br><span class=\"line\"><span class=\"attr\">            - src:</span> <span class=\"string\">/images/icon-192x192.png</span></span><br><span class=\"line\"><span class=\"attr\">            sizes:</span> <span class=\"number\">192</span><span class=\"string\">x192</span></span><br><span class=\"line\"><span class=\"attr\">            type:</span> <span class=\"string\">image/png</span></span><br><span class=\"line\"><span class=\"attr\">            - src:</span> <span class=\"string\">/images/icon-512x512.png</span></span><br><span class=\"line\"><span class=\"attr\">            sizes:</span> <span class=\"number\">512</span><span class=\"string\">x512</span></span><br><span class=\"line\"><span class=\"attr\">            type:</span> <span class=\"string\">image/png</span></span><br><span class=\"line\"><span class=\"attr\">        start_url:</span> <span class=\"string\">/index.html</span></span><br><span class=\"line\"><span class=\"attr\">        theme_color:</span> <span class=\"string\">'#025ab1'</span></span><br><span class=\"line\"><span class=\"attr\">        background_color:</span> <span class=\"string\">'#dddddd'</span></span><br><span class=\"line\"><span class=\"attr\">        display:</span> <span class=\"string\">standalone</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Sitemap-File\"><a href=\"#Sitemap-File\" class=\"headerlink\" title=\"Sitemap File\"></a>Sitemap File</h3><p>To help <a href=\"https://support.google.com/webmasters/answer/183668\" target=\"_blank\" rel=\"noopener\">Google</a> and others a bit to index your blog, it is advisable to provide a sitemap file. Here comes <a href=\"https://github.com/hexojs/hexo-generator-sitemap\" target=\"_blank\" rel=\"noopener\">Hexo Generator Sitemap</a> to the rescue. Install it by running the command <code>npm install hexo-generator-sitemap --save</code>. You can configure it via <code>_config.yml</code>:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">sitemap:</span></span><br><span class=\"line\"><span class=\"attr\">    path:</span> <span class=\"string\">sitemap.xml</span></span><br><span class=\"line\"><span class=\"attr\">    template:</span> <span class=\"string\">./sitemap-template.xml</span></span><br></pre></td></tr></table></figure>\n\n<p>The plugin installation doesn’t create the needed <code>sitemap-template</code> file, so be sure you grab a copy from the plugins repository: <a href=\"https://github.com/hexojs/hexo-generator-sitemap/blob/master/sitemap.xml\" target=\"_blank\" rel=\"noopener\">https://github.com/hexojs/hexo-generator-sitemap/blob/master/sitemap.xml</a></p>\n<h3 id=\"Commenting\"><a href=\"#Commenting\" class=\"headerlink\" title=\"Commenting\"></a>Commenting</h3><p>Hexo doesn’t have a commenting system, but it’s prepared to stick <a href=\"https://disqus.com/\" target=\"_blank\" rel=\"noopener\">Disqus</a> comments under each article. Just create a new Disqus account for your blog and note the given short name. By adding following section to the <code>_config.yml</code> Hexo shows the commenting section:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">disqus_enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">disqus_shortname:</span> <span class=\"string\">my-blog</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Inifinite-Scroll\"><a href=\"#Inifinite-Scroll\" class=\"headerlink\" title=\"Inifinite Scroll\"></a>Inifinite Scroll</h3><p>Hexo shows as much articles at the start page as configured in <code>_config.yml</code> under <code>index_generator.per_page</code>, but it’s nicer to load more articles as you scroll by using the Hexo script <a href=\"https://github.com/FrontendSophie/hexo-infinite-scroll\" target=\"_blank\" rel=\"noopener\">Inifinite Scroll</a>. Install by adding following little script in <strong>themes</strong> &amp; gt; <strong>layout</strong> &gt; <strong>_partial</strong> &gt; <strong>after-footer.ejs</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"//cdn.jsdelivr.net/gh/frontendsophie/hexo-infinite-scroll@2.0.0/dist/main.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    infiniteScroll(&#123;</span><br><span class=\"line\">    showNum: 5,</span><br><span class=\"line\"><span class=\"actionscript\">    style: <span class=\"string\">'line-scale'</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">    color: <span class=\"string\">'#025ab1'</span></span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Back-To-Top\"><a href=\"#Back-To-Top\" class=\"headerlink\" title=\"Back To Top\"></a>Back To Top</h3><p>Its nice to support the reader on scolling by providing a Scroll-To-Top button. The easiest way to get this, is the script <a href=\"https://github.com/vfeskov/vanilla-back-to-top\" target=\"_blank\" rel=\"noopener\">Vanilla Back To Top</a>. Just add follwing to <strong>themes</strong> &gt;<strong>layout</strong> &gt; <strong>_partial</strong> &gt; <strong>after-footer.ejs</strong>:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span>addBackToTop(&#123;</span><br><span class=\"line\">    diameter: 30,</span><br><span class=\"line\"><span class=\"actionscript\">    backgroundColor: <span class=\"string\">'rgb(0, 90, 180)'</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">    textColor: <span class=\"string\">'#fff'</span></span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\"><span class=\"selector-id\">#back-to-top</span> &#123;</span></span><br><span class=\"line\">    border-radius: 0;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">opacity</span>: 0<span class=\"selector-class\">.6</span>;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"css\"><span class=\"selector-id\">#back-to-top</span><span class=\"selector-pseudo\">:hover</span> &#123;</span></span><br><span class=\"line\">    opacity: 1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h2><ul>\n<li><a href=\"/categories/Tools/A-New-Blog-VS-Code-Hexo-and-GitHub-Pages/\">A New Blog (Part One): VS Code, Hexo and GitHub Pages</a></li>\n<li><a href=\"/categories/Tools/A-New-Blog-Blogging-and-Synching-en-route/\">A New Blog (Part Three): Blogging and Synching en route</a></li>\n</ul>"},{"title":"Automatic Header Images in Hexo","photograph":{"file":"D70_7344.jpg","name":"Non Toccare","link":"https://500px.com/photo/1017605762"},"date":"2020-06-22T15:49:16.000Z","subtitle":null,"_content":"\nEvery article in this blog has an individual header image, to bring a little bit color into it. In this post I will show you how I deal with the images in using and automatic provisioning.\n\nFor serving these pictures I use a static folder, as described in [A New Blog: Customizing Hexo](/categories/Tools/A-New-Blog-Customizing-Hexo/). The hard work is done by the plugin [Hexo Generator Copy](https://github.com/niahoo/hexo-generator-copy), which copies the static files into the ``public_dir`` while generating.\n\n<!-- more -->\n\n## Static File Structure\n\nIt is always advisable to provide one image for every device class, in order to save bandwidth and make the page loading as fast as possible:\n\n```txt\n| static/\n   | photos/\n      | mobile/\n         | my-lovely-picture.jpg\n         | ...\n      | tablet/\n         | my-lovely-picture.jpg\n         | ...\n      | normal/\n         | my-lovely-picture.jpg\n         | ...\n```\n\nThe ``mobile`` images are at least 480 pixels wide, the ``tablet`` variants 768 pixels and the standard or ``normal`` one 1280 pixels.\n\nWhile creating the JPG files, it is important to compress them with a tool like [JPEGMini](https://www.jpegmini.com/) to save data while loading.\n\n## Binding\n\nIn order to bind a picture with some additional information to an article, I have extended the Frontmatter of every post:\n\n```yaml\nphotograph:\n    file: 'my-lovely-image.jpg'\n    name: 'My Lovely Image'\n    link: 'https://500px.com/photo/123456789/My-Lovely-Image'\n```\n\n## Usage in Theme\n\nIt relies on your Hexo theme, how to use a header image. In my theme (derived from the standard theme) I just added following code in the ``article.js`` to show the individual header image as a background image at the top of the article: \n\n```html\n<% if (!index && post.photograph){ %>\n<style>\n  #banner {\n    background-size: cover;\n  }\n  @media screen and (max-width: 479px) {\n    #banner { background-image:\n      linear-gradient(to bottom, rgba(0,0,0,0.75) 0%, rgba(0,0,0,0) 75%),\n      url(\"/photos/mobile/<%= post.photograph.file %>\"); }\n  }\n  @media screen and (min-width: 480px) and (max-width: 767px) {\n    #banner { background-image: \n      linear-gradient(to bottom, rgba(0,0,0,0.75) 0%, rgba(0,0,0,0) 75%),\n      url(\"/photos/tablet/<%= post.photograph.file %>\"); }\n  }\n  @media screen and (min-width: 768px) {\n    #banner { background-image: \n      linear-gradient(to bottom, rgba(0,0,0,0.75) 0%, rgba(0,0,0,0) 75%),\n      url(\"/photos/normal/<%= post.photograph.file %>\"); }\n  }\n</style>\n<script>\n  var photoLink = document.getElementById(\"header-photo-link\");\n  photoLink.href = \"<%= post.photograph.link%>\";\n  photoLink.innerHTML = \"see <strong><%= post.photograph.name%></strong> at 500px\";\n</script>\n<% } %>\n```\n\nImportant part here is the use of the Frontmatter data ``post.photograph.file`` in the URL of the background CSS. The script fills the additional information into the absolute positioned element ``header-photo-link`` which is placed on top of the header.\n\n## Pooling Images\n\nAs it is time consuming to generate the necessary images, I have created another static folder ``pool`` to store prepared files and a text file with the additional information about the image. The structure of ``pool`` is different to ``photos``, because of my image workflow and some limitations of automating the provisioning.\n\n```txt\n| static/\n   | pool/\n      | my-lovely-picture/\n         | meta.txt\n         | mobile.jpg\n         | normal.jpg\n         | tablet.jpg\n      | ...\n```\nThe ``meta.txt`` is a simple text file with two lines of text: first the name of the image and second the Url to link to, which will be inserted in the appropriate Frontmatter fields on creating a new post:\n\n```txt\nMy Lovely Image\nhttps://500px.com/photo/123456789/My-Lovely-Image\n```\n\n## Automate binding and provisioning on new post\n\nDevelopers are lazy and I do not make an exception. Having all these pool images and the meta informations, it would be nice, if Hexo just picks and processes one of the pool folders automatically, when I'm creating a new post by calling ``hexo new \"My shiny new post\"`` ... and it was easier then I thought.\n\n### Where to place the code for the automatism\n\nHexo has a great [API](https://hexo.io/api/) to write [plugins](https://hexo.io/plugins/) and it is not very difficult to setup a new plugin for this, which can be published to the [NPM registry](https://www.npmjs.com/search?q=hexo). But it is also possible to extend Hexo's functionality by using a simple script. All you need is a **``script``** folder in the root of your Hexo project. Any JS files which is placed there, will be executed by Hexo.\n\nTherefore, lets use a script called ``\\scripts\\process-photo-on-new.js`` ...\n\n### Things an automatism should do - Step by Step\n\n1. Hook into the creation of a post\n2. Pick randomly one of the pool images\n3. Place the content of the meta.txt in the Frontmatter\n4. Move the 3 device-dependend images into the ``photos`` folder\n\n#### Step 1 - Hook into the creation of a post\n\nThe needed event, the automatism can hook on, is:\n\n```javascript\nhexo.on('new', function(data){\n  //\n});\n```\n\nIt will be executed every time you call the ``hexo new`` command. The parameter ``data`` is an object with two fields:\n\n* ``path``  \nFull path to the MD file of the new post\n\n* ``content``  \nComplete content of the scaffold (template), which Hexo has used to create the new post; default is ``/scaffolds/post.md``.\n\nBy preloading the Hexo Front matter library and parsing ``data.content`` we get access to the definition of the new post:\n\n```javascript\nconst front = require('hexo-front-matter');\n\nhexo.on('new', function(post){\n\n  // parse article content\n  var post = front.parse(data.content);\n});\n```\n\n#### Step 2 - Pick randomly one of the pool images\n\nThere are some build-in variables to get the full path, for example, of the ``source`` folder, we can use to define the needed paths to the ``pool`` and the ``photo`` folder.\n\n```javascript\nconst front = require('hexo-front-matter');\n\nhexo.on('new', function(post){\n  var post = front.parse(data.content);\n\n  // set the path variables\n  var poolDir = hexo.source_dir.replace(\"\\source\", hexo.config.static_dir) + \"pool\";\n  var photosDir = hexo.source_dir.replace(\"\\source\", hexo.config.static_dir) + \"photos\";\n});\n```\n\nNext, we need to preload the Hexo FS library for file access, to list the content of the ``poolDir``, including the subfolders, and filter out the meta files. Out of the resulting array we pick one randomly, to use for the new post:\n\n```javascript\nconst front = require('hexo-front-matter');\nconst fs = require('hexo-fs');\n\nhexo.on('new', function(post){\n  var post = front.parse(data.content);\n\n  var poolDir = hexo.source_dir.replace(\"\\source\", hexo.config.static_dir) + \"pool\";\n  var photosDir = hexo.source_dir.replace(\"\\source\", hexo.config.static_dir) + \"photos\";\n\n  // list all files\n  var files = fs.listDirSync(poolDir);\n\n  // filter the list to get meta files of each subfolder\n  var metaFiles = files.filter(file => file.match(/.*[\\\\]meta.txt/g));\n\n  // pick one randomly\n  var metaFile = metaFiles[Math.floor(Math.random() * metaFiles.length)];\n\n  // get the name of the picked photo (foldername)\n  var photoName = metaFile.split(\"\\\\\")[0];\n});\n```\n\n#### Step 3 - Place the content of the meta.txt in the Frontmatter\n\nNow we have to read the meta file, place the data in the Frontmatter and save the article file:\n\n```javascript\nconst front = require('hexo-front-matter');\nconst fs = require('hexo-fs');\n\nhexo.on('new', function(post){\n  var post = front.parse(data.content);\n\n  var poolDir = hexo.source_dir.replace(\"\\source\", hexo.config.static_dir) + \"pool\";\n  var photosDir = hexo.source_dir.replace(\"\\source\", hexo.config.static_dir) + \"photos\";\n  \n  var files = fs.listDirSync(poolDir);\n  var metaFiles = files.filter(file => file.match(/.*[\\\\]meta.txt/g));\n  var metaFile = metaFiles[Math.floor(Math.random() * metaFiles.length)];\n  var photoName = metaFile.split(\"\\\\\")[0];\n\n  // read meta file\n  var meta = fs.readFileSync(poolDir + \"\\\\\" + metaFile);\n  var metas = meta.split(\"\\n\");\n\n  // place file and additional info in the Frontmatter\n  post.photograph.file = photoName + \".jpg\";\n  post.photograph.name = metas[0];\n  post.photograph.link = metas[1];\n\n  // convert content back\n  postStr = front.stringify(post);\n  postStr = '---\\n' + postStr;\n\n  // store article\n  fs.writeFile(data.path, postStr, 'utf-8');\n});\n```\n\n#### Step 4 - Move the 3 device-dependend images into the photos folder\n\nLast but not least, we have to move the pool images into the ``photos`` folder and remove the pool folder with all its processed content:\n\n```javascript\nconst front = require('hexo-front-matter');\nconst fs = require('hexo-fs');\n\nhexo.on('new', function(post){\n  var post = front.parse(data.content);\n\n  var poolDir = hexo.source_dir.replace(\"\\source\", hexo.config.static_dir) + \"pool\";\n  var photosDir = hexo.source_dir.replace(\"\\source\", hexo.config.static_dir) + \"photos\";\n  \n  var files = fs.listDirSync(poolDir);\n  var metaFiles = files.filter(file => file.match(/.*[\\\\]meta.txt/g));\n  var metaFile = metaFiles[Math.floor(Math.random() * metaFiles.length)];\n  var photoName = metaFile.split(\"\\\\\")[0];\n\n  var meta = fs.readFileSync(poolDir + \"\\\\\" + metaFile);\n  var metas = meta.split(\"\\n\");\n\n  post.photograph.file = photoName + \".jpg\";\n  post.photograph.name = metas[0];\n  post.photograph.link = metas[1];\n\n  postStr = front.stringify(post);\n  postStr = '---\\n' + postStr;\n\n  fs.writeFile(data.path, postStr, 'utf-8');\n\n  //copy normal image\n  fs.copyFile(\n    poolDir + \"\\\\\" + photoName + \"\\\\normal.jpg\",\n    photosDir + \"\\\\normal\\\\\" + photoName + \".jpg\",\n    function() {\n\n      //copy tablet image\n      fs.copyFile(\n        poolDir + \"\\\\\" + photoName + \"\\\\tablet.jpg\",\n        photosDir + \"\\\\tablet\\\\\" + photoName + \".jpg\",\n        function() {\n\n          //copy mobile image\n          fs.copyFile(\n            poolDir + \"\\\\\" + photoName + \"\\\\mobile.jpg\",\n            photosDir + \"\\\\mobile\\\\\" + photoName + \".jpg\",\n            function() {\n\n              //remove processed pool folder\n              fs.rmdirSync(poolDir + \"\\\\\" + photoName);\n            });\n        });\n    });\n\n});\n```\n\nNow it so easy to write a new post, because almost everything is set and I can concentrate on the article. Also, it is a nice surprise to see, which photo the script has chosen. The only thing I have to do from time to time, is to refill the pool folder with new images.\n\n## Related\n\n* [A New Blog (Part Two): Customizing Hexo](/categories/Tools/A-New-Blog-Customizing-Hexo/)\n","source":"_posts/Automatic-Header-Images-in-Hexo.md","raw":"---\ntitle: Automatic Header Images in Hexo\nphotograph:\n  file: D70_7344.jpg\n  name: Non Toccare\n  link: 'https://500px.com/photo/1017605762'\ntags:\n  - Hexo\n  - Blogging\ncategories:\n  - Tools\ndate: 2020-06-22 17:49:16\nsubtitle:\n---\n\nEvery article in this blog has an individual header image, to bring a little bit color into it. In this post I will show you how I deal with the images in using and automatic provisioning.\n\nFor serving these pictures I use a static folder, as described in [A New Blog: Customizing Hexo](/categories/Tools/A-New-Blog-Customizing-Hexo/). The hard work is done by the plugin [Hexo Generator Copy](https://github.com/niahoo/hexo-generator-copy), which copies the static files into the ``public_dir`` while generating.\n\n<!-- more -->\n\n## Static File Structure\n\nIt is always advisable to provide one image for every device class, in order to save bandwidth and make the page loading as fast as possible:\n\n```txt\n| static/\n   | photos/\n      | mobile/\n         | my-lovely-picture.jpg\n         | ...\n      | tablet/\n         | my-lovely-picture.jpg\n         | ...\n      | normal/\n         | my-lovely-picture.jpg\n         | ...\n```\n\nThe ``mobile`` images are at least 480 pixels wide, the ``tablet`` variants 768 pixels and the standard or ``normal`` one 1280 pixels.\n\nWhile creating the JPG files, it is important to compress them with a tool like [JPEGMini](https://www.jpegmini.com/) to save data while loading.\n\n## Binding\n\nIn order to bind a picture with some additional information to an article, I have extended the Frontmatter of every post:\n\n```yaml\nphotograph:\n    file: 'my-lovely-image.jpg'\n    name: 'My Lovely Image'\n    link: 'https://500px.com/photo/123456789/My-Lovely-Image'\n```\n\n## Usage in Theme\n\nIt relies on your Hexo theme, how to use a header image. In my theme (derived from the standard theme) I just added following code in the ``article.js`` to show the individual header image as a background image at the top of the article: \n\n```html\n<% if (!index && post.photograph){ %>\n<style>\n  #banner {\n    background-size: cover;\n  }\n  @media screen and (max-width: 479px) {\n    #banner { background-image:\n      linear-gradient(to bottom, rgba(0,0,0,0.75) 0%, rgba(0,0,0,0) 75%),\n      url(\"/photos/mobile/<%= post.photograph.file %>\"); }\n  }\n  @media screen and (min-width: 480px) and (max-width: 767px) {\n    #banner { background-image: \n      linear-gradient(to bottom, rgba(0,0,0,0.75) 0%, rgba(0,0,0,0) 75%),\n      url(\"/photos/tablet/<%= post.photograph.file %>\"); }\n  }\n  @media screen and (min-width: 768px) {\n    #banner { background-image: \n      linear-gradient(to bottom, rgba(0,0,0,0.75) 0%, rgba(0,0,0,0) 75%),\n      url(\"/photos/normal/<%= post.photograph.file %>\"); }\n  }\n</style>\n<script>\n  var photoLink = document.getElementById(\"header-photo-link\");\n  photoLink.href = \"<%= post.photograph.link%>\";\n  photoLink.innerHTML = \"see <strong><%= post.photograph.name%></strong> at 500px\";\n</script>\n<% } %>\n```\n\nImportant part here is the use of the Frontmatter data ``post.photograph.file`` in the URL of the background CSS. The script fills the additional information into the absolute positioned element ``header-photo-link`` which is placed on top of the header.\n\n## Pooling Images\n\nAs it is time consuming to generate the necessary images, I have created another static folder ``pool`` to store prepared files and a text file with the additional information about the image. The structure of ``pool`` is different to ``photos``, because of my image workflow and some limitations of automating the provisioning.\n\n```txt\n| static/\n   | pool/\n      | my-lovely-picture/\n         | meta.txt\n         | mobile.jpg\n         | normal.jpg\n         | tablet.jpg\n      | ...\n```\nThe ``meta.txt`` is a simple text file with two lines of text: first the name of the image and second the Url to link to, which will be inserted in the appropriate Frontmatter fields on creating a new post:\n\n```txt\nMy Lovely Image\nhttps://500px.com/photo/123456789/My-Lovely-Image\n```\n\n## Automate binding and provisioning on new post\n\nDevelopers are lazy and I do not make an exception. Having all these pool images and the meta informations, it would be nice, if Hexo just picks and processes one of the pool folders automatically, when I'm creating a new post by calling ``hexo new \"My shiny new post\"`` ... and it was easier then I thought.\n\n### Where to place the code for the automatism\n\nHexo has a great [API](https://hexo.io/api/) to write [plugins](https://hexo.io/plugins/) and it is not very difficult to setup a new plugin for this, which can be published to the [NPM registry](https://www.npmjs.com/search?q=hexo). But it is also possible to extend Hexo's functionality by using a simple script. All you need is a **``script``** folder in the root of your Hexo project. Any JS files which is placed there, will be executed by Hexo.\n\nTherefore, lets use a script called ``\\scripts\\process-photo-on-new.js`` ...\n\n### Things an automatism should do - Step by Step\n\n1. Hook into the creation of a post\n2. Pick randomly one of the pool images\n3. Place the content of the meta.txt in the Frontmatter\n4. Move the 3 device-dependend images into the ``photos`` folder\n\n#### Step 1 - Hook into the creation of a post\n\nThe needed event, the automatism can hook on, is:\n\n```javascript\nhexo.on('new', function(data){\n  //\n});\n```\n\nIt will be executed every time you call the ``hexo new`` command. The parameter ``data`` is an object with two fields:\n\n* ``path``  \nFull path to the MD file of the new post\n\n* ``content``  \nComplete content of the scaffold (template), which Hexo has used to create the new post; default is ``/scaffolds/post.md``.\n\nBy preloading the Hexo Front matter library and parsing ``data.content`` we get access to the definition of the new post:\n\n```javascript\nconst front = require('hexo-front-matter');\n\nhexo.on('new', function(post){\n\n  // parse article content\n  var post = front.parse(data.content);\n});\n```\n\n#### Step 2 - Pick randomly one of the pool images\n\nThere are some build-in variables to get the full path, for example, of the ``source`` folder, we can use to define the needed paths to the ``pool`` and the ``photo`` folder.\n\n```javascript\nconst front = require('hexo-front-matter');\n\nhexo.on('new', function(post){\n  var post = front.parse(data.content);\n\n  // set the path variables\n  var poolDir = hexo.source_dir.replace(\"\\source\", hexo.config.static_dir) + \"pool\";\n  var photosDir = hexo.source_dir.replace(\"\\source\", hexo.config.static_dir) + \"photos\";\n});\n```\n\nNext, we need to preload the Hexo FS library for file access, to list the content of the ``poolDir``, including the subfolders, and filter out the meta files. Out of the resulting array we pick one randomly, to use for the new post:\n\n```javascript\nconst front = require('hexo-front-matter');\nconst fs = require('hexo-fs');\n\nhexo.on('new', function(post){\n  var post = front.parse(data.content);\n\n  var poolDir = hexo.source_dir.replace(\"\\source\", hexo.config.static_dir) + \"pool\";\n  var photosDir = hexo.source_dir.replace(\"\\source\", hexo.config.static_dir) + \"photos\";\n\n  // list all files\n  var files = fs.listDirSync(poolDir);\n\n  // filter the list to get meta files of each subfolder\n  var metaFiles = files.filter(file => file.match(/.*[\\\\]meta.txt/g));\n\n  // pick one randomly\n  var metaFile = metaFiles[Math.floor(Math.random() * metaFiles.length)];\n\n  // get the name of the picked photo (foldername)\n  var photoName = metaFile.split(\"\\\\\")[0];\n});\n```\n\n#### Step 3 - Place the content of the meta.txt in the Frontmatter\n\nNow we have to read the meta file, place the data in the Frontmatter and save the article file:\n\n```javascript\nconst front = require('hexo-front-matter');\nconst fs = require('hexo-fs');\n\nhexo.on('new', function(post){\n  var post = front.parse(data.content);\n\n  var poolDir = hexo.source_dir.replace(\"\\source\", hexo.config.static_dir) + \"pool\";\n  var photosDir = hexo.source_dir.replace(\"\\source\", hexo.config.static_dir) + \"photos\";\n  \n  var files = fs.listDirSync(poolDir);\n  var metaFiles = files.filter(file => file.match(/.*[\\\\]meta.txt/g));\n  var metaFile = metaFiles[Math.floor(Math.random() * metaFiles.length)];\n  var photoName = metaFile.split(\"\\\\\")[0];\n\n  // read meta file\n  var meta = fs.readFileSync(poolDir + \"\\\\\" + metaFile);\n  var metas = meta.split(\"\\n\");\n\n  // place file and additional info in the Frontmatter\n  post.photograph.file = photoName + \".jpg\";\n  post.photograph.name = metas[0];\n  post.photograph.link = metas[1];\n\n  // convert content back\n  postStr = front.stringify(post);\n  postStr = '---\\n' + postStr;\n\n  // store article\n  fs.writeFile(data.path, postStr, 'utf-8');\n});\n```\n\n#### Step 4 - Move the 3 device-dependend images into the photos folder\n\nLast but not least, we have to move the pool images into the ``photos`` folder and remove the pool folder with all its processed content:\n\n```javascript\nconst front = require('hexo-front-matter');\nconst fs = require('hexo-fs');\n\nhexo.on('new', function(post){\n  var post = front.parse(data.content);\n\n  var poolDir = hexo.source_dir.replace(\"\\source\", hexo.config.static_dir) + \"pool\";\n  var photosDir = hexo.source_dir.replace(\"\\source\", hexo.config.static_dir) + \"photos\";\n  \n  var files = fs.listDirSync(poolDir);\n  var metaFiles = files.filter(file => file.match(/.*[\\\\]meta.txt/g));\n  var metaFile = metaFiles[Math.floor(Math.random() * metaFiles.length)];\n  var photoName = metaFile.split(\"\\\\\")[0];\n\n  var meta = fs.readFileSync(poolDir + \"\\\\\" + metaFile);\n  var metas = meta.split(\"\\n\");\n\n  post.photograph.file = photoName + \".jpg\";\n  post.photograph.name = metas[0];\n  post.photograph.link = metas[1];\n\n  postStr = front.stringify(post);\n  postStr = '---\\n' + postStr;\n\n  fs.writeFile(data.path, postStr, 'utf-8');\n\n  //copy normal image\n  fs.copyFile(\n    poolDir + \"\\\\\" + photoName + \"\\\\normal.jpg\",\n    photosDir + \"\\\\normal\\\\\" + photoName + \".jpg\",\n    function() {\n\n      //copy tablet image\n      fs.copyFile(\n        poolDir + \"\\\\\" + photoName + \"\\\\tablet.jpg\",\n        photosDir + \"\\\\tablet\\\\\" + photoName + \".jpg\",\n        function() {\n\n          //copy mobile image\n          fs.copyFile(\n            poolDir + \"\\\\\" + photoName + \"\\\\mobile.jpg\",\n            photosDir + \"\\\\mobile\\\\\" + photoName + \".jpg\",\n            function() {\n\n              //remove processed pool folder\n              fs.rmdirSync(poolDir + \"\\\\\" + photoName);\n            });\n        });\n    });\n\n});\n```\n\nNow it so easy to write a new post, because almost everything is set and I can concentrate on the article. Also, it is a nice surprise to see, which photo the script has chosen. The only thing I have to do from time to time, is to refill the pool folder with new images.\n\n## Related\n\n* [A New Blog (Part Two): Customizing Hexo](/categories/Tools/A-New-Blog-Customizing-Hexo/)\n","slug":"Automatic-Header-Images-in-Hexo","published":1,"updated":"2020-06-25T07:25:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckbxwzilo00048cl9z7oymv3c","content":"<p>Every article in this blog has an individual header image, to bring a little bit color into it. In this post I will show you how I deal with the images in using and automatic provisioning.</p>\n<p>For serving these pictures I use a static folder, as described in <a href=\"/categories/Tools/A-New-Blog-Customizing-Hexo/\">A New Blog: Customizing Hexo</a>. The hard work is done by the plugin <a href=\"https://github.com/niahoo/hexo-generator-copy\" target=\"_blank\" rel=\"noopener\">Hexo Generator Copy</a>, which copies the static files into the <code>public_dir</code> while generating.</p>\n<a id=\"more\"></a>\n\n<h2 id=\"Static-File-Structure\"><a href=\"#Static-File-Structure\" class=\"headerlink\" title=\"Static File Structure\"></a>Static File Structure</h2><p>It is always advisable to provide one image for every device class, in order to save bandwidth and make the page loading as fast as possible:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">| static/</span><br><span class=\"line\">   | photos/</span><br><span class=\"line\">      | mobile/</span><br><span class=\"line\">         | my-lovely-picture.jpg</span><br><span class=\"line\">         | ...</span><br><span class=\"line\">      | tablet/</span><br><span class=\"line\">         | my-lovely-picture.jpg</span><br><span class=\"line\">         | ...</span><br><span class=\"line\">      | normal/</span><br><span class=\"line\">         | my-lovely-picture.jpg</span><br><span class=\"line\">         | ...</span><br></pre></td></tr></table></figure>\n\n<p>The <code>mobile</code> images are at least 480 pixels wide, the <code>tablet</code> variants 768 pixels and the standard or <code>normal</code> one 1280 pixels.</p>\n<p>While creating the JPG files, it is important to compress them with a tool like <a href=\"https://www.jpegmini.com/\" target=\"_blank\" rel=\"noopener\">JPEGMini</a> to save data while loading.</p>\n<h2 id=\"Binding\"><a href=\"#Binding\" class=\"headerlink\" title=\"Binding\"></a>Binding</h2><p>In order to bind a picture with some additional information to an article, I have extended the Frontmatter of every post:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">photograph:</span></span><br><span class=\"line\"><span class=\"attr\">    file:</span> <span class=\"string\">'my-lovely-image.jpg'</span></span><br><span class=\"line\"><span class=\"attr\">    name:</span> <span class=\"string\">'My Lovely Image'</span></span><br><span class=\"line\"><span class=\"attr\">    link:</span> <span class=\"string\">'https://500px.com/photo/123456789/My-Lovely-Image'</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Usage-in-Theme\"><a href=\"#Usage-in-Theme\" class=\"headerlink\" title=\"Usage in Theme\"></a>Usage in Theme</h2><p>It relies on your Hexo theme, how to use a header image. In my theme (derived from the standard theme) I just added following code in the <code>article.js</code> to show the individual header image as a background image at the top of the article: </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">if</span> (!<span class=\"attr\">index</span> &amp;&amp; <span class=\"attr\">post.photograph</span>)&#123; %&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-id\">#banner</span> &#123;</span></span><br><span class=\"line\">    background-size: cover;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"css\">  @<span class=\"keyword\">media</span> screen and (max-width: <span class=\"number\">479px</span>) &#123;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-id\">#banner</span> &#123; <span class=\"attribute\">background-image</span>:</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">linear-gradient</span>(<span class=\"selector-tag\">to</span> <span class=\"selector-tag\">bottom</span>, <span class=\"selector-tag\">rgba</span>(0,0,0,0<span class=\"selector-class\">.75</span>) 0%, <span class=\"selector-tag\">rgba</span>(0,0,0,0) 75%),</span></span><br><span class=\"line\"><span class=\"xml\">      url(\"/photos/mobile/<span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">post.photograph.file</span> %&gt;</span>\"); &#125;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"css\">  @<span class=\"keyword\">media</span> screen and (min-width: <span class=\"number\">480px</span>) and (max-width: <span class=\"number\">767px</span>) &#123;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-id\">#banner</span> &#123; <span class=\"attribute\">background-image</span>: </span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">linear-gradient</span>(<span class=\"selector-tag\">to</span> <span class=\"selector-tag\">bottom</span>, <span class=\"selector-tag\">rgba</span>(0,0,0,0<span class=\"selector-class\">.75</span>) 0%, <span class=\"selector-tag\">rgba</span>(0,0,0,0) 75%),</span></span><br><span class=\"line\"><span class=\"xml\">      url(\"/photos/tablet/<span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">post.photograph.file</span> %&gt;</span>\"); &#125;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"css\">  @<span class=\"keyword\">media</span> screen and (min-width: <span class=\"number\">768px</span>) &#123;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-id\">#banner</span> &#123; <span class=\"attribute\">background-image</span>: </span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">linear-gradient</span>(<span class=\"selector-tag\">to</span> <span class=\"selector-tag\">bottom</span>, <span class=\"selector-tag\">rgba</span>(0,0,0,0<span class=\"selector-class\">.75</span>) 0%, <span class=\"selector-tag\">rgba</span>(0,0,0,0) 75%),</span></span><br><span class=\"line\"><span class=\"xml\">      url(\"/photos/normal/<span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">post.photograph.file</span> %&gt;</span>\"); &#125;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">var</span> photoLink = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"header-photo-link\"</span>);</span></span><br><span class=\"line\"><span class=\"actionscript\">  photoLink.href = <span class=\"string\">\"&lt;%= post.photograph.link%&gt;\"</span>;</span></span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">  photoLink.innerHTML = \"see <span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">post.photograph.name</span>%&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span> at 500px\";</span></span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span> &#125; %&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Important part here is the use of the Frontmatter data <code>post.photograph.file</code> in the URL of the background CSS. The script fills the additional information into the absolute positioned element <code>header-photo-link</code> which is placed on top of the header.</p>\n<h2 id=\"Pooling-Images\"><a href=\"#Pooling-Images\" class=\"headerlink\" title=\"Pooling Images\"></a>Pooling Images</h2><p>As it is time consuming to generate the necessary images, I have created another static folder <code>pool</code> to store prepared files and a text file with the additional information about the image. The structure of <code>pool</code> is different to <code>photos</code>, because of my image workflow and some limitations of automating the provisioning.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">| static/</span><br><span class=\"line\">   | pool/</span><br><span class=\"line\">      | my-lovely-picture/</span><br><span class=\"line\">         | meta.txt</span><br><span class=\"line\">         | mobile.jpg</span><br><span class=\"line\">         | normal.jpg</span><br><span class=\"line\">         | tablet.jpg</span><br><span class=\"line\">      | ...</span><br></pre></td></tr></table></figure>\n\n<p>The <code>meta.txt</code> is a simple text file with two lines of text: first the name of the image and second the Url to link to, which will be inserted in the appropriate Frontmatter fields on creating a new post:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">My Lovely Image</span><br><span class=\"line\">https://500px.com/photo/123456789/My-Lovely-Image</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Automate-binding-and-provisioning-on-new-post\"><a href=\"#Automate-binding-and-provisioning-on-new-post\" class=\"headerlink\" title=\"Automate binding and provisioning on new post\"></a>Automate binding and provisioning on new post</h2><p>Developers are lazy and I do not make an exception. Having all these pool images and the meta informations, it would be nice, if Hexo just picks and processes one of the pool folders automatically, when I’m creating a new post by calling <code>hexo new &quot;My shiny new post&quot;</code> … and it was easier then I thought.</p>\n<h3 id=\"Where-to-place-the-code-for-the-automatism\"><a href=\"#Where-to-place-the-code-for-the-automatism\" class=\"headerlink\" title=\"Where to place the code for the automatism\"></a>Where to place the code for the automatism</h3><p>Hexo has a great <a href=\"https://hexo.io/api/\" target=\"_blank\" rel=\"noopener\">API</a> to write <a href=\"https://hexo.io/plugins/\" target=\"_blank\" rel=\"noopener\">plugins</a> and it is not very difficult to setup a new plugin for this, which can be published to the <a href=\"https://www.npmjs.com/search?q=hexo\" target=\"_blank\" rel=\"noopener\">NPM registry</a>. But it is also possible to extend Hexo’s functionality by using a simple script. All you need is a <strong><code>script</code></strong> folder in the root of your Hexo project. Any JS files which is placed there, will be executed by Hexo.</p>\n<p>Therefore, lets use a script called <code>\\scripts\\process-photo-on-new.js</code> …</p>\n<h3 id=\"Things-an-automatism-should-do-Step-by-Step\"><a href=\"#Things-an-automatism-should-do-Step-by-Step\" class=\"headerlink\" title=\"Things an automatism should do - Step by Step\"></a>Things an automatism should do - Step by Step</h3><ol>\n<li>Hook into the creation of a post</li>\n<li>Pick randomly one of the pool images</li>\n<li>Place the content of the meta.txt in the Frontmatter</li>\n<li>Move the 3 device-dependend images into the <code>photos</code> folder</li>\n</ol>\n<h4 id=\"Step-1-Hook-into-the-creation-of-a-post\"><a href=\"#Step-1-Hook-into-the-creation-of-a-post\" class=\"headerlink\" title=\"Step 1 - Hook into the creation of a post\"></a>Step 1 - Hook into the creation of a post</h4><p>The needed event, the automatism can hook on, is:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo.on(<span class=\"string\">'new'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>It will be executed every time you call the <code>hexo new</code> command. The parameter <code>data</code> is an object with two fields:</p>\n<ul>\n<li><p><code>path</code><br>Full path to the MD file of the new post</p>\n</li>\n<li><p><code>content</code><br>Complete content of the scaffold (template), which Hexo has used to create the new post; default is <code>/scaffolds/post.md</code>.</p>\n</li>\n</ul>\n<p>By preloading the Hexo Front matter library and parsing <code>data.content</code> we get access to the definition of the new post:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> front = <span class=\"built_in\">require</span>(<span class=\"string\">'hexo-front-matter'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">hexo.on(<span class=\"string\">'new'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">post</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// parse article content</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> post = front.parse(data.content);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Step-2-Pick-randomly-one-of-the-pool-images\"><a href=\"#Step-2-Pick-randomly-one-of-the-pool-images\" class=\"headerlink\" title=\"Step 2 - Pick randomly one of the pool images\"></a>Step 2 - Pick randomly one of the pool images</h4><p>There are some build-in variables to get the full path, for example, of the <code>source</code> folder, we can use to define the needed paths to the <code>pool</code> and the <code>photo</code> folder.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> front = <span class=\"built_in\">require</span>(<span class=\"string\">'hexo-front-matter'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">hexo.on(<span class=\"string\">'new'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">post</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> post = front.parse(data.content);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// set the path variables</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> poolDir = hexo.source_dir.replace(<span class=\"string\">\"\\source\"</span>, hexo.config.static_dir) + <span class=\"string\">\"pool\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> photosDir = hexo.source_dir.replace(<span class=\"string\">\"\\source\"</span>, hexo.config.static_dir) + <span class=\"string\">\"photos\"</span>;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>Next, we need to preload the Hexo FS library for file access, to list the content of the <code>poolDir</code>, including the subfolders, and filter out the meta files. Out of the resulting array we pick one randomly, to use for the new post:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> front = <span class=\"built_in\">require</span>(<span class=\"string\">'hexo-front-matter'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'hexo-fs'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">hexo.on(<span class=\"string\">'new'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">post</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> post = front.parse(data.content);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> poolDir = hexo.source_dir.replace(<span class=\"string\">\"\\source\"</span>, hexo.config.static_dir) + <span class=\"string\">\"pool\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> photosDir = hexo.source_dir.replace(<span class=\"string\">\"\\source\"</span>, hexo.config.static_dir) + <span class=\"string\">\"photos\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// list all files</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> files = fs.listDirSync(poolDir);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// filter the list to get meta files of each subfolder</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> metaFiles = files.filter(<span class=\"function\"><span class=\"params\">file</span> =&gt;</span> file.match(<span class=\"regexp\">/.*[\\\\]meta.txt/g</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// pick one randomly</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> metaFile = metaFiles[<span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random() * metaFiles.length)];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// get the name of the picked photo (foldername)</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> photoName = metaFile.split(<span class=\"string\">\"\\\\\"</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Step-3-Place-the-content-of-the-meta-txt-in-the-Frontmatter\"><a href=\"#Step-3-Place-the-content-of-the-meta-txt-in-the-Frontmatter\" class=\"headerlink\" title=\"Step 3 - Place the content of the meta.txt in the Frontmatter\"></a>Step 3 - Place the content of the meta.txt in the Frontmatter</h4><p>Now we have to read the meta file, place the data in the Frontmatter and save the article file:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> front = <span class=\"built_in\">require</span>(<span class=\"string\">'hexo-front-matter'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'hexo-fs'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">hexo.on(<span class=\"string\">'new'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">post</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> post = front.parse(data.content);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> poolDir = hexo.source_dir.replace(<span class=\"string\">\"\\source\"</span>, hexo.config.static_dir) + <span class=\"string\">\"pool\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> photosDir = hexo.source_dir.replace(<span class=\"string\">\"\\source\"</span>, hexo.config.static_dir) + <span class=\"string\">\"photos\"</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">var</span> files = fs.listDirSync(poolDir);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> metaFiles = files.filter(<span class=\"function\"><span class=\"params\">file</span> =&gt;</span> file.match(<span class=\"regexp\">/.*[\\\\]meta.txt/g</span>));</span><br><span class=\"line\">  <span class=\"keyword\">var</span> metaFile = metaFiles[<span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random() * metaFiles.length)];</span><br><span class=\"line\">  <span class=\"keyword\">var</span> photoName = metaFile.split(<span class=\"string\">\"\\\\\"</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// read meta file</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> meta = fs.readFileSync(poolDir + <span class=\"string\">\"\\\\\"</span> + metaFile);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> metas = meta.split(<span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// place file and additional info in the Frontmatter</span></span><br><span class=\"line\">  post.photograph.file = photoName + <span class=\"string\">\".jpg\"</span>;</span><br><span class=\"line\">  post.photograph.name = metas[<span class=\"number\">0</span>];</span><br><span class=\"line\">  post.photograph.link = metas[<span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// convert content back</span></span><br><span class=\"line\">  postStr = front.stringify(post);</span><br><span class=\"line\">  postStr = <span class=\"string\">'---\\n'</span> + postStr;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// store article</span></span><br><span class=\"line\">  fs.writeFile(data.path, postStr, <span class=\"string\">'utf-8'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Step-4-Move-the-3-device-dependend-images-into-the-photos-folder\"><a href=\"#Step-4-Move-the-3-device-dependend-images-into-the-photos-folder\" class=\"headerlink\" title=\"Step 4 - Move the 3 device-dependend images into the photos folder\"></a>Step 4 - Move the 3 device-dependend images into the photos folder</h4><p>Last but not least, we have to move the pool images into the <code>photos</code> folder and remove the pool folder with all its processed content:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> front = <span class=\"built_in\">require</span>(<span class=\"string\">'hexo-front-matter'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'hexo-fs'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">hexo.on(<span class=\"string\">'new'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">post</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> post = front.parse(data.content);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> poolDir = hexo.source_dir.replace(<span class=\"string\">\"\\source\"</span>, hexo.config.static_dir) + <span class=\"string\">\"pool\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> photosDir = hexo.source_dir.replace(<span class=\"string\">\"\\source\"</span>, hexo.config.static_dir) + <span class=\"string\">\"photos\"</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">var</span> files = fs.listDirSync(poolDir);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> metaFiles = files.filter(<span class=\"function\"><span class=\"params\">file</span> =&gt;</span> file.match(<span class=\"regexp\">/.*[\\\\]meta.txt/g</span>));</span><br><span class=\"line\">  <span class=\"keyword\">var</span> metaFile = metaFiles[<span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random() * metaFiles.length)];</span><br><span class=\"line\">  <span class=\"keyword\">var</span> photoName = metaFile.split(<span class=\"string\">\"\\\\\"</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> meta = fs.readFileSync(poolDir + <span class=\"string\">\"\\\\\"</span> + metaFile);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> metas = meta.split(<span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  post.photograph.file = photoName + <span class=\"string\">\".jpg\"</span>;</span><br><span class=\"line\">  post.photograph.name = metas[<span class=\"number\">0</span>];</span><br><span class=\"line\">  post.photograph.link = metas[<span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">  postStr = front.stringify(post);</span><br><span class=\"line\">  postStr = <span class=\"string\">'---\\n'</span> + postStr;</span><br><span class=\"line\"></span><br><span class=\"line\">  fs.writeFile(data.path, postStr, <span class=\"string\">'utf-8'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//copy normal image</span></span><br><span class=\"line\">  fs.copyFile(</span><br><span class=\"line\">    poolDir + <span class=\"string\">\"\\\\\"</span> + photoName + <span class=\"string\">\"\\\\normal.jpg\"</span>,</span><br><span class=\"line\">    photosDir + <span class=\"string\">\"\\\\normal\\\\\"</span> + photoName + <span class=\"string\">\".jpg\"</span>,</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">//copy tablet image</span></span><br><span class=\"line\">      fs.copyFile(</span><br><span class=\"line\">        poolDir + <span class=\"string\">\"\\\\\"</span> + photoName + <span class=\"string\">\"\\\\tablet.jpg\"</span>,</span><br><span class=\"line\">        photosDir + <span class=\"string\">\"\\\\tablet\\\\\"</span> + photoName + <span class=\"string\">\".jpg\"</span>,</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"comment\">//copy mobile image</span></span><br><span class=\"line\">          fs.copyFile(</span><br><span class=\"line\">            poolDir + <span class=\"string\">\"\\\\\"</span> + photoName + <span class=\"string\">\"\\\\mobile.jpg\"</span>,</span><br><span class=\"line\">            photosDir + <span class=\"string\">\"\\\\mobile\\\\\"</span> + photoName + <span class=\"string\">\".jpg\"</span>,</span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">              <span class=\"comment\">//remove processed pool folder</span></span><br><span class=\"line\">              fs.rmdirSync(poolDir + <span class=\"string\">\"\\\\\"</span> + photoName);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>Now it so easy to write a new post, because almost everything is set and I can concentrate on the article. Also, it is a nice surprise to see, which photo the script has chosen. The only thing I have to do from time to time, is to refill the pool folder with new images.</p>\n<h2 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h2><ul>\n<li><a href=\"/categories/Tools/A-New-Blog-Customizing-Hexo/\">A New Blog (Part Two): Customizing Hexo</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>Every article in this blog has an individual header image, to bring a little bit color into it. In this post I will show you how I deal with the images in using and automatic provisioning.</p>\n<p>For serving these pictures I use a static folder, as described in <a href=\"/categories/Tools/A-New-Blog-Customizing-Hexo/\">A New Blog: Customizing Hexo</a>. The hard work is done by the plugin <a href=\"https://github.com/niahoo/hexo-generator-copy\" target=\"_blank\" rel=\"noopener\">Hexo Generator Copy</a>, which copies the static files into the <code>public_dir</code> while generating.</p>","more":"<h2 id=\"Static-File-Structure\"><a href=\"#Static-File-Structure\" class=\"headerlink\" title=\"Static File Structure\"></a>Static File Structure</h2><p>It is always advisable to provide one image for every device class, in order to save bandwidth and make the page loading as fast as possible:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">| static/</span><br><span class=\"line\">   | photos/</span><br><span class=\"line\">      | mobile/</span><br><span class=\"line\">         | my-lovely-picture.jpg</span><br><span class=\"line\">         | ...</span><br><span class=\"line\">      | tablet/</span><br><span class=\"line\">         | my-lovely-picture.jpg</span><br><span class=\"line\">         | ...</span><br><span class=\"line\">      | normal/</span><br><span class=\"line\">         | my-lovely-picture.jpg</span><br><span class=\"line\">         | ...</span><br></pre></td></tr></table></figure>\n\n<p>The <code>mobile</code> images are at least 480 pixels wide, the <code>tablet</code> variants 768 pixels and the standard or <code>normal</code> one 1280 pixels.</p>\n<p>While creating the JPG files, it is important to compress them with a tool like <a href=\"https://www.jpegmini.com/\" target=\"_blank\" rel=\"noopener\">JPEGMini</a> to save data while loading.</p>\n<h2 id=\"Binding\"><a href=\"#Binding\" class=\"headerlink\" title=\"Binding\"></a>Binding</h2><p>In order to bind a picture with some additional information to an article, I have extended the Frontmatter of every post:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">photograph:</span></span><br><span class=\"line\"><span class=\"attr\">    file:</span> <span class=\"string\">'my-lovely-image.jpg'</span></span><br><span class=\"line\"><span class=\"attr\">    name:</span> <span class=\"string\">'My Lovely Image'</span></span><br><span class=\"line\"><span class=\"attr\">    link:</span> <span class=\"string\">'https://500px.com/photo/123456789/My-Lovely-Image'</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Usage-in-Theme\"><a href=\"#Usage-in-Theme\" class=\"headerlink\" title=\"Usage in Theme\"></a>Usage in Theme</h2><p>It relies on your Hexo theme, how to use a header image. In my theme (derived from the standard theme) I just added following code in the <code>article.js</code> to show the individual header image as a background image at the top of the article: </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">if</span> (!<span class=\"attr\">index</span> &amp;&amp; <span class=\"attr\">post.photograph</span>)&#123; %&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-id\">#banner</span> &#123;</span></span><br><span class=\"line\">    background-size: cover;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"css\">  @<span class=\"keyword\">media</span> screen and (max-width: <span class=\"number\">479px</span>) &#123;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-id\">#banner</span> &#123; <span class=\"attribute\">background-image</span>:</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">linear-gradient</span>(<span class=\"selector-tag\">to</span> <span class=\"selector-tag\">bottom</span>, <span class=\"selector-tag\">rgba</span>(0,0,0,0<span class=\"selector-class\">.75</span>) 0%, <span class=\"selector-tag\">rgba</span>(0,0,0,0) 75%),</span></span><br><span class=\"line\"><span class=\"xml\">      url(\"/photos/mobile/<span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">post.photograph.file</span> %&gt;</span>\"); &#125;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"css\">  @<span class=\"keyword\">media</span> screen and (min-width: <span class=\"number\">480px</span>) and (max-width: <span class=\"number\">767px</span>) &#123;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-id\">#banner</span> &#123; <span class=\"attribute\">background-image</span>: </span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">linear-gradient</span>(<span class=\"selector-tag\">to</span> <span class=\"selector-tag\">bottom</span>, <span class=\"selector-tag\">rgba</span>(0,0,0,0<span class=\"selector-class\">.75</span>) 0%, <span class=\"selector-tag\">rgba</span>(0,0,0,0) 75%),</span></span><br><span class=\"line\"><span class=\"xml\">      url(\"/photos/tablet/<span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">post.photograph.file</span> %&gt;</span>\"); &#125;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"css\">  @<span class=\"keyword\">media</span> screen and (min-width: <span class=\"number\">768px</span>) &#123;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-id\">#banner</span> &#123; <span class=\"attribute\">background-image</span>: </span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">linear-gradient</span>(<span class=\"selector-tag\">to</span> <span class=\"selector-tag\">bottom</span>, <span class=\"selector-tag\">rgba</span>(0,0,0,0<span class=\"selector-class\">.75</span>) 0%, <span class=\"selector-tag\">rgba</span>(0,0,0,0) 75%),</span></span><br><span class=\"line\"><span class=\"xml\">      url(\"/photos/normal/<span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">post.photograph.file</span> %&gt;</span>\"); &#125;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">var</span> photoLink = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"header-photo-link\"</span>);</span></span><br><span class=\"line\"><span class=\"actionscript\">  photoLink.href = <span class=\"string\">\"&lt;%= post.photograph.link%&gt;\"</span>;</span></span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">  photoLink.innerHTML = \"see <span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">post.photograph.name</span>%&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span> at 500px\";</span></span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span> &#125; %&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Important part here is the use of the Frontmatter data <code>post.photograph.file</code> in the URL of the background CSS. The script fills the additional information into the absolute positioned element <code>header-photo-link</code> which is placed on top of the header.</p>\n<h2 id=\"Pooling-Images\"><a href=\"#Pooling-Images\" class=\"headerlink\" title=\"Pooling Images\"></a>Pooling Images</h2><p>As it is time consuming to generate the necessary images, I have created another static folder <code>pool</code> to store prepared files and a text file with the additional information about the image. The structure of <code>pool</code> is different to <code>photos</code>, because of my image workflow and some limitations of automating the provisioning.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">| static/</span><br><span class=\"line\">   | pool/</span><br><span class=\"line\">      | my-lovely-picture/</span><br><span class=\"line\">         | meta.txt</span><br><span class=\"line\">         | mobile.jpg</span><br><span class=\"line\">         | normal.jpg</span><br><span class=\"line\">         | tablet.jpg</span><br><span class=\"line\">      | ...</span><br></pre></td></tr></table></figure>\n\n<p>The <code>meta.txt</code> is a simple text file with two lines of text: first the name of the image and second the Url to link to, which will be inserted in the appropriate Frontmatter fields on creating a new post:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">My Lovely Image</span><br><span class=\"line\">https://500px.com/photo/123456789/My-Lovely-Image</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Automate-binding-and-provisioning-on-new-post\"><a href=\"#Automate-binding-and-provisioning-on-new-post\" class=\"headerlink\" title=\"Automate binding and provisioning on new post\"></a>Automate binding and provisioning on new post</h2><p>Developers are lazy and I do not make an exception. Having all these pool images and the meta informations, it would be nice, if Hexo just picks and processes one of the pool folders automatically, when I’m creating a new post by calling <code>hexo new &quot;My shiny new post&quot;</code> … and it was easier then I thought.</p>\n<h3 id=\"Where-to-place-the-code-for-the-automatism\"><a href=\"#Where-to-place-the-code-for-the-automatism\" class=\"headerlink\" title=\"Where to place the code for the automatism\"></a>Where to place the code for the automatism</h3><p>Hexo has a great <a href=\"https://hexo.io/api/\" target=\"_blank\" rel=\"noopener\">API</a> to write <a href=\"https://hexo.io/plugins/\" target=\"_blank\" rel=\"noopener\">plugins</a> and it is not very difficult to setup a new plugin for this, which can be published to the <a href=\"https://www.npmjs.com/search?q=hexo\" target=\"_blank\" rel=\"noopener\">NPM registry</a>. But it is also possible to extend Hexo’s functionality by using a simple script. All you need is a <strong><code>script</code></strong> folder in the root of your Hexo project. Any JS files which is placed there, will be executed by Hexo.</p>\n<p>Therefore, lets use a script called <code>\\scripts\\process-photo-on-new.js</code> …</p>\n<h3 id=\"Things-an-automatism-should-do-Step-by-Step\"><a href=\"#Things-an-automatism-should-do-Step-by-Step\" class=\"headerlink\" title=\"Things an automatism should do - Step by Step\"></a>Things an automatism should do - Step by Step</h3><ol>\n<li>Hook into the creation of a post</li>\n<li>Pick randomly one of the pool images</li>\n<li>Place the content of the meta.txt in the Frontmatter</li>\n<li>Move the 3 device-dependend images into the <code>photos</code> folder</li>\n</ol>\n<h4 id=\"Step-1-Hook-into-the-creation-of-a-post\"><a href=\"#Step-1-Hook-into-the-creation-of-a-post\" class=\"headerlink\" title=\"Step 1 - Hook into the creation of a post\"></a>Step 1 - Hook into the creation of a post</h4><p>The needed event, the automatism can hook on, is:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo.on(<span class=\"string\">'new'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>It will be executed every time you call the <code>hexo new</code> command. The parameter <code>data</code> is an object with two fields:</p>\n<ul>\n<li><p><code>path</code><br>Full path to the MD file of the new post</p>\n</li>\n<li><p><code>content</code><br>Complete content of the scaffold (template), which Hexo has used to create the new post; default is <code>/scaffolds/post.md</code>.</p>\n</li>\n</ul>\n<p>By preloading the Hexo Front matter library and parsing <code>data.content</code> we get access to the definition of the new post:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> front = <span class=\"built_in\">require</span>(<span class=\"string\">'hexo-front-matter'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">hexo.on(<span class=\"string\">'new'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">post</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// parse article content</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> post = front.parse(data.content);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Step-2-Pick-randomly-one-of-the-pool-images\"><a href=\"#Step-2-Pick-randomly-one-of-the-pool-images\" class=\"headerlink\" title=\"Step 2 - Pick randomly one of the pool images\"></a>Step 2 - Pick randomly one of the pool images</h4><p>There are some build-in variables to get the full path, for example, of the <code>source</code> folder, we can use to define the needed paths to the <code>pool</code> and the <code>photo</code> folder.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> front = <span class=\"built_in\">require</span>(<span class=\"string\">'hexo-front-matter'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">hexo.on(<span class=\"string\">'new'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">post</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> post = front.parse(data.content);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// set the path variables</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> poolDir = hexo.source_dir.replace(<span class=\"string\">\"\\source\"</span>, hexo.config.static_dir) + <span class=\"string\">\"pool\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> photosDir = hexo.source_dir.replace(<span class=\"string\">\"\\source\"</span>, hexo.config.static_dir) + <span class=\"string\">\"photos\"</span>;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>Next, we need to preload the Hexo FS library for file access, to list the content of the <code>poolDir</code>, including the subfolders, and filter out the meta files. Out of the resulting array we pick one randomly, to use for the new post:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> front = <span class=\"built_in\">require</span>(<span class=\"string\">'hexo-front-matter'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'hexo-fs'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">hexo.on(<span class=\"string\">'new'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">post</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> post = front.parse(data.content);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> poolDir = hexo.source_dir.replace(<span class=\"string\">\"\\source\"</span>, hexo.config.static_dir) + <span class=\"string\">\"pool\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> photosDir = hexo.source_dir.replace(<span class=\"string\">\"\\source\"</span>, hexo.config.static_dir) + <span class=\"string\">\"photos\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// list all files</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> files = fs.listDirSync(poolDir);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// filter the list to get meta files of each subfolder</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> metaFiles = files.filter(<span class=\"function\"><span class=\"params\">file</span> =&gt;</span> file.match(<span class=\"regexp\">/.*[\\\\]meta.txt/g</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// pick one randomly</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> metaFile = metaFiles[<span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random() * metaFiles.length)];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// get the name of the picked photo (foldername)</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> photoName = metaFile.split(<span class=\"string\">\"\\\\\"</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Step-3-Place-the-content-of-the-meta-txt-in-the-Frontmatter\"><a href=\"#Step-3-Place-the-content-of-the-meta-txt-in-the-Frontmatter\" class=\"headerlink\" title=\"Step 3 - Place the content of the meta.txt in the Frontmatter\"></a>Step 3 - Place the content of the meta.txt in the Frontmatter</h4><p>Now we have to read the meta file, place the data in the Frontmatter and save the article file:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> front = <span class=\"built_in\">require</span>(<span class=\"string\">'hexo-front-matter'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'hexo-fs'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">hexo.on(<span class=\"string\">'new'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">post</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> post = front.parse(data.content);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> poolDir = hexo.source_dir.replace(<span class=\"string\">\"\\source\"</span>, hexo.config.static_dir) + <span class=\"string\">\"pool\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> photosDir = hexo.source_dir.replace(<span class=\"string\">\"\\source\"</span>, hexo.config.static_dir) + <span class=\"string\">\"photos\"</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">var</span> files = fs.listDirSync(poolDir);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> metaFiles = files.filter(<span class=\"function\"><span class=\"params\">file</span> =&gt;</span> file.match(<span class=\"regexp\">/.*[\\\\]meta.txt/g</span>));</span><br><span class=\"line\">  <span class=\"keyword\">var</span> metaFile = metaFiles[<span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random() * metaFiles.length)];</span><br><span class=\"line\">  <span class=\"keyword\">var</span> photoName = metaFile.split(<span class=\"string\">\"\\\\\"</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// read meta file</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> meta = fs.readFileSync(poolDir + <span class=\"string\">\"\\\\\"</span> + metaFile);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> metas = meta.split(<span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// place file and additional info in the Frontmatter</span></span><br><span class=\"line\">  post.photograph.file = photoName + <span class=\"string\">\".jpg\"</span>;</span><br><span class=\"line\">  post.photograph.name = metas[<span class=\"number\">0</span>];</span><br><span class=\"line\">  post.photograph.link = metas[<span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// convert content back</span></span><br><span class=\"line\">  postStr = front.stringify(post);</span><br><span class=\"line\">  postStr = <span class=\"string\">'---\\n'</span> + postStr;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// store article</span></span><br><span class=\"line\">  fs.writeFile(data.path, postStr, <span class=\"string\">'utf-8'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Step-4-Move-the-3-device-dependend-images-into-the-photos-folder\"><a href=\"#Step-4-Move-the-3-device-dependend-images-into-the-photos-folder\" class=\"headerlink\" title=\"Step 4 - Move the 3 device-dependend images into the photos folder\"></a>Step 4 - Move the 3 device-dependend images into the photos folder</h4><p>Last but not least, we have to move the pool images into the <code>photos</code> folder and remove the pool folder with all its processed content:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> front = <span class=\"built_in\">require</span>(<span class=\"string\">'hexo-front-matter'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'hexo-fs'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">hexo.on(<span class=\"string\">'new'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">post</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> post = front.parse(data.content);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> poolDir = hexo.source_dir.replace(<span class=\"string\">\"\\source\"</span>, hexo.config.static_dir) + <span class=\"string\">\"pool\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> photosDir = hexo.source_dir.replace(<span class=\"string\">\"\\source\"</span>, hexo.config.static_dir) + <span class=\"string\">\"photos\"</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">var</span> files = fs.listDirSync(poolDir);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> metaFiles = files.filter(<span class=\"function\"><span class=\"params\">file</span> =&gt;</span> file.match(<span class=\"regexp\">/.*[\\\\]meta.txt/g</span>));</span><br><span class=\"line\">  <span class=\"keyword\">var</span> metaFile = metaFiles[<span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random() * metaFiles.length)];</span><br><span class=\"line\">  <span class=\"keyword\">var</span> photoName = metaFile.split(<span class=\"string\">\"\\\\\"</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> meta = fs.readFileSync(poolDir + <span class=\"string\">\"\\\\\"</span> + metaFile);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> metas = meta.split(<span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  post.photograph.file = photoName + <span class=\"string\">\".jpg\"</span>;</span><br><span class=\"line\">  post.photograph.name = metas[<span class=\"number\">0</span>];</span><br><span class=\"line\">  post.photograph.link = metas[<span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">  postStr = front.stringify(post);</span><br><span class=\"line\">  postStr = <span class=\"string\">'---\\n'</span> + postStr;</span><br><span class=\"line\"></span><br><span class=\"line\">  fs.writeFile(data.path, postStr, <span class=\"string\">'utf-8'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//copy normal image</span></span><br><span class=\"line\">  fs.copyFile(</span><br><span class=\"line\">    poolDir + <span class=\"string\">\"\\\\\"</span> + photoName + <span class=\"string\">\"\\\\normal.jpg\"</span>,</span><br><span class=\"line\">    photosDir + <span class=\"string\">\"\\\\normal\\\\\"</span> + photoName + <span class=\"string\">\".jpg\"</span>,</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">//copy tablet image</span></span><br><span class=\"line\">      fs.copyFile(</span><br><span class=\"line\">        poolDir + <span class=\"string\">\"\\\\\"</span> + photoName + <span class=\"string\">\"\\\\tablet.jpg\"</span>,</span><br><span class=\"line\">        photosDir + <span class=\"string\">\"\\\\tablet\\\\\"</span> + photoName + <span class=\"string\">\".jpg\"</span>,</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"comment\">//copy mobile image</span></span><br><span class=\"line\">          fs.copyFile(</span><br><span class=\"line\">            poolDir + <span class=\"string\">\"\\\\\"</span> + photoName + <span class=\"string\">\"\\\\mobile.jpg\"</span>,</span><br><span class=\"line\">            photosDir + <span class=\"string\">\"\\\\mobile\\\\\"</span> + photoName + <span class=\"string\">\".jpg\"</span>,</span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">              <span class=\"comment\">//remove processed pool folder</span></span><br><span class=\"line\">              fs.rmdirSync(poolDir + <span class=\"string\">\"\\\\\"</span> + photoName);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>Now it so easy to write a new post, because almost everything is set and I can concentrate on the article. Also, it is a nice surprise to see, which photo the script has chosen. The only thing I have to do from time to time, is to refill the pool folder with new images.</p>\n<h2 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h2><ul>\n<li><a href=\"/categories/Tools/A-New-Blog-Customizing-Hexo/\">A New Blog (Part Two): Customizing Hexo</a></li>\n</ul>"},{"title":"Better Input Change Event","photograph":{"file":"19-05 Israel-0624.jpg","name":"Jerusalem Seat","link":"https://500px.com/photo/1001751283/Jerusalem-Seat-by-Kristof-Zerbe"},"date":"2019-11-26T15:51:17.000Z","subtitle":null,"_content":"\nOften it is important to trigger an event, after the user of your website/web app has filled out an text input. You have to do something with the given value in JavaScript.\n\nThe intended event for this is ``change``, which will be triggered, when the user has ended changing by leaving the input with his cursor, mostly by using the TAB key. This works at some degree, if there is a physical keyboard, but not really on mobile devices ... and for me is leaving the field often too late to start the upcoming event.\n\n<!-- more -->\n\nA better way to show the user the result of his entered value, could be the event ``input`` which fires on every key stroke, but could be way to often, if the triggered event is for example an AJAX call.\n\nBest solution is, to observe the users key strokes and trigger the event, when he stops typing. Then there is no extra action needed by the user and the event isn't triggered multiple times. \n\nHere's an implementation with jQuery:\n\n```javascript\n$(\"#my-text-input\").keyup(function () {\n    var $this = $(this);\n    clearTimeout($.data(this, 'timer'));\n    var wait = setTimeout(function () {\n\n        //do something with the value...\n\n    }, 1000);\n    $(this).data('timer', wait);\n});\n```\n\nImportant is to wipe and set the timer on every key up, to achive that the event will be executed after 1 second after the last key stroke only.","source":"_posts/Better-Input-Change-Event.md","raw":"---\ntitle: Better Input Change Event\nphotograph:\n  file: '19-05 Israel-0624.jpg'\n  name: 'Jerusalem Seat'\n  link: 'https://500px.com/photo/1001751283/Jerusalem-Seat-by-Kristof-Zerbe'\ntags:\n  - jQuery\ncategories:\n  - JavaScript\ndate: 2019-11-26 16:51:17\nsubtitle:\n---\n\nOften it is important to trigger an event, after the user of your website/web app has filled out an text input. You have to do something with the given value in JavaScript.\n\nThe intended event for this is ``change``, which will be triggered, when the user has ended changing by leaving the input with his cursor, mostly by using the TAB key. This works at some degree, if there is a physical keyboard, but not really on mobile devices ... and for me is leaving the field often too late to start the upcoming event.\n\n<!-- more -->\n\nA better way to show the user the result of his entered value, could be the event ``input`` which fires on every key stroke, but could be way to often, if the triggered event is for example an AJAX call.\n\nBest solution is, to observe the users key strokes and trigger the event, when he stops typing. Then there is no extra action needed by the user and the event isn't triggered multiple times. \n\nHere's an implementation with jQuery:\n\n```javascript\n$(\"#my-text-input\").keyup(function () {\n    var $this = $(this);\n    clearTimeout($.data(this, 'timer'));\n    var wait = setTimeout(function () {\n\n        //do something with the value...\n\n    }, 1000);\n    $(this).data('timer', wait);\n});\n```\n\nImportant is to wipe and set the timer on every key up, to achive that the event will be executed after 1 second after the last key stroke only.","slug":"Better-Input-Change-Event","published":1,"updated":"2020-06-22T12:24:56.667Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckbxwzilq00058cl9g3vmk8va","content":"<p>Often it is important to trigger an event, after the user of your website/web app has filled out an text input. You have to do something with the given value in JavaScript.</p>\n<p>The intended event for this is <code>change</code>, which will be triggered, when the user has ended changing by leaving the input with his cursor, mostly by using the TAB key. This works at some degree, if there is a physical keyboard, but not really on mobile devices … and for me is leaving the field often too late to start the upcoming event.</p>\n<a id=\"more\"></a>\n\n<p>A better way to show the user the result of his entered value, could be the event <code>input</code> which fires on every key stroke, but could be way to often, if the triggered event is for example an AJAX call.</p>\n<p>Best solution is, to observe the users key strokes and trigger the event, when he stops typing. Then there is no extra action needed by the user and the event isn’t triggered multiple times. </p>\n<p>Here’s an implementation with jQuery:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">\"#my-text-input\"</span>).keyup(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> $<span class=\"keyword\">this</span> = $(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    clearTimeout($.data(<span class=\"keyword\">this</span>, <span class=\"string\">'timer'</span>));</span><br><span class=\"line\">    <span class=\"keyword\">var</span> wait = setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//do something with the value...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">    $(<span class=\"keyword\">this</span>).data(<span class=\"string\">'timer'</span>, wait);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>Important is to wipe and set the timer on every key up, to achive that the event will be executed after 1 second after the last key stroke only.</p>\n","site":{"data":{}},"excerpt":"<p>Often it is important to trigger an event, after the user of your website/web app has filled out an text input. You have to do something with the given value in JavaScript.</p>\n<p>The intended event for this is <code>change</code>, which will be triggered, when the user has ended changing by leaving the input with his cursor, mostly by using the TAB key. This works at some degree, if there is a physical keyboard, but not really on mobile devices … and for me is leaving the field often too late to start the upcoming event.</p>","more":"<p>A better way to show the user the result of his entered value, could be the event <code>input</code> which fires on every key stroke, but could be way to often, if the triggered event is for example an AJAX call.</p>\n<p>Best solution is, to observe the users key strokes and trigger the event, when he stops typing. Then there is no extra action needed by the user and the event isn’t triggered multiple times. </p>\n<p>Here’s an implementation with jQuery:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">\"#my-text-input\"</span>).keyup(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> $<span class=\"keyword\">this</span> = $(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    clearTimeout($.data(<span class=\"keyword\">this</span>, <span class=\"string\">'timer'</span>));</span><br><span class=\"line\">    <span class=\"keyword\">var</span> wait = setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//do something with the value...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">    $(<span class=\"keyword\">this</span>).data(<span class=\"string\">'timer'</span>, wait);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>Important is to wipe and set the timer on every key up, to achive that the event will be executed after 1 second after the last key stroke only.</p>"},{"title":"A New Blog: VS Code, Hexo and GitHub Pages","subtitle":"Part One of having fun with Hexo and GitHub Pages","photograph":{"file":"19-07 Schottland-0405.jpg","name":"Tiny Scots 7","link":"https://500px.com/photo/1002666873/Tiny-Scots-7-by-Kristof-Zerbe"},"series":"A New Blog","part":1,"date":"2019-09-23T22:00:00.000Z","_content":"\nA few days ago I puzzled over a technical problem regarding SQL Server, Active Directory and Visual Studio Database Projects. With tips, hints and snippets from several websites I got it running and the solution was absolutely memorable. For myself and for others. Nothing is harder than to know 'you did this before...', but not to remember how.\n\nBecause of this strong leaning towards oblivion, I started over 20 years ago my very first website **zerbit.de**, manually crafted with Classic ASP and a SQL Server database as backend, with an editor, tagging, categories and so on. It was really exciting to build this blog from scratch and writing articles for it, but it was so time consuming to expand the features of the website and keep it running, that some day I quit it silently.\n\nSo, to document the solution mentioned above, I could use tools like OneNote or others, like in the past years, but this would be just for me and not for all developers, who have a similar problem. I felt it would be unfair to participate from the knowledge of others to get my solution and dont give something back.\n\nI decided to write an article just in HTML and publish it on my personal GitHub Page that I didn't used so far. Ok, just Text ... ugly. Just a little CSS and a little more structure and maybe I should do something with Vue JS ... STOP ... It would be better to pick one of the cool new static website generators based on Node.js, to detain myself from inventing the wheel again and save my time to write articles. So I did a little research and found [HEXO](https://hexo.io) ... Bingo! I can work with my favorite editor [Visual Studio Code](https://code.visualstudio.com/), its all HTML, JavaScript and CSS, I can write my articles in Markdown and Hexo has a lot of helpers for stuff Markdown doesn't provide, it produces static files and works only with files, therefore no need for a database ... and it is well documented.\n<!-- more -->\n\n## Installation\n\n.. is quite easy, as described here: [https://hexo.io/docs/setup](https://hexo.io/docs/setup)\n\n1. Create folder and open in VS Code\n2. Open VS Code Terminal window\n3. Install Hexo with ``$ npm install -g hexo-cli``\n4. Init Hexo project with ``$ hexo init``\n5. Install dependencies with ``npm install``\n6. Done\n\n![New Hexo Project](A-New-Blog-VS-Code-Hexo-and-GitHub-Pages/vscode-1.png)\n\n## Writing\n\n### Create new post/draft\n\nHexo has posts and drafts, whereat drafts has to published via a Hexo command to become a post. To create an article use the command ``hexo new post|draft \"My Title\"``. The title will be converted in a URL-encoded string and will be used as file name and url.\n\n### Meta data\nEvery post/draft starts with its header (so called [Front Matter](https://hexo.io/docs/front-matter)) to store some meta data, which describes the post, like ``title``, ``date``, ``tags`` or ``categories``. This is used by Hexo to classify and arrange your post during the build.\n\n### Markdown\nHexo posts/drafts are written in [Markdown](https://en.wikipedia.org/wiki/Markdown). Good syntax reference are the [Markdown Guide](https://www.markdownguide.org/basic-syntax/) and the more detailed [Markdown Syntax Guide](https://sourceforge.net/p/hexo/wiki/markdown_syntax/).\n\n### Excerpt\nIs is usual to show a short excerpt an the start page of a blog, to keep it compact and teasering the user to click on a READ MORE button. To achieve this, you just have to add following comment to your article. Everything above is the excerpt and everything below is only shown, when you enter the article:\n\n    <!-- more -->\n\n### Images\n\nSome articles will contain images to illustrate something and the question is, where should they be stored? Answer: In a folder beside the post/draft, which has the same name as the article MD file. To get this, you have to activate the setting ``post_asset_folder`` in your ``_config.yml``. Now this folder will be created automatically, when you add a new post/draft.\n\nIn your Markdown you reference your image with:\n\n    {% asset_img image-1.png \"Test Image\" %}\n\n![Reference Image](A-New-Blog-VS-Code-Hexo-and-GitHub-Pages/vscode-2.png)\n\n## Build\n\nHexo is a website generator, so a build will generate the whole website in a special folder, which has to be published. This output folder can be configured in the ``_config.yml``:\n\n    public_dir: public\n\nTo wipe the output folder, run the command:\n\n    hexo clean\n\nTo start the build, run:\n\n    hexo generate\n\nTo view the website via the build-in local Hexo server, run:\n\n    hexo server\n\n## Publishing\n\nMost \"complex\" task was to publish the new blog on [GitHub Pages](https://pages.github.com/). My first approach was to use my personal page, as I did with my single HTML file, but this didn't work, because I wanted to store the whole project on GitHub and it is not possible to point a personal page to the subdirectory **docs** or use a different branch as **master**.\n\nThe simple solution was to create a new repository, named after my my blog **kiko.io**, to store teh whole project and point the GitHub Page to the subdirectory **docs** in the settings of the repository.\n\n![GitHub Settings](A-New-Blog-VS-Code-Hexo-and-GitHub-Pages/github-1.png)\n\nBy overriding the default publish folder of Hexo in ``_config.yml`` ...\n\n    public_dir: docs\n\n... everything was set up. Commit and Push via git and done.\n\nHexo has its own deploying mechanism and it is advisable to disable it, by commenting out the Deployment section ``_config.yml``.\n\nNext step was to use my own custom domain for the blog. To achieve this, the most easiest way is to create a text file named ``CNAME`` (without extension!) with the content of the domain in a single line and publish this file in the root of the docs folder. Github will recognize this file and do the setup automatically.\n\nTo point the domain to GitHub, I had to create following ``A`` records in my domain providers DNS settings:\n\n* 185.199.108.153\n* 185.199.109.153\n* 185.199.110.153\n* 185.199.111.153\n\nLast step was to enable **Enforce HTTPS** in the repositories settings.\n\n---\n\n## Related\n\n* [A New Blog (Part Two): Customizing Hexo](/categories/Tools/A-New-Blog-Customizing-Hexo/)\n* [A New Blog (Part Three): Blogging and Synching en route](/categories/Tools/A-New-Blog-Blogging-and-Synching-en-route/)\n","source":"_posts/A-New-Blog-VS-Code-Hexo-and-GitHub-Pages.md","raw":"---\ntitle: 'A New Blog: VS Code, Hexo and GitHub Pages'\nsubtitle: 'Part One of having fun with Hexo and GitHub Pages'\nphotograph: \n    file: '19-07 Schottland-0405.jpg'\n    name: 'Tiny Scots 7'\n    link: 'https://500px.com/photo/1002666873/Tiny-Scots-7-by-Kristof-Zerbe'\nseries: 'A New Blog'\npart: 1\ndate: 2019-09-24\ntags:\n  - VS Code\n  - Hexo\n  - GitHub\n  - Blogging\ncategories:\n  - Tools\n---\n\nA few days ago I puzzled over a technical problem regarding SQL Server, Active Directory and Visual Studio Database Projects. With tips, hints and snippets from several websites I got it running and the solution was absolutely memorable. For myself and for others. Nothing is harder than to know 'you did this before...', but not to remember how.\n\nBecause of this strong leaning towards oblivion, I started over 20 years ago my very first website **zerbit.de**, manually crafted with Classic ASP and a SQL Server database as backend, with an editor, tagging, categories and so on. It was really exciting to build this blog from scratch and writing articles for it, but it was so time consuming to expand the features of the website and keep it running, that some day I quit it silently.\n\nSo, to document the solution mentioned above, I could use tools like OneNote or others, like in the past years, but this would be just for me and not for all developers, who have a similar problem. I felt it would be unfair to participate from the knowledge of others to get my solution and dont give something back.\n\nI decided to write an article just in HTML and publish it on my personal GitHub Page that I didn't used so far. Ok, just Text ... ugly. Just a little CSS and a little more structure and maybe I should do something with Vue JS ... STOP ... It would be better to pick one of the cool new static website generators based on Node.js, to detain myself from inventing the wheel again and save my time to write articles. So I did a little research and found [HEXO](https://hexo.io) ... Bingo! I can work with my favorite editor [Visual Studio Code](https://code.visualstudio.com/), its all HTML, JavaScript and CSS, I can write my articles in Markdown and Hexo has a lot of helpers for stuff Markdown doesn't provide, it produces static files and works only with files, therefore no need for a database ... and it is well documented.\n<!-- more -->\n\n## Installation\n\n.. is quite easy, as described here: [https://hexo.io/docs/setup](https://hexo.io/docs/setup)\n\n1. Create folder and open in VS Code\n2. Open VS Code Terminal window\n3. Install Hexo with ``$ npm install -g hexo-cli``\n4. Init Hexo project with ``$ hexo init``\n5. Install dependencies with ``npm install``\n6. Done\n\n![New Hexo Project](A-New-Blog-VS-Code-Hexo-and-GitHub-Pages/vscode-1.png)\n\n## Writing\n\n### Create new post/draft\n\nHexo has posts and drafts, whereat drafts has to published via a Hexo command to become a post. To create an article use the command ``hexo new post|draft \"My Title\"``. The title will be converted in a URL-encoded string and will be used as file name and url.\n\n### Meta data\nEvery post/draft starts with its header (so called [Front Matter](https://hexo.io/docs/front-matter)) to store some meta data, which describes the post, like ``title``, ``date``, ``tags`` or ``categories``. This is used by Hexo to classify and arrange your post during the build.\n\n### Markdown\nHexo posts/drafts are written in [Markdown](https://en.wikipedia.org/wiki/Markdown). Good syntax reference are the [Markdown Guide](https://www.markdownguide.org/basic-syntax/) and the more detailed [Markdown Syntax Guide](https://sourceforge.net/p/hexo/wiki/markdown_syntax/).\n\n### Excerpt\nIs is usual to show a short excerpt an the start page of a blog, to keep it compact and teasering the user to click on a READ MORE button. To achieve this, you just have to add following comment to your article. Everything above is the excerpt and everything below is only shown, when you enter the article:\n\n    <!-- more -->\n\n### Images\n\nSome articles will contain images to illustrate something and the question is, where should they be stored? Answer: In a folder beside the post/draft, which has the same name as the article MD file. To get this, you have to activate the setting ``post_asset_folder`` in your ``_config.yml``. Now this folder will be created automatically, when you add a new post/draft.\n\nIn your Markdown you reference your image with:\n\n    {% asset_img image-1.png \"Test Image\" %}\n\n![Reference Image](A-New-Blog-VS-Code-Hexo-and-GitHub-Pages/vscode-2.png)\n\n## Build\n\nHexo is a website generator, so a build will generate the whole website in a special folder, which has to be published. This output folder can be configured in the ``_config.yml``:\n\n    public_dir: public\n\nTo wipe the output folder, run the command:\n\n    hexo clean\n\nTo start the build, run:\n\n    hexo generate\n\nTo view the website via the build-in local Hexo server, run:\n\n    hexo server\n\n## Publishing\n\nMost \"complex\" task was to publish the new blog on [GitHub Pages](https://pages.github.com/). My first approach was to use my personal page, as I did with my single HTML file, but this didn't work, because I wanted to store the whole project on GitHub and it is not possible to point a personal page to the subdirectory **docs** or use a different branch as **master**.\n\nThe simple solution was to create a new repository, named after my my blog **kiko.io**, to store teh whole project and point the GitHub Page to the subdirectory **docs** in the settings of the repository.\n\n![GitHub Settings](A-New-Blog-VS-Code-Hexo-and-GitHub-Pages/github-1.png)\n\nBy overriding the default publish folder of Hexo in ``_config.yml`` ...\n\n    public_dir: docs\n\n... everything was set up. Commit and Push via git and done.\n\nHexo has its own deploying mechanism and it is advisable to disable it, by commenting out the Deployment section ``_config.yml``.\n\nNext step was to use my own custom domain for the blog. To achieve this, the most easiest way is to create a text file named ``CNAME`` (without extension!) with the content of the domain in a single line and publish this file in the root of the docs folder. Github will recognize this file and do the setup automatically.\n\nTo point the domain to GitHub, I had to create following ``A`` records in my domain providers DNS settings:\n\n* 185.199.108.153\n* 185.199.109.153\n* 185.199.110.153\n* 185.199.111.153\n\nLast step was to enable **Enforce HTTPS** in the repositories settings.\n\n---\n\n## Related\n\n* [A New Blog (Part Two): Customizing Hexo](/categories/Tools/A-New-Blog-Customizing-Hexo/)\n* [A New Blog (Part Three): Blogging and Synching en route](/categories/Tools/A-New-Blog-Blogging-and-Synching-en-route/)\n","slug":"A-New-Blog-VS-Code-Hexo-and-GitHub-Pages","published":1,"updated":"2019-11-03T13:38:50.142Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckbxwzils00068cl9h64gn2d8","content":"<p>A few days ago I puzzled over a technical problem regarding SQL Server, Active Directory and Visual Studio Database Projects. With tips, hints and snippets from several websites I got it running and the solution was absolutely memorable. For myself and for others. Nothing is harder than to know ‘you did this before…’, but not to remember how.</p>\n<p>Because of this strong leaning towards oblivion, I started over 20 years ago my very first website <strong>zerbit.de</strong>, manually crafted with Classic ASP and a SQL Server database as backend, with an editor, tagging, categories and so on. It was really exciting to build this blog from scratch and writing articles for it, but it was so time consuming to expand the features of the website and keep it running, that some day I quit it silently.</p>\n<p>So, to document the solution mentioned above, I could use tools like OneNote or others, like in the past years, but this would be just for me and not for all developers, who have a similar problem. I felt it would be unfair to participate from the knowledge of others to get my solution and dont give something back.</p>\n<p>I decided to write an article just in HTML and publish it on my personal GitHub Page that I didn’t used so far. Ok, just Text … ugly. Just a little CSS and a little more structure and maybe I should do something with Vue JS … STOP … It would be better to pick one of the cool new static website generators based on Node.js, to detain myself from inventing the wheel again and save my time to write articles. So I did a little research and found <a href=\"https://hexo.io\" target=\"_blank\" rel=\"noopener\">HEXO</a> … Bingo! I can work with my favorite editor <a href=\"https://code.visualstudio.com/\" target=\"_blank\" rel=\"noopener\">Visual Studio Code</a>, its all HTML, JavaScript and CSS, I can write my articles in Markdown and Hexo has a lot of helpers for stuff Markdown doesn’t provide, it produces static files and works only with files, therefore no need for a database … and it is well documented.</p>\n<a id=\"more\"></a>\n\n<h2 id=\"Installation\"><a href=\"#Installation\" class=\"headerlink\" title=\"Installation\"></a>Installation</h2><p>.. is quite easy, as described here: <a href=\"https://hexo.io/docs/setup\" target=\"_blank\" rel=\"noopener\">https://hexo.io/docs/setup</a></p>\n<ol>\n<li>Create folder and open in VS Code</li>\n<li>Open VS Code Terminal window</li>\n<li>Install Hexo with <code>$ npm install -g hexo-cli</code></li>\n<li>Init Hexo project with <code>$ hexo init</code></li>\n<li>Install dependencies with <code>npm install</code></li>\n<li>Done</li>\n</ol>\n<p><img src=\"/categories/Tools/A-New-Blog-VS-Code-Hexo-and-GitHub-Pages/vscode-1.png\" alt=\"New Hexo Project\"></p>\n<h2 id=\"Writing\"><a href=\"#Writing\" class=\"headerlink\" title=\"Writing\"></a>Writing</h2><h3 id=\"Create-new-post-draft\"><a href=\"#Create-new-post-draft\" class=\"headerlink\" title=\"Create new post/draft\"></a>Create new post/draft</h3><p>Hexo has posts and drafts, whereat drafts has to published via a Hexo command to become a post. To create an article use the command <code>hexo new post|draft &quot;My Title&quot;</code>. The title will be converted in a URL-encoded string and will be used as file name and url.</p>\n<h3 id=\"Meta-data\"><a href=\"#Meta-data\" class=\"headerlink\" title=\"Meta data\"></a>Meta data</h3><p>Every post/draft starts with its header (so called <a href=\"https://hexo.io/docs/front-matter\" target=\"_blank\" rel=\"noopener\">Front Matter</a>) to store some meta data, which describes the post, like <code>title</code>, <code>date</code>, <code>tags</code> or <code>categories</code>. This is used by Hexo to classify and arrange your post during the build.</p>\n<h3 id=\"Markdown\"><a href=\"#Markdown\" class=\"headerlink\" title=\"Markdown\"></a>Markdown</h3><p>Hexo posts/drafts are written in <a href=\"https://en.wikipedia.org/wiki/Markdown\" target=\"_blank\" rel=\"noopener\">Markdown</a>. Good syntax reference are the <a href=\"https://www.markdownguide.org/basic-syntax/\" target=\"_blank\" rel=\"noopener\">Markdown Guide</a> and the more detailed <a href=\"https://sourceforge.net/p/hexo/wiki/markdown_syntax/\" target=\"_blank\" rel=\"noopener\">Markdown Syntax Guide</a>.</p>\n<h3 id=\"Excerpt\"><a href=\"#Excerpt\" class=\"headerlink\" title=\"Excerpt\"></a>Excerpt</h3><p>Is is usual to show a short excerpt an the start page of a blog, to keep it compact and teasering the user to click on a READ MORE button. To achieve this, you just have to add following comment to your article. Everything above is the excerpt and everything below is only shown, when you enter the article:</p>\n<pre><code>&lt;!-- more --&gt;</code></pre><h3 id=\"Images\"><a href=\"#Images\" class=\"headerlink\" title=\"Images\"></a>Images</h3><p>Some articles will contain images to illustrate something and the question is, where should they be stored? Answer: In a folder beside the post/draft, which has the same name as the article MD file. To get this, you have to activate the setting <code>post_asset_folder</code> in your <code>_config.yml</code>. Now this folder will be created automatically, when you add a new post/draft.</p>\n<p>In your Markdown you reference your image with:</p>\n<pre><code>{% asset_img image-1.png \"Test Image\" %}</code></pre><p><img src=\"/categories/Tools/A-New-Blog-VS-Code-Hexo-and-GitHub-Pages/vscode-2.png\" alt=\"Reference Image\"></p>\n<h2 id=\"Build\"><a href=\"#Build\" class=\"headerlink\" title=\"Build\"></a>Build</h2><p>Hexo is a website generator, so a build will generate the whole website in a special folder, which has to be published. This output folder can be configured in the <code>_config.yml</code>:</p>\n<pre><code>public_dir: public</code></pre><p>To wipe the output folder, run the command:</p>\n<pre><code>hexo clean</code></pre><p>To start the build, run:</p>\n<pre><code>hexo generate</code></pre><p>To view the website via the build-in local Hexo server, run:</p>\n<pre><code>hexo server</code></pre><h2 id=\"Publishing\"><a href=\"#Publishing\" class=\"headerlink\" title=\"Publishing\"></a>Publishing</h2><p>Most “complex” task was to publish the new blog on <a href=\"https://pages.github.com/\" target=\"_blank\" rel=\"noopener\">GitHub Pages</a>. My first approach was to use my personal page, as I did with my single HTML file, but this didn’t work, because I wanted to store the whole project on GitHub and it is not possible to point a personal page to the subdirectory <strong>docs</strong> or use a different branch as <strong>master</strong>.</p>\n<p>The simple solution was to create a new repository, named after my my blog <strong>kiko.io</strong>, to store teh whole project and point the GitHub Page to the subdirectory <strong>docs</strong> in the settings of the repository.</p>\n<p><img src=\"/categories/Tools/A-New-Blog-VS-Code-Hexo-and-GitHub-Pages/github-1.png\" alt=\"GitHub Settings\"></p>\n<p>By overriding the default publish folder of Hexo in <code>_config.yml</code> …</p>\n<pre><code>public_dir: docs</code></pre><p>… everything was set up. Commit and Push via git and done.</p>\n<p>Hexo has its own deploying mechanism and it is advisable to disable it, by commenting out the Deployment section <code>_config.yml</code>.</p>\n<p>Next step was to use my own custom domain for the blog. To achieve this, the most easiest way is to create a text file named <code>CNAME</code> (without extension!) with the content of the domain in a single line and publish this file in the root of the docs folder. Github will recognize this file and do the setup automatically.</p>\n<p>To point the domain to GitHub, I had to create following <code>A</code> records in my domain providers DNS settings:</p>\n<ul>\n<li>185.199.108.153</li>\n<li>185.199.109.153</li>\n<li>185.199.110.153</li>\n<li>185.199.111.153</li>\n</ul>\n<p>Last step was to enable <strong>Enforce HTTPS</strong> in the repositories settings.</p>\n<hr>\n<h2 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h2><ul>\n<li><a href=\"/categories/Tools/A-New-Blog-Customizing-Hexo/\">A New Blog (Part Two): Customizing Hexo</a></li>\n<li><a href=\"/categories/Tools/A-New-Blog-Blogging-and-Synching-en-route/\">A New Blog (Part Three): Blogging and Synching en route</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>A few days ago I puzzled over a technical problem regarding SQL Server, Active Directory and Visual Studio Database Projects. With tips, hints and snippets from several websites I got it running and the solution was absolutely memorable. For myself and for others. Nothing is harder than to know ‘you did this before…’, but not to remember how.</p>\n<p>Because of this strong leaning towards oblivion, I started over 20 years ago my very first website <strong>zerbit.de</strong>, manually crafted with Classic ASP and a SQL Server database as backend, with an editor, tagging, categories and so on. It was really exciting to build this blog from scratch and writing articles for it, but it was so time consuming to expand the features of the website and keep it running, that some day I quit it silently.</p>\n<p>So, to document the solution mentioned above, I could use tools like OneNote or others, like in the past years, but this would be just for me and not for all developers, who have a similar problem. I felt it would be unfair to participate from the knowledge of others to get my solution and dont give something back.</p>\n<p>I decided to write an article just in HTML and publish it on my personal GitHub Page that I didn’t used so far. Ok, just Text … ugly. Just a little CSS and a little more structure and maybe I should do something with Vue JS … STOP … It would be better to pick one of the cool new static website generators based on Node.js, to detain myself from inventing the wheel again and save my time to write articles. So I did a little research and found <a href=\"https://hexo.io\" target=\"_blank\" rel=\"noopener\">HEXO</a> … Bingo! I can work with my favorite editor <a href=\"https://code.visualstudio.com/\" target=\"_blank\" rel=\"noopener\">Visual Studio Code</a>, its all HTML, JavaScript and CSS, I can write my articles in Markdown and Hexo has a lot of helpers for stuff Markdown doesn’t provide, it produces static files and works only with files, therefore no need for a database … and it is well documented.</p>","more":"<h2 id=\"Installation\"><a href=\"#Installation\" class=\"headerlink\" title=\"Installation\"></a>Installation</h2><p>.. is quite easy, as described here: <a href=\"https://hexo.io/docs/setup\" target=\"_blank\" rel=\"noopener\">https://hexo.io/docs/setup</a></p>\n<ol>\n<li>Create folder and open in VS Code</li>\n<li>Open VS Code Terminal window</li>\n<li>Install Hexo with <code>$ npm install -g hexo-cli</code></li>\n<li>Init Hexo project with <code>$ hexo init</code></li>\n<li>Install dependencies with <code>npm install</code></li>\n<li>Done</li>\n</ol>\n<p><img src=\"/categories/Tools/A-New-Blog-VS-Code-Hexo-and-GitHub-Pages/vscode-1.png\" alt=\"New Hexo Project\"></p>\n<h2 id=\"Writing\"><a href=\"#Writing\" class=\"headerlink\" title=\"Writing\"></a>Writing</h2><h3 id=\"Create-new-post-draft\"><a href=\"#Create-new-post-draft\" class=\"headerlink\" title=\"Create new post/draft\"></a>Create new post/draft</h3><p>Hexo has posts and drafts, whereat drafts has to published via a Hexo command to become a post. To create an article use the command <code>hexo new post|draft &quot;My Title&quot;</code>. The title will be converted in a URL-encoded string and will be used as file name and url.</p>\n<h3 id=\"Meta-data\"><a href=\"#Meta-data\" class=\"headerlink\" title=\"Meta data\"></a>Meta data</h3><p>Every post/draft starts with its header (so called <a href=\"https://hexo.io/docs/front-matter\" target=\"_blank\" rel=\"noopener\">Front Matter</a>) to store some meta data, which describes the post, like <code>title</code>, <code>date</code>, <code>tags</code> or <code>categories</code>. This is used by Hexo to classify and arrange your post during the build.</p>\n<h3 id=\"Markdown\"><a href=\"#Markdown\" class=\"headerlink\" title=\"Markdown\"></a>Markdown</h3><p>Hexo posts/drafts are written in <a href=\"https://en.wikipedia.org/wiki/Markdown\" target=\"_blank\" rel=\"noopener\">Markdown</a>. Good syntax reference are the <a href=\"https://www.markdownguide.org/basic-syntax/\" target=\"_blank\" rel=\"noopener\">Markdown Guide</a> and the more detailed <a href=\"https://sourceforge.net/p/hexo/wiki/markdown_syntax/\" target=\"_blank\" rel=\"noopener\">Markdown Syntax Guide</a>.</p>\n<h3 id=\"Excerpt\"><a href=\"#Excerpt\" class=\"headerlink\" title=\"Excerpt\"></a>Excerpt</h3><p>Is is usual to show a short excerpt an the start page of a blog, to keep it compact and teasering the user to click on a READ MORE button. To achieve this, you just have to add following comment to your article. Everything above is the excerpt and everything below is only shown, when you enter the article:</p>\n<pre><code>&lt;!-- more --&gt;</code></pre><h3 id=\"Images\"><a href=\"#Images\" class=\"headerlink\" title=\"Images\"></a>Images</h3><p>Some articles will contain images to illustrate something and the question is, where should they be stored? Answer: In a folder beside the post/draft, which has the same name as the article MD file. To get this, you have to activate the setting <code>post_asset_folder</code> in your <code>_config.yml</code>. Now this folder will be created automatically, when you add a new post/draft.</p>\n<p>In your Markdown you reference your image with:</p>\n<pre><code>{% asset_img image-1.png \"Test Image\" %}</code></pre><p><img src=\"/categories/Tools/A-New-Blog-VS-Code-Hexo-and-GitHub-Pages/vscode-2.png\" alt=\"Reference Image\"></p>\n<h2 id=\"Build\"><a href=\"#Build\" class=\"headerlink\" title=\"Build\"></a>Build</h2><p>Hexo is a website generator, so a build will generate the whole website in a special folder, which has to be published. This output folder can be configured in the <code>_config.yml</code>:</p>\n<pre><code>public_dir: public</code></pre><p>To wipe the output folder, run the command:</p>\n<pre><code>hexo clean</code></pre><p>To start the build, run:</p>\n<pre><code>hexo generate</code></pre><p>To view the website via the build-in local Hexo server, run:</p>\n<pre><code>hexo server</code></pre><h2 id=\"Publishing\"><a href=\"#Publishing\" class=\"headerlink\" title=\"Publishing\"></a>Publishing</h2><p>Most “complex” task was to publish the new blog on <a href=\"https://pages.github.com/\" target=\"_blank\" rel=\"noopener\">GitHub Pages</a>. My first approach was to use my personal page, as I did with my single HTML file, but this didn’t work, because I wanted to store the whole project on GitHub and it is not possible to point a personal page to the subdirectory <strong>docs</strong> or use a different branch as <strong>master</strong>.</p>\n<p>The simple solution was to create a new repository, named after my my blog <strong>kiko.io</strong>, to store teh whole project and point the GitHub Page to the subdirectory <strong>docs</strong> in the settings of the repository.</p>\n<p><img src=\"/categories/Tools/A-New-Blog-VS-Code-Hexo-and-GitHub-Pages/github-1.png\" alt=\"GitHub Settings\"></p>\n<p>By overriding the default publish folder of Hexo in <code>_config.yml</code> …</p>\n<pre><code>public_dir: docs</code></pre><p>… everything was set up. Commit and Push via git and done.</p>\n<p>Hexo has its own deploying mechanism and it is advisable to disable it, by commenting out the Deployment section <code>_config.yml</code>.</p>\n<p>Next step was to use my own custom domain for the blog. To achieve this, the most easiest way is to create a text file named <code>CNAME</code> (without extension!) with the content of the domain in a single line and publish this file in the root of the docs folder. Github will recognize this file and do the setup automatically.</p>\n<p>To point the domain to GitHub, I had to create following <code>A</code> records in my domain providers DNS settings:</p>\n<ul>\n<li>185.199.108.153</li>\n<li>185.199.109.153</li>\n<li>185.199.110.153</li>\n<li>185.199.111.153</li>\n</ul>\n<p>Last step was to enable <strong>Enforce HTTPS</strong> in the repositories settings.</p>\n<hr>\n<h2 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h2><ul>\n<li><a href=\"/categories/Tools/A-New-Blog-Customizing-Hexo/\">A New Blog (Part Two): Customizing Hexo</a></li>\n<li><a href=\"/categories/Tools/A-New-Blog-Blogging-and-Synching-en-route/\">A New Blog (Part Three): Blogging and Synching en route</a></li>\n</ul>"},{"title":"Hexo and the Dark Mode ... revised","subtitle":"Second approach to implement 'prefers-color-scheme'","photograph":{"file":"19-07 Schottland-0025.jpg","name":"Glencoe River","link":"https://500px.com/photo/1005490038/Glencoe-River-by-Kristof-Zerbe"},"date":"2019-10-26T12:08:05.000Z","_content":"\nWhile writing my post [Hexo and the Dark Mode](/categories/Tools/Hexo-and-the-Dark-Mode) a few days ago, I thought it would be nice, if I could switch between the normal (light) and the dark theme, I've created for the support of the OS-related Dark Mode, even manually. The only thing I needed was a toggle element and a little bit of JavaScript.\n\nOf course, I couldn't manipulate the [media query ``prefers-color-scheme``](https://drafts.csswg.org/mediaqueries-5/#descdef-media-prefers-color-scheme) itself, but introduce a different way by blog uses it. Instead of implementing the media query directly into my CSS (or Stylus) code, I used a root selector, which can be manipulated by JavaScript ... something like this:\n\n```css\nbody {\n    background-color: white;\n    color: black;\n}\n\n[data-theme=\"dark\"] body {\n    background-color: black;\n    color: white;\n  }\n}\n```\n<!-- more -->\n\nIn every Stylus file, where I used ``@media prefers-dark`` to achieve the automatic switch by the OS, I changed this line into ``/[data-theme=\"dark\"] &`` :\n\n```styl\n#mobile-nav-header\n  background-color: color-background\n  /[data-theme=\"dark\"] &\n    background-color: dark-color-background\n  img.avatar\n    ...\n    /[data-theme=\"dark\"] &\n      filter: brightness(85%)\n```\n\nSome explanations on the [Stylus syntax](http://stylus-lang.com/docs/selectors.html): ``/`` means the root of the DOM and ``&`` points to the parent selector. Therefore the example will be rendered into this:\n\n```css\n#mobile-nav-header {\n    background-color: #f1f1f1;\n}\n[data-theme=\"dark\"] #mobile-nav-header {\n    background-color: #111;\n}\n\n#mobile-nav-header img.avatar {\n...\n}\n[data-theme=\"dark\"] #mobile-nav-header img.avatar\n    filter: brightness(85%);\n}\n```\n\nOnly problem was: the \"Root + Parent\" Stylus selector doesn't work in the block variables in the ``_extend.styl``. So I had to copy all theme relevant styles directly to the elements, where such a block was used: ``@extend <block-name>``.\n\n### The Toggle Switch\n\nIn the ``footer.ejs`` I added a toggle checkbox, where I could bind my JavaScript...\n\n```html\n<div id=\"footer-theme\">\n    <input type=\"checkbox\" id=\"theme-switch\">\n    <label for=\"theme-switch\"></label>\n</div>\n```\n\n... and some CSS in the ``footer.styl``, to style it:\n\n```styl\ninput#theme-switch[type=checkbox] {\n  display:none;\n}\n\ninput#theme-switch[type=checkbox] + label\n  height: 16px\n  width: 16px\n  display: inline-block\n  padding: 12px\n  font-size: 22px\n  cursor: pointer\n  &:before\n    display: inline-block\n    font-size: inherit\n    text-rendering: auto\n    -webkit-font-smoothing: antialiased\n    font-family: fa-icon-solid\n    content: icon-moon\n\ninput#theme-switch[type=checkbox]:checked + label\n  &:before\n    content: icon-sun\n```\n\nThe ``icon`` variables are defined in the ``_variables.styl`` like this:\n\n```styl\nicon-moon = \"\\f186\"\nicon-sun = \"\\f185\"\n```\n\n### The JavaScript\n\nEverything was now prepared to implement the switching code in JavaScript, which should support a manual switch by clicking the toggle element as well as the automatic switch by the OS.\n\nI wrapped all necessary code into a seperate JS file and placed a reference in the ``after-footer.ejs``, which places it at the bottom of the HTML:\n\n```ejs\n<%- js('js/dark-mode-toggle.js') %>\n```\n\n```js\nfunction detectColorScheme() {\n    var theme = \"light\"; //default\n\n    // get last used theme from local cache\n    if(localStorage.getItem(\"theme\")){\n        if(localStorage.getItem(\"theme\") === \"dark\"){\n            theme = \"dark\";\n        }\n    } else if(!window.matchMedia) { \n        // matchMedia not supported  \n        return false;\n    } else if(window.matchMedia(\"(prefers-color-scheme: dark)\").matches) {\n        // OS has set Dark Mode\n        theme = \"dark\";\n    }\n\n    // set detected theme\n    if (theme === \"dark\") {\n        setThemeDark();\n    } else {\n        setThemeLight();\n    }\n}\n\nconst toggleTheme = document.querySelector('input#theme-switch[type=\"checkbox\"]');\n\nfunction setThemeDark() {\n    localStorage.setItem('theme', 'dark');\n    document.documentElement.setAttribute('data-theme', 'dark');\n    toggleTheme.checked = true;\n}\nfunction setThemeLight() {\n    localStorage.setItem('theme', 'light');\n    document.documentElement.setAttribute('data-theme', 'light');\n    toggleTheme.checked = false;\n}\n\n// Listener for theme change by toggle\ntoggleTheme.addEventListener('change', function(e) {\n    if (e.target.checked) {\n        setThemeDark();\n    } else {\n        setThemeLight();\n    }\n}, false);\n\n// Listener for theme change by OS\nvar toggleOS = window.matchMedia('(prefers-color-scheme: dark)');\ntoggleOS.addEventListener('change', function (e) {\n    if (e.matches) {\n        setThemeDark();\n    } else {\n        setThemeLight();\n    }\n});\n\n// call theme detection\ndetectColorScheme();\n```\n\nBy using the both ``addEventListener``'s, each switch will be recognized and this approach is capable to support even more themes, just by using different values in the ``data-theme`` attribute.\n\n## Related\n\n* [Hexo and the Dark Mode](/categories/Tools/Hexo-and-the-Dark-Mode)","source":"_posts/Hexo-and-the-Dark-Mode-revised.md","raw":"---\ntitle: Hexo and the Dark Mode ... revised\nsubtitle: Second approach to implement 'prefers-color-scheme'\nphotograph: \n    file: '19-07 Schottland-0025.jpg'\n    name: 'Glencoe River'\n    link: 'https://500px.com/photo/1005490038/Glencoe-River-by-Kristof-Zerbe'\ntags:\n  - Hexo\n  - CSS\n  - Stylus\n  - Dark Mode\ncategories:\n  - Tools\ndate: 2019-10-26 14:08:05\n---\n\nWhile writing my post [Hexo and the Dark Mode](/categories/Tools/Hexo-and-the-Dark-Mode) a few days ago, I thought it would be nice, if I could switch between the normal (light) and the dark theme, I've created for the support of the OS-related Dark Mode, even manually. The only thing I needed was a toggle element and a little bit of JavaScript.\n\nOf course, I couldn't manipulate the [media query ``prefers-color-scheme``](https://drafts.csswg.org/mediaqueries-5/#descdef-media-prefers-color-scheme) itself, but introduce a different way by blog uses it. Instead of implementing the media query directly into my CSS (or Stylus) code, I used a root selector, which can be manipulated by JavaScript ... something like this:\n\n```css\nbody {\n    background-color: white;\n    color: black;\n}\n\n[data-theme=\"dark\"] body {\n    background-color: black;\n    color: white;\n  }\n}\n```\n<!-- more -->\n\nIn every Stylus file, where I used ``@media prefers-dark`` to achieve the automatic switch by the OS, I changed this line into ``/[data-theme=\"dark\"] &`` :\n\n```styl\n#mobile-nav-header\n  background-color: color-background\n  /[data-theme=\"dark\"] &\n    background-color: dark-color-background\n  img.avatar\n    ...\n    /[data-theme=\"dark\"] &\n      filter: brightness(85%)\n```\n\nSome explanations on the [Stylus syntax](http://stylus-lang.com/docs/selectors.html): ``/`` means the root of the DOM and ``&`` points to the parent selector. Therefore the example will be rendered into this:\n\n```css\n#mobile-nav-header {\n    background-color: #f1f1f1;\n}\n[data-theme=\"dark\"] #mobile-nav-header {\n    background-color: #111;\n}\n\n#mobile-nav-header img.avatar {\n...\n}\n[data-theme=\"dark\"] #mobile-nav-header img.avatar\n    filter: brightness(85%);\n}\n```\n\nOnly problem was: the \"Root + Parent\" Stylus selector doesn't work in the block variables in the ``_extend.styl``. So I had to copy all theme relevant styles directly to the elements, where such a block was used: ``@extend <block-name>``.\n\n### The Toggle Switch\n\nIn the ``footer.ejs`` I added a toggle checkbox, where I could bind my JavaScript...\n\n```html\n<div id=\"footer-theme\">\n    <input type=\"checkbox\" id=\"theme-switch\">\n    <label for=\"theme-switch\"></label>\n</div>\n```\n\n... and some CSS in the ``footer.styl``, to style it:\n\n```styl\ninput#theme-switch[type=checkbox] {\n  display:none;\n}\n\ninput#theme-switch[type=checkbox] + label\n  height: 16px\n  width: 16px\n  display: inline-block\n  padding: 12px\n  font-size: 22px\n  cursor: pointer\n  &:before\n    display: inline-block\n    font-size: inherit\n    text-rendering: auto\n    -webkit-font-smoothing: antialiased\n    font-family: fa-icon-solid\n    content: icon-moon\n\ninput#theme-switch[type=checkbox]:checked + label\n  &:before\n    content: icon-sun\n```\n\nThe ``icon`` variables are defined in the ``_variables.styl`` like this:\n\n```styl\nicon-moon = \"\\f186\"\nicon-sun = \"\\f185\"\n```\n\n### The JavaScript\n\nEverything was now prepared to implement the switching code in JavaScript, which should support a manual switch by clicking the toggle element as well as the automatic switch by the OS.\n\nI wrapped all necessary code into a seperate JS file and placed a reference in the ``after-footer.ejs``, which places it at the bottom of the HTML:\n\n```ejs\n<%- js('js/dark-mode-toggle.js') %>\n```\n\n```js\nfunction detectColorScheme() {\n    var theme = \"light\"; //default\n\n    // get last used theme from local cache\n    if(localStorage.getItem(\"theme\")){\n        if(localStorage.getItem(\"theme\") === \"dark\"){\n            theme = \"dark\";\n        }\n    } else if(!window.matchMedia) { \n        // matchMedia not supported  \n        return false;\n    } else if(window.matchMedia(\"(prefers-color-scheme: dark)\").matches) {\n        // OS has set Dark Mode\n        theme = \"dark\";\n    }\n\n    // set detected theme\n    if (theme === \"dark\") {\n        setThemeDark();\n    } else {\n        setThemeLight();\n    }\n}\n\nconst toggleTheme = document.querySelector('input#theme-switch[type=\"checkbox\"]');\n\nfunction setThemeDark() {\n    localStorage.setItem('theme', 'dark');\n    document.documentElement.setAttribute('data-theme', 'dark');\n    toggleTheme.checked = true;\n}\nfunction setThemeLight() {\n    localStorage.setItem('theme', 'light');\n    document.documentElement.setAttribute('data-theme', 'light');\n    toggleTheme.checked = false;\n}\n\n// Listener for theme change by toggle\ntoggleTheme.addEventListener('change', function(e) {\n    if (e.target.checked) {\n        setThemeDark();\n    } else {\n        setThemeLight();\n    }\n}, false);\n\n// Listener for theme change by OS\nvar toggleOS = window.matchMedia('(prefers-color-scheme: dark)');\ntoggleOS.addEventListener('change', function (e) {\n    if (e.matches) {\n        setThemeDark();\n    } else {\n        setThemeLight();\n    }\n});\n\n// call theme detection\ndetectColorScheme();\n```\n\nBy using the both ``addEventListener``'s, each switch will be recognized and this approach is capable to support even more themes, just by using different values in the ``data-theme`` attribute.\n\n## Related\n\n* [Hexo and the Dark Mode](/categories/Tools/Hexo-and-the-Dark-Mode)","slug":"Hexo-and-the-Dark-Mode-revised","published":1,"updated":"2020-06-22T12:23:19.198Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckbxwzilw00098cl92rmyks2k","content":"<p>While writing my post <a href=\"/categories/Tools/Hexo-and-the-Dark-Mode\">Hexo and the Dark Mode</a> a few days ago, I thought it would be nice, if I could switch between the normal (light) and the dark theme, I’ve created for the support of the OS-related Dark Mode, even manually. The only thing I needed was a toggle element and a little bit of JavaScript.</p>\n<p>Of course, I couldn’t manipulate the <a href=\"https://drafts.csswg.org/mediaqueries-5/#descdef-media-prefers-color-scheme\" target=\"_blank\" rel=\"noopener\">media query <code>prefers-color-scheme</code></a> itself, but introduce a different way by blog uses it. Instead of implementing the media query directly into my CSS (or Stylus) code, I used a root selector, which can be manipulated by JavaScript … something like this:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: white;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: black;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-attr\">[data-theme=\"dark\"]</span> <span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: black;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: white;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<a id=\"more\"></a>\n\n<p>In every Stylus file, where I used <code>@media prefers-dark</code> to achieve the automatic switch by the OS, I changed this line into <code>/[data-theme=&quot;dark&quot;] &amp;</code> :</p>\n<figure class=\"highlight styl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#mobile-nav-header</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: color-background</span><br><span class=\"line\">  /[data-theme=<span class=\"string\">\"dark\"</span>] &amp;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: dark-color-background</span><br><span class=\"line\">  <span class=\"selector-tag\">img</span>.avatar</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    /[data-theme=<span class=\"string\">\"dark\"</span>] &amp;</span><br><span class=\"line\">      <span class=\"attribute\">filter</span>: brightness(<span class=\"number\">85%</span>)</span><br></pre></td></tr></table></figure>\n\n<p>Some explanations on the <a href=\"http://stylus-lang.com/docs/selectors.html\" target=\"_blank\" rel=\"noopener\">Stylus syntax</a>: <code>/</code> means the root of the DOM and <code>&amp;</code> points to the parent selector. Therefore the example will be rendered into this:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#mobile-nav-header</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#f1f1f1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-attr\">[data-theme=\"dark\"]</span> <span class=\"selector-id\">#mobile-nav-header</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#111</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#mobile-nav-header</span> <span class=\"selector-tag\">img</span><span class=\"selector-class\">.avatar</span> &#123;</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-attr\">[data-theme=\"dark\"]</span> <span class=\"selector-id\">#mobile-nav-header</span> <span class=\"selector-tag\">img</span><span class=\"selector-class\">.avatar</span></span><br><span class=\"line\">    <span class=\"selector-tag\">filter</span>: <span class=\"selector-tag\">brightness</span>(85%);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Only problem was: the “Root + Parent” Stylus selector doesn’t work in the block variables in the <code>_extend.styl</code>. So I had to copy all theme relevant styles directly to the elements, where such a block was used: <code>@extend &lt;block-name&gt;</code>.</p>\n<h3 id=\"The-Toggle-Switch\"><a href=\"#The-Toggle-Switch\" class=\"headerlink\" title=\"The Toggle Switch\"></a>The Toggle Switch</h3><p>In the <code>footer.ejs</code> I added a toggle checkbox, where I could bind my JavaScript…</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"footer-theme\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"theme-switch\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"theme-switch\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>… and some CSS in the <code>footer.styl</code>, to style it:</p>\n<figure class=\"highlight styl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">input<span class=\"selector-id\">#theme-switch</span>[type=checkbox] &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>:none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">input<span class=\"selector-id\">#theme-switch</span>[type=checkbox] + label</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">16px</span></span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">16px</span></span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline-block</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">12px</span></span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">22px</span></span><br><span class=\"line\">  <span class=\"attribute\">cursor</span>: pointer</span><br><span class=\"line\">  &amp;:before</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: inline-block</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: inherit</span><br><span class=\"line\">    <span class=\"attribute\">text-rendering</span>: auto</span><br><span class=\"line\">    -webkit-<span class=\"attribute\">font</span>-smoothing: antialiased</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: fa-icon-solid</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: icon-moon</span><br><span class=\"line\"></span><br><span class=\"line\">input<span class=\"selector-id\">#theme-switch</span>[type=checkbox]:checked + label</span><br><span class=\"line\">  &amp;:before</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: icon-sun</span><br></pre></td></tr></table></figure>\n\n<p>The <code>icon</code> variables are defined in the <code>_variables.styl</code> like this:</p>\n<figure class=\"highlight styl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">icon</span>-moon = <span class=\"string\">\"\\f186\"</span></span><br><span class=\"line\"><span class=\"attribute\">icon</span>-sun = <span class=\"string\">\"\\f185\"</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"The-JavaScript\"><a href=\"#The-JavaScript\" class=\"headerlink\" title=\"The JavaScript\"></a>The JavaScript</h3><p>Everything was now prepared to implement the switching code in JavaScript, which should support a manual switch by clicking the toggle element as well as the automatic switch by the OS.</p>\n<p>I wrapped all necessary code into a seperate JS file and placed a reference in the <code>after-footer.ejs</code>, which places it at the bottom of the HTML:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%- js(&apos;js/dark-mode-toggle.js&apos;) %&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">detectColorScheme</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> theme = <span class=\"string\">\"light\"</span>; <span class=\"comment\">//default</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// get last used theme from local cache</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(localStorage.getItem(<span class=\"string\">\"theme\"</span>))&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(localStorage.getItem(<span class=\"string\">\"theme\"</span>) === <span class=\"string\">\"dark\"</span>)&#123;</span><br><span class=\"line\">            theme = <span class=\"string\">\"dark\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(!<span class=\"built_in\">window</span>.matchMedia) &#123; </span><br><span class=\"line\">        <span class=\"comment\">// matchMedia not supported  </span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"built_in\">window</span>.matchMedia(<span class=\"string\">\"(prefers-color-scheme: dark)\"</span>).matches) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// OS has set Dark Mode</span></span><br><span class=\"line\">        theme = <span class=\"string\">\"dark\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// set detected theme</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (theme === <span class=\"string\">\"dark\"</span>) &#123;</span><br><span class=\"line\">        setThemeDark();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        setThemeLight();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> toggleTheme = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'input#theme-switch[type=\"checkbox\"]'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setThemeDark</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    localStorage.setItem(<span class=\"string\">'theme'</span>, <span class=\"string\">'dark'</span>);</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.documentElement.setAttribute(<span class=\"string\">'data-theme'</span>, <span class=\"string\">'dark'</span>);</span><br><span class=\"line\">    toggleTheme.checked = <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setThemeLight</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    localStorage.setItem(<span class=\"string\">'theme'</span>, <span class=\"string\">'light'</span>);</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.documentElement.setAttribute(<span class=\"string\">'data-theme'</span>, <span class=\"string\">'light'</span>);</span><br><span class=\"line\">    toggleTheme.checked = <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Listener for theme change by toggle</span></span><br><span class=\"line\">toggleTheme.addEventListener(<span class=\"string\">'change'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (e.target.checked) &#123;</span><br><span class=\"line\">        setThemeDark();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        setThemeLight();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;, <span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Listener for theme change by OS</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> toggleOS = <span class=\"built_in\">window</span>.matchMedia(<span class=\"string\">'(prefers-color-scheme: dark)'</span>);</span><br><span class=\"line\">toggleOS.addEventListener(<span class=\"string\">'change'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (e.matches) &#123;</span><br><span class=\"line\">        setThemeDark();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        setThemeLight();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// call theme detection</span></span><br><span class=\"line\">detectColorScheme();</span><br></pre></td></tr></table></figure>\n\n<p>By using the both <code>addEventListener</code>‘s, each switch will be recognized and this approach is capable to support even more themes, just by using different values in the <code>data-theme</code> attribute.</p>\n<h2 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h2><ul>\n<li><a href=\"/categories/Tools/Hexo-and-the-Dark-Mode\">Hexo and the Dark Mode</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>While writing my post <a href=\"/categories/Tools/Hexo-and-the-Dark-Mode\">Hexo and the Dark Mode</a> a few days ago, I thought it would be nice, if I could switch between the normal (light) and the dark theme, I’ve created for the support of the OS-related Dark Mode, even manually. The only thing I needed was a toggle element and a little bit of JavaScript.</p>\n<p>Of course, I couldn’t manipulate the <a href=\"https://drafts.csswg.org/mediaqueries-5/#descdef-media-prefers-color-scheme\" target=\"_blank\" rel=\"noopener\">media query <code>prefers-color-scheme</code></a> itself, but introduce a different way by blog uses it. Instead of implementing the media query directly into my CSS (or Stylus) code, I used a root selector, which can be manipulated by JavaScript … something like this:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: white;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: black;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-attr\">[data-theme=\"dark\"]</span> <span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: black;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: white;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","more":"<p>In every Stylus file, where I used <code>@media prefers-dark</code> to achieve the automatic switch by the OS, I changed this line into <code>/[data-theme=&quot;dark&quot;] &amp;</code> :</p>\n<figure class=\"highlight styl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#mobile-nav-header</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: color-background</span><br><span class=\"line\">  /[data-theme=<span class=\"string\">\"dark\"</span>] &amp;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: dark-color-background</span><br><span class=\"line\">  <span class=\"selector-tag\">img</span>.avatar</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    /[data-theme=<span class=\"string\">\"dark\"</span>] &amp;</span><br><span class=\"line\">      <span class=\"attribute\">filter</span>: brightness(<span class=\"number\">85%</span>)</span><br></pre></td></tr></table></figure>\n\n<p>Some explanations on the <a href=\"http://stylus-lang.com/docs/selectors.html\" target=\"_blank\" rel=\"noopener\">Stylus syntax</a>: <code>/</code> means the root of the DOM and <code>&amp;</code> points to the parent selector. Therefore the example will be rendered into this:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#mobile-nav-header</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#f1f1f1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-attr\">[data-theme=\"dark\"]</span> <span class=\"selector-id\">#mobile-nav-header</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#111</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#mobile-nav-header</span> <span class=\"selector-tag\">img</span><span class=\"selector-class\">.avatar</span> &#123;</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-attr\">[data-theme=\"dark\"]</span> <span class=\"selector-id\">#mobile-nav-header</span> <span class=\"selector-tag\">img</span><span class=\"selector-class\">.avatar</span></span><br><span class=\"line\">    <span class=\"selector-tag\">filter</span>: <span class=\"selector-tag\">brightness</span>(85%);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Only problem was: the “Root + Parent” Stylus selector doesn’t work in the block variables in the <code>_extend.styl</code>. So I had to copy all theme relevant styles directly to the elements, where such a block was used: <code>@extend &lt;block-name&gt;</code>.</p>\n<h3 id=\"The-Toggle-Switch\"><a href=\"#The-Toggle-Switch\" class=\"headerlink\" title=\"The Toggle Switch\"></a>The Toggle Switch</h3><p>In the <code>footer.ejs</code> I added a toggle checkbox, where I could bind my JavaScript…</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"footer-theme\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"theme-switch\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"theme-switch\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>… and some CSS in the <code>footer.styl</code>, to style it:</p>\n<figure class=\"highlight styl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">input<span class=\"selector-id\">#theme-switch</span>[type=checkbox] &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>:none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">input<span class=\"selector-id\">#theme-switch</span>[type=checkbox] + label</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">16px</span></span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">16px</span></span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline-block</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">12px</span></span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">22px</span></span><br><span class=\"line\">  <span class=\"attribute\">cursor</span>: pointer</span><br><span class=\"line\">  &amp;:before</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: inline-block</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: inherit</span><br><span class=\"line\">    <span class=\"attribute\">text-rendering</span>: auto</span><br><span class=\"line\">    -webkit-<span class=\"attribute\">font</span>-smoothing: antialiased</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: fa-icon-solid</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: icon-moon</span><br><span class=\"line\"></span><br><span class=\"line\">input<span class=\"selector-id\">#theme-switch</span>[type=checkbox]:checked + label</span><br><span class=\"line\">  &amp;:before</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: icon-sun</span><br></pre></td></tr></table></figure>\n\n<p>The <code>icon</code> variables are defined in the <code>_variables.styl</code> like this:</p>\n<figure class=\"highlight styl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">icon</span>-moon = <span class=\"string\">\"\\f186\"</span></span><br><span class=\"line\"><span class=\"attribute\">icon</span>-sun = <span class=\"string\">\"\\f185\"</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"The-JavaScript\"><a href=\"#The-JavaScript\" class=\"headerlink\" title=\"The JavaScript\"></a>The JavaScript</h3><p>Everything was now prepared to implement the switching code in JavaScript, which should support a manual switch by clicking the toggle element as well as the automatic switch by the OS.</p>\n<p>I wrapped all necessary code into a seperate JS file and placed a reference in the <code>after-footer.ejs</code>, which places it at the bottom of the HTML:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%- js(&apos;js/dark-mode-toggle.js&apos;) %&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">detectColorScheme</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> theme = <span class=\"string\">\"light\"</span>; <span class=\"comment\">//default</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// get last used theme from local cache</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(localStorage.getItem(<span class=\"string\">\"theme\"</span>))&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(localStorage.getItem(<span class=\"string\">\"theme\"</span>) === <span class=\"string\">\"dark\"</span>)&#123;</span><br><span class=\"line\">            theme = <span class=\"string\">\"dark\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(!<span class=\"built_in\">window</span>.matchMedia) &#123; </span><br><span class=\"line\">        <span class=\"comment\">// matchMedia not supported  </span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"built_in\">window</span>.matchMedia(<span class=\"string\">\"(prefers-color-scheme: dark)\"</span>).matches) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// OS has set Dark Mode</span></span><br><span class=\"line\">        theme = <span class=\"string\">\"dark\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// set detected theme</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (theme === <span class=\"string\">\"dark\"</span>) &#123;</span><br><span class=\"line\">        setThemeDark();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        setThemeLight();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> toggleTheme = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'input#theme-switch[type=\"checkbox\"]'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setThemeDark</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    localStorage.setItem(<span class=\"string\">'theme'</span>, <span class=\"string\">'dark'</span>);</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.documentElement.setAttribute(<span class=\"string\">'data-theme'</span>, <span class=\"string\">'dark'</span>);</span><br><span class=\"line\">    toggleTheme.checked = <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setThemeLight</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    localStorage.setItem(<span class=\"string\">'theme'</span>, <span class=\"string\">'light'</span>);</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.documentElement.setAttribute(<span class=\"string\">'data-theme'</span>, <span class=\"string\">'light'</span>);</span><br><span class=\"line\">    toggleTheme.checked = <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Listener for theme change by toggle</span></span><br><span class=\"line\">toggleTheme.addEventListener(<span class=\"string\">'change'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (e.target.checked) &#123;</span><br><span class=\"line\">        setThemeDark();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        setThemeLight();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;, <span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Listener for theme change by OS</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> toggleOS = <span class=\"built_in\">window</span>.matchMedia(<span class=\"string\">'(prefers-color-scheme: dark)'</span>);</span><br><span class=\"line\">toggleOS.addEventListener(<span class=\"string\">'change'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (e.matches) &#123;</span><br><span class=\"line\">        setThemeDark();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        setThemeLight();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// call theme detection</span></span><br><span class=\"line\">detectColorScheme();</span><br></pre></td></tr></table></figure>\n\n<p>By using the both <code>addEventListener</code>‘s, each switch will be recognized and this approach is capable to support even more themes, just by using different values in the <code>data-theme</code> attribute.</p>\n<h2 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h2><ul>\n<li><a href=\"/categories/Tools/Hexo-and-the-Dark-Mode\">Hexo and the Dark Mode</a></li>\n</ul>"},{"title":"Hexo and the Dark Mode","subtitle":"First approach to implement 'prefers-color-scheme'","photograph":{"file":"19-07 Schottland-0016_AUR.jpg","name":"Glencoe Valley HDR","link":"https://500px.com/photo/1005490349/Glencoe-Valley-HDR-by-Kristof-Zerbe"},"date":"2019-10-23T13:28:04.000Z","_content":"\nDue to the fact, that nowadays everybody is talking about Dark Modes for Browsers and Operating Systems, in order to save battery or for easier reading (uhh, really?), I decided my blog should support that.\n\n![Switching Dark Mode in Windows 10](Hexo-and-the-Dark-Mode/screen-recording-1.gif)\n<!-- more -->\n\nStarting point is the new media query ``prefers-color-scheme``, which is actually supported by all modern browsers.\n\n### Technique\n\nMy first read was Tom Brow's [Dark mode in a website with CSS](https://tombrow.com/dark-mode-website-css), where he shows how to use the media query. Simplified, this is it, assuming the light version is the default:\n\n```css\nbody {\n    background-color: white;\n    color: black;\n}\n\n@media (prefers-color-scheme: dark) {\n  body {\n    background-color: black;\n    color: white;\n  }\n}\n```\n\n### Pimping CSS for automatic switching\n\nTo support the automatic browser/OS-based automatic switch in Hexo, where [Stylus](http://stylus-lang.com/) is used, I had to change some template files. First the ``_variables.styl``:\n\n```styl\n// existing color variables\ncolor-background = #f1f1f1\ncolor-foreground = #111\ncolor-border = #ddd\n...\n\n// new dark color variables\ndark-color-background = #111\ndark-color-foreground = #eee\ndark-color-border = #000\n...\n\n// new media query variable\nprefers-dark = \"(prefers-color-scheme: dark)\"\n```\n\nNext step was to change the ``_extend.styl``, where some Stylus variables are defining complete blocks to extend. Here I had to supplement all lines, where something mode-dependend was defined, by adding the new ``prefers-dark`` media query and beneath the new 'dark' equivalence of the style:\n\n```styl\n$base-style\n  hr\n    ...\n    border: 1px dashed color-border-article\n    @media prefers-dark\n      border: 1px dashed dark-color-border-article\n    ...\n\n$block\n  ...\n  background: color-block\n  box-shadow: 1px 2px 3px color-border\n  border: 1px solid color-border\n  @media prefers-dark\n    background: dark-color-block\n    box-shadow: 1px 2px 3px dark-color-border\n    border-color: dark-color-border\n\n...\n```\n\nThe same changes I had to do in every template ``styl`` file, where one of the colors or other mode dependent style was used. For example:\n\n```styl\n#mobile-nav-header\n  background-color: color-background\n  @media prefers-dark\n    background-color: dark-color-background\n  img.avatar\n    ...\n    @media prefers-dark\n      filter: brightness(85%)\n```\n\nThis will be rendered as:\n\n```css\n  #mobile-nav-header {\n    background-color: #f1f1f1;\n  }\n  @media (prefers-color-scheme: dark) {\n      #mobile-nav-header {\n      background-color: #111;\n    }\n  }\n\n  #mobile-nav-header img.avatar {\n    ...\n  }\n  @media (prefers-color-scheme: dark) {\n    filter: brightness(85%);\n  }\n```\n\nPlease note the use of ``filter:brightness()`` in the example. It is always advisable to darken the images too, because they can really pop out on dark backgrounds.\n\n## Related\n\n* [Hexo and the Dark Mode ... revised](/categories/Tools/Hexo-and-the-Dark-Mode-revised)\n","source":"_posts/Hexo-and-the-Dark-Mode.md","raw":"---\ntitle: Hexo and the Dark Mode\nsubtitle: First approach to implement 'prefers-color-scheme'\nphotograph: \n  file: '19-07 Schottland-0016_AUR.jpg'\n  name: 'Glencoe Valley HDR'\n  link: 'https://500px.com/photo/1005490349/Glencoe-Valley-HDR-by-Kristof-Zerbe'\ntags:\n  - Hexo\n  - CSS\n  - Stylus\n  - Dark Mode\ncategories:\n  - Tools\ndate: 2019-10-23 15:28:04\n---\n\nDue to the fact, that nowadays everybody is talking about Dark Modes for Browsers and Operating Systems, in order to save battery or for easier reading (uhh, really?), I decided my blog should support that.\n\n![Switching Dark Mode in Windows 10](Hexo-and-the-Dark-Mode/screen-recording-1.gif)\n<!-- more -->\n\nStarting point is the new media query ``prefers-color-scheme``, which is actually supported by all modern browsers.\n\n### Technique\n\nMy first read was Tom Brow's [Dark mode in a website with CSS](https://tombrow.com/dark-mode-website-css), where he shows how to use the media query. Simplified, this is it, assuming the light version is the default:\n\n```css\nbody {\n    background-color: white;\n    color: black;\n}\n\n@media (prefers-color-scheme: dark) {\n  body {\n    background-color: black;\n    color: white;\n  }\n}\n```\n\n### Pimping CSS for automatic switching\n\nTo support the automatic browser/OS-based automatic switch in Hexo, where [Stylus](http://stylus-lang.com/) is used, I had to change some template files. First the ``_variables.styl``:\n\n```styl\n// existing color variables\ncolor-background = #f1f1f1\ncolor-foreground = #111\ncolor-border = #ddd\n...\n\n// new dark color variables\ndark-color-background = #111\ndark-color-foreground = #eee\ndark-color-border = #000\n...\n\n// new media query variable\nprefers-dark = \"(prefers-color-scheme: dark)\"\n```\n\nNext step was to change the ``_extend.styl``, where some Stylus variables are defining complete blocks to extend. Here I had to supplement all lines, where something mode-dependend was defined, by adding the new ``prefers-dark`` media query and beneath the new 'dark' equivalence of the style:\n\n```styl\n$base-style\n  hr\n    ...\n    border: 1px dashed color-border-article\n    @media prefers-dark\n      border: 1px dashed dark-color-border-article\n    ...\n\n$block\n  ...\n  background: color-block\n  box-shadow: 1px 2px 3px color-border\n  border: 1px solid color-border\n  @media prefers-dark\n    background: dark-color-block\n    box-shadow: 1px 2px 3px dark-color-border\n    border-color: dark-color-border\n\n...\n```\n\nThe same changes I had to do in every template ``styl`` file, where one of the colors or other mode dependent style was used. For example:\n\n```styl\n#mobile-nav-header\n  background-color: color-background\n  @media prefers-dark\n    background-color: dark-color-background\n  img.avatar\n    ...\n    @media prefers-dark\n      filter: brightness(85%)\n```\n\nThis will be rendered as:\n\n```css\n  #mobile-nav-header {\n    background-color: #f1f1f1;\n  }\n  @media (prefers-color-scheme: dark) {\n      #mobile-nav-header {\n      background-color: #111;\n    }\n  }\n\n  #mobile-nav-header img.avatar {\n    ...\n  }\n  @media (prefers-color-scheme: dark) {\n    filter: brightness(85%);\n  }\n```\n\nPlease note the use of ``filter:brightness()`` in the example. It is always advisable to darken the images too, because they can really pop out on dark backgrounds.\n\n## Related\n\n* [Hexo and the Dark Mode ... revised](/categories/Tools/Hexo-and-the-Dark-Mode-revised)\n","slug":"Hexo-and-the-Dark-Mode","published":1,"updated":"2020-06-22T12:23:19.199Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckbxwzilx000a8cl9i70skbvs","content":"<p>Due to the fact, that nowadays everybody is talking about Dark Modes for Browsers and Operating Systems, in order to save battery or for easier reading (uhh, really?), I decided my blog should support that.</p>\n<p><img src=\"/categories/Tools/Hexo-and-the-Dark-Mode/screen-recording-1.gif\" alt=\"Switching Dark Mode in Windows 10\"></p>\n<a id=\"more\"></a>\n\n<p>Starting point is the new media query <code>prefers-color-scheme</code>, which is actually supported by all modern browsers.</p>\n<h3 id=\"Technique\"><a href=\"#Technique\" class=\"headerlink\" title=\"Technique\"></a>Technique</h3><p>My first read was Tom Brow’s <a href=\"https://tombrow.com/dark-mode-website-css\" target=\"_blank\" rel=\"noopener\">Dark mode in a website with CSS</a>, where he shows how to use the media query. Simplified, this is it, assuming the light version is the default:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: white;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: black;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@<span class=\"keyword\">media</span> (prefers-color-scheme: dark) &#123;</span><br><span class=\"line\">  <span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: black;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: white;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Pimping-CSS-for-automatic-switching\"><a href=\"#Pimping-CSS-for-automatic-switching\" class=\"headerlink\" title=\"Pimping CSS for automatic switching\"></a>Pimping CSS for automatic switching</h3><p>To support the automatic browser/OS-based automatic switch in Hexo, where <a href=\"http://stylus-lang.com/\" target=\"_blank\" rel=\"noopener\">Stylus</a> is used, I had to change some template files. First the <code>_variables.styl</code>:</p>\n<figure class=\"highlight styl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// existing color variables</span></span><br><span class=\"line\"><span class=\"attribute\">color</span>-background = <span class=\"number\">#f1f1f1</span></span><br><span class=\"line\"><span class=\"attribute\">color</span>-foreground = <span class=\"number\">#111</span></span><br><span class=\"line\"><span class=\"attribute\">color</span>-border = <span class=\"number\">#ddd</span></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// new dark color variables</span></span><br><span class=\"line\">dark-<span class=\"attribute\">color</span>-background = <span class=\"number\">#111</span></span><br><span class=\"line\">dark-<span class=\"attribute\">color</span>-foreground = <span class=\"number\">#eee</span></span><br><span class=\"line\">dark-<span class=\"attribute\">color</span>-border = <span class=\"number\">#000</span></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// new media query variable</span></span><br><span class=\"line\">prefers-dark = <span class=\"string\">\"(prefers-color-scheme: dark)\"</span></span><br></pre></td></tr></table></figure>\n\n<p>Next step was to change the <code>_extend.styl</code>, where some Stylus variables are defining complete blocks to extend. Here I had to supplement all lines, where something mode-dependend was defined, by adding the new <code>prefers-dark</code> media query and beneath the new ‘dark’ equivalence of the style:</p>\n<figure class=\"highlight styl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$base</span>-style</span><br><span class=\"line\">  hr</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> dashed color-border-article</span><br><span class=\"line\">    @media prefers-dark</span><br><span class=\"line\">      <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> dashed dark-color-border-article</span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$block</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: color-block</span><br><span class=\"line\">  <span class=\"attribute\">box-shadow</span>: <span class=\"number\">1px</span> <span class=\"number\">2px</span> <span class=\"number\">3px</span> color-border</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid color-border</span><br><span class=\"line\">  @media prefers-dark</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: dark-color-block</span><br><span class=\"line\">    <span class=\"attribute\">box-shadow</span>: <span class=\"number\">1px</span> <span class=\"number\">2px</span> <span class=\"number\">3px</span> dark-color-border</span><br><span class=\"line\">    <span class=\"attribute\">border-color</span>: dark-color-border</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>The same changes I had to do in every template <code>styl</code> file, where one of the colors or other mode dependent style was used. For example:</p>\n<figure class=\"highlight styl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#mobile-nav-header</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: color-background</span><br><span class=\"line\">  @media prefers-dark</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: dark-color-background</span><br><span class=\"line\">  <span class=\"selector-tag\">img</span>.avatar</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    @media prefers-dark</span><br><span class=\"line\">      <span class=\"attribute\">filter</span>: brightness(<span class=\"number\">85%</span>)</span><br></pre></td></tr></table></figure>\n\n<p>This will be rendered as:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#mobile-nav-header</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#f1f1f1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@<span class=\"keyword\">media</span> (prefers-color-scheme: dark) &#123;</span><br><span class=\"line\">    <span class=\"selector-id\">#mobile-nav-header</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#111</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#mobile-nav-header</span> <span class=\"selector-tag\">img</span><span class=\"selector-class\">.avatar</span> &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@<span class=\"keyword\">media</span> (prefers-color-scheme: dark) &#123;</span><br><span class=\"line\">  <span class=\"selector-tag\">filter</span>: <span class=\"selector-tag\">brightness</span>(85%);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Please note the use of <code>filter:brightness()</code> in the example. It is always advisable to darken the images too, because they can really pop out on dark backgrounds.</p>\n<h2 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h2><ul>\n<li><a href=\"/categories/Tools/Hexo-and-the-Dark-Mode-revised\">Hexo and the Dark Mode … revised</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>Due to the fact, that nowadays everybody is talking about Dark Modes for Browsers and Operating Systems, in order to save battery or for easier reading (uhh, really?), I decided my blog should support that.</p>\n<p><img src=\"/categories/Tools/Hexo-and-the-Dark-Mode/screen-recording-1.gif\" alt=\"Switching Dark Mode in Windows 10\"></p>","more":"<p>Starting point is the new media query <code>prefers-color-scheme</code>, which is actually supported by all modern browsers.</p>\n<h3 id=\"Technique\"><a href=\"#Technique\" class=\"headerlink\" title=\"Technique\"></a>Technique</h3><p>My first read was Tom Brow’s <a href=\"https://tombrow.com/dark-mode-website-css\" target=\"_blank\" rel=\"noopener\">Dark mode in a website with CSS</a>, where he shows how to use the media query. Simplified, this is it, assuming the light version is the default:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: white;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: black;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@<span class=\"keyword\">media</span> (prefers-color-scheme: dark) &#123;</span><br><span class=\"line\">  <span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: black;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: white;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Pimping-CSS-for-automatic-switching\"><a href=\"#Pimping-CSS-for-automatic-switching\" class=\"headerlink\" title=\"Pimping CSS for automatic switching\"></a>Pimping CSS for automatic switching</h3><p>To support the automatic browser/OS-based automatic switch in Hexo, where <a href=\"http://stylus-lang.com/\" target=\"_blank\" rel=\"noopener\">Stylus</a> is used, I had to change some template files. First the <code>_variables.styl</code>:</p>\n<figure class=\"highlight styl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// existing color variables</span></span><br><span class=\"line\"><span class=\"attribute\">color</span>-background = <span class=\"number\">#f1f1f1</span></span><br><span class=\"line\"><span class=\"attribute\">color</span>-foreground = <span class=\"number\">#111</span></span><br><span class=\"line\"><span class=\"attribute\">color</span>-border = <span class=\"number\">#ddd</span></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// new dark color variables</span></span><br><span class=\"line\">dark-<span class=\"attribute\">color</span>-background = <span class=\"number\">#111</span></span><br><span class=\"line\">dark-<span class=\"attribute\">color</span>-foreground = <span class=\"number\">#eee</span></span><br><span class=\"line\">dark-<span class=\"attribute\">color</span>-border = <span class=\"number\">#000</span></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// new media query variable</span></span><br><span class=\"line\">prefers-dark = <span class=\"string\">\"(prefers-color-scheme: dark)\"</span></span><br></pre></td></tr></table></figure>\n\n<p>Next step was to change the <code>_extend.styl</code>, where some Stylus variables are defining complete blocks to extend. Here I had to supplement all lines, where something mode-dependend was defined, by adding the new <code>prefers-dark</code> media query and beneath the new ‘dark’ equivalence of the style:</p>\n<figure class=\"highlight styl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$base</span>-style</span><br><span class=\"line\">  hr</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> dashed color-border-article</span><br><span class=\"line\">    @media prefers-dark</span><br><span class=\"line\">      <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> dashed dark-color-border-article</span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$block</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: color-block</span><br><span class=\"line\">  <span class=\"attribute\">box-shadow</span>: <span class=\"number\">1px</span> <span class=\"number\">2px</span> <span class=\"number\">3px</span> color-border</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid color-border</span><br><span class=\"line\">  @media prefers-dark</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: dark-color-block</span><br><span class=\"line\">    <span class=\"attribute\">box-shadow</span>: <span class=\"number\">1px</span> <span class=\"number\">2px</span> <span class=\"number\">3px</span> dark-color-border</span><br><span class=\"line\">    <span class=\"attribute\">border-color</span>: dark-color-border</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>The same changes I had to do in every template <code>styl</code> file, where one of the colors or other mode dependent style was used. For example:</p>\n<figure class=\"highlight styl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#mobile-nav-header</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: color-background</span><br><span class=\"line\">  @media prefers-dark</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: dark-color-background</span><br><span class=\"line\">  <span class=\"selector-tag\">img</span>.avatar</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    @media prefers-dark</span><br><span class=\"line\">      <span class=\"attribute\">filter</span>: brightness(<span class=\"number\">85%</span>)</span><br></pre></td></tr></table></figure>\n\n<p>This will be rendered as:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#mobile-nav-header</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#f1f1f1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@<span class=\"keyword\">media</span> (prefers-color-scheme: dark) &#123;</span><br><span class=\"line\">    <span class=\"selector-id\">#mobile-nav-header</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#111</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#mobile-nav-header</span> <span class=\"selector-tag\">img</span><span class=\"selector-class\">.avatar</span> &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@<span class=\"keyword\">media</span> (prefers-color-scheme: dark) &#123;</span><br><span class=\"line\">  <span class=\"selector-tag\">filter</span>: <span class=\"selector-tag\">brightness</span>(85%);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Please note the use of <code>filter:brightness()</code> in the example. It is always advisable to darken the images too, because they can really pop out on dark backgrounds.</p>\n<h2 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h2><ul>\n<li><a href=\"/categories/Tools/Hexo-and-the-Dark-Mode-revised\">Hexo and the Dark Mode … revised</a></li>\n</ul>"},{"title":"How-To: Visual Studio Database Project and ADSI","photograph":{"file":"19-05 Israel-0516.jpg","name":"Jaffa Accessoirs","link":"https://500px.com/photo/1005490988/Jaffa-Accessoirs-by-Kristof-Zerbe"},"date":"2019-09-17T10:00:01.000Z","_content":"If you are working with a Visual Studio Database Project and have to deal with data from the Active Directory via a Linked Server, you have to announce the data structure of the AD data in order to get the project compiled.\n<!-- more -->\n## Step 1 - Linking to the Active Directory\n\nFirst of all you have to connect your SQL Server to the AD permanently, by running  following SQL script once on your SQL Server:\n\n    USE [master]\n    GO\n    EXEC master.dbo.sp_addlinkedserver @server = N'ADSI', \n        @srvproduct=N'Active Directory Service Interfaces', \n        @provider=N'ADSDSOObject', \n        @datasrc=N'adsdatasource'\n    \n    EXEC master.dbo.sp_addlinkedsrvlogin @rmtsrvname=N'ADSI',\n        @useself=N'False',\n        @locallogin=NULL,\n        @rmtuser=N'mydomain\\myadminuser',\n        @rmtpassword='mypassword'\n    GO\n    \n    EXEC master.dbo.sp_serveroption @server=N'ADSI', \n        @optname=N'collation compatible', @optvalue=N'false'\n    GO\n    EXEC master.dbo.sp_serveroption @server=N'ADSI', \n        @optname=N'data access', @optvalue=N'true'\n    GO\n    EXEC master.dbo.sp_serveroption @server=N'ADSI', \n        @optname=N'dist', @optvalue=N'false'\n    GO\n    EXEC master.dbo.sp_serveroption @server=N'ADSI', \n        @optname=N'pub', @optvalue=N'false'\n    GO\n    EXEC master.dbo.sp_serveroption @server=N'ADSI', \n        @optname=N'rpc', @optvalue=N'false'\n    GO\n    EXEC master.dbo.sp_serveroption @server=N'ADSI', \n        @optname=N'rpc out', @optvalue=N'false'\n    GO\n    EXEC master.dbo.sp_serveroption @server=N'ADSI', \n        @optname=N'sub', @optvalue=N'false'\n    GO\n    EXEC master.dbo.sp_serveroption @server=N'ADSI', \n        @optname=N'connect timeout', @optvalue=N'0'\n    GO\n    EXEC master.dbo.sp_serveroption @server=N'ADSI', \n        @optname=N'collation name', @optvalue=null\n    GO\n    EXEC master.dbo.sp_serveroption @server=N'ADSI', \n        @optname=N'lazy schema validation', @optvalue=N'false'\n    GO\n    EXEC master.dbo.sp_serveroption @server=N'ADSI', \n        @optname=N'query timeout', @optvalue=N'0'\n    GO\n    EXEC master.dbo.sp_serveroption @server=N'ADSI', \n        @optname=N'use remote collation', @optvalue=N'true'\n    GO\n    EXEC master.dbo.sp_serveroption @server=N'ADSI', \n        @optname=N'remote proc transaction promotion', @optvalue=N'true'\n    GO\n\n## Step 2 - Fetching ADSI data  \n\nTo get data, use ``OpenQuery`` against the Linked Server. In order to get only persons and no system accounts, you should filter out all users, which has no firstname (``givenName``) or lastname (``sn``):\n\n    SELECT \n        UserPrincipalName, \n        DisplayName, \n        sAMAccountName AS [SamAccountName], \n        sn AS [LastName], \n        givenName AS [FirstName], \n        title AS [Title], \n        Mail as [MailAddress],\n        department AS [Department],\n        l AS [Location], \n        postalCode AS [PostCode], \n        streetAddress AS [Street],\n        st AS [State]\n    FROM OpenQuery(ADSI, '\n        SELECT \n            UserPrincipalName, \n            DisplayName, \n            sAMAccountName, \n            sn, \n            givenName, \n            department,\n            title, \n            Mail, \n            l, \n            postalCode, \n            streetAddress, \n            st\n        FROM ''LDAP://mydomain.de/DC=mydomain,DC=de'' \n        WHERE objectClass =  ''User'' \n        AND objectCategory = ''Person'' \n        AND sn=''*'' \n        AND givenName = ''*'' \n    ')    \n\nIn most cases you're done with that ... except your organisation has more the 900 users! Then you have to split the fetch in several requests, because SQL Server quits with an error, when trying to read more than 900 records via ADSI.  \n\nBest option is, to filter the ADSI statement by something like *'get all user starting with a to j'*, when you are sure, that in this case less than 900 records will be given back and repeat the statement several times and glue the data together via a ``UNION`` statement:\n\n<pre>\n<code>SELECT  \n    UserPrincipalName,  \n    DisplayName,  \n    sAMAccountName AS [SamAccountName],  \n    sn AS [LastName],  \n    givenName AS [FirstName],  \n    title AS [Title],  \n    Mail as [MailAddress],  \n    department AS [Department],  \n    l AS [Location],  \n    postalCode AS [PostCode],  \n    streetAddress AS [Street],  \n    st AS [State]  \nFROM (  \n    SELECT *  \n    FROM OpenQuery(ADSI, '  \n        SELECT  \n            UserPrincipalName,  \n            DisplayName,  \n            sAMAccountName,  \n            sn,  \n            givenName,  \n            department,  \n            title,  \n            Mail,  \n            l,  \n            postalCode,  \n            streetAddress,  \n            st  \n        FROM ''LDAP://mydomain.de/DC=mydomain,DC=de''  \n        WHERE objectClass =  ''User''  \n        AND objectCategory = ''Person''  \n        AND sn=''*''  \n        AND givenName = ''*''  \n        <strong>AND sAMAccountName &lt;= ''j''</strong>\n    ')  \n\n    <strong>UNION ALL</strong>  \n\n    SELECT *  \n    FROM OpenQuery(ADSI, '  \n        SELECT <em>[...same as above]</em>  \n        FROM ''LDAP://mydomain.de/DC=mydomain,DC=de''  \n        WHERE objectClass =  ''User''  \n        AND objectCategory = ''Person''  \n        AND sn=''*''  \n        AND givenName = ''*''  \n        <strong>AND sAMAccountName &gt; ''j''</strong>  \n        <strong>AND sAMAccountName &lt; ''p''</strong>  \n    ')\n\n    <strong>UNION ALL</strong>  \n\n    SELECT *  \n    FROM OpenQuery(ADSI,  '  \n        SELECT <em>[...same as above]</em>  \n        FROM ''LDAP://mydomain.de/DC=mydomain,DC=de''  \n        WHERE objectClass =  ''User''  \n        AND objectCategory = ''Person''  \n        AND sn=''*'' AND givenName = ''*''  \n        <strong>AND sAMAccountName &gt;= ''p''</strong>  \n    ')  \n) AD</code>\n</pre>\n\nWhen you store this as a VIEW, you can join it wherever you want on SQL Server:\n\n<pre>\n<code>CREATE VIEW [dbo].[vADUsers]\nAS\n    <em>[...SQL code from above]</em>\n\nGO</code>\n</pre>\n\n## Step 3 - SQL Server Database Project\n\nIf you work with a SQL Server Database Project, to have the complete structure of your database available in a version control system, you will get some reference errors on compiling and publishing your newly added SQL View ``vADUsers`` and on some objects, which rely on this View, because of following problems:\n\n1. Project doesn't know the Linked Server `ADSI`\n2. The structure (fields) of the data source is unknown\n\n### Declare the Linked Server\n\nTo show the Project that there is a Linked Server called ``ADSI``, just add following lines at the start of your view:\n\n<pre>\n<code><strong>sp_addlinkedserver 'ADSI'</strong>\n<strong>GO</strong>\n\nCREATE VIEW [dbo].[vADUsers]\nAS\n    <em>[...SQL code from above]</em></code>\n</pre>\n\nThis mimics the adding of a Linked Server, but will be ignored by SQL Server on publish, because you already have a Linked Server with this name. The project is happy with it.\n\n### Declare the data structure\n\nWhen you use the SQL-View ``vADUsers`` in a Stored Procedure for example, this object won't compile, because the project knows nothing about the fields of the ADSI data source. The SELECT in the view is not enough. You have to add an empty ``SELECT`` to the View ``vADUsers``, just for the declaration of the fields and without returning any records and join this via ``UNION`` with the other statements:\n\n<pre>\n<code>sp_addlinkedserver 'ADSI'\nGO\n\nCREATE VIEW [dbo].[vtADAllUsers]\nAS\n\nSELECT\n    UserPrincipalName,\n    DisplayName,\n    sAMAccountName AS [SamAccountName],\n    sn AS [LastName],\n    givenName AS [FirstName],\n    title AS [Title],\n    Mail as [MailAddress],\n    department AS [Department],\n    l AS [Location],\n    postalCode AS [PostCode],\n    streetAddress AS [Street],\n    st AS [State]\nFROM (\n\n    -- Fake SELECT to declare the structure of the view<strong>\n    SELECT TOP 0\n        '' UserPrincipalName,\n        '' DisplayName,\n        '' sAMAccountName,\n        '' sn,\n        '' givenName,\n        '' department,\n        '' title,\n        '' Mail,\n        '' l,\n        '' postalCode,\n        '' streetAddress,\n        '' st\n\n    UNION ALL</strong>\n\n    SELECT *\n    FROM OpenQuery(ADSI, '\n        SELECT\n            UserPrincipalName,\n            DisplayName,\n            sAMAccountName,\n            sn,\n            givenName,\n            department,\n            title,\n            Mail,\n            l,\n            postalCode,\n            streetAddress,\n            st\n        FROM ''LDAP://mydomain.de/DC=mydomain,DC=de''\n        WHERE objectClass =  ''User''\n        AND objectCategory = ''Person''\n        AND sn=''*''\n        AND givenName = ''*''\n        AND sAMAccountName &gt;= ''j''  \n    ')\n\n    UNION ALL  \n\n    SELECT *  \n    FROM OpenQuery(ADSI, '  \n        SELECT <em>[...same as above]</em>  \n        FROM ''LDAP://mydomain.de/DC=mydomain,DC=de''  \n        WHERE objectClass =  ''User''  \n        AND objectCategory = ''Person''  \n        AND sn=''*''  \n        AND givenName = ''*''  \n        AND sAMAccountName &lt; ''j''  \n        AND sAMAccountName &gt; ''p''  \n    ')\n\n    UNION ALL  \n\n    SELECT *  \n    FROM OpenQuery(ADSI,  '  \n        SELECT <em>[...same as above]</em>  \n        FROM ''LDAP://mydomain.de/DC=mydomain,DC=de''  \n        WHERE objectClass =  ''User''  \n        AND objectCategory = ''Person''  \n        AND sn=''*''  \n        AND givenName = ''*''  \n        AND sAMAccountName &lt;= ''p''  \n    ')\n) AD</code>\n</pre>\n\nNow, you can fetch data from Active Directory and store the code in a Database Project properly.\n\nHAPPY CODING :)\n","source":"_posts/How-To-Visual-Studio-Database-Project-and-ADSI.md","raw":"---\ntitle: 'How-To: Visual Studio Database Project and ADSI'\nphotograph: \n    file: '19-05 Israel-0516.jpg'\n    name: 'Jaffa Accessoirs'\n    link: 'https://500px.com/photo/1005490988/Jaffa-Accessoirs-by-Kristof-Zerbe'\ndate: 2019-09-17 12:00:01\ntags: \n    - ADSI\n    - Visual Studio\n    - Database Project\ncategories: \n    - SQL\n---\nIf you are working with a Visual Studio Database Project and have to deal with data from the Active Directory via a Linked Server, you have to announce the data structure of the AD data in order to get the project compiled.\n<!-- more -->\n## Step 1 - Linking to the Active Directory\n\nFirst of all you have to connect your SQL Server to the AD permanently, by running  following SQL script once on your SQL Server:\n\n    USE [master]\n    GO\n    EXEC master.dbo.sp_addlinkedserver @server = N'ADSI', \n        @srvproduct=N'Active Directory Service Interfaces', \n        @provider=N'ADSDSOObject', \n        @datasrc=N'adsdatasource'\n    \n    EXEC master.dbo.sp_addlinkedsrvlogin @rmtsrvname=N'ADSI',\n        @useself=N'False',\n        @locallogin=NULL,\n        @rmtuser=N'mydomain\\myadminuser',\n        @rmtpassword='mypassword'\n    GO\n    \n    EXEC master.dbo.sp_serveroption @server=N'ADSI', \n        @optname=N'collation compatible', @optvalue=N'false'\n    GO\n    EXEC master.dbo.sp_serveroption @server=N'ADSI', \n        @optname=N'data access', @optvalue=N'true'\n    GO\n    EXEC master.dbo.sp_serveroption @server=N'ADSI', \n        @optname=N'dist', @optvalue=N'false'\n    GO\n    EXEC master.dbo.sp_serveroption @server=N'ADSI', \n        @optname=N'pub', @optvalue=N'false'\n    GO\n    EXEC master.dbo.sp_serveroption @server=N'ADSI', \n        @optname=N'rpc', @optvalue=N'false'\n    GO\n    EXEC master.dbo.sp_serveroption @server=N'ADSI', \n        @optname=N'rpc out', @optvalue=N'false'\n    GO\n    EXEC master.dbo.sp_serveroption @server=N'ADSI', \n        @optname=N'sub', @optvalue=N'false'\n    GO\n    EXEC master.dbo.sp_serveroption @server=N'ADSI', \n        @optname=N'connect timeout', @optvalue=N'0'\n    GO\n    EXEC master.dbo.sp_serveroption @server=N'ADSI', \n        @optname=N'collation name', @optvalue=null\n    GO\n    EXEC master.dbo.sp_serveroption @server=N'ADSI', \n        @optname=N'lazy schema validation', @optvalue=N'false'\n    GO\n    EXEC master.dbo.sp_serveroption @server=N'ADSI', \n        @optname=N'query timeout', @optvalue=N'0'\n    GO\n    EXEC master.dbo.sp_serveroption @server=N'ADSI', \n        @optname=N'use remote collation', @optvalue=N'true'\n    GO\n    EXEC master.dbo.sp_serveroption @server=N'ADSI', \n        @optname=N'remote proc transaction promotion', @optvalue=N'true'\n    GO\n\n## Step 2 - Fetching ADSI data  \n\nTo get data, use ``OpenQuery`` against the Linked Server. In order to get only persons and no system accounts, you should filter out all users, which has no firstname (``givenName``) or lastname (``sn``):\n\n    SELECT \n        UserPrincipalName, \n        DisplayName, \n        sAMAccountName AS [SamAccountName], \n        sn AS [LastName], \n        givenName AS [FirstName], \n        title AS [Title], \n        Mail as [MailAddress],\n        department AS [Department],\n        l AS [Location], \n        postalCode AS [PostCode], \n        streetAddress AS [Street],\n        st AS [State]\n    FROM OpenQuery(ADSI, '\n        SELECT \n            UserPrincipalName, \n            DisplayName, \n            sAMAccountName, \n            sn, \n            givenName, \n            department,\n            title, \n            Mail, \n            l, \n            postalCode, \n            streetAddress, \n            st\n        FROM ''LDAP://mydomain.de/DC=mydomain,DC=de'' \n        WHERE objectClass =  ''User'' \n        AND objectCategory = ''Person'' \n        AND sn=''*'' \n        AND givenName = ''*'' \n    ')    \n\nIn most cases you're done with that ... except your organisation has more the 900 users! Then you have to split the fetch in several requests, because SQL Server quits with an error, when trying to read more than 900 records via ADSI.  \n\nBest option is, to filter the ADSI statement by something like *'get all user starting with a to j'*, when you are sure, that in this case less than 900 records will be given back and repeat the statement several times and glue the data together via a ``UNION`` statement:\n\n<pre>\n<code>SELECT  \n    UserPrincipalName,  \n    DisplayName,  \n    sAMAccountName AS [SamAccountName],  \n    sn AS [LastName],  \n    givenName AS [FirstName],  \n    title AS [Title],  \n    Mail as [MailAddress],  \n    department AS [Department],  \n    l AS [Location],  \n    postalCode AS [PostCode],  \n    streetAddress AS [Street],  \n    st AS [State]  \nFROM (  \n    SELECT *  \n    FROM OpenQuery(ADSI, '  \n        SELECT  \n            UserPrincipalName,  \n            DisplayName,  \n            sAMAccountName,  \n            sn,  \n            givenName,  \n            department,  \n            title,  \n            Mail,  \n            l,  \n            postalCode,  \n            streetAddress,  \n            st  \n        FROM ''LDAP://mydomain.de/DC=mydomain,DC=de''  \n        WHERE objectClass =  ''User''  \n        AND objectCategory = ''Person''  \n        AND sn=''*''  \n        AND givenName = ''*''  \n        <strong>AND sAMAccountName &lt;= ''j''</strong>\n    ')  \n\n    <strong>UNION ALL</strong>  \n\n    SELECT *  \n    FROM OpenQuery(ADSI, '  \n        SELECT <em>[...same as above]</em>  \n        FROM ''LDAP://mydomain.de/DC=mydomain,DC=de''  \n        WHERE objectClass =  ''User''  \n        AND objectCategory = ''Person''  \n        AND sn=''*''  \n        AND givenName = ''*''  \n        <strong>AND sAMAccountName &gt; ''j''</strong>  \n        <strong>AND sAMAccountName &lt; ''p''</strong>  \n    ')\n\n    <strong>UNION ALL</strong>  \n\n    SELECT *  \n    FROM OpenQuery(ADSI,  '  \n        SELECT <em>[...same as above]</em>  \n        FROM ''LDAP://mydomain.de/DC=mydomain,DC=de''  \n        WHERE objectClass =  ''User''  \n        AND objectCategory = ''Person''  \n        AND sn=''*'' AND givenName = ''*''  \n        <strong>AND sAMAccountName &gt;= ''p''</strong>  \n    ')  \n) AD</code>\n</pre>\n\nWhen you store this as a VIEW, you can join it wherever you want on SQL Server:\n\n<pre>\n<code>CREATE VIEW [dbo].[vADUsers]\nAS\n    <em>[...SQL code from above]</em>\n\nGO</code>\n</pre>\n\n## Step 3 - SQL Server Database Project\n\nIf you work with a SQL Server Database Project, to have the complete structure of your database available in a version control system, you will get some reference errors on compiling and publishing your newly added SQL View ``vADUsers`` and on some objects, which rely on this View, because of following problems:\n\n1. Project doesn't know the Linked Server `ADSI`\n2. The structure (fields) of the data source is unknown\n\n### Declare the Linked Server\n\nTo show the Project that there is a Linked Server called ``ADSI``, just add following lines at the start of your view:\n\n<pre>\n<code><strong>sp_addlinkedserver 'ADSI'</strong>\n<strong>GO</strong>\n\nCREATE VIEW [dbo].[vADUsers]\nAS\n    <em>[...SQL code from above]</em></code>\n</pre>\n\nThis mimics the adding of a Linked Server, but will be ignored by SQL Server on publish, because you already have a Linked Server with this name. The project is happy with it.\n\n### Declare the data structure\n\nWhen you use the SQL-View ``vADUsers`` in a Stored Procedure for example, this object won't compile, because the project knows nothing about the fields of the ADSI data source. The SELECT in the view is not enough. You have to add an empty ``SELECT`` to the View ``vADUsers``, just for the declaration of the fields and without returning any records and join this via ``UNION`` with the other statements:\n\n<pre>\n<code>sp_addlinkedserver 'ADSI'\nGO\n\nCREATE VIEW [dbo].[vtADAllUsers]\nAS\n\nSELECT\n    UserPrincipalName,\n    DisplayName,\n    sAMAccountName AS [SamAccountName],\n    sn AS [LastName],\n    givenName AS [FirstName],\n    title AS [Title],\n    Mail as [MailAddress],\n    department AS [Department],\n    l AS [Location],\n    postalCode AS [PostCode],\n    streetAddress AS [Street],\n    st AS [State]\nFROM (\n\n    -- Fake SELECT to declare the structure of the view<strong>\n    SELECT TOP 0\n        '' UserPrincipalName,\n        '' DisplayName,\n        '' sAMAccountName,\n        '' sn,\n        '' givenName,\n        '' department,\n        '' title,\n        '' Mail,\n        '' l,\n        '' postalCode,\n        '' streetAddress,\n        '' st\n\n    UNION ALL</strong>\n\n    SELECT *\n    FROM OpenQuery(ADSI, '\n        SELECT\n            UserPrincipalName,\n            DisplayName,\n            sAMAccountName,\n            sn,\n            givenName,\n            department,\n            title,\n            Mail,\n            l,\n            postalCode,\n            streetAddress,\n            st\n        FROM ''LDAP://mydomain.de/DC=mydomain,DC=de''\n        WHERE objectClass =  ''User''\n        AND objectCategory = ''Person''\n        AND sn=''*''\n        AND givenName = ''*''\n        AND sAMAccountName &gt;= ''j''  \n    ')\n\n    UNION ALL  \n\n    SELECT *  \n    FROM OpenQuery(ADSI, '  \n        SELECT <em>[...same as above]</em>  \n        FROM ''LDAP://mydomain.de/DC=mydomain,DC=de''  \n        WHERE objectClass =  ''User''  \n        AND objectCategory = ''Person''  \n        AND sn=''*''  \n        AND givenName = ''*''  \n        AND sAMAccountName &lt; ''j''  \n        AND sAMAccountName &gt; ''p''  \n    ')\n\n    UNION ALL  \n\n    SELECT *  \n    FROM OpenQuery(ADSI,  '  \n        SELECT <em>[...same as above]</em>  \n        FROM ''LDAP://mydomain.de/DC=mydomain,DC=de''  \n        WHERE objectClass =  ''User''  \n        AND objectCategory = ''Person''  \n        AND sn=''*''  \n        AND givenName = ''*''  \n        AND sAMAccountName &lt;= ''p''  \n    ')\n) AD</code>\n</pre>\n\nNow, you can fetch data from Active Directory and store the code in a Database Project properly.\n\nHAPPY CODING :)\n","slug":"How-To-Visual-Studio-Database-Project-and-ADSI","published":1,"updated":"2020-06-24T08:45:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckbxwzim0000e8cl9yam9adln","content":"<p>If you are working with a Visual Studio Database Project and have to deal with data from the Active Directory via a Linked Server, you have to announce the data structure of the AD data in order to get the project compiled.</p>\n<a id=\"more\"></a>\n<h2 id=\"Step-1-Linking-to-the-Active-Directory\"><a href=\"#Step-1-Linking-to-the-Active-Directory\" class=\"headerlink\" title=\"Step 1 - Linking to the Active Directory\"></a>Step 1 - Linking to the Active Directory</h2><p>First of all you have to connect your SQL Server to the AD permanently, by running  following SQL script once on your SQL Server:</p>\n<pre><code>USE [master]\nGO\nEXEC master.dbo.sp_addlinkedserver @server = N&apos;ADSI&apos;, \n    @srvproduct=N&apos;Active Directory Service Interfaces&apos;, \n    @provider=N&apos;ADSDSOObject&apos;, \n    @datasrc=N&apos;adsdatasource&apos;\n\nEXEC master.dbo.sp_addlinkedsrvlogin @rmtsrvname=N&apos;ADSI&apos;,\n    @useself=N&apos;False&apos;,\n    @locallogin=NULL,\n    @rmtuser=N&apos;mydomain\\myadminuser&apos;,\n    @rmtpassword=&apos;mypassword&apos;\nGO\n\nEXEC master.dbo.sp_serveroption @server=N&apos;ADSI&apos;, \n    @optname=N&apos;collation compatible&apos;, @optvalue=N&apos;false&apos;\nGO\nEXEC master.dbo.sp_serveroption @server=N&apos;ADSI&apos;, \n    @optname=N&apos;data access&apos;, @optvalue=N&apos;true&apos;\nGO\nEXEC master.dbo.sp_serveroption @server=N&apos;ADSI&apos;, \n    @optname=N&apos;dist&apos;, @optvalue=N&apos;false&apos;\nGO\nEXEC master.dbo.sp_serveroption @server=N&apos;ADSI&apos;, \n    @optname=N&apos;pub&apos;, @optvalue=N&apos;false&apos;\nGO\nEXEC master.dbo.sp_serveroption @server=N&apos;ADSI&apos;, \n    @optname=N&apos;rpc&apos;, @optvalue=N&apos;false&apos;\nGO\nEXEC master.dbo.sp_serveroption @server=N&apos;ADSI&apos;, \n    @optname=N&apos;rpc out&apos;, @optvalue=N&apos;false&apos;\nGO\nEXEC master.dbo.sp_serveroption @server=N&apos;ADSI&apos;, \n    @optname=N&apos;sub&apos;, @optvalue=N&apos;false&apos;\nGO\nEXEC master.dbo.sp_serveroption @server=N&apos;ADSI&apos;, \n    @optname=N&apos;connect timeout&apos;, @optvalue=N&apos;0&apos;\nGO\nEXEC master.dbo.sp_serveroption @server=N&apos;ADSI&apos;, \n    @optname=N&apos;collation name&apos;, @optvalue=null\nGO\nEXEC master.dbo.sp_serveroption @server=N&apos;ADSI&apos;, \n    @optname=N&apos;lazy schema validation&apos;, @optvalue=N&apos;false&apos;\nGO\nEXEC master.dbo.sp_serveroption @server=N&apos;ADSI&apos;, \n    @optname=N&apos;query timeout&apos;, @optvalue=N&apos;0&apos;\nGO\nEXEC master.dbo.sp_serveroption @server=N&apos;ADSI&apos;, \n    @optname=N&apos;use remote collation&apos;, @optvalue=N&apos;true&apos;\nGO\nEXEC master.dbo.sp_serveroption @server=N&apos;ADSI&apos;, \n    @optname=N&apos;remote proc transaction promotion&apos;, @optvalue=N&apos;true&apos;\nGO</code></pre><h2 id=\"Step-2-Fetching-ADSI-data\"><a href=\"#Step-2-Fetching-ADSI-data\" class=\"headerlink\" title=\"Step 2 - Fetching ADSI data\"></a>Step 2 - Fetching ADSI data</h2><p>To get data, use <code>OpenQuery</code> against the Linked Server. In order to get only persons and no system accounts, you should filter out all users, which has no firstname (<code>givenName</code>) or lastname (<code>sn</code>):</p>\n<pre><code>SELECT \n    UserPrincipalName, \n    DisplayName, \n    sAMAccountName AS [SamAccountName], \n    sn AS [LastName], \n    givenName AS [FirstName], \n    title AS [Title], \n    Mail as [MailAddress],\n    department AS [Department],\n    l AS [Location], \n    postalCode AS [PostCode], \n    streetAddress AS [Street],\n    st AS [State]\nFROM OpenQuery(ADSI, &apos;\n    SELECT \n        UserPrincipalName, \n        DisplayName, \n        sAMAccountName, \n        sn, \n        givenName, \n        department,\n        title, \n        Mail, \n        l, \n        postalCode, \n        streetAddress, \n        st\n    FROM &apos;&apos;LDAP://mydomain.de/DC=mydomain,DC=de&apos;&apos; \n    WHERE objectClass =  &apos;&apos;User&apos;&apos; \n    AND objectCategory = &apos;&apos;Person&apos;&apos; \n    AND sn=&apos;&apos;*&apos;&apos; \n    AND givenName = &apos;&apos;*&apos;&apos; \n&apos;)    </code></pre><p>In most cases you’re done with that … except your organisation has more the 900 users! Then you have to split the fetch in several requests, because SQL Server quits with an error, when trying to read more than 900 records via ADSI.  </p>\n<p>Best option is, to filter the ADSI statement by something like <em>‘get all user starting with a to j’</em>, when you are sure, that in this case less than 900 records will be given back and repeat the statement several times and glue the data together via a <code>UNION</code> statement:</p>\n<pre>\n<code>SELECT  \n    UserPrincipalName,  \n    DisplayName,  \n    sAMAccountName AS [SamAccountName],  \n    sn AS [LastName],  \n    givenName AS [FirstName],  \n    title AS [Title],  \n    Mail as [MailAddress],  \n    department AS [Department],  \n    l AS [Location],  \n    postalCode AS [PostCode],  \n    streetAddress AS [Street],  \n    st AS [State]  \nFROM (  \n    SELECT *  \n    FROM OpenQuery(ADSI, '  \n        SELECT  \n            UserPrincipalName,  \n            DisplayName,  \n            sAMAccountName,  \n            sn,  \n            givenName,  \n            department,  \n            title,  \n            Mail,  \n            l,  \n            postalCode,  \n            streetAddress,  \n            st  \n        FROM ''LDAP://mydomain.de/DC=mydomain,DC=de''  \n        WHERE objectClass =  ''User''  \n        AND objectCategory = ''Person''  \n        AND sn=''*''  \n        AND givenName = ''*''  \n        <strong>AND sAMAccountName &lt;= ''j''</strong>\n    ')  \n\n    <strong>UNION ALL</strong>  \n\n    SELECT *  \n    FROM OpenQuery(ADSI, '  \n        SELECT <em>[...same as above]</em>  \n        FROM ''LDAP://mydomain.de/DC=mydomain,DC=de''  \n        WHERE objectClass =  ''User''  \n        AND objectCategory = ''Person''  \n        AND sn=''*''  \n        AND givenName = ''*''  \n        <strong>AND sAMAccountName &gt; ''j''</strong>  \n        <strong>AND sAMAccountName &lt; ''p''</strong>  \n    ')\n\n    <strong>UNION ALL</strong>  \n\n    SELECT *  \n    FROM OpenQuery(ADSI,  '  \n        SELECT <em>[...same as above]</em>  \n        FROM ''LDAP://mydomain.de/DC=mydomain,DC=de''  \n        WHERE objectClass =  ''User''  \n        AND objectCategory = ''Person''  \n        AND sn=''*'' AND givenName = ''*''  \n        <strong>AND sAMAccountName &gt;= ''p''</strong>  \n    ')  \n) AD</code>\n</pre>\n\n<p>When you store this as a VIEW, you can join it wherever you want on SQL Server:</p>\n<pre>\n<code>CREATE VIEW [dbo].[vADUsers]\nAS\n    <em>[...SQL code from above]</em>\n\nGO</code>\n</pre>\n\n<h2 id=\"Step-3-SQL-Server-Database-Project\"><a href=\"#Step-3-SQL-Server-Database-Project\" class=\"headerlink\" title=\"Step 3 - SQL Server Database Project\"></a>Step 3 - SQL Server Database Project</h2><p>If you work with a SQL Server Database Project, to have the complete structure of your database available in a version control system, you will get some reference errors on compiling and publishing your newly added SQL View <code>vADUsers</code> and on some objects, which rely on this View, because of following problems:</p>\n<ol>\n<li>Project doesn’t know the Linked Server <code>ADSI</code></li>\n<li>The structure (fields) of the data source is unknown</li>\n</ol>\n<h3 id=\"Declare-the-Linked-Server\"><a href=\"#Declare-the-Linked-Server\" class=\"headerlink\" title=\"Declare the Linked Server\"></a>Declare the Linked Server</h3><p>To show the Project that there is a Linked Server called <code>ADSI</code>, just add following lines at the start of your view:</p>\n<pre>\n<code><strong>sp_addlinkedserver 'ADSI'</strong>\n<strong>GO</strong>\n\nCREATE VIEW [dbo].[vADUsers]\nAS\n    <em>[...SQL code from above]</em></code>\n</pre>\n\n<p>This mimics the adding of a Linked Server, but will be ignored by SQL Server on publish, because you already have a Linked Server with this name. The project is happy with it.</p>\n<h3 id=\"Declare-the-data-structure\"><a href=\"#Declare-the-data-structure\" class=\"headerlink\" title=\"Declare the data structure\"></a>Declare the data structure</h3><p>When you use the SQL-View <code>vADUsers</code> in a Stored Procedure for example, this object won’t compile, because the project knows nothing about the fields of the ADSI data source. The SELECT in the view is not enough. You have to add an empty <code>SELECT</code> to the View <code>vADUsers</code>, just for the declaration of the fields and without returning any records and join this via <code>UNION</code> with the other statements:</p>\n<pre>\n<code>sp_addlinkedserver 'ADSI'\nGO\n\nCREATE VIEW [dbo].[vtADAllUsers]\nAS\n\nSELECT\n    UserPrincipalName,\n    DisplayName,\n    sAMAccountName AS [SamAccountName],\n    sn AS [LastName],\n    givenName AS [FirstName],\n    title AS [Title],\n    Mail as [MailAddress],\n    department AS [Department],\n    l AS [Location],\n    postalCode AS [PostCode],\n    streetAddress AS [Street],\n    st AS [State]\nFROM (\n\n    -- Fake SELECT to declare the structure of the view<strong>\n    SELECT TOP 0\n        '' UserPrincipalName,\n        '' DisplayName,\n        '' sAMAccountName,\n        '' sn,\n        '' givenName,\n        '' department,\n        '' title,\n        '' Mail,\n        '' l,\n        '' postalCode,\n        '' streetAddress,\n        '' st\n\n    UNION ALL</strong>\n\n    SELECT *\n    FROM OpenQuery(ADSI, '\n        SELECT\n            UserPrincipalName,\n            DisplayName,\n            sAMAccountName,\n            sn,\n            givenName,\n            department,\n            title,\n            Mail,\n            l,\n            postalCode,\n            streetAddress,\n            st\n        FROM ''LDAP://mydomain.de/DC=mydomain,DC=de''\n        WHERE objectClass =  ''User''\n        AND objectCategory = ''Person''\n        AND sn=''*''\n        AND givenName = ''*''\n        AND sAMAccountName &gt;= ''j''  \n    ')\n\n    UNION ALL  \n\n    SELECT *  \n    FROM OpenQuery(ADSI, '  \n        SELECT <em>[...same as above]</em>  \n        FROM ''LDAP://mydomain.de/DC=mydomain,DC=de''  \n        WHERE objectClass =  ''User''  \n        AND objectCategory = ''Person''  \n        AND sn=''*''  \n        AND givenName = ''*''  \n        AND sAMAccountName &lt; ''j''  \n        AND sAMAccountName &gt; ''p''  \n    ')\n\n    UNION ALL  \n\n    SELECT *  \n    FROM OpenQuery(ADSI,  '  \n        SELECT <em>[...same as above]</em>  \n        FROM ''LDAP://mydomain.de/DC=mydomain,DC=de''  \n        WHERE objectClass =  ''User''  \n        AND objectCategory = ''Person''  \n        AND sn=''*''  \n        AND givenName = ''*''  \n        AND sAMAccountName &lt;= ''p''  \n    ')\n) AD</code>\n</pre>\n\n<p>Now, you can fetch data from Active Directory and store the code in a Database Project properly.</p>\n<p>HAPPY CODING :)</p>\n","site":{"data":{}},"excerpt":"<p>If you are working with a Visual Studio Database Project and have to deal with data from the Active Directory via a Linked Server, you have to announce the data structure of the AD data in order to get the project compiled.</p>","more":"<h2 id=\"Step-1-Linking-to-the-Active-Directory\"><a href=\"#Step-1-Linking-to-the-Active-Directory\" class=\"headerlink\" title=\"Step 1 - Linking to the Active Directory\"></a>Step 1 - Linking to the Active Directory</h2><p>First of all you have to connect your SQL Server to the AD permanently, by running  following SQL script once on your SQL Server:</p>\n<pre><code>USE [master]\nGO\nEXEC master.dbo.sp_addlinkedserver @server = N&apos;ADSI&apos;, \n    @srvproduct=N&apos;Active Directory Service Interfaces&apos;, \n    @provider=N&apos;ADSDSOObject&apos;, \n    @datasrc=N&apos;adsdatasource&apos;\n\nEXEC master.dbo.sp_addlinkedsrvlogin @rmtsrvname=N&apos;ADSI&apos;,\n    @useself=N&apos;False&apos;,\n    @locallogin=NULL,\n    @rmtuser=N&apos;mydomain\\myadminuser&apos;,\n    @rmtpassword=&apos;mypassword&apos;\nGO\n\nEXEC master.dbo.sp_serveroption @server=N&apos;ADSI&apos;, \n    @optname=N&apos;collation compatible&apos;, @optvalue=N&apos;false&apos;\nGO\nEXEC master.dbo.sp_serveroption @server=N&apos;ADSI&apos;, \n    @optname=N&apos;data access&apos;, @optvalue=N&apos;true&apos;\nGO\nEXEC master.dbo.sp_serveroption @server=N&apos;ADSI&apos;, \n    @optname=N&apos;dist&apos;, @optvalue=N&apos;false&apos;\nGO\nEXEC master.dbo.sp_serveroption @server=N&apos;ADSI&apos;, \n    @optname=N&apos;pub&apos;, @optvalue=N&apos;false&apos;\nGO\nEXEC master.dbo.sp_serveroption @server=N&apos;ADSI&apos;, \n    @optname=N&apos;rpc&apos;, @optvalue=N&apos;false&apos;\nGO\nEXEC master.dbo.sp_serveroption @server=N&apos;ADSI&apos;, \n    @optname=N&apos;rpc out&apos;, @optvalue=N&apos;false&apos;\nGO\nEXEC master.dbo.sp_serveroption @server=N&apos;ADSI&apos;, \n    @optname=N&apos;sub&apos;, @optvalue=N&apos;false&apos;\nGO\nEXEC master.dbo.sp_serveroption @server=N&apos;ADSI&apos;, \n    @optname=N&apos;connect timeout&apos;, @optvalue=N&apos;0&apos;\nGO\nEXEC master.dbo.sp_serveroption @server=N&apos;ADSI&apos;, \n    @optname=N&apos;collation name&apos;, @optvalue=null\nGO\nEXEC master.dbo.sp_serveroption @server=N&apos;ADSI&apos;, \n    @optname=N&apos;lazy schema validation&apos;, @optvalue=N&apos;false&apos;\nGO\nEXEC master.dbo.sp_serveroption @server=N&apos;ADSI&apos;, \n    @optname=N&apos;query timeout&apos;, @optvalue=N&apos;0&apos;\nGO\nEXEC master.dbo.sp_serveroption @server=N&apos;ADSI&apos;, \n    @optname=N&apos;use remote collation&apos;, @optvalue=N&apos;true&apos;\nGO\nEXEC master.dbo.sp_serveroption @server=N&apos;ADSI&apos;, \n    @optname=N&apos;remote proc transaction promotion&apos;, @optvalue=N&apos;true&apos;\nGO</code></pre><h2 id=\"Step-2-Fetching-ADSI-data\"><a href=\"#Step-2-Fetching-ADSI-data\" class=\"headerlink\" title=\"Step 2 - Fetching ADSI data\"></a>Step 2 - Fetching ADSI data</h2><p>To get data, use <code>OpenQuery</code> against the Linked Server. In order to get only persons and no system accounts, you should filter out all users, which has no firstname (<code>givenName</code>) or lastname (<code>sn</code>):</p>\n<pre><code>SELECT \n    UserPrincipalName, \n    DisplayName, \n    sAMAccountName AS [SamAccountName], \n    sn AS [LastName], \n    givenName AS [FirstName], \n    title AS [Title], \n    Mail as [MailAddress],\n    department AS [Department],\n    l AS [Location], \n    postalCode AS [PostCode], \n    streetAddress AS [Street],\n    st AS [State]\nFROM OpenQuery(ADSI, &apos;\n    SELECT \n        UserPrincipalName, \n        DisplayName, \n        sAMAccountName, \n        sn, \n        givenName, \n        department,\n        title, \n        Mail, \n        l, \n        postalCode, \n        streetAddress, \n        st\n    FROM &apos;&apos;LDAP://mydomain.de/DC=mydomain,DC=de&apos;&apos; \n    WHERE objectClass =  &apos;&apos;User&apos;&apos; \n    AND objectCategory = &apos;&apos;Person&apos;&apos; \n    AND sn=&apos;&apos;*&apos;&apos; \n    AND givenName = &apos;&apos;*&apos;&apos; \n&apos;)    </code></pre><p>In most cases you’re done with that … except your organisation has more the 900 users! Then you have to split the fetch in several requests, because SQL Server quits with an error, when trying to read more than 900 records via ADSI.  </p>\n<p>Best option is, to filter the ADSI statement by something like <em>‘get all user starting with a to j’</em>, when you are sure, that in this case less than 900 records will be given back and repeat the statement several times and glue the data together via a <code>UNION</code> statement:</p>\n<pre>\n<code>SELECT  \n    UserPrincipalName,  \n    DisplayName,  \n    sAMAccountName AS [SamAccountName],  \n    sn AS [LastName],  \n    givenName AS [FirstName],  \n    title AS [Title],  \n    Mail as [MailAddress],  \n    department AS [Department],  \n    l AS [Location],  \n    postalCode AS [PostCode],  \n    streetAddress AS [Street],  \n    st AS [State]  \nFROM (  \n    SELECT *  \n    FROM OpenQuery(ADSI, '  \n        SELECT  \n            UserPrincipalName,  \n            DisplayName,  \n            sAMAccountName,  \n            sn,  \n            givenName,  \n            department,  \n            title,  \n            Mail,  \n            l,  \n            postalCode,  \n            streetAddress,  \n            st  \n        FROM ''LDAP://mydomain.de/DC=mydomain,DC=de''  \n        WHERE objectClass =  ''User''  \n        AND objectCategory = ''Person''  \n        AND sn=''*''  \n        AND givenName = ''*''  \n        <strong>AND sAMAccountName &lt;= ''j''</strong>\n    ')  \n\n    <strong>UNION ALL</strong>  \n\n    SELECT *  \n    FROM OpenQuery(ADSI, '  \n        SELECT <em>[...same as above]</em>  \n        FROM ''LDAP://mydomain.de/DC=mydomain,DC=de''  \n        WHERE objectClass =  ''User''  \n        AND objectCategory = ''Person''  \n        AND sn=''*''  \n        AND givenName = ''*''  \n        <strong>AND sAMAccountName &gt; ''j''</strong>  \n        <strong>AND sAMAccountName &lt; ''p''</strong>  \n    ')\n\n    <strong>UNION ALL</strong>  \n\n    SELECT *  \n    FROM OpenQuery(ADSI,  '  \n        SELECT <em>[...same as above]</em>  \n        FROM ''LDAP://mydomain.de/DC=mydomain,DC=de''  \n        WHERE objectClass =  ''User''  \n        AND objectCategory = ''Person''  \n        AND sn=''*'' AND givenName = ''*''  \n        <strong>AND sAMAccountName &gt;= ''p''</strong>  \n    ')  \n) AD</code>\n</pre>\n\n<p>When you store this as a VIEW, you can join it wherever you want on SQL Server:</p>\n<pre>\n<code>CREATE VIEW [dbo].[vADUsers]\nAS\n    <em>[...SQL code from above]</em>\n\nGO</code>\n</pre>\n\n<h2 id=\"Step-3-SQL-Server-Database-Project\"><a href=\"#Step-3-SQL-Server-Database-Project\" class=\"headerlink\" title=\"Step 3 - SQL Server Database Project\"></a>Step 3 - SQL Server Database Project</h2><p>If you work with a SQL Server Database Project, to have the complete structure of your database available in a version control system, you will get some reference errors on compiling and publishing your newly added SQL View <code>vADUsers</code> and on some objects, which rely on this View, because of following problems:</p>\n<ol>\n<li>Project doesn’t know the Linked Server <code>ADSI</code></li>\n<li>The structure (fields) of the data source is unknown</li>\n</ol>\n<h3 id=\"Declare-the-Linked-Server\"><a href=\"#Declare-the-Linked-Server\" class=\"headerlink\" title=\"Declare the Linked Server\"></a>Declare the Linked Server</h3><p>To show the Project that there is a Linked Server called <code>ADSI</code>, just add following lines at the start of your view:</p>\n<pre>\n<code><strong>sp_addlinkedserver 'ADSI'</strong>\n<strong>GO</strong>\n\nCREATE VIEW [dbo].[vADUsers]\nAS\n    <em>[...SQL code from above]</em></code>\n</pre>\n\n<p>This mimics the adding of a Linked Server, but will be ignored by SQL Server on publish, because you already have a Linked Server with this name. The project is happy with it.</p>\n<h3 id=\"Declare-the-data-structure\"><a href=\"#Declare-the-data-structure\" class=\"headerlink\" title=\"Declare the data structure\"></a>Declare the data structure</h3><p>When you use the SQL-View <code>vADUsers</code> in a Stored Procedure for example, this object won’t compile, because the project knows nothing about the fields of the ADSI data source. The SELECT in the view is not enough. You have to add an empty <code>SELECT</code> to the View <code>vADUsers</code>, just for the declaration of the fields and without returning any records and join this via <code>UNION</code> with the other statements:</p>\n<pre>\n<code>sp_addlinkedserver 'ADSI'\nGO\n\nCREATE VIEW [dbo].[vtADAllUsers]\nAS\n\nSELECT\n    UserPrincipalName,\n    DisplayName,\n    sAMAccountName AS [SamAccountName],\n    sn AS [LastName],\n    givenName AS [FirstName],\n    title AS [Title],\n    Mail as [MailAddress],\n    department AS [Department],\n    l AS [Location],\n    postalCode AS [PostCode],\n    streetAddress AS [Street],\n    st AS [State]\nFROM (\n\n    -- Fake SELECT to declare the structure of the view<strong>\n    SELECT TOP 0\n        '' UserPrincipalName,\n        '' DisplayName,\n        '' sAMAccountName,\n        '' sn,\n        '' givenName,\n        '' department,\n        '' title,\n        '' Mail,\n        '' l,\n        '' postalCode,\n        '' streetAddress,\n        '' st\n\n    UNION ALL</strong>\n\n    SELECT *\n    FROM OpenQuery(ADSI, '\n        SELECT\n            UserPrincipalName,\n            DisplayName,\n            sAMAccountName,\n            sn,\n            givenName,\n            department,\n            title,\n            Mail,\n            l,\n            postalCode,\n            streetAddress,\n            st\n        FROM ''LDAP://mydomain.de/DC=mydomain,DC=de''\n        WHERE objectClass =  ''User''\n        AND objectCategory = ''Person''\n        AND sn=''*''\n        AND givenName = ''*''\n        AND sAMAccountName &gt;= ''j''  \n    ')\n\n    UNION ALL  \n\n    SELECT *  \n    FROM OpenQuery(ADSI, '  \n        SELECT <em>[...same as above]</em>  \n        FROM ''LDAP://mydomain.de/DC=mydomain,DC=de''  \n        WHERE objectClass =  ''User''  \n        AND objectCategory = ''Person''  \n        AND sn=''*''  \n        AND givenName = ''*''  \n        AND sAMAccountName &lt; ''j''  \n        AND sAMAccountName &gt; ''p''  \n    ')\n\n    UNION ALL  \n\n    SELECT *  \n    FROM OpenQuery(ADSI,  '  \n        SELECT <em>[...same as above]</em>  \n        FROM ''LDAP://mydomain.de/DC=mydomain,DC=de''  \n        WHERE objectClass =  ''User''  \n        AND objectCategory = ''Person''  \n        AND sn=''*''  \n        AND givenName = ''*''  \n        AND sAMAccountName &lt;= ''p''  \n    ')\n) AD</code>\n</pre>\n\n<p>Now, you can fetch data from Active Directory and store the code in a Database Project properly.</p>\n<p>HAPPY CODING :)</p>"},{"title":"Localization with resource files in JavaScript web apps","subtitle":"How to work with Visual Studio resource files for localization in Single Page Applications","photograph":{"file":"19-05 Israel-0161.jpg","name":"Zern","link":"https://500px.com/photo/1005493426/Zern-by-Kristof-Zerbe"},"date":"2020-06-13T13:49:10.000Z","_content":"\nThere are plenty of editors out there to help you writing JavaScript web applications. As I'm working in my daily life with Visual Studio, it is a obvious choice for me. \n\nOne of the most time saving tools in VS is the plugin [ResXManager](https://marketplace.visualstudio.com/items?itemName=TomEnglert.ResXManager), which is an awesome assistant on managing the translations for a Desktop- or ASP.NET-App, which uses XML-based RESX files.\n\n<!-- more -->\n\nMostly very localization is based on key/value pairs, defined in separate files for every language provided.\n\nImplementing several languages in pure JavaScript apps is a little more difficult, because it makes no sense to deal with big XML files in JS. All localization libraries in the market uses JSON for storing the translations and it is a little bit of work to find the right one for your requirements.\n\n<!-- more -->\n\n## Localization in JavaScript\n\nFor a current project I use  [jquery-lang](https://github.com/Irrelon/jquery-lang-js), because it provides the switch of the apps UI language without reloading and it is easy to implement. Thanks Rob Evans for your work...\n\nThe definition of \"tokens\" in one JSON file for each language is quite easy:\n\n**.../languages/en.json**\n```js\n{\n    \"token\": {\n        \"my-test\": \"My Test in English\"\n    }\n}\n```\n\n**.../languages/de.json**\n```js\n{\n    \"token\": {\n        \"my-test\": \"Mein Test in Deutsch\"\n    }\n}\n```\n\nThe usage also:\n```html\n<div lang=\"en\" data-lang-token=\"my-test\">\n```\n\n## Using RESX and convert to JSON on build\n\nHaving this, the most time consuming work is to enter the translations to the localization files. If you have hundreds of them, it is hard to keep the 2, 3 or more language files in sync. You need a helper...\n\nAnd here comes ResXManager to the rescue, if you work with VS ... but it needs a conversation from RESX to the JSON format jquery-lang uses and this a task, which can be done on building the JS app, by using a task runner like [Grunt](https://gruntjs.com/).\n\nAs there was no Grunt plugin/task out there to fit my needs, I have created  **grunt-resource2json** ([GitHub](https://github.com/kristofzerbe/grunt-resource2json), [NPM](https://www.npmjs.com/package/grunt-resource2json)). The configuration in the **gruntfile.js** is like: \n\n```json\ngrunt.initConfig({\n    resource2json: {\n      convert: {\n        options: {\n          format: \"jquery-lang\"\n        },\n        files: [\n          {\n            input: \"resources/Resource.resx\",\n            output: \"build/langpacks/en.json\"\n          },\n          {\n            input: \"resources/Resource.de-DE.resx\",\n            output: \"build/langpacks/de.json\"\n          },\n          {\n            input: \"resources/Resource.es-ES.resx\",\n            output: \"build/langpacks/es.json\"\n          }\n        ]\n      }\n    });\n```\n\nIt takes one RESX file (input) and converts it to a JSON file (output) in an array of files.\n\nThe heavy work in the plugin is done by the library [xml2js](https://www.npmjs.com/package/xml2js), which transforms the complete XML of the RESX file into a JSON object in one call. All I had to do, was to write all DATA nodes in a loop into the jquery-lang given structure and save it as JSON.\n\nCurrently supported is the format for jquery-lang only, but it would be awesome, if you fork the code on [GitHub](https://github.com/kristofzerbe/grunt-resource2json) and send me a Pull Request with the implementation of your needed format.\n","source":"_posts/Localization-with-resource-files-in-JavaScript-web-apps.md","raw":"---\ntitle: Localization with resource files in JavaScript web apps\nsubtitle: >-\n  How to work with Visual Studio resource files for localization in Single Page\n  Applications\nphotograph:\n  file: '19-05 Israel-0161.jpg'\n  name: 'Zern'\n  link: 'https://500px.com/photo/1005493426/Zern-by-Kristof-Zerbe'\ntags:\n  - Visual Studio\n  - Resource\n  - Localization\n  - GitHub\ncategories:\n  - JavaScript\ndate: 2020-06-13 15:49:10\n---\n\nThere are plenty of editors out there to help you writing JavaScript web applications. As I'm working in my daily life with Visual Studio, it is a obvious choice for me. \n\nOne of the most time saving tools in VS is the plugin [ResXManager](https://marketplace.visualstudio.com/items?itemName=TomEnglert.ResXManager), which is an awesome assistant on managing the translations for a Desktop- or ASP.NET-App, which uses XML-based RESX files.\n\n<!-- more -->\n\nMostly very localization is based on key/value pairs, defined in separate files for every language provided.\n\nImplementing several languages in pure JavaScript apps is a little more difficult, because it makes no sense to deal with big XML files in JS. All localization libraries in the market uses JSON for storing the translations and it is a little bit of work to find the right one for your requirements.\n\n<!-- more -->\n\n## Localization in JavaScript\n\nFor a current project I use  [jquery-lang](https://github.com/Irrelon/jquery-lang-js), because it provides the switch of the apps UI language without reloading and it is easy to implement. Thanks Rob Evans for your work...\n\nThe definition of \"tokens\" in one JSON file for each language is quite easy:\n\n**.../languages/en.json**\n```js\n{\n    \"token\": {\n        \"my-test\": \"My Test in English\"\n    }\n}\n```\n\n**.../languages/de.json**\n```js\n{\n    \"token\": {\n        \"my-test\": \"Mein Test in Deutsch\"\n    }\n}\n```\n\nThe usage also:\n```html\n<div lang=\"en\" data-lang-token=\"my-test\">\n```\n\n## Using RESX and convert to JSON on build\n\nHaving this, the most time consuming work is to enter the translations to the localization files. If you have hundreds of them, it is hard to keep the 2, 3 or more language files in sync. You need a helper...\n\nAnd here comes ResXManager to the rescue, if you work with VS ... but it needs a conversation from RESX to the JSON format jquery-lang uses and this a task, which can be done on building the JS app, by using a task runner like [Grunt](https://gruntjs.com/).\n\nAs there was no Grunt plugin/task out there to fit my needs, I have created  **grunt-resource2json** ([GitHub](https://github.com/kristofzerbe/grunt-resource2json), [NPM](https://www.npmjs.com/package/grunt-resource2json)). The configuration in the **gruntfile.js** is like: \n\n```json\ngrunt.initConfig({\n    resource2json: {\n      convert: {\n        options: {\n          format: \"jquery-lang\"\n        },\n        files: [\n          {\n            input: \"resources/Resource.resx\",\n            output: \"build/langpacks/en.json\"\n          },\n          {\n            input: \"resources/Resource.de-DE.resx\",\n            output: \"build/langpacks/de.json\"\n          },\n          {\n            input: \"resources/Resource.es-ES.resx\",\n            output: \"build/langpacks/es.json\"\n          }\n        ]\n      }\n    });\n```\n\nIt takes one RESX file (input) and converts it to a JSON file (output) in an array of files.\n\nThe heavy work in the plugin is done by the library [xml2js](https://www.npmjs.com/package/xml2js), which transforms the complete XML of the RESX file into a JSON object in one call. All I had to do, was to write all DATA nodes in a loop into the jquery-lang given structure and save it as JSON.\n\nCurrently supported is the format for jquery-lang only, but it would be awesome, if you fork the code on [GitHub](https://github.com/kristofzerbe/grunt-resource2json) and send me a Pull Request with the implementation of your needed format.\n","slug":"Localization-with-resource-files-in-JavaScript-web-apps","published":1,"updated":"2020-06-24T07:22:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckbxwzim2000g8cl9sw1tmpr9","content":"<p>There are plenty of editors out there to help you writing JavaScript web applications. As I’m working in my daily life with Visual Studio, it is a obvious choice for me. </p>\n<p>One of the most time saving tools in VS is the plugin <a href=\"https://marketplace.visualstudio.com/items?itemName=TomEnglert.ResXManager\" target=\"_blank\" rel=\"noopener\">ResXManager</a>, which is an awesome assistant on managing the translations for a Desktop- or ASP.NET-App, which uses XML-based RESX files.</p>\n<a id=\"more\"></a>\n\n<p>Mostly very localization is based on key/value pairs, defined in separate files for every language provided.</p>\n<p>Implementing several languages in pure JavaScript apps is a little more difficult, because it makes no sense to deal with big XML files in JS. All localization libraries in the market uses JSON for storing the translations and it is a little bit of work to find the right one for your requirements.</p>\n<!-- more -->\n\n<h2 id=\"Localization-in-JavaScript\"><a href=\"#Localization-in-JavaScript\" class=\"headerlink\" title=\"Localization in JavaScript\"></a>Localization in JavaScript</h2><p>For a current project I use  <a href=\"https://github.com/Irrelon/jquery-lang-js\" target=\"_blank\" rel=\"noopener\">jquery-lang</a>, because it provides the switch of the apps UI language without reloading and it is easy to implement. Thanks Rob Evans for your work…</p>\n<p>The definition of “tokens” in one JSON file for each language is quite easy:</p>\n<p><strong>…/languages/en.json</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">\"token\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"my-test\"</span>: <span class=\"string\">\"My Test in English\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>…/languages/de.json</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">\"token\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"my-test\"</span>: <span class=\"string\">\"Mein Test in Deutsch\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>The usage also:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span> <span class=\"attr\">data-lang-token</span>=<span class=\"string\">\"my-test\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Using-RESX-and-convert-to-JSON-on-build\"><a href=\"#Using-RESX-and-convert-to-JSON-on-build\" class=\"headerlink\" title=\"Using RESX and convert to JSON on build\"></a>Using RESX and convert to JSON on build</h2><p>Having this, the most time consuming work is to enter the translations to the localization files. If you have hundreds of them, it is hard to keep the 2, 3 or more language files in sync. You need a helper…</p>\n<p>And here comes ResXManager to the rescue, if you work with VS … but it needs a conversation from RESX to the JSON format jquery-lang uses and this a task, which can be done on building the JS app, by using a task runner like <a href=\"https://gruntjs.com/\" target=\"_blank\" rel=\"noopener\">Grunt</a>.</p>\n<p>As there was no Grunt plugin/task out there to fit my needs, I have created  <strong>grunt-resource2json</strong> (<a href=\"https://github.com/kristofzerbe/grunt-resource2json\" target=\"_blank\" rel=\"noopener\">GitHub</a>, <a href=\"https://www.npmjs.com/package/grunt-resource2json\" target=\"_blank\" rel=\"noopener\">NPM</a>). The configuration in the <strong>gruntfile.js</strong> is like: </p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grunt.initConfig(&#123;</span><br><span class=\"line\">    resource2json: &#123;</span><br><span class=\"line\">      convert: &#123;</span><br><span class=\"line\">        options: &#123;</span><br><span class=\"line\">          format: \"jquery-lang\"</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        files: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            input: \"resources/Resource.resx\",</span><br><span class=\"line\">            output: \"build/langpacks/en.json\"</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            input: \"resources/Resource.de-DE.resx\",</span><br><span class=\"line\">            output: \"build/langpacks/de.json\"</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            input: \"resources/Resource.es-ES.resx\",</span><br><span class=\"line\">            output: \"build/langpacks/es.json\"</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>It takes one RESX file (input) and converts it to a JSON file (output) in an array of files.</p>\n<p>The heavy work in the plugin is done by the library <a href=\"https://www.npmjs.com/package/xml2js\" target=\"_blank\" rel=\"noopener\">xml2js</a>, which transforms the complete XML of the RESX file into a JSON object in one call. All I had to do, was to write all DATA nodes in a loop into the jquery-lang given structure and save it as JSON.</p>\n<p>Currently supported is the format for jquery-lang only, but it would be awesome, if you fork the code on <a href=\"https://github.com/kristofzerbe/grunt-resource2json\" target=\"_blank\" rel=\"noopener\">GitHub</a> and send me a Pull Request with the implementation of your needed format.</p>\n","site":{"data":{}},"excerpt":"<p>There are plenty of editors out there to help you writing JavaScript web applications. As I’m working in my daily life with Visual Studio, it is a obvious choice for me. </p>\n<p>One of the most time saving tools in VS is the plugin <a href=\"https://marketplace.visualstudio.com/items?itemName=TomEnglert.ResXManager\" target=\"_blank\" rel=\"noopener\">ResXManager</a>, which is an awesome assistant on managing the translations for a Desktop- or ASP.NET-App, which uses XML-based RESX files.</p>","more":"<p>Mostly very localization is based on key/value pairs, defined in separate files for every language provided.</p>\n<p>Implementing several languages in pure JavaScript apps is a little more difficult, because it makes no sense to deal with big XML files in JS. All localization libraries in the market uses JSON for storing the translations and it is a little bit of work to find the right one for your requirements.</p>\n<!-- more -->\n\n<h2 id=\"Localization-in-JavaScript\"><a href=\"#Localization-in-JavaScript\" class=\"headerlink\" title=\"Localization in JavaScript\"></a>Localization in JavaScript</h2><p>For a current project I use  <a href=\"https://github.com/Irrelon/jquery-lang-js\" target=\"_blank\" rel=\"noopener\">jquery-lang</a>, because it provides the switch of the apps UI language without reloading and it is easy to implement. Thanks Rob Evans for your work…</p>\n<p>The definition of “tokens” in one JSON file for each language is quite easy:</p>\n<p><strong>…/languages/en.json</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">\"token\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"my-test\"</span>: <span class=\"string\">\"My Test in English\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>…/languages/de.json</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">\"token\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"my-test\"</span>: <span class=\"string\">\"Mein Test in Deutsch\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>The usage also:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span> <span class=\"attr\">data-lang-token</span>=<span class=\"string\">\"my-test\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Using-RESX-and-convert-to-JSON-on-build\"><a href=\"#Using-RESX-and-convert-to-JSON-on-build\" class=\"headerlink\" title=\"Using RESX and convert to JSON on build\"></a>Using RESX and convert to JSON on build</h2><p>Having this, the most time consuming work is to enter the translations to the localization files. If you have hundreds of them, it is hard to keep the 2, 3 or more language files in sync. You need a helper…</p>\n<p>And here comes ResXManager to the rescue, if you work with VS … but it needs a conversation from RESX to the JSON format jquery-lang uses and this a task, which can be done on building the JS app, by using a task runner like <a href=\"https://gruntjs.com/\" target=\"_blank\" rel=\"noopener\">Grunt</a>.</p>\n<p>As there was no Grunt plugin/task out there to fit my needs, I have created  <strong>grunt-resource2json</strong> (<a href=\"https://github.com/kristofzerbe/grunt-resource2json\" target=\"_blank\" rel=\"noopener\">GitHub</a>, <a href=\"https://www.npmjs.com/package/grunt-resource2json\" target=\"_blank\" rel=\"noopener\">NPM</a>). The configuration in the <strong>gruntfile.js</strong> is like: </p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grunt.initConfig(&#123;</span><br><span class=\"line\">    resource2json: &#123;</span><br><span class=\"line\">      convert: &#123;</span><br><span class=\"line\">        options: &#123;</span><br><span class=\"line\">          format: \"jquery-lang\"</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        files: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            input: \"resources/Resource.resx\",</span><br><span class=\"line\">            output: \"build/langpacks/en.json\"</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            input: \"resources/Resource.de-DE.resx\",</span><br><span class=\"line\">            output: \"build/langpacks/de.json\"</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            input: \"resources/Resource.es-ES.resx\",</span><br><span class=\"line\">            output: \"build/langpacks/es.json\"</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>It takes one RESX file (input) and converts it to a JSON file (output) in an array of files.</p>\n<p>The heavy work in the plugin is done by the library <a href=\"https://www.npmjs.com/package/xml2js\" target=\"_blank\" rel=\"noopener\">xml2js</a>, which transforms the complete XML of the RESX file into a JSON object in one call. All I had to do, was to write all DATA nodes in a loop into the jquery-lang given structure and save it as JSON.</p>\n<p>Currently supported is the format for jquery-lang only, but it would be awesome, if you fork the code on <a href=\"https://github.com/kristofzerbe/grunt-resource2json\" target=\"_blank\" rel=\"noopener\">GitHub</a> and send me a Pull Request with the implementation of your needed format.</p>"},{"title":"Meaningful automatic versioning with T4","photograph":{"file":"D70_7184.jpg","name":"Specialita' Toscane","link":"https://500px.com/photo/260478557"},"date":"2020-06-27T15:57:18.000Z","subtitle":"How to implement versioning in C# projects the better way","_content":"\nEvery developer has to have an idea of versioning his products. If you work with Visual Studio you have the ``Assembly Information`` in the project properties dialog, to enter it manually everytime you want to release a new version:\n\n![Assembly Information Dialog](Meaningful-automatic-versioning-with-T4/AssemblyInformationDialog.png)\n\nThe four fields are: MAJOR, MINOR, BUILD, REVISION.\n\nBut seriously ... who does that? I guess 99% of all C# developers are entering the ``AssemblyInfo.cs`` and enter the famous 2 asterisks into the version declaration of BUILD and REVISION, to let Visual Studio do the incrementation job:\n\n```c#\n[assembly: AssemblyVersion(\"1.0.*.*\")]\n[assembly: AssemblyFileVersion(\"1.0.*.*\")]\n```\n\nBut this is not the end of the possibilities ... Let's do it more meaningful, with some goodies and still automatic...\n<!-- more -->\n\n### More informative versioning\n\nA build with an increased MAJOR version number means, that there are significant changes in the product, even breaking changes. This always should be set manually.\n\nAlso the MINOR. It stands for significant functional extensions of the product.\n\nHow does Visual Studio calculate BUILD and REVISION?\n\n> When specifying a version, you have to at least specify major. If you specify major and minor, you can specify an asterisk for build. This will cause **build** to be equal to the **number of days since January 1, 2000 local time**, and for **revision** to be equal to the **number of seconds since midnight local time, divided by 2**.\n\nBut, the BUILD number should explain, how often a software with a particular MAJOR.MINOR has been build, due to minor changes and bug fixes.\n\nThe \"Asterisk\" REVISION number is a little weird, but at least with the BUILD number unique. But it says nothing. Better to pick up the idea of a date calculated, unique number, but not an arbitrary date ... let's take the date the project has started.\n\nFor example: **1.2.16.158** ... reads version 1.2 with 16 builds on the 158'th day after the project has started.\n\n### Start with T4\n\nT4 (Text Template Transformation Toolkit) is a templating system in Visual Studio for generating text files during design time. It is very suitable to even generate code. Read about it [here](https://docs.microsoft.com/en-us/visualstudio/modeling/code-generation-and-t4-text-templates) and [here](https://docs.microsoft.com/en-us/visualstudio/modeling/writing-a-t4-text-template).\n\nA Text Template (.tt) has **Directives** (how the template is processed), **Text blocks** (text copied to the output) and **Control blocks** (program code).\n\nFor our versioning template, we start with this in a new file named **``AssemblyVersion.tt``**:\n\n*Directives*:\n\n```xml\n<#@ template hostspecific=\"true\" language=\"C#\" #>\n<#@ output extension=\".cs\" #>\n```\n\n*Control block*:\n\n```c#\n<#\n  int major = 1;\n  int minor = 0;\n  int build = 0;\n  int revision = 0;\n#>\n```\n\n*Text block*:\n\n```c#\n// This code was generated by a tool. Any changes made manually will be lost\n// the next time this code is regenerated.\n\nusing System.Reflection;\n\n[assembly: AssemblyVersion(\"<#= $\"{major}.{minor}.{build}.{revision}\" #>\")]\n[assembly: AssemblyFileVersion(\"<#= $\"{major}.{minor}.{build}.{revision}\" #>\")]\n```\n\nOn saving the TT file, a new CS file with the same name will be created automatically and you got an error like this:\n\n![Duplicate Attributes Error](Meaningful-automatic-versioning-with-T4/DuplicateAttributes.png)\n\n#### A new place for version info\n\nTh error occurs, because we have now **two** ``AssemblyVersion`` and ``AssemblyFileVersion`` attributes in our project. We need to comment out the original in ``Properties\\AssemblyInfo.cs``:\n\n![Change AssemblyInfo.cs](Meaningful-automatic-versioning-with-T4/ChangeAssemblyInfo.png)\n\n#### Structural Considerations\n\nIt makes sense to store all needed files for the new versioning system in a new root folder of the project, named **AssemblyVersion**, starting with the ``AssemblyVersion.tt``, because there will be more files later on.\n\n### New app information file\n\nAs we replaced the original version attributes in the project with those from our generated  ``AssemblyVersion.cs``, we cannot control the MAJOR and MINOR version number via the project property dialog any longer. We need a new approach on that, which can be edited easily and processed automatically.\n\n#### AssemblyVersion.json\n\n```js\n{\n  \"initialDate\": \"2019-09-29\",\n  \"versions\": [\n    {\n      \"major\": 1,\n      \"minor\": 1,\n      \"releaseDate\": \"\",\n      \"remarks\": \"Some cool new features; New versioning system\"\n    },\n    {\n      \"major\": 1,\n      \"minor\": 0,\n      \"releaseDate\": \"2019-10-01\",\n      \"remarks\": \"Initial Release\"\n    }\n  ]\n}\n```\n\nThis new JSON file has two main items:\n* ``initialDate`` - the date the project has started, to calculate the REVISION later on\n* ``versions`` - a list with all different MAJOR/MINOR versions we have done so far, with at least one without a release date ... the one with the highest ``major`` and ``minor``.\n\nThe ``remarks`` attribute of a list item holds some information about the changes in a new version. Together with ``releaseDate``, useful for a possible release history, shown in the product itself.\n\n#### Library references in T4\n\nT4 runs in its own app domain, therefore it can use built-in libraries as ``System.IO``, but not third-party libraries like ``Newtonsoft.JSON``. \n\nWe could reference those libraries from the projects package folder via the absolute path (if we use it in our product), but when we are running a NuGet update, the reference will break. \n\nIt is advisable to store such libraries directly in a fixed folder, like **AssemblyVersion\\Libraries**. They won't have any impact to our product, because the are only used while design time.\n\n### The MAJOR and MINOR\n\nTo process the new ``AssemblyVersion.json`` in the template, we need some new directives for referencing the needed libraries and the import of the appropriate namepaces:\n\n```xml\n<#@ assembly name=\"System.Core\" #>\n<#@ assembly name=\"$(SolutionDir)\\AssemblyVersion\\Libraries\\Newtonsoft.Json.dll\" #>\n\n<#@ import namespace=\"System.IO\" #>\n<#@ import namespace=\"System.Linq\" #>\n<#@ import namespace=\"Newtonsoft.Json\" #>\n```\n\nVia the use of the T4 variable ``$(SolutionDir)``, we can point to our copy of Newtonsoft JSON.\n\nNow we can read and convert the JSON into an anonymous object and get the highest values of MAJOR and MINOR:\n\n```c#\n<#\n    string avPath = this.Host.ResolvePath(\"AssemblyVersion.json\");\n    string avJson = File.ReadAllText(avPath);\n\n    var avDefinition = new {\n        initialDate = \"\",\n        versions = new [] {\n            new {\n                major = 0,\n                minor = 0,\n                releaseDate = \"\",\n                remarks = \"\" }\n        }\n    };\n    var avObject = JsonConvert.DeserializeAnonymousType(avJson, avDefinition);\n\n    //Get highest Major/Minor from versions list\n    var maxVersion = avObject.versions\n      .OrderByDescending(i => i.major)\n      .ThenByDescending(j => j.minor)\n      .First();\n\n    //Set MAJOR\n    int major = maxVersion.major;\n\n    //Set MINOR\n    int minor = maxVersion.minor;\n#>\n```\n\n### The BuildLog\n\nIn order to get the version number for BUILD, we need a method to count and store every build that has been run, separated by the MAJOR/MINOR versions. This is a job for a **Post-build event**, which can be configured in the project properties dialog. The event uses shell commands as they are used on the command line.\n\nWhat the commands should do:&nbsp;&nbsp;&nbsp;Write a new line with the current date and time in a log file, named after the MAJOR/MINOR version and stored in the folder **AssemblyVersion\\BuildLogs**.\n\n![Build Log](Meaningful-automatic-versioning-with-T4/BuildLog.png)\n\n#### Extending build event macros\n\nShell commands for build events are supporting built-in variables, so called 'macros', like ``$(ProjectDir)`` (which returns the project directory path), but there is no such macro for the current version number. We have to introduce it via extending the project with a new build target.\n\nUnload the project in Visual Studio for editing the CSPROJ (or VBPROJ) file of your product manually and write the following definition just before the end-tag:\n\n```xml\n  <PropertyGroup>\n    <PostBuildEventDependsOn>\n      $(PostBuildEventDependsOn);\n      PostBuildMacros;\n    </PostBuildEventDependsOn>\n  </PropertyGroup>\n\n  <Target Name=\"PostBuildMacros\">\n    <GetAssemblyIdentity AssemblyFiles=\"$(TargetPath)\">\n      <Output TaskParameter=\"Assemblies\" ItemName=\"Targets\" />\n    </GetAssemblyIdentity>\n    <ItemGroup>\n      <VersionNumber Include=\"@(Targets->'%(Version)')\" />\n    </ItemGroup>\n  </Target>\n```\n\nAfter reloading the project in Visual Studio, we can use ``@(VersionNumber)`` in our commands.\n\n#### CreateBuildLog.bat\n\nThe event build editor is not very comfortable, so we create the batch file ``CreateBuildLog.bat`` in our **AssemblyVersion** folder and use this as the post build event command.\n\n**IMPORTANT: The BuildLog folder must exist, before running the following command the first time!**\n\n```bat\n@echo off\n\nREM --Get parameters\nset PROJECT_DIR=%1\nset VERSION_NUMBER=%2\n\nREM --Set what to log\nset LOG_LINE=%DATE% %TIME%\n\nREM --Inform the user\nset MSG=CreateBuildLog '%LOG_LINE%' for version %VERSION_NUMBER%\necho %MSG%\n\nREM --Get version parts\nFOR /f \"tokens=1,2,3,4 delims=.\" %%a IN (\"%VERSION_NUMBER%\") do (\n\tset MAJOR=%%a\n\tset MINOR=%%b\n\tset BUILD=%%c\n\tset REVISION=%%d\n)\n\nREM --Define BuildLog file and folder \nset BUILDLOG_FILE=%MAJOR%.%MINOR%.log\nset BUILDLOG_FOLDER=%PROJECT_DIR%\\AssemblyVersion\\BuildLogs\n\nREM --Write current date and time as new line in the file\necho %LOG_LINE% >> %BUILDLOG_FOLDER%\\%BUILDLOG_FILE%\"\n```\n\n![Post Build Event](Meaningful-automatic-versioning-with-T4/PostBuildEvent.png)\n\n```bat\n\"$(ProjectDir)\\AssemblyVersion\\CreateBuildLog.bat\" \"$(ProjectDir)\" @(VersionNumber)\n```\n\n### The BUILD\n\nAs we have now the BuildLogs, we can use them in the template:\n\n```c#\n<#\n    ...\n\n    //Get BuildLog of max version\n    string buildlogFolder = this.Host.ResolvePath(\"BuildLogs\");\n    string buildLog = \n      buildlogFolder + \"\\\\\" +\n      maxVersion.major + \".\" +\n      maxVersion.minor + \".log\";\n\n    //Get number of lines from BuildLog or create a new log (!)\n    var buildCount = 1;\n    if (File.Exists(buildLog)) {\n        buildCount = File.ReadLines(buildLog).Count() + 1;\n    } else {\n        File.Create(buildLog).Dispose();\n    }\n\n    //Set BUILD\n    int build = buildCount;\n#>\n```\n\nVery important is to create the log file, if it doesn't exists! Otherwise the build will always fail, because the version attributes can't be created.\n\n### The REVISION\n\nAt least we have to set the REVISION number, by calculating the difference between the current date and the ``initialDate``, which we have previously read from the ``AssemblyVersion.json``:\n\n```c#\n<#\n    ...\n\n    //Set REVISION\n    var dateCreated = DateTime.Parse(avObject.initialDate);\n    int revision = (DateTime.Now.Date - dateCreated.Date).Days;\n#>\n```\n\n### Transforming T4 template on build\n\nThe last hurdle is to run the text transformation every time you build your product. Until now it runs only on saving the ``AssemblyVersion.tt``.\n\nA great helper on that was Thomas Levesque's post [\"Transform T4 templates as part of the build, and pass variables from the project\"](https://thomaslevesque.com/2017/11/13/transform-t4-templates-as-part-of-the-build-and-pass-variables-from-the-project/), where he describes every difficulty to reach this goal.\n\nTo make it short: We have to edit the CSPROJ file again, to introduce TextTemplating to MSBuild.\n\nFirst we need following near the beginning of the projects XML:\n\n```xml\n<PropertyGroup>\n    <VisualStudioVersion Condition=\"'$(VisualStudioVersion)' == ''\">\n      16.0\n    </VisualStudioVersion>\n    <VSToolsPath Condition=\"'$(VSToolsPath)' == ''\">\n      $(MSBuildExtensionsPath32)\\Microsoft\\VisualStudio\\v$(VisualStudioVersion)\n    </VSToolsPath>\n    <TransformOnBuild>true</TransformOnBuild>\n    <OverwriteReadOnlyOutputFiles>true</OverwriteReadOnlyOutputFiles>\n    <TransformOutOfDateOnly>false</TransformOutOfDateOnly>\n</PropertyGroup>\n```\n\nSecondly add the IMPORT of the TextTemplating target AFTER the CSharp target:\n\n```xml\n<Import Project=\"$(MSBuildToolsPath)\\Microsoft.CSharp.targets\" />\n...\n<Import Project=\"$(VSToolsPath)\\TextTemplating\\Microsoft.TextTemplating.targets\" />\n```\n\nIf you build your product now, a new build log is created and the version numbers BUILD and REVISION are automatically increased.\n\n### See it in action\n\nThe project where I implemented this versioning first is [HexoCommander](https://github.com/kristofzerbe/HexoCommander). Feel free to download the code and see how the new versioning mechanism works.\n\n![Screencast Build HexoCommander](Meaningful-automatic-versioning-with-T4/screencast-build-hexocommander.gif)\n\nEnjoy versioning...","source":"_posts/Meaningful-automatic-versioning-with-T4.md","raw":"---\ntitle: Meaningful automatic versioning with T4\nphotograph:\n  file: D70_7184.jpg\n  name: Specialita' Toscane\n  link: 'https://500px.com/photo/260478557'\ntags:\n  - Versioning\n  - T4\n  - Visual Studio\ncategories:\n  - C#\ndate: 2020-06-27 17:57:18\nsubtitle: How to implement versioning in C# projects the better way\n---\n\nEvery developer has to have an idea of versioning his products. If you work with Visual Studio you have the ``Assembly Information`` in the project properties dialog, to enter it manually everytime you want to release a new version:\n\n![Assembly Information Dialog](Meaningful-automatic-versioning-with-T4/AssemblyInformationDialog.png)\n\nThe four fields are: MAJOR, MINOR, BUILD, REVISION.\n\nBut seriously ... who does that? I guess 99% of all C# developers are entering the ``AssemblyInfo.cs`` and enter the famous 2 asterisks into the version declaration of BUILD and REVISION, to let Visual Studio do the incrementation job:\n\n```c#\n[assembly: AssemblyVersion(\"1.0.*.*\")]\n[assembly: AssemblyFileVersion(\"1.0.*.*\")]\n```\n\nBut this is not the end of the possibilities ... Let's do it more meaningful, with some goodies and still automatic...\n<!-- more -->\n\n### More informative versioning\n\nA build with an increased MAJOR version number means, that there are significant changes in the product, even breaking changes. This always should be set manually.\n\nAlso the MINOR. It stands for significant functional extensions of the product.\n\nHow does Visual Studio calculate BUILD and REVISION?\n\n> When specifying a version, you have to at least specify major. If you specify major and minor, you can specify an asterisk for build. This will cause **build** to be equal to the **number of days since January 1, 2000 local time**, and for **revision** to be equal to the **number of seconds since midnight local time, divided by 2**.\n\nBut, the BUILD number should explain, how often a software with a particular MAJOR.MINOR has been build, due to minor changes and bug fixes.\n\nThe \"Asterisk\" REVISION number is a little weird, but at least with the BUILD number unique. But it says nothing. Better to pick up the idea of a date calculated, unique number, but not an arbitrary date ... let's take the date the project has started.\n\nFor example: **1.2.16.158** ... reads version 1.2 with 16 builds on the 158'th day after the project has started.\n\n### Start with T4\n\nT4 (Text Template Transformation Toolkit) is a templating system in Visual Studio for generating text files during design time. It is very suitable to even generate code. Read about it [here](https://docs.microsoft.com/en-us/visualstudio/modeling/code-generation-and-t4-text-templates) and [here](https://docs.microsoft.com/en-us/visualstudio/modeling/writing-a-t4-text-template).\n\nA Text Template (.tt) has **Directives** (how the template is processed), **Text blocks** (text copied to the output) and **Control blocks** (program code).\n\nFor our versioning template, we start with this in a new file named **``AssemblyVersion.tt``**:\n\n*Directives*:\n\n```xml\n<#@ template hostspecific=\"true\" language=\"C#\" #>\n<#@ output extension=\".cs\" #>\n```\n\n*Control block*:\n\n```c#\n<#\n  int major = 1;\n  int minor = 0;\n  int build = 0;\n  int revision = 0;\n#>\n```\n\n*Text block*:\n\n```c#\n// This code was generated by a tool. Any changes made manually will be lost\n// the next time this code is regenerated.\n\nusing System.Reflection;\n\n[assembly: AssemblyVersion(\"<#= $\"{major}.{minor}.{build}.{revision}\" #>\")]\n[assembly: AssemblyFileVersion(\"<#= $\"{major}.{minor}.{build}.{revision}\" #>\")]\n```\n\nOn saving the TT file, a new CS file with the same name will be created automatically and you got an error like this:\n\n![Duplicate Attributes Error](Meaningful-automatic-versioning-with-T4/DuplicateAttributes.png)\n\n#### A new place for version info\n\nTh error occurs, because we have now **two** ``AssemblyVersion`` and ``AssemblyFileVersion`` attributes in our project. We need to comment out the original in ``Properties\\AssemblyInfo.cs``:\n\n![Change AssemblyInfo.cs](Meaningful-automatic-versioning-with-T4/ChangeAssemblyInfo.png)\n\n#### Structural Considerations\n\nIt makes sense to store all needed files for the new versioning system in a new root folder of the project, named **AssemblyVersion**, starting with the ``AssemblyVersion.tt``, because there will be more files later on.\n\n### New app information file\n\nAs we replaced the original version attributes in the project with those from our generated  ``AssemblyVersion.cs``, we cannot control the MAJOR and MINOR version number via the project property dialog any longer. We need a new approach on that, which can be edited easily and processed automatically.\n\n#### AssemblyVersion.json\n\n```js\n{\n  \"initialDate\": \"2019-09-29\",\n  \"versions\": [\n    {\n      \"major\": 1,\n      \"minor\": 1,\n      \"releaseDate\": \"\",\n      \"remarks\": \"Some cool new features; New versioning system\"\n    },\n    {\n      \"major\": 1,\n      \"minor\": 0,\n      \"releaseDate\": \"2019-10-01\",\n      \"remarks\": \"Initial Release\"\n    }\n  ]\n}\n```\n\nThis new JSON file has two main items:\n* ``initialDate`` - the date the project has started, to calculate the REVISION later on\n* ``versions`` - a list with all different MAJOR/MINOR versions we have done so far, with at least one without a release date ... the one with the highest ``major`` and ``minor``.\n\nThe ``remarks`` attribute of a list item holds some information about the changes in a new version. Together with ``releaseDate``, useful for a possible release history, shown in the product itself.\n\n#### Library references in T4\n\nT4 runs in its own app domain, therefore it can use built-in libraries as ``System.IO``, but not third-party libraries like ``Newtonsoft.JSON``. \n\nWe could reference those libraries from the projects package folder via the absolute path (if we use it in our product), but when we are running a NuGet update, the reference will break. \n\nIt is advisable to store such libraries directly in a fixed folder, like **AssemblyVersion\\Libraries**. They won't have any impact to our product, because the are only used while design time.\n\n### The MAJOR and MINOR\n\nTo process the new ``AssemblyVersion.json`` in the template, we need some new directives for referencing the needed libraries and the import of the appropriate namepaces:\n\n```xml\n<#@ assembly name=\"System.Core\" #>\n<#@ assembly name=\"$(SolutionDir)\\AssemblyVersion\\Libraries\\Newtonsoft.Json.dll\" #>\n\n<#@ import namespace=\"System.IO\" #>\n<#@ import namespace=\"System.Linq\" #>\n<#@ import namespace=\"Newtonsoft.Json\" #>\n```\n\nVia the use of the T4 variable ``$(SolutionDir)``, we can point to our copy of Newtonsoft JSON.\n\nNow we can read and convert the JSON into an anonymous object and get the highest values of MAJOR and MINOR:\n\n```c#\n<#\n    string avPath = this.Host.ResolvePath(\"AssemblyVersion.json\");\n    string avJson = File.ReadAllText(avPath);\n\n    var avDefinition = new {\n        initialDate = \"\",\n        versions = new [] {\n            new {\n                major = 0,\n                minor = 0,\n                releaseDate = \"\",\n                remarks = \"\" }\n        }\n    };\n    var avObject = JsonConvert.DeserializeAnonymousType(avJson, avDefinition);\n\n    //Get highest Major/Minor from versions list\n    var maxVersion = avObject.versions\n      .OrderByDescending(i => i.major)\n      .ThenByDescending(j => j.minor)\n      .First();\n\n    //Set MAJOR\n    int major = maxVersion.major;\n\n    //Set MINOR\n    int minor = maxVersion.minor;\n#>\n```\n\n### The BuildLog\n\nIn order to get the version number for BUILD, we need a method to count and store every build that has been run, separated by the MAJOR/MINOR versions. This is a job for a **Post-build event**, which can be configured in the project properties dialog. The event uses shell commands as they are used on the command line.\n\nWhat the commands should do:&nbsp;&nbsp;&nbsp;Write a new line with the current date and time in a log file, named after the MAJOR/MINOR version and stored in the folder **AssemblyVersion\\BuildLogs**.\n\n![Build Log](Meaningful-automatic-versioning-with-T4/BuildLog.png)\n\n#### Extending build event macros\n\nShell commands for build events are supporting built-in variables, so called 'macros', like ``$(ProjectDir)`` (which returns the project directory path), but there is no such macro for the current version number. We have to introduce it via extending the project with a new build target.\n\nUnload the project in Visual Studio for editing the CSPROJ (or VBPROJ) file of your product manually and write the following definition just before the end-tag:\n\n```xml\n  <PropertyGroup>\n    <PostBuildEventDependsOn>\n      $(PostBuildEventDependsOn);\n      PostBuildMacros;\n    </PostBuildEventDependsOn>\n  </PropertyGroup>\n\n  <Target Name=\"PostBuildMacros\">\n    <GetAssemblyIdentity AssemblyFiles=\"$(TargetPath)\">\n      <Output TaskParameter=\"Assemblies\" ItemName=\"Targets\" />\n    </GetAssemblyIdentity>\n    <ItemGroup>\n      <VersionNumber Include=\"@(Targets->'%(Version)')\" />\n    </ItemGroup>\n  </Target>\n```\n\nAfter reloading the project in Visual Studio, we can use ``@(VersionNumber)`` in our commands.\n\n#### CreateBuildLog.bat\n\nThe event build editor is not very comfortable, so we create the batch file ``CreateBuildLog.bat`` in our **AssemblyVersion** folder and use this as the post build event command.\n\n**IMPORTANT: The BuildLog folder must exist, before running the following command the first time!**\n\n```bat\n@echo off\n\nREM --Get parameters\nset PROJECT_DIR=%1\nset VERSION_NUMBER=%2\n\nREM --Set what to log\nset LOG_LINE=%DATE% %TIME%\n\nREM --Inform the user\nset MSG=CreateBuildLog '%LOG_LINE%' for version %VERSION_NUMBER%\necho %MSG%\n\nREM --Get version parts\nFOR /f \"tokens=1,2,3,4 delims=.\" %%a IN (\"%VERSION_NUMBER%\") do (\n\tset MAJOR=%%a\n\tset MINOR=%%b\n\tset BUILD=%%c\n\tset REVISION=%%d\n)\n\nREM --Define BuildLog file and folder \nset BUILDLOG_FILE=%MAJOR%.%MINOR%.log\nset BUILDLOG_FOLDER=%PROJECT_DIR%\\AssemblyVersion\\BuildLogs\n\nREM --Write current date and time as new line in the file\necho %LOG_LINE% >> %BUILDLOG_FOLDER%\\%BUILDLOG_FILE%\"\n```\n\n![Post Build Event](Meaningful-automatic-versioning-with-T4/PostBuildEvent.png)\n\n```bat\n\"$(ProjectDir)\\AssemblyVersion\\CreateBuildLog.bat\" \"$(ProjectDir)\" @(VersionNumber)\n```\n\n### The BUILD\n\nAs we have now the BuildLogs, we can use them in the template:\n\n```c#\n<#\n    ...\n\n    //Get BuildLog of max version\n    string buildlogFolder = this.Host.ResolvePath(\"BuildLogs\");\n    string buildLog = \n      buildlogFolder + \"\\\\\" +\n      maxVersion.major + \".\" +\n      maxVersion.minor + \".log\";\n\n    //Get number of lines from BuildLog or create a new log (!)\n    var buildCount = 1;\n    if (File.Exists(buildLog)) {\n        buildCount = File.ReadLines(buildLog).Count() + 1;\n    } else {\n        File.Create(buildLog).Dispose();\n    }\n\n    //Set BUILD\n    int build = buildCount;\n#>\n```\n\nVery important is to create the log file, if it doesn't exists! Otherwise the build will always fail, because the version attributes can't be created.\n\n### The REVISION\n\nAt least we have to set the REVISION number, by calculating the difference between the current date and the ``initialDate``, which we have previously read from the ``AssemblyVersion.json``:\n\n```c#\n<#\n    ...\n\n    //Set REVISION\n    var dateCreated = DateTime.Parse(avObject.initialDate);\n    int revision = (DateTime.Now.Date - dateCreated.Date).Days;\n#>\n```\n\n### Transforming T4 template on build\n\nThe last hurdle is to run the text transformation every time you build your product. Until now it runs only on saving the ``AssemblyVersion.tt``.\n\nA great helper on that was Thomas Levesque's post [\"Transform T4 templates as part of the build, and pass variables from the project\"](https://thomaslevesque.com/2017/11/13/transform-t4-templates-as-part-of-the-build-and-pass-variables-from-the-project/), where he describes every difficulty to reach this goal.\n\nTo make it short: We have to edit the CSPROJ file again, to introduce TextTemplating to MSBuild.\n\nFirst we need following near the beginning of the projects XML:\n\n```xml\n<PropertyGroup>\n    <VisualStudioVersion Condition=\"'$(VisualStudioVersion)' == ''\">\n      16.0\n    </VisualStudioVersion>\n    <VSToolsPath Condition=\"'$(VSToolsPath)' == ''\">\n      $(MSBuildExtensionsPath32)\\Microsoft\\VisualStudio\\v$(VisualStudioVersion)\n    </VSToolsPath>\n    <TransformOnBuild>true</TransformOnBuild>\n    <OverwriteReadOnlyOutputFiles>true</OverwriteReadOnlyOutputFiles>\n    <TransformOutOfDateOnly>false</TransformOutOfDateOnly>\n</PropertyGroup>\n```\n\nSecondly add the IMPORT of the TextTemplating target AFTER the CSharp target:\n\n```xml\n<Import Project=\"$(MSBuildToolsPath)\\Microsoft.CSharp.targets\" />\n...\n<Import Project=\"$(VSToolsPath)\\TextTemplating\\Microsoft.TextTemplating.targets\" />\n```\n\nIf you build your product now, a new build log is created and the version numbers BUILD and REVISION are automatically increased.\n\n### See it in action\n\nThe project where I implemented this versioning first is [HexoCommander](https://github.com/kristofzerbe/HexoCommander). Feel free to download the code and see how the new versioning mechanism works.\n\n![Screencast Build HexoCommander](Meaningful-automatic-versioning-with-T4/screencast-build-hexocommander.gif)\n\nEnjoy versioning...","slug":"Meaningful-automatic-versioning-with-T4","published":1,"updated":"2020-06-28T23:44:49.164Z","_id":"ckbxwzim7000k8cl91ctrl4x9","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Every developer has to have an idea of versioning his products. If you work with Visual Studio you have the <code>Assembly Information</code> in the project properties dialog, to enter it manually everytime you want to release a new version:</p>\n<p><img src=\"/categories/C/Meaningful-automatic-versioning-with-T4/AssemblyInformationDialog.png\" alt=\"Assembly Information Dialog\"></p>\n<p>The four fields are: MAJOR, MINOR, BUILD, REVISION.</p>\n<p>But seriously … who does that? I guess 99% of all C# developers are entering the <code>AssemblyInfo.cs</code> and enter the famous 2 asterisks into the version declaration of BUILD and REVISION, to let Visual Studio do the incrementation job:</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">assembly: AssemblyVersion(<span class=\"meta-string\">\"1.0.*.*\"</span>)</span>]</span><br><span class=\"line\">[<span class=\"meta\">assembly: AssemblyFileVersion(<span class=\"meta-string\">\"1.0.*.*\"</span>)</span>]</span><br></pre></td></tr></table></figure>\n\n<p>But this is not the end of the possibilities … Let’s do it more meaningful, with some goodies and still automatic…</p>\n<a id=\"more\"></a>\n\n<h3 id=\"More-informative-versioning\"><a href=\"#More-informative-versioning\" class=\"headerlink\" title=\"More informative versioning\"></a>More informative versioning</h3><p>A build with an increased MAJOR version number means, that there are significant changes in the product, even breaking changes. This always should be set manually.</p>\n<p>Also the MINOR. It stands for significant functional extensions of the product.</p>\n<p>How does Visual Studio calculate BUILD and REVISION?</p>\n<blockquote>\n<p>When specifying a version, you have to at least specify major. If you specify major and minor, you can specify an asterisk for build. This will cause <strong>build</strong> to be equal to the <strong>number of days since January 1, 2000 local time</strong>, and for <strong>revision</strong> to be equal to the <strong>number of seconds since midnight local time, divided by 2</strong>.</p>\n</blockquote>\n<p>But, the BUILD number should explain, how often a software with a particular MAJOR.MINOR has been build, due to minor changes and bug fixes.</p>\n<p>The “Asterisk” REVISION number is a little weird, but at least with the BUILD number unique. But it says nothing. Better to pick up the idea of a date calculated, unique number, but not an arbitrary date … let’s take the date the project has started.</p>\n<p>For example: <strong>1.2.16.158</strong> … reads version 1.2 with 16 builds on the 158’th day after the project has started.</p>\n<h3 id=\"Start-with-T4\"><a href=\"#Start-with-T4\" class=\"headerlink\" title=\"Start with T4\"></a>Start with T4</h3><p>T4 (Text Template Transformation Toolkit) is a templating system in Visual Studio for generating text files during design time. It is very suitable to even generate code. Read about it <a href=\"https://docs.microsoft.com/en-us/visualstudio/modeling/code-generation-and-t4-text-templates\" target=\"_blank\" rel=\"noopener\">here</a> and <a href=\"https://docs.microsoft.com/en-us/visualstudio/modeling/writing-a-t4-text-template\" target=\"_blank\" rel=\"noopener\">here</a>.</p>\n<p>A Text Template (.tt) has <strong>Directives</strong> (how the template is processed), <strong>Text blocks</strong> (text copied to the output) and <strong>Control blocks</strong> (program code).</p>\n<p>For our versioning template, we start with this in a new file named <strong><code>AssemblyVersion.tt</code></strong>:</p>\n<p><em>Directives</em>:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">#@</span> <span class=\"attr\">template</span> <span class=\"attr\">hostspecific</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">language</span>=<span class=\"string\">\"C#\"</span> #&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">#@</span> <span class=\"attr\">output</span> <span class=\"attr\">extension</span>=<span class=\"string\">\".cs\"</span> #&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><em>Control block</em>:</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"meta\">#</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> major = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> minor = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> build = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> revision = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"meta\">#&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><em>Text block</em>:</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// This code was generated by a tool. Any changes made manually will be lost</span></span><br><span class=\"line\"><span class=\"comment\">// the next time this code is regenerated.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Reflection;</span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"meta\">assembly: AssemblyVersion(<span class=\"meta-string\">\"&lt;#= $\"</span>&#123;major&#125;.&#123;minor&#125;.&#123;build&#125;.&#123;revision&#125;<span class=\"meta-string\">\" #&gt;\"</span>)</span>]</span><br><span class=\"line\">[<span class=\"meta\">assembly: AssemblyFileVersion(<span class=\"meta-string\">\"&lt;#= $\"</span>&#123;major&#125;.&#123;minor&#125;.&#123;build&#125;.&#123;revision&#125;<span class=\"meta-string\">\" #&gt;\"</span>)</span>]</span><br></pre></td></tr></table></figure>\n\n<p>On saving the TT file, a new CS file with the same name will be created automatically and you got an error like this:</p>\n<p><img src=\"/categories/C/Meaningful-automatic-versioning-with-T4/DuplicateAttributes.png\" alt=\"Duplicate Attributes Error\"></p>\n<h4 id=\"A-new-place-for-version-info\"><a href=\"#A-new-place-for-version-info\" class=\"headerlink\" title=\"A new place for version info\"></a>A new place for version info</h4><p>Th error occurs, because we have now <strong>two</strong> <code>AssemblyVersion</code> and <code>AssemblyFileVersion</code> attributes in our project. We need to comment out the original in <code>Properties\\AssemblyInfo.cs</code>:</p>\n<p><img src=\"/categories/C/Meaningful-automatic-versioning-with-T4/ChangeAssemblyInfo.png\" alt=\"Change AssemblyInfo.cs\"></p>\n<h4 id=\"Structural-Considerations\"><a href=\"#Structural-Considerations\" class=\"headerlink\" title=\"Structural Considerations\"></a>Structural Considerations</h4><p>It makes sense to store all needed files for the new versioning system in a new root folder of the project, named <strong>AssemblyVersion</strong>, starting with the <code>AssemblyVersion.tt</code>, because there will be more files later on.</p>\n<h3 id=\"New-app-information-file\"><a href=\"#New-app-information-file\" class=\"headerlink\" title=\"New app information file\"></a>New app information file</h3><p>As we replaced the original version attributes in the project with those from our generated  <code>AssemblyVersion.cs</code>, we cannot control the MAJOR and MINOR version number via the project property dialog any longer. We need a new approach on that, which can be edited easily and processed automatically.</p>\n<h4 id=\"AssemblyVersion-json\"><a href=\"#AssemblyVersion-json\" class=\"headerlink\" title=\"AssemblyVersion.json\"></a>AssemblyVersion.json</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"initialDate\"</span>: <span class=\"string\">\"2019-09-29\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"versions\"</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"string\">\"major\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">      <span class=\"string\">\"minor\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">      <span class=\"string\">\"releaseDate\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"remarks\"</span>: <span class=\"string\">\"Some cool new features; New versioning system\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"string\">\"major\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">      <span class=\"string\">\"minor\"</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">      <span class=\"string\">\"releaseDate\"</span>: <span class=\"string\">\"2019-10-01\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"remarks\"</span>: <span class=\"string\">\"Initial Release\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>This new JSON file has two main items:</p>\n<ul>\n<li><code>initialDate</code> - the date the project has started, to calculate the REVISION later on</li>\n<li><code>versions</code> - a list with all different MAJOR/MINOR versions we have done so far, with at least one without a release date … the one with the highest <code>major</code> and <code>minor</code>.</li>\n</ul>\n<p>The <code>remarks</code> attribute of a list item holds some information about the changes in a new version. Together with <code>releaseDate</code>, useful for a possible release history, shown in the product itself.</p>\n<h4 id=\"Library-references-in-T4\"><a href=\"#Library-references-in-T4\" class=\"headerlink\" title=\"Library references in T4\"></a>Library references in T4</h4><p>T4 runs in its own app domain, therefore it can use built-in libraries as <code>System.IO</code>, but not third-party libraries like <code>Newtonsoft.JSON</code>. </p>\n<p>We could reference those libraries from the projects package folder via the absolute path (if we use it in our product), but when we are running a NuGet update, the reference will break. </p>\n<p>It is advisable to store such libraries directly in a fixed folder, like <strong>AssemblyVersion\\Libraries</strong>. They won’t have any impact to our product, because the are only used while design time.</p>\n<h3 id=\"The-MAJOR-and-MINOR\"><a href=\"#The-MAJOR-and-MINOR\" class=\"headerlink\" title=\"The MAJOR and MINOR\"></a>The MAJOR and MINOR</h3><p>To process the new <code>AssemblyVersion.json</code> in the template, we need some new directives for referencing the needed libraries and the import of the appropriate namepaces:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">#@</span> <span class=\"attr\">assembly</span> <span class=\"attr\">name</span>=<span class=\"string\">\"System.Core\"</span> #&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">#@</span> <span class=\"attr\">assembly</span> <span class=\"attr\">name</span>=<span class=\"string\">\"$(SolutionDir)\\AssemblyVersion\\Libraries\\Newtonsoft.Json.dll\"</span> #&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">#@</span> <span class=\"attr\">import</span> <span class=\"attr\">namespace</span>=<span class=\"string\">\"System.IO\"</span> #&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">#@</span> <span class=\"attr\">import</span> <span class=\"attr\">namespace</span>=<span class=\"string\">\"System.Linq\"</span> #&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">#@</span> <span class=\"attr\">import</span> <span class=\"attr\">namespace</span>=<span class=\"string\">\"Newtonsoft.Json\"</span> #&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Via the use of the T4 variable <code>$(SolutionDir)</code>, we can point to our copy of Newtonsoft JSON.</p>\n<p>Now we can read and convert the JSON into an anonymous object and get the highest values of MAJOR and MINOR:</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"meta\">#</span></span><br><span class=\"line\">    <span class=\"keyword\">string</span> avPath = <span class=\"keyword\">this</span>.Host.ResolvePath(<span class=\"string\">\"AssemblyVersion.json\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">string</span> avJson = File.ReadAllText(avPath);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> avDefinition = <span class=\"keyword\">new</span> &#123;</span><br><span class=\"line\">        initialDate = <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">        versions = <span class=\"keyword\">new</span> [] &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> &#123;</span><br><span class=\"line\">                major = <span class=\"number\">0</span>,</span><br><span class=\"line\">                minor = <span class=\"number\">0</span>,</span><br><span class=\"line\">                releaseDate = <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">                remarks = <span class=\"string\">\"\"</span> &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> avObject = JsonConvert.DeserializeAnonymousType(avJson, avDefinition);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//Get highest Major/Minor from versions list</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> maxVersion = avObject.versions</span><br><span class=\"line\">      .OrderByDescending(i =&gt; i.major)</span><br><span class=\"line\">      .ThenByDescending(j =&gt; j.minor)</span><br><span class=\"line\">      .First();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//Set MAJOR</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> major = maxVersion.major;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//Set MINOR</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> minor = maxVersion.minor;</span><br><span class=\"line\"><span class=\"meta\">#&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"The-BuildLog\"><a href=\"#The-BuildLog\" class=\"headerlink\" title=\"The BuildLog\"></a>The BuildLog</h3><p>In order to get the version number for BUILD, we need a method to count and store every build that has been run, separated by the MAJOR/MINOR versions. This is a job for a <strong>Post-build event</strong>, which can be configured in the project properties dialog. The event uses shell commands as they are used on the command line.</p>\n<p>What the commands should do:&nbsp;&nbsp;&nbsp;Write a new line with the current date and time in a log file, named after the MAJOR/MINOR version and stored in the folder <strong>AssemblyVersion\\BuildLogs</strong>.</p>\n<p><img src=\"/categories/C/Meaningful-automatic-versioning-with-T4/BuildLog.png\" alt=\"Build Log\"></p>\n<h4 id=\"Extending-build-event-macros\"><a href=\"#Extending-build-event-macros\" class=\"headerlink\" title=\"Extending build event macros\"></a>Extending build event macros</h4><p>Shell commands for build events are supporting built-in variables, so called ‘macros’, like <code>$(ProjectDir)</code> (which returns the project directory path), but there is no such macro for the current version number. We have to introduce it via extending the project with a new build target.</p>\n<p>Unload the project in Visual Studio for editing the CSPROJ (or VBPROJ) file of your product manually and write the following definition just before the end-tag:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">PropertyGroup</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">PostBuildEventDependsOn</span>&gt;</span></span><br><span class=\"line\">    $(PostBuildEventDependsOn);</span><br><span class=\"line\">    PostBuildMacros;</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">PostBuildEventDependsOn</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">PropertyGroup</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Target</span> <span class=\"attr\">Name</span>=<span class=\"string\">\"PostBuildMacros\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">GetAssemblyIdentity</span> <span class=\"attr\">AssemblyFiles</span>=<span class=\"string\">\"$(TargetPath)\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Output</span> <span class=\"attr\">TaskParameter</span>=<span class=\"string\">\"Assemblies\"</span> <span class=\"attr\">ItemName</span>=<span class=\"string\">\"Targets\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">GetAssemblyIdentity</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ItemGroup</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">VersionNumber</span> <span class=\"attr\">Include</span>=<span class=\"string\">\"@(Targets-&gt;'%(Version)')\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ItemGroup</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Target</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>After reloading the project in Visual Studio, we can use <code>@(VersionNumber)</code> in our commands.</p>\n<h4 id=\"CreateBuildLog-bat\"><a href=\"#CreateBuildLog-bat\" class=\"headerlink\" title=\"CreateBuildLog.bat\"></a>CreateBuildLog.bat</h4><p>The event build editor is not very comfortable, so we create the batch file <code>CreateBuildLog.bat</code> in our <strong>AssemblyVersion</strong> folder and use this as the post build event command.</p>\n<p><strong>IMPORTANT: The BuildLog folder must exist, before running the following command the first time!</strong></p>\n<figure class=\"highlight bat\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"built_in\">echo</span> off</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">REM --Get parameters</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> PROJECT_DIR=%<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> VERSION_NUMBER=%<span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">REM --Set what to log</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> LOG_LINE=<span class=\"variable\">%DATE%</span> <span class=\"variable\">%TIME%</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">REM --Inform the user</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> MSG=CreateBuildLog '<span class=\"variable\">%LOG_LINE%</span>' <span class=\"keyword\">for</span> version <span class=\"variable\">%VERSION_NUMBER%</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">%MSG%</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">REM --Get version parts</span></span><br><span class=\"line\"><span class=\"keyword\">FOR</span> /f \"tokens=<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span> delims=.\" <span class=\"variable\">%%a</span> <span class=\"keyword\">IN</span> (\"<span class=\"variable\">%VERSION_NUMBER%</span>\") <span class=\"keyword\">do</span> (</span><br><span class=\"line\">\t<span class=\"built_in\">set</span> MAJOR=<span class=\"variable\">%%a</span></span><br><span class=\"line\">\t<span class=\"built_in\">set</span> MINOR=<span class=\"variable\">%%b</span></span><br><span class=\"line\">\t<span class=\"built_in\">set</span> BUILD=<span class=\"variable\">%%c</span></span><br><span class=\"line\">\t<span class=\"built_in\">set</span> REVISION=<span class=\"variable\">%%d</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">REM --Define BuildLog file and folder </span></span><br><span class=\"line\"><span class=\"built_in\">set</span> BUILDLOG_FILE=<span class=\"variable\">%MAJOR%</span>.<span class=\"variable\">%MINOR%</span>.log</span><br><span class=\"line\"><span class=\"built_in\">set</span> BUILDLOG_FOLDER=<span class=\"variable\">%PROJECT_DIR%</span>\\AssemblyVersion\\BuildLogs</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">REM --Write current date and time as new line in the file</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">%LOG_LINE%</span> &gt;&gt; <span class=\"variable\">%BUILDLOG_FOLDER%</span>\\<span class=\"variable\">%BUILDLOG_FILE%</span>\"</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/categories/C/Meaningful-automatic-versioning-with-T4/PostBuildEvent.png\" alt=\"Post Build Event\"></p>\n<figure class=\"highlight bat\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"$(ProjectDir)\\AssemblyVersion\\CreateBuildLog.bat\" \"$(ProjectDir)\" @(VersionNumber)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"The-BUILD\"><a href=\"#The-BUILD\" class=\"headerlink\" title=\"The BUILD\"></a>The BUILD</h3><p>As we have now the BuildLogs, we can use them in the template:</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"meta\">#</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//Get BuildLog of max version</span></span><br><span class=\"line\">    <span class=\"keyword\">string</span> buildlogFolder = <span class=\"keyword\">this</span>.Host.ResolvePath(<span class=\"string\">\"BuildLogs\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">string</span> buildLog = </span><br><span class=\"line\">      buildlogFolder + <span class=\"string\">\"\\\\\"</span> +</span><br><span class=\"line\">      maxVersion.major + <span class=\"string\">\".\"</span> +</span><br><span class=\"line\">      maxVersion.minor + <span class=\"string\">\".log\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//Get number of lines from BuildLog or create a new log (!)</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> buildCount = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (File.Exists(buildLog)) &#123;</span><br><span class=\"line\">        buildCount = File.ReadLines(buildLog).Count() + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        File.Create(buildLog).Dispose();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//Set BUILD</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> build = buildCount;</span><br><span class=\"line\"><span class=\"meta\">#&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Very important is to create the log file, if it doesn’t exists! Otherwise the build will always fail, because the version attributes can’t be created.</p>\n<h3 id=\"The-REVISION\"><a href=\"#The-REVISION\" class=\"headerlink\" title=\"The REVISION\"></a>The REVISION</h3><p>At least we have to set the REVISION number, by calculating the difference between the current date and the <code>initialDate</code>, which we have previously read from the <code>AssemblyVersion.json</code>:</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"meta\">#</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//Set REVISION</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> dateCreated = DateTime.Parse(avObject.initialDate);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> revision = (DateTime.Now.Date - dateCreated.Date).Days;</span><br><span class=\"line\"><span class=\"meta\">#&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Transforming-T4-template-on-build\"><a href=\"#Transforming-T4-template-on-build\" class=\"headerlink\" title=\"Transforming T4 template on build\"></a>Transforming T4 template on build</h3><p>The last hurdle is to run the text transformation every time you build your product. Until now it runs only on saving the <code>AssemblyVersion.tt</code>.</p>\n<p>A great helper on that was Thomas Levesque’s post <a href=\"https://thomaslevesque.com/2017/11/13/transform-t4-templates-as-part-of-the-build-and-pass-variables-from-the-project/\" target=\"_blank\" rel=\"noopener\">“Transform T4 templates as part of the build, and pass variables from the project”</a>, where he describes every difficulty to reach this goal.</p>\n<p>To make it short: We have to edit the CSPROJ file again, to introduce TextTemplating to MSBuild.</p>\n<p>First we need following near the beginning of the projects XML:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">PropertyGroup</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">VisualStudioVersion</span> <span class=\"attr\">Condition</span>=<span class=\"string\">\"'$(VisualStudioVersion)' == ''\"</span>&gt;</span></span><br><span class=\"line\">      16.0</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">VisualStudioVersion</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">VSToolsPath</span> <span class=\"attr\">Condition</span>=<span class=\"string\">\"'$(VSToolsPath)' == ''\"</span>&gt;</span></span><br><span class=\"line\">      $(MSBuildExtensionsPath32)\\Microsoft\\VisualStudio\\v$(VisualStudioVersion)</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">VSToolsPath</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TransformOnBuild</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">TransformOnBuild</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">OverwriteReadOnlyOutputFiles</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">OverwriteReadOnlyOutputFiles</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TransformOutOfDateOnly</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">TransformOutOfDateOnly</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">PropertyGroup</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Secondly add the IMPORT of the TextTemplating target AFTER the CSharp target:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Import</span> <span class=\"attr\">Project</span>=<span class=\"string\">\"$(MSBuildToolsPath)\\Microsoft.CSharp.targets\"</span> /&gt;</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Import</span> <span class=\"attr\">Project</span>=<span class=\"string\">\"$(VSToolsPath)\\TextTemplating\\Microsoft.TextTemplating.targets\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>If you build your product now, a new build log is created and the version numbers BUILD and REVISION are automatically increased.</p>\n<h3 id=\"See-it-in-action\"><a href=\"#See-it-in-action\" class=\"headerlink\" title=\"See it in action\"></a>See it in action</h3><p>The project where I implemented this versioning first is <a href=\"https://github.com/kristofzerbe/HexoCommander\" target=\"_blank\" rel=\"noopener\">HexoCommander</a>. Feel free to download the code and see how the new versioning mechanism works.</p>\n<p><img src=\"/categories/C/Meaningful-automatic-versioning-with-T4/screencast-build-hexocommander.gif\" alt=\"Screencast Build HexoCommander\"></p>\n<p>Enjoy versioning…</p>\n","site":{"data":{}},"excerpt":"<p>Every developer has to have an idea of versioning his products. If you work with Visual Studio you have the <code>Assembly Information</code> in the project properties dialog, to enter it manually everytime you want to release a new version:</p>\n<p><img src=\"/categories/C/Meaningful-automatic-versioning-with-T4/AssemblyInformationDialog.png\" alt=\"Assembly Information Dialog\"></p>\n<p>The four fields are: MAJOR, MINOR, BUILD, REVISION.</p>\n<p>But seriously … who does that? I guess 99% of all C# developers are entering the <code>AssemblyInfo.cs</code> and enter the famous 2 asterisks into the version declaration of BUILD and REVISION, to let Visual Studio do the incrementation job:</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">assembly: AssemblyVersion(<span class=\"meta-string\">\"1.0.*.*\"</span>)</span>]</span><br><span class=\"line\">[<span class=\"meta\">assembly: AssemblyFileVersion(<span class=\"meta-string\">\"1.0.*.*\"</span>)</span>]</span><br></pre></td></tr></table></figure>\n\n<p>But this is not the end of the possibilities … Let’s do it more meaningful, with some goodies and still automatic…</p>","more":"<h3 id=\"More-informative-versioning\"><a href=\"#More-informative-versioning\" class=\"headerlink\" title=\"More informative versioning\"></a>More informative versioning</h3><p>A build with an increased MAJOR version number means, that there are significant changes in the product, even breaking changes. This always should be set manually.</p>\n<p>Also the MINOR. It stands for significant functional extensions of the product.</p>\n<p>How does Visual Studio calculate BUILD and REVISION?</p>\n<blockquote>\n<p>When specifying a version, you have to at least specify major. If you specify major and minor, you can specify an asterisk for build. This will cause <strong>build</strong> to be equal to the <strong>number of days since January 1, 2000 local time</strong>, and for <strong>revision</strong> to be equal to the <strong>number of seconds since midnight local time, divided by 2</strong>.</p>\n</blockquote>\n<p>But, the BUILD number should explain, how often a software with a particular MAJOR.MINOR has been build, due to minor changes and bug fixes.</p>\n<p>The “Asterisk” REVISION number is a little weird, but at least with the BUILD number unique. But it says nothing. Better to pick up the idea of a date calculated, unique number, but not an arbitrary date … let’s take the date the project has started.</p>\n<p>For example: <strong>1.2.16.158</strong> … reads version 1.2 with 16 builds on the 158’th day after the project has started.</p>\n<h3 id=\"Start-with-T4\"><a href=\"#Start-with-T4\" class=\"headerlink\" title=\"Start with T4\"></a>Start with T4</h3><p>T4 (Text Template Transformation Toolkit) is a templating system in Visual Studio for generating text files during design time. It is very suitable to even generate code. Read about it <a href=\"https://docs.microsoft.com/en-us/visualstudio/modeling/code-generation-and-t4-text-templates\" target=\"_blank\" rel=\"noopener\">here</a> and <a href=\"https://docs.microsoft.com/en-us/visualstudio/modeling/writing-a-t4-text-template\" target=\"_blank\" rel=\"noopener\">here</a>.</p>\n<p>A Text Template (.tt) has <strong>Directives</strong> (how the template is processed), <strong>Text blocks</strong> (text copied to the output) and <strong>Control blocks</strong> (program code).</p>\n<p>For our versioning template, we start with this in a new file named <strong><code>AssemblyVersion.tt</code></strong>:</p>\n<p><em>Directives</em>:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">#@</span> <span class=\"attr\">template</span> <span class=\"attr\">hostspecific</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">language</span>=<span class=\"string\">\"C#\"</span> #&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">#@</span> <span class=\"attr\">output</span> <span class=\"attr\">extension</span>=<span class=\"string\">\".cs\"</span> #&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><em>Control block</em>:</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"meta\">#</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> major = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> minor = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> build = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> revision = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"meta\">#&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><em>Text block</em>:</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// This code was generated by a tool. Any changes made manually will be lost</span></span><br><span class=\"line\"><span class=\"comment\">// the next time this code is regenerated.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Reflection;</span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"meta\">assembly: AssemblyVersion(<span class=\"meta-string\">\"&lt;#= $\"</span>&#123;major&#125;.&#123;minor&#125;.&#123;build&#125;.&#123;revision&#125;<span class=\"meta-string\">\" #&gt;\"</span>)</span>]</span><br><span class=\"line\">[<span class=\"meta\">assembly: AssemblyFileVersion(<span class=\"meta-string\">\"&lt;#= $\"</span>&#123;major&#125;.&#123;minor&#125;.&#123;build&#125;.&#123;revision&#125;<span class=\"meta-string\">\" #&gt;\"</span>)</span>]</span><br></pre></td></tr></table></figure>\n\n<p>On saving the TT file, a new CS file with the same name will be created automatically and you got an error like this:</p>\n<p><img src=\"/categories/C/Meaningful-automatic-versioning-with-T4/DuplicateAttributes.png\" alt=\"Duplicate Attributes Error\"></p>\n<h4 id=\"A-new-place-for-version-info\"><a href=\"#A-new-place-for-version-info\" class=\"headerlink\" title=\"A new place for version info\"></a>A new place for version info</h4><p>Th error occurs, because we have now <strong>two</strong> <code>AssemblyVersion</code> and <code>AssemblyFileVersion</code> attributes in our project. We need to comment out the original in <code>Properties\\AssemblyInfo.cs</code>:</p>\n<p><img src=\"/categories/C/Meaningful-automatic-versioning-with-T4/ChangeAssemblyInfo.png\" alt=\"Change AssemblyInfo.cs\"></p>\n<h4 id=\"Structural-Considerations\"><a href=\"#Structural-Considerations\" class=\"headerlink\" title=\"Structural Considerations\"></a>Structural Considerations</h4><p>It makes sense to store all needed files for the new versioning system in a new root folder of the project, named <strong>AssemblyVersion</strong>, starting with the <code>AssemblyVersion.tt</code>, because there will be more files later on.</p>\n<h3 id=\"New-app-information-file\"><a href=\"#New-app-information-file\" class=\"headerlink\" title=\"New app information file\"></a>New app information file</h3><p>As we replaced the original version attributes in the project with those from our generated  <code>AssemblyVersion.cs</code>, we cannot control the MAJOR and MINOR version number via the project property dialog any longer. We need a new approach on that, which can be edited easily and processed automatically.</p>\n<h4 id=\"AssemblyVersion-json\"><a href=\"#AssemblyVersion-json\" class=\"headerlink\" title=\"AssemblyVersion.json\"></a>AssemblyVersion.json</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"initialDate\"</span>: <span class=\"string\">\"2019-09-29\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"versions\"</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"string\">\"major\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">      <span class=\"string\">\"minor\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">      <span class=\"string\">\"releaseDate\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"remarks\"</span>: <span class=\"string\">\"Some cool new features; New versioning system\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"string\">\"major\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">      <span class=\"string\">\"minor\"</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">      <span class=\"string\">\"releaseDate\"</span>: <span class=\"string\">\"2019-10-01\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"remarks\"</span>: <span class=\"string\">\"Initial Release\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>This new JSON file has two main items:</p>\n<ul>\n<li><code>initialDate</code> - the date the project has started, to calculate the REVISION later on</li>\n<li><code>versions</code> - a list with all different MAJOR/MINOR versions we have done so far, with at least one without a release date … the one with the highest <code>major</code> and <code>minor</code>.</li>\n</ul>\n<p>The <code>remarks</code> attribute of a list item holds some information about the changes in a new version. Together with <code>releaseDate</code>, useful for a possible release history, shown in the product itself.</p>\n<h4 id=\"Library-references-in-T4\"><a href=\"#Library-references-in-T4\" class=\"headerlink\" title=\"Library references in T4\"></a>Library references in T4</h4><p>T4 runs in its own app domain, therefore it can use built-in libraries as <code>System.IO</code>, but not third-party libraries like <code>Newtonsoft.JSON</code>. </p>\n<p>We could reference those libraries from the projects package folder via the absolute path (if we use it in our product), but when we are running a NuGet update, the reference will break. </p>\n<p>It is advisable to store such libraries directly in a fixed folder, like <strong>AssemblyVersion\\Libraries</strong>. They won’t have any impact to our product, because the are only used while design time.</p>\n<h3 id=\"The-MAJOR-and-MINOR\"><a href=\"#The-MAJOR-and-MINOR\" class=\"headerlink\" title=\"The MAJOR and MINOR\"></a>The MAJOR and MINOR</h3><p>To process the new <code>AssemblyVersion.json</code> in the template, we need some new directives for referencing the needed libraries and the import of the appropriate namepaces:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">#@</span> <span class=\"attr\">assembly</span> <span class=\"attr\">name</span>=<span class=\"string\">\"System.Core\"</span> #&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">#@</span> <span class=\"attr\">assembly</span> <span class=\"attr\">name</span>=<span class=\"string\">\"$(SolutionDir)\\AssemblyVersion\\Libraries\\Newtonsoft.Json.dll\"</span> #&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">#@</span> <span class=\"attr\">import</span> <span class=\"attr\">namespace</span>=<span class=\"string\">\"System.IO\"</span> #&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">#@</span> <span class=\"attr\">import</span> <span class=\"attr\">namespace</span>=<span class=\"string\">\"System.Linq\"</span> #&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">#@</span> <span class=\"attr\">import</span> <span class=\"attr\">namespace</span>=<span class=\"string\">\"Newtonsoft.Json\"</span> #&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Via the use of the T4 variable <code>$(SolutionDir)</code>, we can point to our copy of Newtonsoft JSON.</p>\n<p>Now we can read and convert the JSON into an anonymous object and get the highest values of MAJOR and MINOR:</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"meta\">#</span></span><br><span class=\"line\">    <span class=\"keyword\">string</span> avPath = <span class=\"keyword\">this</span>.Host.ResolvePath(<span class=\"string\">\"AssemblyVersion.json\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">string</span> avJson = File.ReadAllText(avPath);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> avDefinition = <span class=\"keyword\">new</span> &#123;</span><br><span class=\"line\">        initialDate = <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">        versions = <span class=\"keyword\">new</span> [] &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> &#123;</span><br><span class=\"line\">                major = <span class=\"number\">0</span>,</span><br><span class=\"line\">                minor = <span class=\"number\">0</span>,</span><br><span class=\"line\">                releaseDate = <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">                remarks = <span class=\"string\">\"\"</span> &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> avObject = JsonConvert.DeserializeAnonymousType(avJson, avDefinition);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//Get highest Major/Minor from versions list</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> maxVersion = avObject.versions</span><br><span class=\"line\">      .OrderByDescending(i =&gt; i.major)</span><br><span class=\"line\">      .ThenByDescending(j =&gt; j.minor)</span><br><span class=\"line\">      .First();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//Set MAJOR</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> major = maxVersion.major;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//Set MINOR</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> minor = maxVersion.minor;</span><br><span class=\"line\"><span class=\"meta\">#&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"The-BuildLog\"><a href=\"#The-BuildLog\" class=\"headerlink\" title=\"The BuildLog\"></a>The BuildLog</h3><p>In order to get the version number for BUILD, we need a method to count and store every build that has been run, separated by the MAJOR/MINOR versions. This is a job for a <strong>Post-build event</strong>, which can be configured in the project properties dialog. The event uses shell commands as they are used on the command line.</p>\n<p>What the commands should do:&nbsp;&nbsp;&nbsp;Write a new line with the current date and time in a log file, named after the MAJOR/MINOR version and stored in the folder <strong>AssemblyVersion\\BuildLogs</strong>.</p>\n<p><img src=\"/categories/C/Meaningful-automatic-versioning-with-T4/BuildLog.png\" alt=\"Build Log\"></p>\n<h4 id=\"Extending-build-event-macros\"><a href=\"#Extending-build-event-macros\" class=\"headerlink\" title=\"Extending build event macros\"></a>Extending build event macros</h4><p>Shell commands for build events are supporting built-in variables, so called ‘macros’, like <code>$(ProjectDir)</code> (which returns the project directory path), but there is no such macro for the current version number. We have to introduce it via extending the project with a new build target.</p>\n<p>Unload the project in Visual Studio for editing the CSPROJ (or VBPROJ) file of your product manually and write the following definition just before the end-tag:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">PropertyGroup</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">PostBuildEventDependsOn</span>&gt;</span></span><br><span class=\"line\">    $(PostBuildEventDependsOn);</span><br><span class=\"line\">    PostBuildMacros;</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">PostBuildEventDependsOn</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">PropertyGroup</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Target</span> <span class=\"attr\">Name</span>=<span class=\"string\">\"PostBuildMacros\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">GetAssemblyIdentity</span> <span class=\"attr\">AssemblyFiles</span>=<span class=\"string\">\"$(TargetPath)\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Output</span> <span class=\"attr\">TaskParameter</span>=<span class=\"string\">\"Assemblies\"</span> <span class=\"attr\">ItemName</span>=<span class=\"string\">\"Targets\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">GetAssemblyIdentity</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ItemGroup</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">VersionNumber</span> <span class=\"attr\">Include</span>=<span class=\"string\">\"@(Targets-&gt;'%(Version)')\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ItemGroup</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Target</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>After reloading the project in Visual Studio, we can use <code>@(VersionNumber)</code> in our commands.</p>\n<h4 id=\"CreateBuildLog-bat\"><a href=\"#CreateBuildLog-bat\" class=\"headerlink\" title=\"CreateBuildLog.bat\"></a>CreateBuildLog.bat</h4><p>The event build editor is not very comfortable, so we create the batch file <code>CreateBuildLog.bat</code> in our <strong>AssemblyVersion</strong> folder and use this as the post build event command.</p>\n<p><strong>IMPORTANT: The BuildLog folder must exist, before running the following command the first time!</strong></p>\n<figure class=\"highlight bat\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"built_in\">echo</span> off</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">REM --Get parameters</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> PROJECT_DIR=%<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> VERSION_NUMBER=%<span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">REM --Set what to log</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> LOG_LINE=<span class=\"variable\">%DATE%</span> <span class=\"variable\">%TIME%</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">REM --Inform the user</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> MSG=CreateBuildLog '<span class=\"variable\">%LOG_LINE%</span>' <span class=\"keyword\">for</span> version <span class=\"variable\">%VERSION_NUMBER%</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">%MSG%</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">REM --Get version parts</span></span><br><span class=\"line\"><span class=\"keyword\">FOR</span> /f \"tokens=<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span> delims=.\" <span class=\"variable\">%%a</span> <span class=\"keyword\">IN</span> (\"<span class=\"variable\">%VERSION_NUMBER%</span>\") <span class=\"keyword\">do</span> (</span><br><span class=\"line\">\t<span class=\"built_in\">set</span> MAJOR=<span class=\"variable\">%%a</span></span><br><span class=\"line\">\t<span class=\"built_in\">set</span> MINOR=<span class=\"variable\">%%b</span></span><br><span class=\"line\">\t<span class=\"built_in\">set</span> BUILD=<span class=\"variable\">%%c</span></span><br><span class=\"line\">\t<span class=\"built_in\">set</span> REVISION=<span class=\"variable\">%%d</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">REM --Define BuildLog file and folder </span></span><br><span class=\"line\"><span class=\"built_in\">set</span> BUILDLOG_FILE=<span class=\"variable\">%MAJOR%</span>.<span class=\"variable\">%MINOR%</span>.log</span><br><span class=\"line\"><span class=\"built_in\">set</span> BUILDLOG_FOLDER=<span class=\"variable\">%PROJECT_DIR%</span>\\AssemblyVersion\\BuildLogs</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">REM --Write current date and time as new line in the file</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">%LOG_LINE%</span> &gt;&gt; <span class=\"variable\">%BUILDLOG_FOLDER%</span>\\<span class=\"variable\">%BUILDLOG_FILE%</span>\"</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/categories/C/Meaningful-automatic-versioning-with-T4/PostBuildEvent.png\" alt=\"Post Build Event\"></p>\n<figure class=\"highlight bat\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"$(ProjectDir)\\AssemblyVersion\\CreateBuildLog.bat\" \"$(ProjectDir)\" @(VersionNumber)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"The-BUILD\"><a href=\"#The-BUILD\" class=\"headerlink\" title=\"The BUILD\"></a>The BUILD</h3><p>As we have now the BuildLogs, we can use them in the template:</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"meta\">#</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//Get BuildLog of max version</span></span><br><span class=\"line\">    <span class=\"keyword\">string</span> buildlogFolder = <span class=\"keyword\">this</span>.Host.ResolvePath(<span class=\"string\">\"BuildLogs\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">string</span> buildLog = </span><br><span class=\"line\">      buildlogFolder + <span class=\"string\">\"\\\\\"</span> +</span><br><span class=\"line\">      maxVersion.major + <span class=\"string\">\".\"</span> +</span><br><span class=\"line\">      maxVersion.minor + <span class=\"string\">\".log\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//Get number of lines from BuildLog or create a new log (!)</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> buildCount = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (File.Exists(buildLog)) &#123;</span><br><span class=\"line\">        buildCount = File.ReadLines(buildLog).Count() + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        File.Create(buildLog).Dispose();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//Set BUILD</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> build = buildCount;</span><br><span class=\"line\"><span class=\"meta\">#&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Very important is to create the log file, if it doesn’t exists! Otherwise the build will always fail, because the version attributes can’t be created.</p>\n<h3 id=\"The-REVISION\"><a href=\"#The-REVISION\" class=\"headerlink\" title=\"The REVISION\"></a>The REVISION</h3><p>At least we have to set the REVISION number, by calculating the difference between the current date and the <code>initialDate</code>, which we have previously read from the <code>AssemblyVersion.json</code>:</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"meta\">#</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//Set REVISION</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> dateCreated = DateTime.Parse(avObject.initialDate);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> revision = (DateTime.Now.Date - dateCreated.Date).Days;</span><br><span class=\"line\"><span class=\"meta\">#&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Transforming-T4-template-on-build\"><a href=\"#Transforming-T4-template-on-build\" class=\"headerlink\" title=\"Transforming T4 template on build\"></a>Transforming T4 template on build</h3><p>The last hurdle is to run the text transformation every time you build your product. Until now it runs only on saving the <code>AssemblyVersion.tt</code>.</p>\n<p>A great helper on that was Thomas Levesque’s post <a href=\"https://thomaslevesque.com/2017/11/13/transform-t4-templates-as-part-of-the-build-and-pass-variables-from-the-project/\" target=\"_blank\" rel=\"noopener\">“Transform T4 templates as part of the build, and pass variables from the project”</a>, where he describes every difficulty to reach this goal.</p>\n<p>To make it short: We have to edit the CSPROJ file again, to introduce TextTemplating to MSBuild.</p>\n<p>First we need following near the beginning of the projects XML:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">PropertyGroup</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">VisualStudioVersion</span> <span class=\"attr\">Condition</span>=<span class=\"string\">\"'$(VisualStudioVersion)' == ''\"</span>&gt;</span></span><br><span class=\"line\">      16.0</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">VisualStudioVersion</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">VSToolsPath</span> <span class=\"attr\">Condition</span>=<span class=\"string\">\"'$(VSToolsPath)' == ''\"</span>&gt;</span></span><br><span class=\"line\">      $(MSBuildExtensionsPath32)\\Microsoft\\VisualStudio\\v$(VisualStudioVersion)</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">VSToolsPath</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TransformOnBuild</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">TransformOnBuild</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">OverwriteReadOnlyOutputFiles</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">OverwriteReadOnlyOutputFiles</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TransformOutOfDateOnly</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">TransformOutOfDateOnly</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">PropertyGroup</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Secondly add the IMPORT of the TextTemplating target AFTER the CSharp target:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Import</span> <span class=\"attr\">Project</span>=<span class=\"string\">\"$(MSBuildToolsPath)\\Microsoft.CSharp.targets\"</span> /&gt;</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Import</span> <span class=\"attr\">Project</span>=<span class=\"string\">\"$(VSToolsPath)\\TextTemplating\\Microsoft.TextTemplating.targets\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>If you build your product now, a new build log is created and the version numbers BUILD and REVISION are automatically increased.</p>\n<h3 id=\"See-it-in-action\"><a href=\"#See-it-in-action\" class=\"headerlink\" title=\"See it in action\"></a>See it in action</h3><p>The project where I implemented this versioning first is <a href=\"https://github.com/kristofzerbe/HexoCommander\" target=\"_blank\" rel=\"noopener\">HexoCommander</a>. Feel free to download the code and see how the new versioning mechanism works.</p>\n<p><img src=\"/categories/C/Meaningful-automatic-versioning-with-T4/screencast-build-hexocommander.gif\" alt=\"Screencast Build HexoCommander\"></p>\n<p>Enjoy versioning…</p>"},{"title":"TFS/DevOps: Delete Remote Workspace","photograph":{"file":"18-09 Kroatien-0061.jpg","name":"Untitled","link":"https://500px.com/photo/303714001/-by-Kristof-Zerbe"},"date":"2020-02-27T23:00:00.000Z","subtitle":null,"_content":"\nIf you are working with freelance developers and Azure DevOps/TFS with TFVC (Team Foundation Version Control) in your company, maybe this will look familiar to you: You hire a new freelancer and you want to reuse the hardware, including the complete software setup, to bring him/her to work as fast and straightforward as possible. You set up a new Azure Devops account with all necessary permissions and you think you're done. No you are not...\n<!-- more -->\n\nEverytime a user connects to a Team Project on Azure DevOps via Visual Studio and gets the code, VS is creating a **remote workspace** on the server, with the **machine name** as default, therefor it is not enough to wipe the profile and any other legacies of the last user from the machine. You also have to remove the remote workspace. Otherwise you will get an error message like that, if you are using a unique file structure on the developers hard disc:\n\n```txt\nThe working folder c://xxx is already in use by the workspace yyy;zzz on computer yyy\n```\n\nThe variable xxx stands for the blocked folder, yyy for the workspace/machine name and zzz for the users id on Azure DevOps.\n\nUnfortunately, there is no visual management console on Azure DevOps to manage your server workspaces, but there is a command line tool called **[tf.exe](https://docs.microsoft.com/en-us/azure/devops/repos/tfvc/use-team-foundation-version-control-commands?view=azure-devops)**.\n\nThe easiest way to get rid of the unused server workspace in 3 steps:\n\n### Step 1\n\nRun **Developer Command Prompt** from Visual Studio 2019 and login with your Azure DevOps credentials. You need to have administration rights...!\n\n### Step 2\n\nGet a list of all remote workspaces available in your DevOps Collection by running the command:\n\n```txt\ntf.exe workspaces /computer:* /owner:* /format:xml > c:\\temp\\workspaces.xml\n```\n\nYou can get a list of all your workspaces by running ``tf workspaces``, but the list only shows you the ``owner``, but not the necessary ``ownerid`` and ... it is nicer to have a file to search in.\n\n### Step 3\n\nFind the abandoned workspace in the list and note its ``name`` and  ``ownerid`` for running the command:\n\n```txt\ntf workspace /delete {WORKSPACE.name};{WORKSPACE.ownerid}\n```\n\nNow your new colleague can create his own workspace on the same machine.\n\n## Related\n* [Use Team Foundation version control commands](https://docs.microsoft.com/en-us/azure/devops/repos/tfvc/use-team-foundation-version-control-commands?view=azure-devops)\n* [How to remove TFS workspace mapping for another user\n](https://stackoverflow.com/questions/28298771/how-to-remove-tfs-workspace-mapping-for-another-user/28299407)","source":"_posts/TFS-DevOps-Delete-Remote-Workspace.md","raw":"---\ntitle: 'TFS/DevOps: Delete Remote Workspace'\nphotograph:\n  file: '18-09 Kroatien-0061.jpg'\n  name: 'Untitled'\n  link: 'https://500px.com/photo/303714001/-by-Kristof-Zerbe'\ndate: 2020-02-28\nsubtitle: \ntags:\n  - TFS/DevOps\n  - Visual Studio\ncategories:\n  - Tools\n---\n\nIf you are working with freelance developers and Azure DevOps/TFS with TFVC (Team Foundation Version Control) in your company, maybe this will look familiar to you: You hire a new freelancer and you want to reuse the hardware, including the complete software setup, to bring him/her to work as fast and straightforward as possible. You set up a new Azure Devops account with all necessary permissions and you think you're done. No you are not...\n<!-- more -->\n\nEverytime a user connects to a Team Project on Azure DevOps via Visual Studio and gets the code, VS is creating a **remote workspace** on the server, with the **machine name** as default, therefor it is not enough to wipe the profile and any other legacies of the last user from the machine. You also have to remove the remote workspace. Otherwise you will get an error message like that, if you are using a unique file structure on the developers hard disc:\n\n```txt\nThe working folder c://xxx is already in use by the workspace yyy;zzz on computer yyy\n```\n\nThe variable xxx stands for the blocked folder, yyy for the workspace/machine name and zzz for the users id on Azure DevOps.\n\nUnfortunately, there is no visual management console on Azure DevOps to manage your server workspaces, but there is a command line tool called **[tf.exe](https://docs.microsoft.com/en-us/azure/devops/repos/tfvc/use-team-foundation-version-control-commands?view=azure-devops)**.\n\nThe easiest way to get rid of the unused server workspace in 3 steps:\n\n### Step 1\n\nRun **Developer Command Prompt** from Visual Studio 2019 and login with your Azure DevOps credentials. You need to have administration rights...!\n\n### Step 2\n\nGet a list of all remote workspaces available in your DevOps Collection by running the command:\n\n```txt\ntf.exe workspaces /computer:* /owner:* /format:xml > c:\\temp\\workspaces.xml\n```\n\nYou can get a list of all your workspaces by running ``tf workspaces``, but the list only shows you the ``owner``, but not the necessary ``ownerid`` and ... it is nicer to have a file to search in.\n\n### Step 3\n\nFind the abandoned workspace in the list and note its ``name`` and  ``ownerid`` for running the command:\n\n```txt\ntf workspace /delete {WORKSPACE.name};{WORKSPACE.ownerid}\n```\n\nNow your new colleague can create his own workspace on the same machine.\n\n## Related\n* [Use Team Foundation version control commands](https://docs.microsoft.com/en-us/azure/devops/repos/tfvc/use-team-foundation-version-control-commands?view=azure-devops)\n* [How to remove TFS workspace mapping for another user\n](https://stackoverflow.com/questions/28298771/how-to-remove-tfs-workspace-mapping-for-another-user/28299407)","slug":"TFS-DevOps-Delete-Remote-Workspace","published":1,"updated":"2020-06-21T14:15:21.613Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckbxwzim9000m8cl9ib1imd79","content":"<p>If you are working with freelance developers and Azure DevOps/TFS with TFVC (Team Foundation Version Control) in your company, maybe this will look familiar to you: You hire a new freelancer and you want to reuse the hardware, including the complete software setup, to bring him/her to work as fast and straightforward as possible. You set up a new Azure Devops account with all necessary permissions and you think you’re done. No you are not…</p>\n<a id=\"more\"></a>\n\n<p>Everytime a user connects to a Team Project on Azure DevOps via Visual Studio and gets the code, VS is creating a <strong>remote workspace</strong> on the server, with the <strong>machine name</strong> as default, therefor it is not enough to wipe the profile and any other legacies of the last user from the machine. You also have to remove the remote workspace. Otherwise you will get an error message like that, if you are using a unique file structure on the developers hard disc:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The working folder c://xxx is already in use by the workspace yyy;zzz on computer yyy</span><br></pre></td></tr></table></figure>\n\n<p>The variable xxx stands for the blocked folder, yyy for the workspace/machine name and zzz for the users id on Azure DevOps.</p>\n<p>Unfortunately, there is no visual management console on Azure DevOps to manage your server workspaces, but there is a command line tool called <strong><a href=\"https://docs.microsoft.com/en-us/azure/devops/repos/tfvc/use-team-foundation-version-control-commands?view=azure-devops\" target=\"_blank\" rel=\"noopener\">tf.exe</a></strong>.</p>\n<p>The easiest way to get rid of the unused server workspace in 3 steps:</p>\n<h3 id=\"Step-1\"><a href=\"#Step-1\" class=\"headerlink\" title=\"Step 1\"></a>Step 1</h3><p>Run <strong>Developer Command Prompt</strong> from Visual Studio 2019 and login with your Azure DevOps credentials. You need to have administration rights…!</p>\n<h3 id=\"Step-2\"><a href=\"#Step-2\" class=\"headerlink\" title=\"Step 2\"></a>Step 2</h3><p>Get a list of all remote workspaces available in your DevOps Collection by running the command:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tf.exe workspaces /computer:* /owner:* /format:xml &gt; c:\\temp\\workspaces.xml</span><br></pre></td></tr></table></figure>\n\n<p>You can get a list of all your workspaces by running <code>tf workspaces</code>, but the list only shows you the <code>owner</code>, but not the necessary <code>ownerid</code> and … it is nicer to have a file to search in.</p>\n<h3 id=\"Step-3\"><a href=\"#Step-3\" class=\"headerlink\" title=\"Step 3\"></a>Step 3</h3><p>Find the abandoned workspace in the list and note its <code>name</code> and  <code>ownerid</code> for running the command:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tf workspace /delete &#123;WORKSPACE.name&#125;;&#123;WORKSPACE.ownerid&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Now your new colleague can create his own workspace on the same machine.</p>\n<h2 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h2><ul>\n<li><a href=\"https://docs.microsoft.com/en-us/azure/devops/repos/tfvc/use-team-foundation-version-control-commands?view=azure-devops\" target=\"_blank\" rel=\"noopener\">Use Team Foundation version control commands</a></li>\n<li><a href=\"https://stackoverflow.com/questions/28298771/how-to-remove-tfs-workspace-mapping-for-another-user/28299407\" target=\"_blank\" rel=\"noopener\">How to remove TFS workspace mapping for another user\n</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>If you are working with freelance developers and Azure DevOps/TFS with TFVC (Team Foundation Version Control) in your company, maybe this will look familiar to you: You hire a new freelancer and you want to reuse the hardware, including the complete software setup, to bring him/her to work as fast and straightforward as possible. You set up a new Azure Devops account with all necessary permissions and you think you’re done. No you are not…</p>","more":"<p>Everytime a user connects to a Team Project on Azure DevOps via Visual Studio and gets the code, VS is creating a <strong>remote workspace</strong> on the server, with the <strong>machine name</strong> as default, therefor it is not enough to wipe the profile and any other legacies of the last user from the machine. You also have to remove the remote workspace. Otherwise you will get an error message like that, if you are using a unique file structure on the developers hard disc:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The working folder c://xxx is already in use by the workspace yyy;zzz on computer yyy</span><br></pre></td></tr></table></figure>\n\n<p>The variable xxx stands for the blocked folder, yyy for the workspace/machine name and zzz for the users id on Azure DevOps.</p>\n<p>Unfortunately, there is no visual management console on Azure DevOps to manage your server workspaces, but there is a command line tool called <strong><a href=\"https://docs.microsoft.com/en-us/azure/devops/repos/tfvc/use-team-foundation-version-control-commands?view=azure-devops\" target=\"_blank\" rel=\"noopener\">tf.exe</a></strong>.</p>\n<p>The easiest way to get rid of the unused server workspace in 3 steps:</p>\n<h3 id=\"Step-1\"><a href=\"#Step-1\" class=\"headerlink\" title=\"Step 1\"></a>Step 1</h3><p>Run <strong>Developer Command Prompt</strong> from Visual Studio 2019 and login with your Azure DevOps credentials. You need to have administration rights…!</p>\n<h3 id=\"Step-2\"><a href=\"#Step-2\" class=\"headerlink\" title=\"Step 2\"></a>Step 2</h3><p>Get a list of all remote workspaces available in your DevOps Collection by running the command:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tf.exe workspaces /computer:* /owner:* /format:xml &gt; c:\\temp\\workspaces.xml</span><br></pre></td></tr></table></figure>\n\n<p>You can get a list of all your workspaces by running <code>tf workspaces</code>, but the list only shows you the <code>owner</code>, but not the necessary <code>ownerid</code> and … it is nicer to have a file to search in.</p>\n<h3 id=\"Step-3\"><a href=\"#Step-3\" class=\"headerlink\" title=\"Step 3\"></a>Step 3</h3><p>Find the abandoned workspace in the list and note its <code>name</code> and  <code>ownerid</code> for running the command:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tf workspace /delete &#123;WORKSPACE.name&#125;;&#123;WORKSPACE.ownerid&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Now your new colleague can create his own workspace on the same machine.</p>\n<h2 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h2><ul>\n<li><a href=\"https://docs.microsoft.com/en-us/azure/devops/repos/tfvc/use-team-foundation-version-control-commands?view=azure-devops\" target=\"_blank\" rel=\"noopener\">Use Team Foundation version control commands</a></li>\n<li><a href=\"https://stackoverflow.com/questions/28298771/how-to-remove-tfs-workspace-mapping-for-another-user/28299407\" target=\"_blank\" rel=\"noopener\">How to remove TFS workspace mapping for another user\n</a></li>\n</ul>"},{"title":"Hello World","date":"2019-09-17T10:00:00.000Z","hidden":true,"_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n![TEST](kiko.io-icon.png)\n\n## Quick Start\n\n{% fa_inline share fa %}\n\n{% fa_css %}\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2019-09-17 12:00:00\nhidden: true\ncategories: \n    - Test\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n![TEST](kiko.io-icon.png)\n\n## Quick Start\n\n{% fa_inline share fa %}\n\n{% fa_css %}\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n","slug":"hello-world","published":1,"updated":"2020-06-24T08:44:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckbxwzime000t8cl99olwohj5","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<p><img src=\"/categories/Test/hello-world/kiko.io-icon.png\" alt=\"TEST\"></p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><svg aria-hidden=\"true\" focusable=\"false\" data-prefix=\"fa\" data-icon=\"share\" class=\"svg-inline--fa fa-share fa-w-16\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 512 512\"><path fill=\"currentColor\" d=\"M503.691 189.836L327.687 37.851C312.281 24.546 288 35.347 288 56.015v80.053C127.371 137.907 0 170.1 0 322.326c0 61.441 39.581 122.309 83.333 154.132 13.653 9.931 33.111-2.533 28.077-18.631C66.066 312.814 132.917 274.316 288 272.085V360c0 20.7 24.3 31.453 39.687 18.164l176.004-152c11.071-9.562 11.086-26.753 0-36.328z\"/></svg>\n\n<style>svg:not(:root).svg-inline--fa {\n  overflow: visible;\n}\n\n.svg-inline--fa {\n  display: inline-block;\n  font-size: inherit;\n  height: 1em;\n  overflow: visible;\n  vertical-align: -0.125em;\n}\n.svg-inline--fa.fa-lg {\n  vertical-align: -0.225em;\n}\n.svg-inline--fa.fa-w-1 {\n  width: 0.0625em;\n}\n.svg-inline--fa.fa-w-2 {\n  width: 0.125em;\n}\n.svg-inline--fa.fa-w-3 {\n  width: 0.1875em;\n}\n.svg-inline--fa.fa-w-4 {\n  width: 0.25em;\n}\n.svg-inline--fa.fa-w-5 {\n  width: 0.3125em;\n}\n.svg-inline--fa.fa-w-6 {\n  width: 0.375em;\n}\n.svg-inline--fa.fa-w-7 {\n  width: 0.4375em;\n}\n.svg-inline--fa.fa-w-8 {\n  width: 0.5em;\n}\n.svg-inline--fa.fa-w-9 {\n  width: 0.5625em;\n}\n.svg-inline--fa.fa-w-10 {\n  width: 0.625em;\n}\n.svg-inline--fa.fa-w-11 {\n  width: 0.6875em;\n}\n.svg-inline--fa.fa-w-12 {\n  width: 0.75em;\n}\n.svg-inline--fa.fa-w-13 {\n  width: 0.8125em;\n}\n.svg-inline--fa.fa-w-14 {\n  width: 0.875em;\n}\n.svg-inline--fa.fa-w-15 {\n  width: 0.9375em;\n}\n.svg-inline--fa.fa-w-16 {\n  width: 1em;\n}\n.svg-inline--fa.fa-w-17 {\n  width: 1.0625em;\n}\n.svg-inline--fa.fa-w-18 {\n  width: 1.125em;\n}\n.svg-inline--fa.fa-w-19 {\n  width: 1.1875em;\n}\n.svg-inline--fa.fa-w-20 {\n  width: 1.25em;\n}\n.svg-inline--fa.fa-pull-left {\n  margin-right: 0.3em;\n  width: auto;\n}\n.svg-inline--fa.fa-pull-right {\n  margin-left: 0.3em;\n  width: auto;\n}\n.svg-inline--fa.fa-border {\n  height: 1.5em;\n}\n.svg-inline--fa.fa-li {\n  width: 2em;\n}\n.svg-inline--fa.fa-fw {\n  width: 1.25em;\n}\n\n.fa-layers svg.svg-inline--fa {\n  bottom: 0;\n  left: 0;\n  margin: auto;\n  position: absolute;\n  right: 0;\n  top: 0;\n}\n\n.fa-layers {\n  display: inline-block;\n  height: 1em;\n  position: relative;\n  text-align: center;\n  vertical-align: -0.125em;\n  width: 1em;\n}\n.fa-layers svg.svg-inline--fa {\n  -webkit-transform-origin: center center;\n          transform-origin: center center;\n}\n\n.fa-layers-counter, .fa-layers-text {\n  display: inline-block;\n  position: absolute;\n  text-align: center;\n}\n\n.fa-layers-text {\n  left: 50%;\n  top: 50%;\n  -webkit-transform: translate(-50%, -50%);\n          transform: translate(-50%, -50%);\n  -webkit-transform-origin: center center;\n          transform-origin: center center;\n}\n\n.fa-layers-counter {\n  background-color: #ff253a;\n  border-radius: 1em;\n  -webkit-box-sizing: border-box;\n          box-sizing: border-box;\n  color: #fff;\n  height: 1.5em;\n  line-height: 1;\n  max-width: 5em;\n  min-width: 1.5em;\n  overflow: hidden;\n  padding: 0.25em;\n  right: 0;\n  text-overflow: ellipsis;\n  top: 0;\n  -webkit-transform: scale(0.25);\n          transform: scale(0.25);\n  -webkit-transform-origin: top right;\n          transform-origin: top right;\n}\n\n.fa-layers-bottom-right {\n  bottom: 0;\n  right: 0;\n  top: auto;\n  -webkit-transform: scale(0.25);\n          transform: scale(0.25);\n  -webkit-transform-origin: bottom right;\n          transform-origin: bottom right;\n}\n\n.fa-layers-bottom-left {\n  bottom: 0;\n  left: 0;\n  right: auto;\n  top: auto;\n  -webkit-transform: scale(0.25);\n          transform: scale(0.25);\n  -webkit-transform-origin: bottom left;\n          transform-origin: bottom left;\n}\n\n.fa-layers-top-right {\n  right: 0;\n  top: 0;\n  -webkit-transform: scale(0.25);\n          transform: scale(0.25);\n  -webkit-transform-origin: top right;\n          transform-origin: top right;\n}\n\n.fa-layers-top-left {\n  left: 0;\n  right: auto;\n  top: 0;\n  -webkit-transform: scale(0.25);\n          transform: scale(0.25);\n  -webkit-transform-origin: top left;\n          transform-origin: top left;\n}\n\n.fa-lg {\n  font-size: 1.3333333333em;\n  line-height: 0.75em;\n  vertical-align: -0.0667em;\n}\n\n.fa-xs {\n  font-size: 0.75em;\n}\n\n.fa-sm {\n  font-size: 0.875em;\n}\n\n.fa-1x {\n  font-size: 1em;\n}\n\n.fa-2x {\n  font-size: 2em;\n}\n\n.fa-3x {\n  font-size: 3em;\n}\n\n.fa-4x {\n  font-size: 4em;\n}\n\n.fa-5x {\n  font-size: 5em;\n}\n\n.fa-6x {\n  font-size: 6em;\n}\n\n.fa-7x {\n  font-size: 7em;\n}\n\n.fa-8x {\n  font-size: 8em;\n}\n\n.fa-9x {\n  font-size: 9em;\n}\n\n.fa-10x {\n  font-size: 10em;\n}\n\n.fa-fw {\n  text-align: center;\n  width: 1.25em;\n}\n\n.fa-ul {\n  list-style-type: none;\n  margin-left: 2.5em;\n  padding-left: 0;\n}\n.fa-ul > li {\n  position: relative;\n}\n\n.fa-li {\n  left: -2em;\n  position: absolute;\n  text-align: center;\n  width: 2em;\n  line-height: inherit;\n}\n\n.fa-border {\n  border: solid 0.08em #eee;\n  border-radius: 0.1em;\n  padding: 0.2em 0.25em 0.15em;\n}\n\n.fa-pull-left {\n  float: left;\n}\n\n.fa-pull-right {\n  float: right;\n}\n\n.fa.fa-pull-left,\n.fas.fa-pull-left,\n.far.fa-pull-left,\n.fal.fa-pull-left,\n.fab.fa-pull-left {\n  margin-right: 0.3em;\n}\n.fa.fa-pull-right,\n.fas.fa-pull-right,\n.far.fa-pull-right,\n.fal.fa-pull-right,\n.fab.fa-pull-right {\n  margin-left: 0.3em;\n}\n\n.fa-spin {\n  -webkit-animation: fa-spin 2s infinite linear;\n          animation: fa-spin 2s infinite linear;\n}\n\n.fa-pulse {\n  -webkit-animation: fa-spin 1s infinite steps(8);\n          animation: fa-spin 1s infinite steps(8);\n}\n\n@-webkit-keyframes fa-spin {\n  0% {\n    -webkit-transform: rotate(0deg);\n            transform: rotate(0deg);\n  }\n  100% {\n    -webkit-transform: rotate(360deg);\n            transform: rotate(360deg);\n  }\n}\n\n@keyframes fa-spin {\n  0% {\n    -webkit-transform: rotate(0deg);\n            transform: rotate(0deg);\n  }\n  100% {\n    -webkit-transform: rotate(360deg);\n            transform: rotate(360deg);\n  }\n}\n.fa-rotate-90 {\n  -ms-filter: \"progid:DXImageTransform.Microsoft.BasicImage(rotation=1)\";\n  -webkit-transform: rotate(90deg);\n          transform: rotate(90deg);\n}\n\n.fa-rotate-180 {\n  -ms-filter: \"progid:DXImageTransform.Microsoft.BasicImage(rotation=2)\";\n  -webkit-transform: rotate(180deg);\n          transform: rotate(180deg);\n}\n\n.fa-rotate-270 {\n  -ms-filter: \"progid:DXImageTransform.Microsoft.BasicImage(rotation=3)\";\n  -webkit-transform: rotate(270deg);\n          transform: rotate(270deg);\n}\n\n.fa-flip-horizontal {\n  -ms-filter: \"progid:DXImageTransform.Microsoft.BasicImage(rotation=0, mirror=1)\";\n  -webkit-transform: scale(-1, 1);\n          transform: scale(-1, 1);\n}\n\n.fa-flip-vertical {\n  -ms-filter: \"progid:DXImageTransform.Microsoft.BasicImage(rotation=2, mirror=1)\";\n  -webkit-transform: scale(1, -1);\n          transform: scale(1, -1);\n}\n\n.fa-flip-both, .fa-flip-horizontal.fa-flip-vertical {\n  -ms-filter: \"progid:DXImageTransform.Microsoft.BasicImage(rotation=2, mirror=1)\";\n  -webkit-transform: scale(-1, -1);\n          transform: scale(-1, -1);\n}\n\n:root .fa-rotate-90,\n:root .fa-rotate-180,\n:root .fa-rotate-270,\n:root .fa-flip-horizontal,\n:root .fa-flip-vertical,\n:root .fa-flip-both {\n  -webkit-filter: none;\n          filter: none;\n}\n\n.fa-stack {\n  display: inline-block;\n  height: 2em;\n  position: relative;\n  width: 2.5em;\n}\n\n.fa-stack-1x,\n.fa-stack-2x {\n  bottom: 0;\n  left: 0;\n  margin: auto;\n  position: absolute;\n  right: 0;\n  top: 0;\n}\n\n.svg-inline--fa.fa-stack-1x {\n  height: 1em;\n  width: 1.25em;\n}\n.svg-inline--fa.fa-stack-2x {\n  height: 2em;\n  width: 2.5em;\n}\n\n.fa-inverse {\n  color: #fff;\n}\n\n.sr-only {\n  border: 0;\n  clip: rect(0, 0, 0, 0);\n  height: 1px;\n  margin: -1px;\n  overflow: hidden;\n  padding: 0;\n  position: absolute;\n  width: 1px;\n}\n\n.sr-only-focusable:active, .sr-only-focusable:focus {\n  clip: auto;\n  height: auto;\n  margin: 0;\n  overflow: visible;\n  position: static;\n  width: auto;\n}\n\n.svg-inline--fa .fa-primary {\n  fill: var(--fa-primary-color, currentColor);\n  opacity: 1;\n  opacity: var(--fa-primary-opacity, 1);\n}\n\n.svg-inline--fa .fa-secondary {\n  fill: var(--fa-secondary-color, currentColor);\n  opacity: 0.4;\n  opacity: var(--fa-secondary-opacity, 0.4);\n}\n\n.svg-inline--fa.fa-swap-opacity .fa-primary {\n  opacity: 0.4;\n  opacity: var(--fa-secondary-opacity, 0.4);\n}\n\n.svg-inline--fa.fa-swap-opacity .fa-secondary {\n  opacity: 1;\n  opacity: var(--fa-primary-opacity, 1);\n}\n\n.svg-inline--fa mask .fa-primary,\n.svg-inline--fa mask .fa-secondary {\n  fill: black;\n}\n\n.fad.fa-inverse {\n  color: #fff;\n}</style>\n\n<h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<!-- flag of hidden posts -->","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<p><img src=\"/categories/Test/hello-world/kiko.io-icon.png\" alt=\"TEST\"></p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><svg aria-hidden=\"true\" focusable=\"false\" data-prefix=\"fa\" data-icon=\"share\" class=\"svg-inline--fa fa-share fa-w-16\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 512 512\"><path fill=\"currentColor\" d=\"M503.691 189.836L327.687 37.851C312.281 24.546 288 35.347 288 56.015v80.053C127.371 137.907 0 170.1 0 322.326c0 61.441 39.581 122.309 83.333 154.132 13.653 9.931 33.111-2.533 28.077-18.631C66.066 312.814 132.917 274.316 288 272.085V360c0 20.7 24.3 31.453 39.687 18.164l176.004-152c11.071-9.562 11.086-26.753 0-36.328z\"/></svg>\n\n<style>svg:not(:root).svg-inline--fa {\n  overflow: visible;\n}\n\n.svg-inline--fa {\n  display: inline-block;\n  font-size: inherit;\n  height: 1em;\n  overflow: visible;\n  vertical-align: -0.125em;\n}\n.svg-inline--fa.fa-lg {\n  vertical-align: -0.225em;\n}\n.svg-inline--fa.fa-w-1 {\n  width: 0.0625em;\n}\n.svg-inline--fa.fa-w-2 {\n  width: 0.125em;\n}\n.svg-inline--fa.fa-w-3 {\n  width: 0.1875em;\n}\n.svg-inline--fa.fa-w-4 {\n  width: 0.25em;\n}\n.svg-inline--fa.fa-w-5 {\n  width: 0.3125em;\n}\n.svg-inline--fa.fa-w-6 {\n  width: 0.375em;\n}\n.svg-inline--fa.fa-w-7 {\n  width: 0.4375em;\n}\n.svg-inline--fa.fa-w-8 {\n  width: 0.5em;\n}\n.svg-inline--fa.fa-w-9 {\n  width: 0.5625em;\n}\n.svg-inline--fa.fa-w-10 {\n  width: 0.625em;\n}\n.svg-inline--fa.fa-w-11 {\n  width: 0.6875em;\n}\n.svg-inline--fa.fa-w-12 {\n  width: 0.75em;\n}\n.svg-inline--fa.fa-w-13 {\n  width: 0.8125em;\n}\n.svg-inline--fa.fa-w-14 {\n  width: 0.875em;\n}\n.svg-inline--fa.fa-w-15 {\n  width: 0.9375em;\n}\n.svg-inline--fa.fa-w-16 {\n  width: 1em;\n}\n.svg-inline--fa.fa-w-17 {\n  width: 1.0625em;\n}\n.svg-inline--fa.fa-w-18 {\n  width: 1.125em;\n}\n.svg-inline--fa.fa-w-19 {\n  width: 1.1875em;\n}\n.svg-inline--fa.fa-w-20 {\n  width: 1.25em;\n}\n.svg-inline--fa.fa-pull-left {\n  margin-right: 0.3em;\n  width: auto;\n}\n.svg-inline--fa.fa-pull-right {\n  margin-left: 0.3em;\n  width: auto;\n}\n.svg-inline--fa.fa-border {\n  height: 1.5em;\n}\n.svg-inline--fa.fa-li {\n  width: 2em;\n}\n.svg-inline--fa.fa-fw {\n  width: 1.25em;\n}\n\n.fa-layers svg.svg-inline--fa {\n  bottom: 0;\n  left: 0;\n  margin: auto;\n  position: absolute;\n  right: 0;\n  top: 0;\n}\n\n.fa-layers {\n  display: inline-block;\n  height: 1em;\n  position: relative;\n  text-align: center;\n  vertical-align: -0.125em;\n  width: 1em;\n}\n.fa-layers svg.svg-inline--fa {\n  -webkit-transform-origin: center center;\n          transform-origin: center center;\n}\n\n.fa-layers-counter, .fa-layers-text {\n  display: inline-block;\n  position: absolute;\n  text-align: center;\n}\n\n.fa-layers-text {\n  left: 50%;\n  top: 50%;\n  -webkit-transform: translate(-50%, -50%);\n          transform: translate(-50%, -50%);\n  -webkit-transform-origin: center center;\n          transform-origin: center center;\n}\n\n.fa-layers-counter {\n  background-color: #ff253a;\n  border-radius: 1em;\n  -webkit-box-sizing: border-box;\n          box-sizing: border-box;\n  color: #fff;\n  height: 1.5em;\n  line-height: 1;\n  max-width: 5em;\n  min-width: 1.5em;\n  overflow: hidden;\n  padding: 0.25em;\n  right: 0;\n  text-overflow: ellipsis;\n  top: 0;\n  -webkit-transform: scale(0.25);\n          transform: scale(0.25);\n  -webkit-transform-origin: top right;\n          transform-origin: top right;\n}\n\n.fa-layers-bottom-right {\n  bottom: 0;\n  right: 0;\n  top: auto;\n  -webkit-transform: scale(0.25);\n          transform: scale(0.25);\n  -webkit-transform-origin: bottom right;\n          transform-origin: bottom right;\n}\n\n.fa-layers-bottom-left {\n  bottom: 0;\n  left: 0;\n  right: auto;\n  top: auto;\n  -webkit-transform: scale(0.25);\n          transform: scale(0.25);\n  -webkit-transform-origin: bottom left;\n          transform-origin: bottom left;\n}\n\n.fa-layers-top-right {\n  right: 0;\n  top: 0;\n  -webkit-transform: scale(0.25);\n          transform: scale(0.25);\n  -webkit-transform-origin: top right;\n          transform-origin: top right;\n}\n\n.fa-layers-top-left {\n  left: 0;\n  right: auto;\n  top: 0;\n  -webkit-transform: scale(0.25);\n          transform: scale(0.25);\n  -webkit-transform-origin: top left;\n          transform-origin: top left;\n}\n\n.fa-lg {\n  font-size: 1.3333333333em;\n  line-height: 0.75em;\n  vertical-align: -0.0667em;\n}\n\n.fa-xs {\n  font-size: 0.75em;\n}\n\n.fa-sm {\n  font-size: 0.875em;\n}\n\n.fa-1x {\n  font-size: 1em;\n}\n\n.fa-2x {\n  font-size: 2em;\n}\n\n.fa-3x {\n  font-size: 3em;\n}\n\n.fa-4x {\n  font-size: 4em;\n}\n\n.fa-5x {\n  font-size: 5em;\n}\n\n.fa-6x {\n  font-size: 6em;\n}\n\n.fa-7x {\n  font-size: 7em;\n}\n\n.fa-8x {\n  font-size: 8em;\n}\n\n.fa-9x {\n  font-size: 9em;\n}\n\n.fa-10x {\n  font-size: 10em;\n}\n\n.fa-fw {\n  text-align: center;\n  width: 1.25em;\n}\n\n.fa-ul {\n  list-style-type: none;\n  margin-left: 2.5em;\n  padding-left: 0;\n}\n.fa-ul > li {\n  position: relative;\n}\n\n.fa-li {\n  left: -2em;\n  position: absolute;\n  text-align: center;\n  width: 2em;\n  line-height: inherit;\n}\n\n.fa-border {\n  border: solid 0.08em #eee;\n  border-radius: 0.1em;\n  padding: 0.2em 0.25em 0.15em;\n}\n\n.fa-pull-left {\n  float: left;\n}\n\n.fa-pull-right {\n  float: right;\n}\n\n.fa.fa-pull-left,\n.fas.fa-pull-left,\n.far.fa-pull-left,\n.fal.fa-pull-left,\n.fab.fa-pull-left {\n  margin-right: 0.3em;\n}\n.fa.fa-pull-right,\n.fas.fa-pull-right,\n.far.fa-pull-right,\n.fal.fa-pull-right,\n.fab.fa-pull-right {\n  margin-left: 0.3em;\n}\n\n.fa-spin {\n  -webkit-animation: fa-spin 2s infinite linear;\n          animation: fa-spin 2s infinite linear;\n}\n\n.fa-pulse {\n  -webkit-animation: fa-spin 1s infinite steps(8);\n          animation: fa-spin 1s infinite steps(8);\n}\n\n@-webkit-keyframes fa-spin {\n  0% {\n    -webkit-transform: rotate(0deg);\n            transform: rotate(0deg);\n  }\n  100% {\n    -webkit-transform: rotate(360deg);\n            transform: rotate(360deg);\n  }\n}\n\n@keyframes fa-spin {\n  0% {\n    -webkit-transform: rotate(0deg);\n            transform: rotate(0deg);\n  }\n  100% {\n    -webkit-transform: rotate(360deg);\n            transform: rotate(360deg);\n  }\n}\n.fa-rotate-90 {\n  -ms-filter: \"progid:DXImageTransform.Microsoft.BasicImage(rotation=1)\";\n  -webkit-transform: rotate(90deg);\n          transform: rotate(90deg);\n}\n\n.fa-rotate-180 {\n  -ms-filter: \"progid:DXImageTransform.Microsoft.BasicImage(rotation=2)\";\n  -webkit-transform: rotate(180deg);\n          transform: rotate(180deg);\n}\n\n.fa-rotate-270 {\n  -ms-filter: \"progid:DXImageTransform.Microsoft.BasicImage(rotation=3)\";\n  -webkit-transform: rotate(270deg);\n          transform: rotate(270deg);\n}\n\n.fa-flip-horizontal {\n  -ms-filter: \"progid:DXImageTransform.Microsoft.BasicImage(rotation=0, mirror=1)\";\n  -webkit-transform: scale(-1, 1);\n          transform: scale(-1, 1);\n}\n\n.fa-flip-vertical {\n  -ms-filter: \"progid:DXImageTransform.Microsoft.BasicImage(rotation=2, mirror=1)\";\n  -webkit-transform: scale(1, -1);\n          transform: scale(1, -1);\n}\n\n.fa-flip-both, .fa-flip-horizontal.fa-flip-vertical {\n  -ms-filter: \"progid:DXImageTransform.Microsoft.BasicImage(rotation=2, mirror=1)\";\n  -webkit-transform: scale(-1, -1);\n          transform: scale(-1, -1);\n}\n\n:root .fa-rotate-90,\n:root .fa-rotate-180,\n:root .fa-rotate-270,\n:root .fa-flip-horizontal,\n:root .fa-flip-vertical,\n:root .fa-flip-both {\n  -webkit-filter: none;\n          filter: none;\n}\n\n.fa-stack {\n  display: inline-block;\n  height: 2em;\n  position: relative;\n  width: 2.5em;\n}\n\n.fa-stack-1x,\n.fa-stack-2x {\n  bottom: 0;\n  left: 0;\n  margin: auto;\n  position: absolute;\n  right: 0;\n  top: 0;\n}\n\n.svg-inline--fa.fa-stack-1x {\n  height: 1em;\n  width: 1.25em;\n}\n.svg-inline--fa.fa-stack-2x {\n  height: 2em;\n  width: 2.5em;\n}\n\n.fa-inverse {\n  color: #fff;\n}\n\n.sr-only {\n  border: 0;\n  clip: rect(0, 0, 0, 0);\n  height: 1px;\n  margin: -1px;\n  overflow: hidden;\n  padding: 0;\n  position: absolute;\n  width: 1px;\n}\n\n.sr-only-focusable:active, .sr-only-focusable:focus {\n  clip: auto;\n  height: auto;\n  margin: 0;\n  overflow: visible;\n  position: static;\n  width: auto;\n}\n\n.svg-inline--fa .fa-primary {\n  fill: var(--fa-primary-color, currentColor);\n  opacity: 1;\n  opacity: var(--fa-primary-opacity, 1);\n}\n\n.svg-inline--fa .fa-secondary {\n  fill: var(--fa-secondary-color, currentColor);\n  opacity: 0.4;\n  opacity: var(--fa-secondary-opacity, 0.4);\n}\n\n.svg-inline--fa.fa-swap-opacity .fa-primary {\n  opacity: 0.4;\n  opacity: var(--fa-secondary-opacity, 0.4);\n}\n\n.svg-inline--fa.fa-swap-opacity .fa-secondary {\n  opacity: 1;\n  opacity: var(--fa-primary-opacity, 1);\n}\n\n.svg-inline--fa mask .fa-primary,\n.svg-inline--fa mask .fa-secondary {\n  fill: black;\n}\n\n.fad.fa-inverse {\n  color: #fff;\n}</style>\n\n<h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n"},{"title":"hexo new draft title","subtitle":null,"_content":"\n\n<!-- more -->\n","source":"_drafts/hexo-new-draft-title.md","raw":"---\ntitle: hexo new draft title\nsubtitle:\n---\n\n\n<!-- more -->\n","slug":"hexo-new-draft-title","published":0,"date":"2020-06-27T15:57:25.500Z","updated":"2020-06-27T15:57:25.502Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckbxwzimh000y8cl946vra9li","content":"<a id=\"more\"></a>\n","site":{"data":{}},"excerpt":"","more":""}],"PostAsset":[{"_id":"source/_posts/A-New-Blog-Customizing-Hexo/vscode-1.png","slug":"vscode-1.png","post":"ckbxwzili00018cl97tsvv4cl","modified":0,"renderable":0},{"_id":"source/_posts/Hexo-and-the-Dark-Mode/screen-recording-1.gif","slug":"screen-recording-1.gif","post":"ckbxwzilx000a8cl9i70skbvs","modified":0,"renderable":0},{"_id":"source/_posts/Meaningful-automatic-versioning-with-T4/AssemblyInformationDialog.png","slug":"AssemblyInformationDialog.png","post":"ckbxwzim7000k8cl91ctrl4x9","modified":0,"renderable":0},{"_id":"source/_posts/hello-world/kiko.io-icon.png","slug":"kiko.io-icon.png","post":"ckbxwzime000t8cl99olwohj5","modified":0,"renderable":0},{"_id":"source/_posts/A-New-Blog-VS-Code-Hexo-and-GitHub-Pages/github-1.png","slug":"github-1.png","post":"ckbxwzils00068cl9h64gn2d8","modified":0,"renderable":0},{"_id":"source/_posts/A-New-Blog-VS-Code-Hexo-and-GitHub-Pages/vscode-1.png","slug":"vscode-1.png","post":"ckbxwzils00068cl9h64gn2d8","modified":0,"renderable":0},{"_id":"source/_posts/A-New-Blog-VS-Code-Hexo-and-GitHub-Pages/vscode-2.png","slug":"vscode-2.png","post":"ckbxwzils00068cl9h64gn2d8","modified":0,"renderable":0},{"_id":"source/_posts/A-New-Blog-Blogging-and-Synching-en-route/ia-writer-1.png","slug":"ia-writer-1.png","post":"ckbxwzild00008cl92kde96dz","modified":0,"renderable":0},{"_id":"source/_posts/A-New-Blog-Blogging-and-Synching-en-route/icon-gitgraph.png","slug":"icon-gitgraph.png","post":"ckbxwzild00008cl92kde96dz","modified":0,"renderable":0},{"_id":"source/_posts/A-New-Blog-Blogging-and-Synching-en-route/icon-gitlens.png","slug":"icon-gitlens.png","post":"ckbxwzild00008cl92kde96dz","modified":0,"renderable":0},{"_id":"source/_posts/A-New-Blog-Blogging-and-Synching-en-route/icon-markdown-all-in-one.png","slug":"icon-markdown-all-in-one.png","post":"ckbxwzild00008cl92kde96dz","modified":0,"renderable":0},{"_id":"source/_posts/A-New-Blog-Blogging-and-Synching-en-route/icon-markdownlint.png","slug":"icon-markdownlint.png","post":"ckbxwzild00008cl92kde96dz","modified":0,"renderable":0},{"_id":"source/_posts/A-New-Blog-Blogging-and-Synching-en-route/icon-stylus.png","slug":"icon-stylus.png","post":"ckbxwzild00008cl92kde96dz","modified":0,"renderable":0},{"_id":"source/_posts/A-New-Blog-Blogging-and-Synching-en-route/icon-vscode-hexo.png","slug":"icon-vscode-hexo.png","post":"ckbxwzild00008cl92kde96dz","modified":0,"renderable":0},{"_id":"source/_posts/Meaningful-automatic-versioning-with-T4/screencast-build-hexocommander.gif","slug":"screencast-build-hexocommander.gif","post":"ckbxwzim7000k8cl91ctrl4x9","modified":0,"renderable":0},{"_id":"source/_posts/Meaningful-automatic-versioning-with-T4/screencast-build-hexocommander-ORIGINAL.gif","slug":"screencast-build-hexocommander-ORIGINAL.gif","post":"ckbxwzim7000k8cl91ctrl4x9","modified":0,"renderable":0},{"_id":"source/_posts/Meaningful-automatic-versioning-with-T4/DuplicateAttributes.png","slug":"DuplicateAttributes.png","post":"ckbxwzim7000k8cl91ctrl4x9","modified":0,"renderable":0},{"_id":"source/_posts/Meaningful-automatic-versioning-with-T4/ChangeAssemblyInfo.png","slug":"ChangeAssemblyInfo.png","post":"ckbxwzim7000k8cl91ctrl4x9","modified":0,"renderable":0},{"_id":"source/_posts/Meaningful-automatic-versioning-with-T4/BuildLog.png","slug":"BuildLog.png","post":"ckbxwzim7000k8cl91ctrl4x9","modified":0,"renderable":0},{"_id":"source/_posts/Meaningful-automatic-versioning-with-T4/PostBuildEvent.png","slug":"PostBuildEvent.png","post":"ckbxwzim7000k8cl91ctrl4x9","modified":0,"renderable":0}],"PostCategory":[{"post_id":"ckbxwzild00008cl92kde96dz","category_id":"ckbxwzill00028cl9tfjgxaah","_id":"ckbxwzilz000c8cl9825geo5g"},{"post_id":"ckbxwzils00068cl9h64gn2d8","category_id":"ckbxwzill00028cl9tfjgxaah","_id":"ckbxwzim1000f8cl9iff8mddw"},{"post_id":"ckbxwzilw00098cl92rmyks2k","category_id":"ckbxwzill00028cl9tfjgxaah","_id":"ckbxwzim6000i8cl96274yoir"},{"post_id":"ckbxwzili00018cl97tsvv4cl","category_id":"ckbxwzill00028cl9tfjgxaah","_id":"ckbxwzim8000l8cl9gu0mad5c"},{"post_id":"ckbxwzilx000a8cl9i70skbvs","category_id":"ckbxwzill00028cl9tfjgxaah","_id":"ckbxwzimb000n8cl9h151igs6"},{"post_id":"ckbxwzilo00048cl9z7oymv3c","category_id":"ckbxwzill00028cl9tfjgxaah","_id":"ckbxwzimd000r8cl9wxfdfv1e"},{"post_id":"ckbxwzilq00058cl9g3vmk8va","category_id":"ckbxwzim5000h8cl9q0qaws4i","_id":"ckbxwzimf000u8cl9niq1qu66"},{"post_id":"ckbxwzim9000m8cl9ib1imd79","category_id":"ckbxwzill00028cl9tfjgxaah","_id":"ckbxwzimi000z8cl9a7qwd4wu"},{"post_id":"ckbxwzim0000e8cl9yam9adln","category_id":"ckbxwzimb000o8cl9jprbelp9","_id":"ckbxwzimj00128cl93u1l6uap"},{"post_id":"ckbxwzim2000g8cl9sw1tmpr9","category_id":"ckbxwzim5000h8cl9q0qaws4i","_id":"ckbxwziml00158cl9bekgakrp"},{"post_id":"ckbxwzime000t8cl99olwohj5","category_id":"ckbxwziml00168cl9uol0553s","_id":"ckbxwzimo001e8cl9yhjz8j36"},{"post_id":"ckbxwzim7000k8cl91ctrl4x9","category_id":"ckbxwzimj00118cl9kyli0rct","_id":"ckbz9350b0006qcl91njw488l"}],"PostTag":[{"post_id":"ckbxwzild00008cl92kde96dz","tag_id":"ckbxwziln00038cl9akkzm31m","_id":"ckbxwzime000s8cl9mf804lwf"},{"post_id":"ckbxwzild00008cl92kde96dz","tag_id":"ckbxwzilt00088cl93e8soij5","_id":"ckbxwzimg000w8cl9babgj2o3"},{"post_id":"ckbxwzild00008cl92kde96dz","tag_id":"ckbxwzim0000d8cl95a4asql6","_id":"ckbxwzimi00108cl9tjxb8mct"},{"post_id":"ckbxwzild00008cl92kde96dz","tag_id":"ckbxwzim6000j8cl9h53jfwfv","_id":"ckbxwzimj00138cl99o14hlnq"},{"post_id":"ckbxwzili00018cl97tsvv4cl","tag_id":"ckbxwziln00038cl9akkzm31m","_id":"ckbxwzimm00188cl96gj8ves6"},{"post_id":"ckbxwzili00018cl97tsvv4cl","tag_id":"ckbxwzilt00088cl93e8soij5","_id":"ckbxwzimm00198cl9y2l3jit3"},{"post_id":"ckbxwzili00018cl97tsvv4cl","tag_id":"ckbxwzim6000j8cl9h53jfwfv","_id":"ckbxwzimn001c8cl9pn3l08al"},{"post_id":"ckbxwzilo00048cl9z7oymv3c","tag_id":"ckbxwzilt00088cl93e8soij5","_id":"ckbxwzimo001f8cl9erkbfsmp"},{"post_id":"ckbxwzilo00048cl9z7oymv3c","tag_id":"ckbxwzim6000j8cl9h53jfwfv","_id":"ckbxwzimo001g8cl9k0p09hmf"},{"post_id":"ckbxwzilq00058cl9g3vmk8va","tag_id":"ckbxwzimn001d8cl9g19982iv","_id":"ckbxwzimp001i8cl9zdxkwezq"},{"post_id":"ckbxwzils00068cl9h64gn2d8","tag_id":"ckbxwziln00038cl9akkzm31m","_id":"ckbxwzimq001m8cl9o1p0rw2u"},{"post_id":"ckbxwzils00068cl9h64gn2d8","tag_id":"ckbxwzilt00088cl93e8soij5","_id":"ckbxwzimq001n8cl9ws8m3u4l"},{"post_id":"ckbxwzils00068cl9h64gn2d8","tag_id":"ckbxwzim0000d8cl95a4asql6","_id":"ckbxwzimr001p8cl9x15ukmiz"},{"post_id":"ckbxwzils00068cl9h64gn2d8","tag_id":"ckbxwzim6000j8cl9h53jfwfv","_id":"ckbxwzimr001q8cl9dijiqztx"},{"post_id":"ckbxwzilw00098cl92rmyks2k","tag_id":"ckbxwzilt00088cl93e8soij5","_id":"ckbxwzims001t8cl9dkq9cv74"},{"post_id":"ckbxwzilw00098cl92rmyks2k","tag_id":"ckbxwzimq001l8cl9cqk8u6ll","_id":"ckbxwzims001u8cl9s9pdbj2s"},{"post_id":"ckbxwzilw00098cl92rmyks2k","tag_id":"ckbxwzimr001o8cl9b0kghvd6","_id":"ckbxwzimt001w8cl9qxtsnedt"},{"post_id":"ckbxwzilw00098cl92rmyks2k","tag_id":"ckbxwzimr001r8cl9lbu8e6k7","_id":"ckbxwzimt001x8cl9iisihmw6"},{"post_id":"ckbxwzilx000a8cl9i70skbvs","tag_id":"ckbxwzilt00088cl93e8soij5","_id":"ckbxwzimu00208cl910quh3gw"},{"post_id":"ckbxwzilx000a8cl9i70skbvs","tag_id":"ckbxwzimq001l8cl9cqk8u6ll","_id":"ckbxwzimu00218cl9jzmvxfu3"},{"post_id":"ckbxwzilx000a8cl9i70skbvs","tag_id":"ckbxwzimr001o8cl9b0kghvd6","_id":"ckbxwzimv00238cl98w1t5quc"},{"post_id":"ckbxwzilx000a8cl9i70skbvs","tag_id":"ckbxwzimr001r8cl9lbu8e6k7","_id":"ckbxwzimv00248cl9jczsf7i7"},{"post_id":"ckbxwzim0000e8cl9yam9adln","tag_id":"ckbxwzimu001z8cl9o5y3vtmi","_id":"ckbxwzimw00278cl9r4cvyfyq"},{"post_id":"ckbxwzim0000e8cl9yam9adln","tag_id":"ckbxwzimu00228cl9mdfi5iio","_id":"ckbxwzimw00288cl9c5bk45cq"},{"post_id":"ckbxwzim0000e8cl9yam9adln","tag_id":"ckbxwzimv00258cl9p6fiqv5a","_id":"ckbxwzimw002a8cl977oy5fd3"},{"post_id":"ckbxwzim2000g8cl9sw1tmpr9","tag_id":"ckbxwzimu00228cl9mdfi5iio","_id":"ckbxwzimy002d8cl9srs03tgd"},{"post_id":"ckbxwzim2000g8cl9sw1tmpr9","tag_id":"ckbxwzimw00298cl90ha7rujz","_id":"ckbxwzimy002e8cl9bmrstkow"},{"post_id":"ckbxwzim2000g8cl9sw1tmpr9","tag_id":"ckbxwzimx002b8cl9t4hju5ll","_id":"ckbxwzimy002g8cl919c6prcs"},{"post_id":"ckbxwzim2000g8cl9sw1tmpr9","tag_id":"ckbxwzim0000d8cl95a4asql6","_id":"ckbxwzimy002h8cl9o7hs2x9o"},{"post_id":"ckbxwzim9000m8cl9ib1imd79","tag_id":"ckbxwzimz002j8cl95vsj30nr","_id":"ckbxwzin2002o8cl9dr6o2149"},{"post_id":"ckbxwzim9000m8cl9ib1imd79","tag_id":"ckbxwzimu00228cl9mdfi5iio","_id":"ckbxwzin3002p8cl9xvrmtegl"},{"post_id":"ckbxwzim7000k8cl91ctrl4x9","tag_id":"ckbxwzimx002c8cl9x28nbr7i","_id":"ckbz9350b0004qcl9z0d41fxc"},{"post_id":"ckbxwzim7000k8cl91ctrl4x9","tag_id":"ckbxwzimy002f8cl962ta7qd0","_id":"ckbz9350b0005qcl9nrqqzp3j"},{"post_id":"ckbxwzim7000k8cl91ctrl4x9","tag_id":"ckbxwzimu00228cl9mdfi5iio","_id":"ckbz9350c0007qcl94kht18qx"}],"Tag":[{"name":"VS Code","_id":"ckbxwziln00038cl9akkzm31m"},{"name":"Hexo","_id":"ckbxwzilt00088cl93e8soij5"},{"name":"GitHub","_id":"ckbxwzim0000d8cl95a4asql6"},{"name":"Blogging","_id":"ckbxwzim6000j8cl9h53jfwfv"},{"name":"jQuery","_id":"ckbxwzimn001d8cl9g19982iv"},{"name":"CSS","_id":"ckbxwzimq001l8cl9cqk8u6ll"},{"name":"Stylus","_id":"ckbxwzimr001o8cl9b0kghvd6"},{"name":"Dark Mode","_id":"ckbxwzimr001r8cl9lbu8e6k7"},{"name":"ADSI","_id":"ckbxwzimu001z8cl9o5y3vtmi"},{"name":"Visual Studio","_id":"ckbxwzimu00228cl9mdfi5iio"},{"name":"Database Project","_id":"ckbxwzimv00258cl9p6fiqv5a"},{"name":"Resource","_id":"ckbxwzimw00298cl90ha7rujz"},{"name":"Localization","_id":"ckbxwzimx002b8cl9t4hju5ll"},{"name":"Versioning","_id":"ckbxwzimx002c8cl9x28nbr7i"},{"name":"T4","_id":"ckbxwzimy002f8cl962ta7qd0"},{"name":"TFS/DevOps","_id":"ckbxwzimz002j8cl95vsj30nr"}]}}